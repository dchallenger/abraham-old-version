/*
SQLyog Professional v12.09 (64 bit)
MySQL - 5.1.41 : Database - emplopad
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
/*Table structure for table `employee_balance` */

DROP TABLE IF EXISTS `employee_balance`;

CREATE TABLE `employee_balance` (
  `ID` varchar(16) DEFAULT NULL,
  `Employee Name` varchar(64) DEFAULT NULL,
  `LIP` double DEFAULT NULL,
  `HOME` varchar(64) DEFAULT NULL,
  `SOLO` varchar(64) DEFAULT NULL,
  `policy_no` double DEFAULT NULL,
  `user_id` int(11) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_balance_new` */

DROP TABLE IF EXISTS `employee_balance_new`;

CREATE TABLE `employee_balance_new` (
  `Employee No` varchar(16) DEFAULT NULL,
  `Employee Name` varchar(128) DEFAULT NULL,
  `LIP` double DEFAULT NULL,
  `April` double DEFAULT NULL,
  `SOLO` double DEFAULT NULL,
  `user_id` int(11) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_contact` */

DROP TABLE IF EXISTS `employee_contact`;

CREATE TABLE `employee_contact` (
  `No` double DEFAULT NULL,
  `Employee No` double DEFAULT NULL,
  `Last Name` varchar(255) DEFAULT NULL,
  `First Name` varchar(255) DEFAULT NULL,
  `Home Phone` varchar(255) DEFAULT NULL,
  `Mobile` varchar(255) DEFAULT NULL,
  `E-mail` varchar(255) DEFAULT NULL,
  `Office Phone` varchar(255) DEFAULT NULL,
  `Street` varchar(255) DEFAULT NULL,
  `Subdivision` varchar(255) DEFAULT NULL,
  `City Municipality` varchar(255) DEFAULT NULL,
  `Province` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_department` */

DROP TABLE IF EXISTS `employee_department`;

CREATE TABLE `employee_department` (
  `Department` varchar(255) DEFAULT NULL,
  `Code` varchar(255) DEFAULT NULL,
  `Active` double DEFAULT NULL,
  `New Code` varchar(255) DEFAULT NULL,
  `department_id` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_department_new` */

DROP TABLE IF EXISTS `employee_department_new`;

CREATE TABLE `employee_department_new` (
  `ID` int(11) DEFAULT NULL,
  `Department` varchar(255) DEFAULT NULL,
  `Code` varchar(255) DEFAULT NULL,
  `Active` double DEFAULT NULL,
  `New Code` varchar(255) DEFAULT NULL,
  `New_ID` int(11) DEFAULT NULL,
  `ID_Count` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_emergency` */

DROP TABLE IF EXISTS `employee_emergency`;

CREATE TABLE `employee_emergency` (
  `No` double DEFAULT NULL,
  `Employee No` double DEFAULT NULL,
  `Last Name` varchar(64) DEFAULT NULL,
  `First Name` varchar(64) DEFAULT NULL,
  `Name` varchar(64) DEFAULT NULL,
  `Relationship` varchar(32) DEFAULT NULL,
  `Address` varchar(255) DEFAULT NULL,
  `Handphone No` varchar(64) DEFAULT NULL,
  `Handphone No 1` varchar(64) DEFAULT NULL,
  `Phone No` varchar(64) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_id` */

DROP TABLE IF EXISTS `employee_id`;

CREATE TABLE `employee_id` (
  `No` double DEFAULT NULL,
  `Employee No` double DEFAULT NULL,
  `Last Name` varchar(64) DEFAULT NULL,
  `First Name` varchar(64) DEFAULT NULL,
  `SSS` varchar(32) DEFAULT NULL,
  `HDMF` varchar(32) DEFAULT NULL,
  `TIN` varchar(32) DEFAULT NULL,
  `Tax Status` varchar(32) DEFAULT NULL,
  `Philhealth` varchar(32) DEFAULT NULL,
  `Bank Account No` varchar(32) DEFAULT NULL,
  `Bank Account NAME` varchar(32) DEFAULT NULL,
  `Confidential` varchar(8) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_info` */

DROP TABLE IF EXISTS `employee_info`;

CREATE TABLE `employee_info` (
  `No` double DEFAULT NULL,
  `OLD ID` varchar(16) DEFAULT NULL,
  `Employee No` double DEFAULT NULL,
  `Last Name` varchar(64) DEFAULT NULL,
  `First Name` varchar(64) DEFAULT NULL,
  `Middle Name` varchar(64) DEFAULT NULL,
  `Suffix` varchar(32) DEFAULT NULL,
  `Maiden Name` varchar(32) DEFAULT NULL,
  `System Role` varchar(16) DEFAULT NULL,
  `Work Schedule` varchar(16) DEFAULT NULL,
  `Position Title` varchar(128) DEFAULT NULL,
  `Job Title` varchar(32) DEFAULT NULL,
  `Biometrics ID` double DEFAULT NULL,
  `Company Name` varchar(32) DEFAULT NULL,
  `Location` varchar(32) DEFAULT NULL,
  `Department` varchar(32) DEFAULT NULL,
  `SECTION` varchar(32) DEFAULT NULL,
  `Branch` varchar(32) DEFAULT NULL,
  `Employee Type` varchar(32) DEFAULT NULL,
  `Job Level 2` varchar(255) DEFAULT NULL,
  `Date Hired` date DEFAULT NULL,
  `Date of Regularization` date DEFAULT NULL,
  `Employment Status` varchar(32) DEFAULT NULL,
  `Reports To` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_payroll` */

DROP TABLE IF EXISTS `employee_payroll`;

CREATE TABLE `employee_payroll` (
  `F1` double DEFAULT NULL,
  `id_number` varchar(12) DEFAULT NULL,
  `user_id` int(11) DEFAULT '0',
  `id number` double DEFAULT NULL,
  `Last Name` varchar(255) DEFAULT NULL,
  `First Name` varchar(255) DEFAULT NULL,
  `Middle Name` varchar(255) DEFAULT NULL,
  `F6` varchar(255) DEFAULT NULL,
  `F7` varchar(255) DEFAULT NULL,
  `salary` double DEFAULT NULL,
  `minimum takehome` double DEFAULT NULL,
  `payroll schedule` varchar(255) DEFAULT NULL,
  `payroll rate type` varchar(255) DEFAULT NULL,
  `total year days` double DEFAULT NULL,
  `w/ tax shield` varchar(255) DEFAULT NULL,
  `payroll location` varchar(255) DEFAULT NULL,
  `Bank Name` varchar(255) DEFAULT NULL,
  `Payroll Account Number` double DEFAULT NULL,
  `taxcode` varchar(255) DEFAULT NULL,
  `payment type` varchar(255) DEFAULT NULL,
  `sss_no` double DEFAULT NULL,
  `sss mode` varchar(255) DEFAULT NULL,
  `sss week` varchar(255) DEFAULT NULL,
  `phic_no` double DEFAULT NULL,
  `phic mode` varchar(255) DEFAULT NULL,
  `phic week` varchar(255) DEFAULT NULL,
  `hdmf_no` double DEFAULT NULL,
  `hdmf mode` varchar(255) DEFAULT NULL,
  `hdmf week` varchar(255) DEFAULT NULL,
  `hdmf_amount` double DEFAULT NULL,
  `tin` double DEFAULT NULL,
  `tax mode` varchar(255) DEFAULT NULL,
  `tax week` varchar(255) DEFAULT NULL,
  `attendance_base` varchar(255) DEFAULT NULL,
  `F33` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_payroll_loans` */

DROP TABLE IF EXISTS `employee_payroll_loans`;

CREATE TABLE `employee_payroll_loans` (
  `ID Number` varchar(16) DEFAULT NULL,
  `Loan Type` varchar(255) DEFAULT NULL,
  `Loan Status` varchar(255) DEFAULT NULL,
  `Description` varchar(255) DEFAULT NULL,
  `Entry Date` date DEFAULT NULL,
  `Loan Principal` double DEFAULT NULL,
  `Amount` double DEFAULT NULL,
  `Interest` varchar(255) DEFAULT NULL,
  `No of Payment` double DEFAULT NULL,
  `No Payment Paids` double DEFAULT NULL,
  `No Payment Remaining` double DEFAULT NULL,
  `Beginning Balance` double DEFAULT NULL,
  `Running Balance` double DEFAULT NULL,
  `Payment Mode` varchar(255) DEFAULT NULL,
  `System Amortization` double DEFAULT NULL,
  `User Amortization` varchar(255) DEFAULT NULL,
  `System Interest` varchar(255) DEFAULT NULL,
  `User Interest` varchar(255) DEFAULT NULL,
  `Total Arrears` varchar(255) DEFAULT NULL,
  `Total Amount Paid` double DEFAULT NULL,
  `Last Payment Date` date DEFAULT NULL,
  `Week` varchar(16) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_payroll_recurring` */

DROP TABLE IF EXISTS `employee_payroll_recurring`;

CREATE TABLE `employee_payroll_recurring` (
  `Employee No` varchar(255) DEFAULT NULL,
  `Employee Name` varchar(255) DEFAULT NULL,
  `Transaction` varchar(255) DEFAULT NULL,
  `From` date DEFAULT NULL,
  `To` date DEFAULT NULL,
  `Method` varchar(255) DEFAULT NULL,
  `Week` varchar(255) DEFAULT NULL,
  `Amount` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_payroll_recurring_new` */

DROP TABLE IF EXISTS `employee_payroll_recurring_new`;

CREATE TABLE `employee_payroll_recurring_new` (
  `Employee No` varchar(255) DEFAULT NULL,
  `Employee Name` varchar(255) DEFAULT NULL,
  `Transaction` varchar(255) DEFAULT NULL,
  `From` date DEFAULT NULL,
  `To` date DEFAULT NULL,
  `Method` varchar(255) DEFAULT NULL,
  `Week` varchar(255) DEFAULT NULL,
  `Amount` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_personal` */

DROP TABLE IF EXISTS `employee_personal`;

CREATE TABLE `employee_personal` (
  `No` double DEFAULT NULL,
  `Employee No` double DEFAULT NULL,
  `Last Name` varchar(64) DEFAULT NULL,
  `First Name` varchar(64) DEFAULT NULL,
  `Date of Birth` date DEFAULT NULL,
  `Place of Birth` varchar(128) DEFAULT NULL,
  `Religion` varchar(64) DEFAULT NULL,
  `Gender` varchar(16) DEFAULT NULL,
  `Nationality` varchar(16) DEFAULT NULL,
  `Civil Status` varchar(32) DEFAULT NULL,
  `Date of Marriage` varchar(16) DEFAULT NULL,
  `Tax Code` varchar(16) DEFAULT NULL,
  `Height` varchar(16) DEFAULT NULL,
  `Weight` varchar(16) DEFAULT NULL,
  `Blood Type` varchar(16) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_position` */

DROP TABLE IF EXISTS `employee_position`;

CREATE TABLE `employee_position` (
  `Position` varchar(128) DEFAULT NULL,
  `Code` varchar(32) DEFAULT NULL,
  `Employee Type` varchar(128) DEFAULT NULL,
  `Immediate Head` varchar(128) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `employee_schedule` */

DROP TABLE IF EXISTS `employee_schedule`;

CREATE TABLE `employee_schedule` (
  `WORKSKEDCODE` varchar(64) DEFAULT NULL,
  `POLICYCODE` varchar(64) DEFAULT NULL,
  `Mon` varchar(32) DEFAULT NULL,
  `Tue` varchar(32) DEFAULT NULL,
  `Wed` varchar(32) DEFAULT NULL,
  `Thu` varchar(32) DEFAULT NULL,
  `Fri` varchar(32) DEFAULT NULL,
  `Sat` varchar(32) DEFAULT NULL,
  `Sun` varchar(32) DEFAULT NULL,
  `TIMEIN` timestamp NULL DEFAULT NULL,
  `TIMEOUT` timestamp NULL DEFAULT NULL,
  `REQUIREDDAILYHW` double DEFAULT NULL,
  `DESCRIPTION` varchar(128) DEFAULT NULL,
  `LATESTIN` timestamp NULL DEFAULT NULL,
  `Teemworx Remarks` varchar(128) DEFAULT NULL,
  `AHI Remarks` varchar(128) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `logtable` */

DROP TABLE IF EXISTS `logtable`;

CREATE TABLE `logtable` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `log` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;

/*Table structure for table `logtable_leave_balance_accrual` */

DROP TABLE IF EXISTS `logtable_leave_balance_accrual`;

CREATE TABLE `logtable_leave_balance_accrual` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `log` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=21865 DEFAULT CHARSET=utf8;

/*Table structure for table `logtable_movement` */

DROP TABLE IF EXISTS `logtable_movement`;

CREATE TABLE `logtable_movement` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `movement_id` text,
  `date_executed` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `logtable_movement_action` */

DROP TABLE IF EXISTS `logtable_movement_action`;

CREATE TABLE `logtable_movement_action` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_id` int(11) DEFAULT NULL,
  `recurring_id` int(11) DEFAULT NULL,
  `employee_id` int(11) DEFAULT NULL,
  `quantity` int(11) DEFAULT NULL,
  `amount` varbinary(255) DEFAULT NULL,
  `date_executed` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `logtablecheck` */

DROP TABLE IF EXISTS `logtablecheck`;

CREATE TABLE `logtablecheck` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `log` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=175 DEFAULT CHARSET=utf8;

/*Table structure for table `payroll_journal_headers` */

DROP TABLE IF EXISTS `payroll_journal_headers`;

CREATE TABLE `payroll_journal_headers` (
  `batchid` varchar(3) CHARACTER SET utf8 NOT NULL DEFAULT '',
  `btchentry` varchar(1) CHARACTER SET utf8 NOT NULL DEFAULT '',
  `srceledger` varchar(2) CHARACTER SET utf8 NOT NULL DEFAULT '',
  `srcetype` varchar(2) CHARACTER SET utf8 NOT NULL DEFAULT '',
  `fscsyr` int(5) DEFAULT NULL,
  `fscsperd` varchar(2) CHARACTER SET utf8 DEFAULT NULL,
  `jrnldesc` varchar(101) CHARACTER SET utf8 DEFAULT NULL,
  `dateentry` varchar(10) CHARACTER SET utf8 DEFAULT NULL,
  `payroll_date` date DEFAULT NULL,
  `company_id` int(11) DEFAULT '0',
  `company` varchar(64) CHARACTER SET utf8 DEFAULT ''
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

/*Table structure for table `payroll_journal_voucher_osi` */

DROP TABLE IF EXISTS `payroll_journal_voucher_osi`;

CREATE TABLE `payroll_journal_voucher_osi` (
  `arrangement` varchar(3) CHARACTER SET utf8 DEFAULT NULL,
  `payroll_date` date DEFAULT NULL,
  `date_from` date DEFAULT NULL,
  `date_to` date DEFAULT NULL,
  `company_id` int(11) DEFAULT '0',
  `company` varchar(64) CHARACTER SET utf8 DEFAULT '',
  `account_number` varchar(32) CHARACTER SET utf8 DEFAULT NULL,
  `account_title` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `dept` varchar(32) CHARACTER SET utf8 NOT NULL DEFAULT '',
  `particulars` varchar(128) CHARACTER SET utf8 DEFAULT NULL,
  `Dr` double(19,2) DEFAULT NULL,
  `Cr` double(19,2) DEFAULT NULL,
  `transaction_type_id` int(1) DEFAULT '0'
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

/*Table structure for table `ww_approver_class` */

DROP TABLE IF EXISTS `ww_approver_class`;

CREATE TABLE `ww_approver_class` (
  `class_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `class_code` varchar(16) DEFAULT NULL,
  `class` varchar(32) DEFAULT NULL,
  `category` enum('Partners','Time Records','Recruitment','Performance','Training') DEFAULT 'Partners',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`class_id`)
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_approver_class_company` */

DROP TABLE IF EXISTS `ww_approver_class_company`;

CREATE TABLE `ww_approver_class_company` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `class_id` int(1) NOT NULL,
  `company_id` int(11) NOT NULL DEFAULT '0',
  `approver_id` int(11) NOT NULL DEFAULT '0',
  `alias` varchar(64) DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '0',
  `approver` int(1) DEFAULT '0',
  `email` tinyint(1) DEFAULT '0',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `class_id` (`class_id`),
  KEY `company_id` (`company_id`),
  KEY `approver_id` (`approver_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_approver_class_department` */

DROP TABLE IF EXISTS `ww_approver_class_department`;

CREATE TABLE `ww_approver_class_department` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `class_id` int(1) NOT NULL,
  `department_id` int(11) NOT NULL DEFAULT '0',
  `company_id` int(11) NOT NULL DEFAULT '0',
  `approver_id` int(11) NOT NULL DEFAULT '0',
  `alias` varchar(64) DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '1',
  `approver` int(1) DEFAULT '0',
  `email` tinyint(1) DEFAULT '0',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `class_id` (`class_id`),
  KEY `department_id` (`department_id`),
  KEY `company_id` (`company_id`),
  KEY `approver_id` (`approver_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_approver_class_position` */

DROP TABLE IF EXISTS `ww_approver_class_position`;

CREATE TABLE `ww_approver_class_position` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `class_id` int(1) NOT NULL,
  `position_id` int(11) NOT NULL DEFAULT '0',
  `department_id` int(11) DEFAULT '0',
  `company_id` int(11) DEFAULT '0',
  `approver_id` int(11) NOT NULL DEFAULT '0',
  `alias` varchar(64) DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '0',
  `approver` int(1) DEFAULT '0',
  `email` tinyint(1) DEFAULT '0',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `class_id` (`class_id`),
  KEY `position_id` (`position_id`),
  KEY `department_id` (`department_id`),
  KEY `company_id` (`company_id`),
  KEY `approver_id` (`approver_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_approver_class_user` */

DROP TABLE IF EXISTS `ww_approver_class_user`;

CREATE TABLE `ww_approver_class_user` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `class_id` int(1) NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `position_id` int(11) NOT NULL DEFAULT '0',
  `department_id` int(11) DEFAULT '0',
  `company_id` int(11) DEFAULT '0',
  `approver_id` int(11) NOT NULL DEFAULT '0',
  `alias` varchar(64) DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '0',
  `approver` int(1) DEFAULT '0',
  `email` tinyint(1) DEFAULT '0',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=66496 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_approver_class_users` */

DROP TABLE IF EXISTS `ww_approver_class_users`;

CREATE TABLE `ww_approver_class_users` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `class_id` int(1) NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `position_id` int(11) NOT NULL DEFAULT '0',
  `department_id` int(11) DEFAULT '0',
  `company_id` int(11) DEFAULT '0',
  `approver_id` int(11) NOT NULL DEFAULT '0',
  `alias` varchar(64) DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '0',
  `approver` int(1) DEFAULT '0',
  `email` tinyint(1) DEFAULT '0',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1324 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_business_group` */

DROP TABLE IF EXISTS `ww_business_group`;

CREATE TABLE `ww_business_group` (
  `group_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `group` varchar(32) DEFAULT NULL,
  `group_code` varchar(16) DEFAULT NULL,
  `region_id` int(1) DEFAULT NULL,
  `description` text,
  `db` varchar(32) DEFAULT NULL,
  `icon` varchar(125) DEFAULT NULL,
  `logo` varchar(125) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`group_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_business_level` */

DROP TABLE IF EXISTS `ww_business_level`;

CREATE TABLE `ww_business_level` (
  `level_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `level` varchar(32) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`level_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_business_region` */

DROP TABLE IF EXISTS `ww_business_region`;

CREATE TABLE `ww_business_region` (
  `region_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `region` varchar(32) DEFAULT NULL,
  `region_code` varchar(16) DEFAULT NULL,
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` date DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`region_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_category` */

DROP TABLE IF EXISTS `ww_category`;

CREATE TABLE `ww_category` (
  `category_id` int(11) NOT NULL AUTO_INCREMENT,
  `category` varchar(100) DEFAULT NULL,
  `table_name` varchar(100) DEFAULT NULL,
  `field_label` varchar(150) DEFAULT NULL,
  `primary_key` varchar(100) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`category_id`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;

/*Table structure for table `ww_certificate_of_employment` */

DROP TABLE IF EXISTS `ww_certificate_of_employment`;

CREATE TABLE `ww_certificate_of_employment` (
  `coe_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `filename` varchar(128) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`coe_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_cities` */

DROP TABLE IF EXISTS `ww_cities`;

CREATE TABLE `ww_cities` (
  `city_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `city` varchar(64) NOT NULL,
  `province_id` int(1) DEFAULT NULL,
  `minimum_wage` decimal(6,2) DEFAULT NULL,
  `ecola` decimal(6,2) DEFAULT NULL,
  `minimum_wage_effectivity` date DEFAULT '0000-00-00',
  `created_on` timestamp NULL DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`city_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1716 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_config` */

DROP TABLE IF EXISTS `ww_config`;

CREATE TABLE `ww_config` (
  `config_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `config_group_id` int(1) NOT NULL DEFAULT '0',
  `key` varchar(32) NOT NULL DEFAULT '',
  `description` mediumtext,
  `value` varchar(255) NOT NULL DEFAULT '',
  `encrypted` tinyint(1) DEFAULT '0',
  `add_qoutes` tinyint(1) DEFAULT '1',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`config_id`),
  KEY `config_group_id` (`config_group_id`),
  KEY `key` (`key`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_config_group` */

DROP TABLE IF EXISTS `ww_config_group`;

CREATE TABLE `ww_config_group` (
  `config_group_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `module_group` enum('Employee','Time Records','Employee Relation','Personnel','Payroll','Appraisal','Training','Analytics','Dashboard','System') DEFAULT 'System',
  `group_key` varchar(32) NOT NULL DEFAULT '',
  `group_name` varchar(64) NOT NULL DEFAULT '',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`config_group_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_countries` */

DROP TABLE IF EXISTS `ww_countries`;

CREATE TABLE `ww_countries` (
  `country_id` int(5) NOT NULL AUTO_INCREMENT,
  `iso2` char(2) DEFAULT NULL,
  `short_name` varchar(80) NOT NULL DEFAULT '',
  `long_name` varchar(80) NOT NULL DEFAULT '',
  `iso3` char(3) DEFAULT NULL,
  `numcode` varchar(6) DEFAULT NULL,
  `un_member` varchar(12) DEFAULT NULL,
  `calling_code` varchar(8) DEFAULT NULL,
  `cctld` varchar(5) DEFAULT NULL,
  `mobile_count` int(11) DEFAULT '10',
  `phone_count` int(11) DEFAULT '8',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` tinyint(1) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` tinyint(1) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`country_id`)
) ENGINE=InnoDB AUTO_INCREMENT=251 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_db_backup` */

DROP TABLE IF EXISTS `ww_db_backup`;

CREATE TABLE `ww_db_backup` (
  `backup_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `backup_type_id` int(1) DEFAULT NULL,
  `file` varchar(128) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`backup_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_db_backup_type` */

DROP TABLE IF EXISTS `ww_db_backup_type`;

CREATE TABLE `ww_db_backup_type` (
  `backup_type_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `backup_type` varchar(32) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`backup_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_displays` */

DROP TABLE IF EXISTS `ww_displays`;

CREATE TABLE `ww_displays` (
  `display_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `display` varchar(16) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`display_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_fieldgroups` */

DROP TABLE IF EXISTS `ww_fieldgroups`;

CREATE TABLE `ww_fieldgroups` (
  `fg_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `mod_id` int(1) NOT NULL,
  `label` varchar(32) DEFAULT NULL,
  `description` text,
  `display_id` int(1) DEFAULT '0',
  `sequence` int(1) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` timestamp NULL DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`fg_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_groups` */

DROP TABLE IF EXISTS `ww_groups`;

CREATE TABLE `ww_groups` (
  `group_id` int(11) NOT NULL AUTO_INCREMENT,
  `group_name` varchar(255) DEFAULT NULL,
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_groups_members` */

DROP TABLE IF EXISTS `ww_groups_members`;

CREATE TABLE `ww_groups_members` (
  `group_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `full_name` varchar(128) DEFAULT NULL,
  `added_by` int(11) DEFAULT NULL,
  `date_joined` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `date_approved` datetime DEFAULT NULL,
  `approved_by` int(11) DEFAULT NULL,
  `admin` tinyint(1) DEFAULT '0',
  `active` tinyint(1) DEFAULT '0',
  `left_group` tinyint(1) DEFAULT '0',
  `leave_date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_groups_notif` */

DROP TABLE IF EXISTS `ww_groups_notif`;

CREATE TABLE `ww_groups_notif` (
  `notif_id` int(11) NOT NULL AUTO_INCREMENT,
  `notif` text,
  `type_id` int(11) DEFAULT NULL,
  `post_id` int(11) DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  PRIMARY KEY (`notif_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_groups_notif_recipient` */

DROP TABLE IF EXISTS `ww_groups_notif_recipient`;

CREATE TABLE `ww_groups_notif_recipient` (
  `notif_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `read` tinyint(1) DEFAULT '0',
  `read_on` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_groups_notif_type` */

DROP TABLE IF EXISTS `ww_groups_notif_type`;

CREATE TABLE `ww_groups_notif_type` (
  `type_id` int(11) NOT NULL AUTO_INCREMENT,
  `type` varchar(64) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_groups_post` */

DROP TABLE IF EXISTS `ww_groups_post`;

CREATE TABLE `ww_groups_post` (
  `post_id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) DEFAULT NULL,
  `post` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`post_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_groups_post_comments` */

DROP TABLE IF EXISTS `ww_groups_post_comments`;

CREATE TABLE `ww_groups_post_comments` (
  `comment_id` int(11) NOT NULL AUTO_INCREMENT,
  `post_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `comment` text,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`comment_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_groups_post_likes` */

DROP TABLE IF EXISTS `ww_groups_post_likes`;

CREATE TABLE `ww_groups_post_likes` (
  `post_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_groups_post_upload` */

DROP TABLE IF EXISTS `ww_groups_post_upload`;

CREATE TABLE `ww_groups_post_upload` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` int(11) unsigned NOT NULL,
  `upload_id` int(11) unsigned NOT NULL DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `post_id` (`post_id`),
  KEY `upload_id` (`upload_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_memo` */

DROP TABLE IF EXISTS `ww_memo`;

CREATE TABLE `ww_memo` (
  `memo_id` int(11) NOT NULL AUTO_INCREMENT,
  `memo_type_id` int(1) DEFAULT NULL,
  `memo_title` varchar(128) DEFAULT NULL,
  `comments` tinyint(1) DEFAULT '0',
  `publish` tinyint(1) DEFAULT '0',
  `publish_from` date DEFAULT NULL,
  `publish_to` date DEFAULT NULL,
  `apply_to_id` int(11) DEFAULT NULL,
  `partner_id` int(11) DEFAULT NULL,
  `memo_body` text,
  `attachment` varchar(128) DEFAULT NULL,
  `feed_id` int(11) DEFAULT '0',
  `email` tinyint(1) DEFAULT '0',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`memo_id`),
  KEY `memo_type_id` (`memo_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=76 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_memo_apply_to` */

DROP TABLE IF EXISTS `ww_memo_apply_to`;

CREATE TABLE `ww_memo_apply_to` (
  `apply_to_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `apply_to` varchar(64) NOT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`apply_to_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_memo_recipient` */

DROP TABLE IF EXISTS `ww_memo_recipient`;

CREATE TABLE `ww_memo_recipient` (
  `memo_id` int(11) DEFAULT NULL,
  `apply_to` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  KEY `memo_id` (`memo_id`,`user_id`,`apply_to`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_memo_type` */

DROP TABLE IF EXISTS `ww_memo_type`;

CREATE TABLE `ww_memo_type` (
  `memo_type_id` int(1) NOT NULL AUTO_INCREMENT,
  `memo_type` varchar(32) NOT NULL,
  `default_template` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`memo_type_id`),
  KEY `memo_type` (`memo_type`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_menu` */

DROP TABLE IF EXISTS `ww_menu`;

CREATE TABLE `ww_menu` (
  `menu_item_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `parent_menu_item_id` int(1) NOT NULL DEFAULT '0',
  `sequence` tinyint(1) DEFAULT '1',
  `label` varchar(64) NOT NULL,
  `icon` varchar(64) DEFAULT 'fa-list',
  `description` text,
  `menu_item_type_id` int(1) DEFAULT '3',
  `mod_id` int(1) DEFAULT '0',
  `uri` text,
  `method` text,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`menu_item_id`),
  KEY `parent_menu_item_id` (`parent_menu_item_id`),
  KEY `label` (`label`)
) ENGINE=InnoDB AUTO_INCREMENT=129 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_menu_item_type` */

DROP TABLE IF EXISTS `ww_menu_item_type`;

CREATE TABLE `ww_menu_item_type` (
  `menu_item_type_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `menu_item_type` varchar(16) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`menu_item_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_modules` */

DROP TABLE IF EXISTS `ww_modules`;

CREATE TABLE `ww_modules` (
  `mod_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `mod_code` varchar(64) NOT NULL,
  `route` varchar(64) DEFAULT NULL,
  `table` varchar(64) DEFAULT NULL,
  `primary_key` varchar(32) DEFAULT NULL,
  `enable_mass_action` tinyint(1) DEFAULT '1',
  `short_name` varchar(32) NOT NULL,
  `long_name` varchar(64) DEFAULT NULL,
  `icon` varchar(64) DEFAULT NULL,
  `disabled` tinyint(1) DEFAULT '0',
  `wizard_on_new` tinyint(1) DEFAULT '0',
  `description` text,
  `list_template_header` text,
  `list_template` text,
  `sensitivity_filter` tinyint(1) DEFAULT '0',
  `fg_id` int(1) DEFAULT '0',
  `f_id` int(1) DEFAULT '0',
  `parent_group` varchar(64) NOT NULL DEFAULT '',
  `sub_group` varchar(64) NOT NULL DEFAULT '',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`mod_id`),
  KEY `mod_code` (`mod_code`),
  KEY `short_name` (`short_name`),
  KEY `long_name` (`long_name`)
) ENGINE=InnoDB AUTO_INCREMENT=263 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_modules_actions` */

DROP TABLE IF EXISTS `ww_modules_actions`;

CREATE TABLE `ww_modules_actions` (
  `action_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `action` varchar(16) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`action_id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_month` */

DROP TABLE IF EXISTS `ww_month`;

CREATE TABLE `ww_month` (
  `month_id` int(11) NOT NULL AUTO_INCREMENT,
  `month` varchar(16) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`month_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners` */

DROP TABLE IF EXISTS `ww_partners`;

CREATE TABLE `ww_partners` (
  `partner_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT '0',
  `id_number` varchar(16) DEFAULT '',
  `biometric` varchar(16) DEFAULT '',
  `alias` varchar(32) DEFAULT '',
  `status_id` int(1) NOT NULL DEFAULT '2',
  `status` varchar(32) DEFAULT '',
  `job_grade_id` int(11) DEFAULT NULL,
  `employment_type_id` int(1) DEFAULT '6',
  `employment_type` varchar(16) DEFAULT '',
  `classification_id` int(1) DEFAULT NULL,
  `classification` varchar(32) DEFAULT NULL,
  `shift_id` int(1) DEFAULT '0',
  `shift` varchar(32) DEFAULT '',
  `calendar_id` int(11) DEFAULT NULL,
  `calendar` varchar(32) DEFAULT '',
  `credit_setup_id` int(11) DEFAULT '0',
  `original_hired_date` date DEFAULT NULL,
  `effectivity_date` date DEFAULT '0000-00-00',
  `regularization_date` date DEFAULT NULL,
  `resigned_date` date DEFAULT '0000-00-00',
  `blacklisted` int(1) DEFAULT '0',
  `salary` varbinary(255) DEFAULT NULL COMMENT 'this will be use for create 201 from crecuitment only',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`partner_id`),
  KEY `biometric` (`biometric`),
  KEY `id_number` (`id_number`)
) ENGINE=InnoDB AUTO_INCREMENT=1334 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_accountability` */

DROP TABLE IF EXISTS `ww_partners_accountability`;

CREATE TABLE `ww_partners_accountability` (
  `accountability_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `partner_id` int(11) NOT NULL,
  `item_code` varchar(16) DEFAULT '',
  `item` varchar(128) NOT NULL,
  `tag_no` varchar(16) DEFAULT NULL,
  `status` varchar(32) DEFAULT NULL,
  `issued` date DEFAULT NULL,
  `cost` decimal(10,2) DEFAULT NULL,
  `quantity` int(1) DEFAULT NULL,
  `remarks` varchar(128) DEFAULT NULL,
  `returned` date DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`accountability_id`),
  KEY `partner_id` (`partner_id`),
  KEY `item` (`item`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_age_gender` */

DROP TABLE IF EXISTS `ww_partners_age_gender`;

CREATE TABLE `ww_partners_age_gender` (
  `age_gender` varchar(16) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_age_group` */

DROP TABLE IF EXISTS `ww_partners_age_group`;

CREATE TABLE `ww_partners_age_group` (
  `id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `age_group` varchar(16) DEFAULT NULL,
  `age_fr` int(1) DEFAULT '0',
  `age_to` int(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_civil_status` */

DROP TABLE IF EXISTS `ww_partners_civil_status`;

CREATE TABLE `ww_partners_civil_status` (
  `civil_status_id` int(1) NOT NULL AUTO_INCREMENT,
  `civil_status` varchar(32) NOT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `active` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`civil_status_id`),
  KEY `employment_status` (`civil_status`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_classification` */

DROP TABLE IF EXISTS `ww_partners_classification`;

CREATE TABLE `ww_partners_classification` (
  `classification_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `classification` varchar(32) NOT NULL DEFAULT '',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`classification_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clearance` */

DROP TABLE IF EXISTS `ww_partners_clearance`;

CREATE TABLE `ww_partners_clearance` (
  `clearance_id` int(11) NOT NULL AUTO_INCREMENT,
  `partner_id` int(11) NOT NULL,
  `alternate_email` varchar(128) DEFAULT NULL,
  `status_id` tinyint(1) DEFAULT '1',
  `action_id` int(1) DEFAULT NULL COMMENT 'movement action id',
  `effectivity_date` date DEFAULT '0000-00-00',
  `quitclaim_received` tinyint(1) DEFAULT '0',
  `date_approved` datetime DEFAULT NULL,
  `date_cleared` date DEFAULT '0000-00-00',
  `turn_around_time` date DEFAULT '0000-00-00',
  `clearance_layout_id` int(1) DEFAULT NULL,
  `exit_interview_layout_id` int(1) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`clearance_id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clearance_exit_interview_answers` */

DROP TABLE IF EXISTS `ww_partners_clearance_exit_interview_answers`;

CREATE TABLE `ww_partners_clearance_exit_interview_answers` (
  `exit_interview_answers_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `clearance_id` int(11) DEFAULT NULL,
  `exit_interview_layout_item_id` int(11) DEFAULT NULL,
  `item` text,
  `category_id` int(1) DEFAULT NULL,
  `remarks` text,
  `yes_no` tinyint(1) DEFAULT '5',
  `status_id` int(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`exit_interview_answers_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clearance_exit_interview_layout` */

DROP TABLE IF EXISTS `ww_partners_clearance_exit_interview_layout`;

CREATE TABLE `ww_partners_clearance_exit_interview_layout` (
  `exit_interview_layout_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `layout_name` varchar(128) DEFAULT NULL,
  `department_id` varchar(128) DEFAULT '0',
  `company_id` int(11) DEFAULT '0',
  `default` tinyint(1) DEFAULT '0',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT '0000-00-00 00:00:00',
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`exit_interview_layout_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clearance_exit_interview_layout_item` */

DROP TABLE IF EXISTS `ww_partners_clearance_exit_interview_layout_item`;

CREATE TABLE `ww_partners_clearance_exit_interview_layout_item` (
  `exit_interview_layout_item_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `exit_interview_layout_id` int(11) DEFAULT NULL,
  `item` varchar(128) DEFAULT NULL,
  `wiht_yes_no` tinyint(1) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`exit_interview_layout_item_id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clearance_exit_interview_layout_item_sub` */

DROP TABLE IF EXISTS `ww_partners_clearance_exit_interview_layout_item_sub`;

CREATE TABLE `ww_partners_clearance_exit_interview_layout_item_sub` (
  `exit_interview_layout_item_sub_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `exit_interview_layout_item_id` int(11) DEFAULT NULL,
  `question` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`exit_interview_layout_item_sub_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clearance_exit_interview_layout_item_sub_answer` */

DROP TABLE IF EXISTS `ww_partners_clearance_exit_interview_layout_item_sub_answer`;

CREATE TABLE `ww_partners_clearance_exit_interview_layout_item_sub_answer` (
  `exit_interview_layout_item_sub_answer_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `exit_interview_layout_item_sub_id` int(11) DEFAULT NULL,
  `exit_interview_layout_item_id` int(11) DEFAULT NULL,
  `answer` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`exit_interview_layout_item_sub_answer_id`)
) ENGINE=InnoDB AUTO_INCREMENT=134 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clearance_layout` */

DROP TABLE IF EXISTS `ww_partners_clearance_layout`;

CREATE TABLE `ww_partners_clearance_layout` (
  `clearance_layout_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `layout_name` varchar(128) DEFAULT NULL,
  `department_id` varchar(128) NOT NULL DEFAULT '0',
  `company_id` int(11) DEFAULT '0',
  `default` tinyint(1) DEFAULT '0',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`clearance_layout_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clearance_layout_sign` */

DROP TABLE IF EXISTS `ww_partners_clearance_layout_sign`;

CREATE TABLE `ww_partners_clearance_layout_sign` (
  `clearance_layout_sign_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `clearance_layout_id` int(11) DEFAULT NULL,
  `company_id` int(11) DEFAULT NULL,
  `department_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `panel_title` varchar(128) DEFAULT NULL,
  `is_immediate` tinyint(1) DEFAULT '0',
  `item_description` varchar(128) DEFAULT NULL,
  `properties_tagging` tinyint(1) DEFAULT '0' COMMENT '1 = head office, 0 = other properties',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`clearance_layout_sign_id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clearance_signatories` */

DROP TABLE IF EXISTS `ww_partners_clearance_signatories`;

CREATE TABLE `ww_partners_clearance_signatories` (
  `clearance_signatories_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `clearance_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `panel_title` varchar(128) DEFAULT NULL,
  `clearance_layout_sign_id` int(11) DEFAULT NULL,
  `category_id` int(1) DEFAULT NULL,
  `remarks` text,
  `attachments` varchar(128) DEFAULT NULL,
  `date_cleared` date DEFAULT NULL,
  `status_id` int(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`clearance_signatories_id`)
) ENGINE=InnoDB AUTO_INCREMENT=44 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clearance_signatories_accountabilities` */

DROP TABLE IF EXISTS `ww_partners_clearance_signatories_accountabilities`;

CREATE TABLE `ww_partners_clearance_signatories_accountabilities` (
  `clearance_accountability_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `clearance_signatories_id` int(11) DEFAULT NULL,
  `accountability` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`clearance_accountability_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clearance_signatories_attachment` */

DROP TABLE IF EXISTS `ww_partners_clearance_signatories_attachment`;

CREATE TABLE `ww_partners_clearance_signatories_attachment` (
  `clearance_signatories_attachement_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `clearance_signatories_id` int(11) DEFAULT NULL,
  `type` tinyint(1) DEFAULT '0' COMMENT '0 = admin, 1 for signatories',
  `attachments` varchar(128) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`clearance_signatories_attachement_id`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clearance_signatory` */

DROP TABLE IF EXISTS `ww_partners_clearance_signatory`;

CREATE TABLE `ww_partners_clearance_signatory` (
  `signatory_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `accountability_id` int(11) NOT NULL DEFAULT '0',
  `partner_id` int(11) NOT NULL DEFAULT '0',
  `user_id` int(11) DEFAULT '0',
  `signatory` varchar(64) DEFAULT NULL,
  `status_id` int(1) DEFAULT '0',
  `status` varchar(16) DEFAULT NULL,
  `remarks` varchar(128) DEFAULT NULL,
  PRIMARY KEY (`signatory_id`),
  KEY `accountability_id` (`accountability_id`),
  KEY `partner_id` (`partner_id`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clearance_status` */

DROP TABLE IF EXISTS `ww_partners_clearance_status`;

CREATE TABLE `ww_partners_clearance_status` (
  `status_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `status` varchar(16) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_clinic_records` */

DROP TABLE IF EXISTS `ww_partners_clinic_records`;

CREATE TABLE `ww_partners_clinic_records` (
  `clinic_records_id` int(11) NOT NULL AUTO_INCREMENT,
  `partner_id` int(11) NOT NULL,
  `medication` varchar(255) DEFAULT NULL,
  `medication_qty` varchar(255) DEFAULT NULL,
  `complaint` varchar(255) DEFAULT NULL,
  `diagnosis` varchar(255) DEFAULT NULL,
  `other_med_cost` varchar(255) DEFAULT NULL,
  `details` varchar(255) DEFAULT NULL,
  `attachments` varchar(128) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` int(11) DEFAULT '0',
  PRIMARY KEY (`clinic_records_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_disciplinary_action` */

DROP TABLE IF EXISTS `ww_partners_disciplinary_action`;

CREATE TABLE `ww_partners_disciplinary_action` (
  `disciplinary_action_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `incident_id` int(11) NOT NULL,
  `sanction_id` int(11) DEFAULT NULL,
  `date_from` date NOT NULL DEFAULT '0000-00-00',
  `date_to` date DEFAULT '0000-00-00',
  `suspension_days` int(11) DEFAULT NULL,
  `damages_payment` varchar(128) DEFAULT NULL,
  `remarks` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT '0000-00-00 00:00:00',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`disciplinary_action_id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_employment_status` */

DROP TABLE IF EXISTS `ww_partners_employment_status`;

CREATE TABLE `ww_partners_employment_status` (
  `employment_status_id` int(11) NOT NULL AUTO_INCREMENT,
  `employment_status` varchar(32) NOT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `active` tinyint(1) DEFAULT '1',
  `movement` tinyint(1) DEFAULT '0',
  `application` tinyint(1) DEFAULT '1',
  `color` varchar(6) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`employment_status_id`),
  KEY `employment_status` (`employment_status`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_employment_type` */

DROP TABLE IF EXISTS `ww_partners_employment_type`;

CREATE TABLE `ww_partners_employment_type` (
  `employment_type_id` int(1) NOT NULL AUTO_INCREMENT,
  `employment_type` varchar(32) NOT NULL DEFAULT '',
  `active` tinyint(1) DEFAULT '1',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`employment_type_id`),
  KEY `employment_type` (`employment_type`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_family_relationship` */

DROP TABLE IF EXISTS `ww_partners_family_relationship`;

CREATE TABLE `ww_partners_family_relationship` (
  `family_relationship_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `family_relationship` varchar(32) DEFAULT NULL,
  `child` tinyint(1) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`family_relationship_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_grade` */

DROP TABLE IF EXISTS `ww_partners_grade`;

CREATE TABLE `ww_partners_grade` (
  `grade_id` int(11) NOT NULL AUTO_INCREMENT,
  `grade` varchar(12) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  KEY `grade_id` (`grade_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_health_records` */

DROP TABLE IF EXISTS `ww_partners_health_records`;

CREATE TABLE `ww_partners_health_records` (
  `health_id` int(11) NOT NULL AUTO_INCREMENT,
  `partner_id` int(11) NOT NULL,
  `health_type_id` int(1) NOT NULL,
  `health_provider` varchar(64) NOT NULL,
  `date_of_completion` date NOT NULL,
  `health_type_status_id` int(1) NOT NULL,
  `attachments` varchar(64) DEFAULT NULL,
  `findings` text,
  `diagnosis` text,
  `recommendation` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`health_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_health_type` */

DROP TABLE IF EXISTS `ww_partners_health_type`;

CREATE TABLE `ww_partners_health_type` (
  `health_type_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `health_type` varchar(64) CHARACTER SET latin1 NOT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`health_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_health_type_status` */

DROP TABLE IF EXISTS `ww_partners_health_type_status`;

CREATE TABLE `ww_partners_health_type_status` (
  `health_type_status_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `health_type_status` varchar(64) CHARACTER SET latin1 NOT NULL,
  `ape` tinyint(1) DEFAULT '0',
  `preemp` tinyint(1) DEFAULT '0',
  `others` tinyint(1) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`health_type_status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_id_config` */

DROP TABLE IF EXISTS `ww_partners_id_config`;

CREATE TABLE `ww_partners_id_config` (
  `config_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `config` enum('Custom','Year','Month','Day','Series') NOT NULL,
  `sequence` tinyint(1) DEFAULT '1',
  `variable` varchar(32) DEFAULT NULL,
  `length` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`config_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_incident` */

DROP TABLE IF EXISTS `ww_partners_incident`;

CREATE TABLE `ww_partners_incident` (
  `incident_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `involved_partners` varchar(128) DEFAULT NULL,
  `offense_id` int(11) DEFAULT NULL,
  `complainants` varchar(128) DEFAULT NULL,
  `date_time_of_offense` datetime DEFAULT '0000-00-00 00:00:00',
  `attachments` varchar(128) DEFAULT NULL,
  `witnesses` varchar(128) DEFAULT NULL,
  `location` varchar(128) DEFAULT NULL,
  `violation_details` text,
  `damages` text,
  `incident_status_id` int(11) DEFAULT NULL,
  `status` enum('Open','Close') DEFAULT 'Open',
  `date_sent` datetime DEFAULT '0000-00-00 00:00:00',
  `hr_remarks` text,
  `nte_partner` tinyint(1) DEFAULT '1',
  `nte_immediate` tinyint(1) DEFAULT '0',
  `nte_witnesses` tinyint(1) DEFAULT '0',
  `nte_complainants` tinyint(1) DEFAULT '0',
  `nte_others` tinyint(1) DEFAULT '0',
  `hearing_partner` tinyint(1) DEFAULT NULL,
  `hearing_immediate` tinyint(1) DEFAULT NULL,
  `hearing_witnesses` tinyint(1) DEFAULT NULL,
  `hearing_complainants` tinyint(1) DEFAULT NULL,
  `hearing_others` tinyint(1) DEFAULT NULL,
  `cancel_remarks` tinytext,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT '0000-00-00 00:00:00',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`incident_id`)
) ENGINE=InnoDB AUTO_INCREMENT=84 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_incident_approver` */

DROP TABLE IF EXISTS `ww_partners_incident_approver`;

CREATE TABLE `ww_partners_incident_approver` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `incident_id` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) CHARACTER SET latin1 DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '1',
  `incident_status_id` int(1) DEFAULT '0',
  `incident_status` varchar(16) DEFAULT '',
  `comment_date` datetime DEFAULT '0000-00-00 00:00:00',
  `comment` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `incident_user` (`incident_id`,`user_id`,`sequence`),
  KEY `incident_id` (`incident_id`),
  KEY `user_id` (`user_id`),
  KEY `sequence` (`sequence`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_incident_hearing` */

DROP TABLE IF EXISTS `ww_partners_incident_hearing`;

CREATE TABLE `ww_partners_incident_hearing` (
  `incident_nte_id` int(11) NOT NULL AUTO_INCREMENT,
  `incident_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `category` enum('partner','immediate','witness','complainants','others') NOT NULL,
  `explanation` text,
  `attachments` varchar(128) DEFAULT NULL,
  `nte_status_id` int(1) DEFAULT '0',
  `hearing_date` datetime DEFAULT '0000-00-00 00:00:00',
  `hr_remarks` text,
  PRIMARY KEY (`incident_nte_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_incident_immediate` */

DROP TABLE IF EXISTS `ww_partners_incident_immediate`;

CREATE TABLE `ww_partners_incident_immediate` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `incident_id` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) CHARACTER SET latin1 DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '1',
  `incident_status_id` int(1) DEFAULT '0',
  `incident_status` varchar(16) DEFAULT '',
  `comment_date` datetime DEFAULT '0000-00-00 00:00:00',
  `comment` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `incident_user` (`incident_id`,`user_id`,`sequence`),
  KEY `incident_id` (`incident_id`),
  KEY `user_id` (`user_id`),
  KEY `sequence` (`sequence`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=84 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_incident_nte` */

DROP TABLE IF EXISTS `ww_partners_incident_nte`;

CREATE TABLE `ww_partners_incident_nte` (
  `incident_nte_id` int(11) NOT NULL AUTO_INCREMENT,
  `incident_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `category` enum('partner','immediate','witness','complainants','others') NOT NULL,
  `explanation` text,
  `attachments` varchar(128) DEFAULT NULL,
  `nte_status_id` int(1) DEFAULT '0',
  `hearing_date` datetime DEFAULT '0000-00-00 00:00:00',
  `hr_remarks` text,
  PRIMARY KEY (`incident_nte_id`)
) ENGINE=InnoDB AUTO_INCREMENT=59 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_incident_status` */

DROP TABLE IF EXISTS `ww_partners_incident_status`;

CREATE TABLE `ww_partners_incident_status` (
  `incident_status_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `incident_status` varchar(64) NOT NULL DEFAULT '',
  `color` varchar(8) DEFAULT '#ffffff',
  `description` tinytext,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`incident_status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_key` */

DROP TABLE IF EXISTS `ww_partners_key`;

CREATE TABLE `ww_partners_key` (
  `key_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `key_code` varchar(32) NOT NULL,
  `key_label` varchar(128) DEFAULT NULL,
  `key_class_id` int(1) DEFAULT '0',
  `key_type_id` int(1) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`key_id`),
  KEY `transaction_code` (`key_code`),
  KEY `transaction_class_id` (`key_class_id`),
  KEY `transaction_type_id` (`key_type_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=213 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_key_class` */

DROP TABLE IF EXISTS `ww_partners_key_class`;

CREATE TABLE `ww_partners_key_class` (
  `key_class_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `key_class_code` varchar(32) NOT NULL,
  `key_class` varchar(128) NOT NULL,
  `user_view` tinyint(1) DEFAULT '1',
  `user_edit` tinyint(1) DEFAULT '0',
  `for_approval` tinyint(1) DEFAULT '0',
  `sort_order` int(1) unsigned DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`key_class_id`),
  KEY `transaction_class_code` (`key_class_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=96 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement` */

DROP TABLE IF EXISTS `ww_partners_movement`;

CREATE TABLE `ww_partners_movement` (
  `movement_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `status_id` int(1) NOT NULL DEFAULT '1',
  `due_to_id` int(1) NOT NULL DEFAULT '0',
  `photo` varchar(150) DEFAULT NULL,
  `remarks` text,
  `remarks_print_report_id` int(11) DEFAULT NULL,
  `date_approved` date DEFAULT NULL,
  `date_declined` date DEFAULT NULL,
  `hr_reviewed_by` int(11) DEFAULT NULL,
  `hrd_remarks` text,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`movement_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1559 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_action` */

DROP TABLE IF EXISTS `ww_partners_movement_action`;

CREATE TABLE `ww_partners_movement_action` (
  `action_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `movement_id` int(11) NOT NULL,
  `user_id` int(11) DEFAULT '0',
  `display_name` varchar(64) DEFAULT NULL,
  `effectivity_date` date NOT NULL,
  `type_id` int(1) NOT NULL DEFAULT '0',
  `type` varchar(64) DEFAULT NULL,
  `type_category_id` int(11) DEFAULT NULL,
  `type_category` varchar(64) DEFAULT NULL,
  `remarks` text,
  `remarks_print_report_id` int(11) DEFAULT NULL,
  `photo` varchar(255) DEFAULT NULL,
  `status_id` int(1) DEFAULT '7',
  `grade` decimal(5,3) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`action_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4276 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_action_additional_allowance` */

DROP TABLE IF EXISTS `ww_partners_movement_action_additional_allowance`;

CREATE TABLE `ww_partners_movement_action_additional_allowance` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `action_id` int(11) NOT NULL DEFAULT '0',
  `movement_id` int(1) NOT NULL DEFAULT '0',
  `transaction_id` int(1) DEFAULT '0',
  `transaction_label` varchar(64) DEFAULT NULL,
  `from_allowance` float(12,2) DEFAULT NULL,
  `to_allowance` float(12,2) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5036 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_action_attachment` */

DROP TABLE IF EXISTS `ww_partners_movement_action_attachment`;

CREATE TABLE `ww_partners_movement_action_attachment` (
  `movement_attachment_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `action_id` int(11) NOT NULL DEFAULT '0',
  `movement_id` int(1) NOT NULL DEFAULT '0',
  `type` varchar(100) DEFAULT NULL,
  `photo` varchar(255) DEFAULT NULL,
  `filename` varchar(255) DEFAULT NULL,
  `size` varchar(30) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`movement_attachment_id`)
) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_action_compensation` */

DROP TABLE IF EXISTS `ww_partners_movement_action_compensation`;

CREATE TABLE `ww_partners_movement_action_compensation` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `action_id` int(11) NOT NULL DEFAULT '0',
  `movement_id` int(1) NOT NULL DEFAULT '0',
  `type_name` varchar(64) DEFAULT NULL,
  `current_salary` float(12,2) DEFAULT NULL,
  `to_salary` float(12,2) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1325 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_action_extension` */

DROP TABLE IF EXISTS `ww_partners_movement_action_extension`;

CREATE TABLE `ww_partners_movement_action_extension` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `action_id` int(11) NOT NULL DEFAULT '0',
  `movement_id` int(1) NOT NULL DEFAULT '0',
  `no_of_months` int(1) NOT NULL DEFAULT '0',
  `end_date` date DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_action_leave_credits` */

DROP TABLE IF EXISTS `ww_partners_movement_action_leave_credits`;

CREATE TABLE `ww_partners_movement_action_leave_credits` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `action_id` int(11) NOT NULL DEFAULT '0',
  `movement_id` int(11) NOT NULL DEFAULT '0',
  `user_id` int(1) NOT NULL DEFAULT '0',
  `year` int(1) DEFAULT '0',
  `pro_rated` tinyint(1) DEFAULT '0',
  `credit` int(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_action_moving` */

DROP TABLE IF EXISTS `ww_partners_movement_action_moving`;

CREATE TABLE `ww_partners_movement_action_moving` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `action_id` int(11) NOT NULL DEFAULT '0',
  `movement_id` int(1) NOT NULL DEFAULT '0',
  `blacklisted` tinyint(1) DEFAULT '0',
  `end_date` date DEFAULT NULL,
  `reason_id` int(1) DEFAULT '0',
  `further_reason` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_action_transfer` */

DROP TABLE IF EXISTS `ww_partners_movement_action_transfer`;

CREATE TABLE `ww_partners_movement_action_transfer` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `action_id` int(11) NOT NULL DEFAULT '0',
  `movement_id` int(1) NOT NULL DEFAULT '0',
  `field_id` int(1) DEFAULT '0',
  `field_name` varchar(64) DEFAULT NULL,
  `from_id` int(11) DEFAULT '0',
  `to_id` int(11) DEFAULT '0',
  `from_name` varchar(128) DEFAULT NULL,
  `to_name` varchar(128) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3796 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_approver` */

DROP TABLE IF EXISTS `ww_partners_movement_approver`;

CREATE TABLE `ww_partners_movement_approver` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `movement_id` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) CHARACTER SET latin1 DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '1',
  `movement_status_id` int(1) DEFAULT '0',
  `movement_status` varchar(16) DEFAULT '',
  `comment_date` datetime DEFAULT '0000-00-00 00:00:00',
  `comment` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `forms_user` (`movement_id`,`user_id`,`sequence`),
  KEY `forms_id` (`movement_id`),
  KEY `user_id` (`user_id`),
  KEY `sequence` (`sequence`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=65 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_approver_hr` */

DROP TABLE IF EXISTS `ww_partners_movement_approver_hr`;

CREATE TABLE `ww_partners_movement_approver_hr` (
  `approver_hr_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `movement_id` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) CHARACTER SET latin1 DEFAULT '',
  `sequence` tinyint(1) DEFAULT '1',
  `movement_status_id` int(1) DEFAULT '0',
  `movement_status` varchar(16) DEFAULT '',
  `comment_date` datetime DEFAULT NULL,
  `comment` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`approver_hr_id`),
  UNIQUE KEY `forms_user` (`movement_id`,`user_id`,`sequence`),
  KEY `forms_id` (`movement_id`),
  KEY `user_id` (`user_id`),
  KEY `sequence` (`sequence`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=2883 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_cause` */

DROP TABLE IF EXISTS `ww_partners_movement_cause`;

CREATE TABLE `ww_partners_movement_cause` (
  `cause_id` int(11) NOT NULL AUTO_INCREMENT,
  `cause` varchar(32) NOT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`cause_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_fields` */

DROP TABLE IF EXISTS `ww_partners_movement_fields`;

CREATE TABLE `ww_partners_movement_fields` (
  `field_id` int(11) NOT NULL AUTO_INCREMENT,
  `field_name` varchar(32) NOT NULL,
  `field_label` varchar(32) DEFAULT NULL,
  `table_name` varchar(64) DEFAULT NULL,
  `from_to` tinyint(1) DEFAULT '1',
  `orderby` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`field_id`,`field_name`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_reason` */

DROP TABLE IF EXISTS `ww_partners_movement_reason`;

CREATE TABLE `ww_partners_movement_reason` (
  `reason_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `reason` varchar(128) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`reason_id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_remarks` */

DROP TABLE IF EXISTS `ww_partners_movement_remarks`;

CREATE TABLE `ww_partners_movement_remarks` (
  `remarks_print_report_id` int(11) NOT NULL AUTO_INCREMENT,
  `remarks_print_report` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`remarks_print_report_id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_status` */

DROP TABLE IF EXISTS `ww_partners_movement_status`;

CREATE TABLE `ww_partners_movement_status` (
  `status_id` int(11) NOT NULL AUTO_INCREMENT,
  `status` varchar(20) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_type` */

DROP TABLE IF EXISTS `ww_partners_movement_type`;

CREATE TABLE `ww_partners_movement_type` (
  `type_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `type_code` varchar(64) NOT NULL,
  `type` varchar(128) CHARACTER SET latin1 NOT NULL,
  `can_view` tinyint(1) DEFAULT '1',
  `can_delete` tinyint(1) DEFAULT '1',
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`type_id`),
  KEY `deleted` (`deleted`),
  KEY `movement_type` (`type`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_movement_type_category` */

DROP TABLE IF EXISTS `ww_partners_movement_type_category`;

CREATE TABLE `ww_partners_movement_type_category` (
  `type_category_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `type_category` varchar(128) CHARACTER SET latin1 NOT NULL,
  `can_view` tinyint(1) DEFAULT '1',
  `can_delete` tinyint(1) DEFAULT '1',
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`type_category_id`),
  KEY `deleted` (`deleted`),
  KEY `movement_type` (`type_category`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_offense` */

DROP TABLE IF EXISTS `ww_partners_offense`;

CREATE TABLE `ww_partners_offense` (
  `offense_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `offense_category_id` int(1) DEFAULT '0',
  `offense_level_id` int(1) DEFAULT '0',
  `offense` text,
  `sanction_id` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` int(1) DEFAULT '0',
  PRIMARY KEY (`offense_id`)
) ENGINE=InnoDB AUTO_INCREMENT=81 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_offense_category` */

DROP TABLE IF EXISTS `ww_partners_offense_category`;

CREATE TABLE `ww_partners_offense_category` (
  `offense_category_id` int(11) NOT NULL AUTO_INCREMENT,
  `offense_category` varchar(128) DEFAULT NULL,
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` date DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '0',
  `deleted` int(1) DEFAULT '0',
  PRIMARY KEY (`offense_category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_offense_level` */

DROP TABLE IF EXISTS `ww_partners_offense_level`;

CREATE TABLE `ww_partners_offense_level` (
  `offense_level_id` int(11) NOT NULL AUTO_INCREMENT,
  `offense_level` varchar(32) DEFAULT NULL,
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` date DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '0',
  `deleted` int(1) DEFAULT '0',
  PRIMARY KEY (`offense_level_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_offense_sanction` */

DROP TABLE IF EXISTS `ww_partners_offense_sanction`;

CREATE TABLE `ww_partners_offense_sanction` (
  `sanction_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `sanction_category_id` int(11) DEFAULT '0',
  `offense_level_id` int(1) DEFAULT '0',
  `sanction` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`sanction_id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_offense_sanction_category` */

DROP TABLE IF EXISTS `ww_partners_offense_sanction_category`;

CREATE TABLE `ww_partners_offense_sanction_category` (
  `offense_sanction_category_id` int(11) NOT NULL AUTO_INCREMENT,
  `offense_sanction_category` varchar(255) DEFAULT NULL,
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` date DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`offense_sanction_category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_personal` */

DROP TABLE IF EXISTS `ww_partners_personal`;

CREATE TABLE `ww_partners_personal` (
  `personal_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `partner_id` int(11) NOT NULL DEFAULT '0',
  `key_id` int(1) DEFAULT '0',
  `key` varchar(32) NOT NULL,
  `sequence` tinyint(1) DEFAULT '1',
  `key_name` varchar(64) NOT NULL,
  `key_value` text,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`personal_id`),
  UNIQUE KEY `partner_key` (`partner_id`,`sequence`,`key`),
  KEY `partner_id` (`partner_id`)
) ENGINE=InnoDB AUTO_INCREMENT=38589 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_personal_approver` */

DROP TABLE IF EXISTS `ww_partners_personal_approver`;

CREATE TABLE `ww_partners_personal_approver` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `personal_request_id` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) CHARACTER SET latin1 DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '1',
  `personal_request_status_id` int(1) DEFAULT '0',
  `personal_request_status` varchar(16) DEFAULT '',
  `comment_date` datetime DEFAULT '0000-00-00 00:00:00',
  `comment` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `forms_user` (`personal_request_id`,`user_id`,`sequence`),
  KEY `forms_id` (`personal_request_id`),
  KEY `user_id` (`user_id`),
  KEY `sequence` (`sequence`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_personal_history` */

DROP TABLE IF EXISTS `ww_partners_personal_history`;

CREATE TABLE `ww_partners_personal_history` (
  `personal_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `partner_id` int(11) NOT NULL DEFAULT '0',
  `key` varchar(32) NOT NULL,
  `sequence` int(1) DEFAULT '1',
  `key_id` int(1) NOT NULL DEFAULT '0',
  `key_name` varchar(64) NOT NULL,
  `key_value` text,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  PRIMARY KEY (`personal_id`),
  UNIQUE KEY `partner_key` (`partner_id`,`sequence`,`key`),
  KEY `partner_id` (`partner_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13984 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_personal_request` */

DROP TABLE IF EXISTS `ww_partners_personal_request`;

CREATE TABLE `ww_partners_personal_request` (
  `personal_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `partner_id` int(11) NOT NULL DEFAULT '0',
  `key_id` int(1) DEFAULT '0',
  `key` varchar(32) NOT NULL,
  `sequence` tinyint(1) DEFAULT '1',
  `key_name` varchar(64) NOT NULL,
  `key_value` text,
  `status` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`personal_id`),
  KEY `partner_id` (`partner_id`),
  KEY `partner_key` (`partner_id`,`key_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1247 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_personal_request_status` */

DROP TABLE IF EXISTS `ww_partners_personal_request_status`;

CREATE TABLE `ww_partners_personal_request_status` (
  `status_id` int(11) NOT NULL AUTO_INCREMENT,
  `status` varchar(16) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_safe_manhour` */

DROP TABLE IF EXISTS `ww_partners_safe_manhour`;

CREATE TABLE `ww_partners_safe_manhour` (
  `safe_manhour_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `partner_id` int(11) NOT NULL,
  `nature_id` int(1) DEFAULT NULL,
  `health_provider` varchar(64) CHARACTER SET latin1 DEFAULT NULL,
  `total_manhour` decimal(10,2) DEFAULT '0.00',
  `date_incident` date DEFAULT NULL,
  `date_return_to_work` date DEFAULT NULL,
  `status_id` int(1) DEFAULT NULL,
  `medication` varchar(250) CHARACTER SET latin1 DEFAULT NULL,
  `medication_qty` varchar(250) CHARACTER SET latin1 DEFAULT NULL,
  `details` text CHARACTER SET latin1,
  `attachment` varchar(128) CHARACTER SET latin1 DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`safe_manhour_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_safe_manhour_nature` */

DROP TABLE IF EXISTS `ww_partners_safe_manhour_nature`;

CREATE TABLE `ww_partners_safe_manhour_nature` (
  `nature_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `nature` varchar(32) CHARACTER SET latin1 DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`nature_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_partners_safe_manhour_status` */

DROP TABLE IF EXISTS `ww_partners_safe_manhour_status`;

CREATE TABLE `ww_partners_safe_manhour_status` (
  `status_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `status` varchar(32) CHARACTER SET latin1 NOT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_account` */

DROP TABLE IF EXISTS `ww_payroll_account`;

CREATE TABLE `ww_payroll_account` (
  `account_id` int(11) NOT NULL AUTO_INCREMENT,
  `account_code` varchar(32) CHARACTER SET latin1 NOT NULL,
  `account_name` varchar(255) CHARACTER SET latin1 NOT NULL,
  `account_type_id` int(11) NOT NULL DEFAULT '2',
  `arrangement` varchar(3) DEFAULT NULL,
  `description` text,
  `cond` varchar(32) DEFAULT NULL,
  `department_breakdown` tinyint(1) DEFAULT '1',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`account_id`),
  KEY `account_code` (`account_code`,`arrangement`)
) ENGINE=InnoDB AUTO_INCREMENT=74 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_account_category` */

DROP TABLE IF EXISTS `ww_payroll_account_category`;

CREATE TABLE `ww_payroll_account_category` (
  `category_id` int(11) NOT NULL AUTO_INCREMENT,
  `category` varchar(32) NOT NULL,
  `description` text,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_account_sub` */

DROP TABLE IF EXISTS `ww_payroll_account_sub`;

CREATE TABLE `ww_payroll_account_sub` (
  `account_sub_id` int(11) NOT NULL AUTO_INCREMENT,
  `account_code` varchar(32) DEFAULT NULL,
  `account_sub_code` varchar(32) NOT NULL,
  `account_sub` varchar(128) NOT NULL,
  `account_id` int(11) NOT NULL,
  `category_id` int(11) DEFAULT NULL,
  `category_val_id` int(11) DEFAULT NULL,
  `category_value` varchar(64) DEFAULT NULL,
  `sub_category_id` int(11) DEFAULT '0',
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`account_sub_id`),
  KEY `account_category` (`account_id`,`category_val_id`,`sub_category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=842 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_account_subaccount` */

DROP TABLE IF EXISTS `ww_payroll_account_subaccount`;

CREATE TABLE `ww_payroll_account_subaccount` (
  `subaccount_id` int(11) NOT NULL AUTO_INCREMENT,
  `subaccount_code` varchar(32) NOT NULL,
  `subaccount` varchar(128) NOT NULL,
  `account_id` int(11) NOT NULL,
  `account_code` varchar(32) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL,
  `category_val_id` int(11) DEFAULT NULL,
  `category_value` varchar(64) DEFAULT NULL,
  `sub_category_id` int(11) DEFAULT '0',
  `sub_group_id` int(11) DEFAULT '0',
  `remarks` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`subaccount_id`),
  KEY `account_category` (`account_id`,`category_val_id`,`sub_category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1543 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_account_type` */

DROP TABLE IF EXISTS `ww_payroll_account_type`;

CREATE TABLE `ww_payroll_account_type` (
  `account_type_id` int(11) NOT NULL AUTO_INCREMENT,
  `account_type` varchar(255) CHARACTER SET latin1 NOT NULL,
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`account_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_annual_tax` */

DROP TABLE IF EXISTS `ww_payroll_annual_tax`;

CREATE TABLE `ww_payroll_annual_tax` (
  `annual_tax_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `salary_from` decimal(10,2) NOT NULL,
  `salary_to` decimal(10,2) NOT NULL,
  `amount` decimal(10,2) NOT NULL,
  `rate` decimal(6,2) NOT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`annual_tax_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_annual_tax_new` */

DROP TABLE IF EXISTS `ww_payroll_annual_tax_new`;

CREATE TABLE `ww_payroll_annual_tax_new` (
  `annual_tax_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `salary_from` decimal(10,2) NOT NULL,
  `salary_to` decimal(10,2) NOT NULL,
  `amount` decimal(10,2) NOT NULL,
  `rate` decimal(6,2) NOT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`annual_tax_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_annual_tax_old` */

DROP TABLE IF EXISTS `ww_payroll_annual_tax_old`;

CREATE TABLE `ww_payroll_annual_tax_old` (
  `annual_tax_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `salary_from` decimal(10,2) NOT NULL,
  `salary_to` decimal(10,2) NOT NULL,
  `amount` decimal(10,2) NOT NULL,
  `rate` decimal(6,2) NOT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`annual_tax_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_apply_to` */

DROP TABLE IF EXISTS `ww_payroll_apply_to`;

CREATE TABLE `ww_payroll_apply_to` (
  `apply_to_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `apply_to` varchar(64) NOT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`apply_to_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_bank` */

DROP TABLE IF EXISTS `ww_payroll_bank`;

CREATE TABLE `ww_payroll_bank` (
  `bank_id` int(11) NOT NULL AUTO_INCREMENT,
  `bank_type` varchar(10) CHARACTER SET latin1 DEFAULT NULL,
  `bank_code_numeric` varchar(20) CHARACTER SET latin1 NOT NULL,
  `bank_code_alpha` varchar(30) CHARACTER SET latin1 DEFAULT NULL,
  `bank` varchar(50) CHARACTER SET latin1 NOT NULL,
  `account_name` varchar(128) CHARACTER SET latin1 DEFAULT NULL,
  `account_no` varchar(128) CHARACTER SET latin1 DEFAULT NULL,
  `batch_no` int(5) DEFAULT '0',
  `ceiling_amount` decimal(12,2) DEFAULT '0.00',
  `branch_code` varchar(20) CHARACTER SET latin1 DEFAULT NULL,
  `description` text CHARACTER SET latin1,
  `address` text,
  `address_2` text,
  `branch_officer` varchar(64) DEFAULT NULL,
  `branch_position` varchar(64) DEFAULT NULL,
  `signatory_1` varchar(64) DEFAULT NULL,
  `signatory_2` varchar(64) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`bank_id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_bir` */

DROP TABLE IF EXISTS `ww_payroll_bir`;

CREATE TABLE `ww_payroll_bir` (
  `user_id` int(11) DEFAULT NULL,
  `id_number` varchar(16) DEFAULT NULL,
  `pay_year` int(1) DEFAULT NULL,
  `company_id` int(11) DEFAULT NULL,
  `status_id` int(11) DEFAULT NULL,
  `lastname` varchar(30) DEFAULT NULL,
  `firstname` varchar(30) DEFAULT NULL,
  `middlename` varchar(30) DEFAULT NULL,
  `suffix` varchar(4) DEFAULT NULL,
  `tin` varchar(255) DEFAULT NULL,
  `location` varchar(30) NOT NULL DEFAULT '',
  `employed_date` date DEFAULT NULL,
  `resigned_date` date DEFAULT NULL,
  `birth_date` date DEFAULT NULL,
  `address` varchar(255) DEFAULT NULL,
  `telephone` varchar(20) DEFAULT NULL,
  `civil_status_id` int(11) DEFAULT NULL,
  `depend` int(11) DEFAULT NULL,
  `exempt` decimal(12,2) DEFAULT '0.00',
  `exempt_code` varchar(3) DEFAULT NULL,
  `company` varchar(60) DEFAULT NULL,
  `prev_employer` varchar(64) DEFAULT NULL,
  `prev_tin` varchar(32) DEFAULT NULL,
  `prev_address` varchar(128) DEFAULT NULL,
  `prev_zip` varchar(4) DEFAULT NULL,
  `prev_wtax` decimal(12,2) DEFAULT '0.00',
  `prev_gross_tax` decimal(12,2) DEFAULT '0.00',
  `prev_benefits_mwe` decimal(12,2) DEFAULT '0.00',
  `prev_benefits` decimal(12,2) DEFAULT '0.00',
  `prev_bonus_nontax` decimal(12,2) DEFAULT '0.00',
  `prev_bonus_tax` decimal(12,2) DEFAULT '0.00',
  `prev_govt_contri` decimal(12,2) DEFAULT '0.00',
  `dep_name1` varchar(128) DEFAULT NULL,
  `dep_bday1` date DEFAULT NULL,
  `dep_name2` varchar(128) DEFAULT NULL,
  `dep_bday2` date DEFAULT NULL,
  `dep_name3` varchar(128) DEFAULT NULL,
  `dep_bday3` date DEFAULT NULL,
  `dep_name4` varchar(128) DEFAULT NULL,
  `dep_bday4` date DEFAULT NULL,
  `min_basic` decimal(12,2) DEFAULT '0.00',
  `min_holpay` decimal(12,2) DEFAULT '0.00',
  `min_overtime` decimal(12,2) DEFAULT '0.00',
  `min_ndiff` decimal(12,2) DEFAULT '0.00',
  `min_deminimis` decimal(12,2) DEFAULT '0.00',
  `min_hazardpay` decimal(12,2) DEFAULT '0.00',
  `govt_contri` decimal(12,2) DEFAULT '0.00',
  `bonus_nontax` decimal(12,2) DEFAULT '0.00',
  `bonus_tax` decimal(12,2) DEFAULT '0.00',
  `benefit` decimal(12,2) DEFAULT '0.00',
  `allow` decimal(12,2) DEFAULT '0.00',
  `tax_basic` decimal(12,2) DEFAULT '0.00',
  `representation` decimal(12,2) NOT NULL DEFAULT '0.00',
  `transportation` decimal(12,2) NOT NULL DEFAULT '0.00',
  `cost_living` decimal(12,2) NOT NULL DEFAULT '0.00',
  `fixed_housing` decimal(12,2) NOT NULL DEFAULT '0.00',
  `tempo_allowance` decimal(12,2) NOT NULL DEFAULT '0.00',
  `service_allowance` decimal(12,2) NOT NULL DEFAULT '0.00',
  `commission` decimal(12,2) NOT NULL DEFAULT '0.00',
  `profit_sharing` decimal(12,2) NOT NULL DEFAULT '0.00',
  `fees` decimal(12,2) NOT NULL DEFAULT '0.00',
  `tax_hazardpay` decimal(12,2) NOT NULL DEFAULT '0.00',
  `attnd_ded` decimal(12,2) DEFAULT '0.00',
  `tax_overtime` decimal(12,2) DEFAULT '0.00',
  `gross_compensation` decimal(12,2) NOT NULL DEFAULT '0.00',
  `total_non_tax` decimal(12,2) NOT NULL DEFAULT '0.00',
  `total_taxable` decimal(12,2) NOT NULL DEFAULT '0.00',
  `net_taxable` decimal(12,2) NOT NULL DEFAULT '0.00',
  `wtax` decimal(12,2) DEFAULT '0.00',
  `taxdue` decimal(12,2) DEFAULT '0.00',
  `minwageflag` tinyint(1) DEFAULT '0' COMMENT '1 = minimum wage earner ;',
  `minwage_amt` decimal(12,2) DEFAULT '0.00',
  `minwage_day` decimal(12,2) DEFAULT '0.00',
  `minwage_month` decimal(12,2) DEFAULT '0.00',
  `total_year_days` decimal(12,2) DEFAULT '0.00',
  `sub_filing` varchar(3) DEFAULT NULL,
  `if_lastpay` tinyint(1) DEFAULT '0' COMMENT '1 = Last Pay ; 0 = for alpha',
  `deleted` tinyint(1) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_bir_item` */

DROP TABLE IF EXISTS `ww_payroll_bir_item`;

CREATE TABLE `ww_payroll_bir_item` (
  `item_id` int(11) NOT NULL AUTO_INCREMENT,
  `item_code` varchar(30) DEFAULT NULL,
  `item` varchar(100) DEFAULT NULL,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`item_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_bonus` */

DROP TABLE IF EXISTS `ww_payroll_bonus`;

CREATE TABLE `ww_payroll_bonus` (
  `bonus_id` int(11) NOT NULL AUTO_INCREMENT,
  `document_no` varchar(64) DEFAULT NULL,
  `bonus_transaction_code` varchar(64) DEFAULT NULL,
  `taxable_bonus_transaction_code` varchar(64) DEFAULT NULL,
  `bonus_transaction_id` int(11) DEFAULT NULL,
  `accrual_transaction_id` int(11) DEFAULT NULL,
  `adjustment_transaction_id` int(11) DEFAULT NULL,
  `taxable_bonus_transaction_id` int(11) DEFAULT NULL,
  `taxable_acrrual_transaction_id` int(11) DEFAULT NULL,
  `taxable_adjustment_transaction_id` int(11) DEFAULT NULL,
  `date_from` date DEFAULT NULL,
  `date_to` date DEFAULT NULL,
  `payroll_date` date DEFAULT NULL,
  `transaction_method_id` int(11) DEFAULT NULL,
  `method` varchar(64) DEFAULT NULL,
  `period` int(11) DEFAULT NULL,
  `mainamount` decimal(15,2) DEFAULT NULL,
  `apply_maxbonus_rule` int(1) DEFAULT '0',
  `week` varchar(16) DEFAULT NULL,
  `employee_id` text,
  `account_id` int(11) DEFAULT NULL,
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` int(1) DEFAULT '0',
  PRIMARY KEY (`bonus_id`)
) ENGINE=InnoDB AUTO_INCREMENT=328 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_bonus_accrual` */

DROP TABLE IF EXISTS `ww_payroll_bonus_accrual`;

CREATE TABLE `ww_payroll_bonus_accrual` (
  `accrual_id` int(11) DEFAULT NULL,
  `period_id` int(11) DEFAULT NULL,
  `bonus_id` int(11) DEFAULT NULL,
  `employee_id` int(11) DEFAULT NULL,
  `amount` decimal(15,2) DEFAULT NULL,
  KEY `accrual_id` (`accrual_id`),
  KEY `period_id` (`period_id`),
  KEY `employee_id` (`employee_id`),
  KEY `bonus_id` (`bonus_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_bonus_employee` */

DROP TABLE IF EXISTS `ww_payroll_bonus_employee`;

CREATE TABLE `ww_payroll_bonus_employee` (
  `bonus_id` int(11) DEFAULT NULL,
  `id_number` varchar(11) DEFAULT NULL,
  `document_no` varchar(64) DEFAULT NULL,
  `employee_id` int(11) DEFAULT NULL,
  `amount` varbinary(255) DEFAULT NULL,
  KEY `bonus_id` (`bonus_id`),
  KEY `employee_id` (`employee_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_closed_summary` */

DROP TABLE IF EXISTS `ww_payroll_closed_summary`;

CREATE TABLE `ww_payroll_closed_summary` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `company_id` int(11) DEFAULT NULL,
  `department_id` int(11) DEFAULT NULL,
  `type` varchar(1) DEFAULT NULL,
  `year` int(1) NOT NULL,
  `summary_id` int(1) NOT NULL,
  `summary_code` varchar(32) NOT NULL,
  `ytd` varbinary(255) DEFAULT NULL,
  `january` varbinary(255) DEFAULT NULL,
  `february` varbinary(255) DEFAULT NULL,
  `march` varbinary(255) DEFAULT NULL,
  `april` varbinary(255) DEFAULT NULL,
  `may` varbinary(255) DEFAULT NULL,
  `june` varbinary(255) DEFAULT NULL,
  `july` varbinary(255) DEFAULT NULL,
  `august` varbinary(255) DEFAULT NULL,
  `september` varbinary(255) DEFAULT NULL,
  `october` varbinary(255) DEFAULT NULL,
  `november` varbinary(255) DEFAULT NULL,
  `december` varbinary(255) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` int(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=121504 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_closed_summary_id` */

DROP TABLE IF EXISTS `ww_payroll_closed_summary_id`;

CREATE TABLE `ww_payroll_closed_summary_id` (
  `summary_id` int(11) NOT NULL AUTO_INCREMENT,
  `summary_code` varchar(32) NOT NULL,
  `description` text,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`summary_id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_closed_transaction` */

DROP TABLE IF EXISTS `ww_payroll_closed_transaction`;

CREATE TABLE `ww_payroll_closed_transaction` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `period_id` int(11) DEFAULT NULL,
  `company_id` int(11) DEFAULT '0',
  `processing_type_id` int(1) DEFAULT NULL,
  `payroll_date` date DEFAULT NULL,
  `employee_id` int(11) DEFAULT NULL,
  `transaction_id` int(1) DEFAULT NULL,
  `transaction_class_id` int(11) DEFAULT NULL,
  `transaction_code` varchar(32) DEFAULT NULL,
  `quantity` varbinary(255) DEFAULT NULL,
  `unit_rate` varbinary(255) DEFAULT NULL,
  `amount` varbinary(255) DEFAULT NULL,
  `transaction_type_id` int(1) DEFAULT NULL,
  `inserted_from_id` int(1) DEFAULT NULL,
  `record_from` varchar(64) DEFAULT NULL,
  `record_id` int(11) DEFAULT NULL,
  `on_hold` tinyint(1) DEFAULT '0',
  `remarks` text,
  `group_id` int(11) NOT NULL DEFAULT '0',
  `department_id` int(11) NOT NULL DEFAULT '0',
  `section_id` int(11) DEFAULT NULL,
  `division_id` int(11) NOT NULL DEFAULT '0',
  `position_id` int(11) NOT NULL DEFAULT '0',
  `location_id` int(11) NOT NULL DEFAULT '0',
  `project_id` int(11) DEFAULT NULL,
  `branch_id` int(11) DEFAULT '0',
  `payment_type_id` tinyint(1) NOT NULL DEFAULT '0',
  `minwageflag` tinyint(1) NOT NULL DEFAULT '0',
  `payroll_rate_type_id` int(11) DEFAULT NULL,
  `sbr_no` varchar(16) DEFAULT NULL,
  `sbr_date` date DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `period_id` (`period_id`),
  KEY `processing_type_id` (`processing_type_id`),
  KEY `payroll_date` (`payroll_date`),
  KEY `transaction_id` (`transaction_id`),
  KEY `transaction_type_id` (`transaction_type_id`),
  KEY `deleted` (`deleted`),
  KEY `company_id` (`company_id`),
  KEY `employee_id` (`employee_id`),
  KEY `minwageflag` (`minwageflag`),
  KEY `transaction_code` (`transaction_code`)
) ENGINE=InnoDB AUTO_INCREMENT=633554 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_closed_transaction_copy` */

DROP TABLE IF EXISTS `ww_payroll_closed_transaction_copy`;

CREATE TABLE `ww_payroll_closed_transaction_copy` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `period_id` int(11) DEFAULT NULL,
  `company_id` int(11) DEFAULT '0',
  `processing_type_id` int(1) DEFAULT NULL,
  `payroll_date` date DEFAULT NULL,
  `employee_id` int(11) DEFAULT NULL,
  `transaction_id` int(1) DEFAULT NULL,
  `transaction_class_id` int(11) DEFAULT NULL,
  `transaction_code` varchar(32) DEFAULT NULL,
  `quantity` varbinary(255) DEFAULT NULL,
  `unit_rate` varbinary(255) DEFAULT NULL,
  `amount` varbinary(255) DEFAULT NULL,
  `transaction_type_id` int(1) DEFAULT NULL,
  `inserted_from_id` int(1) DEFAULT NULL,
  `record_from` varchar(64) DEFAULT NULL,
  `record_id` int(11) DEFAULT NULL,
  `on_hold` tinyint(1) DEFAULT '0',
  `remarks` text,
  `group_id` int(11) NOT NULL DEFAULT '0',
  `department_id` int(11) NOT NULL DEFAULT '0',
  `section_id` int(11) DEFAULT NULL,
  `division_id` int(11) NOT NULL DEFAULT '0',
  `position_id` int(11) NOT NULL DEFAULT '0',
  `location_id` int(11) NOT NULL DEFAULT '0',
  `project_id` int(11) DEFAULT NULL,
  `branch_id` int(11) DEFAULT '0',
  `payment_type_id` tinyint(1) NOT NULL DEFAULT '0',
  `minwageflag` tinyint(1) NOT NULL DEFAULT '0',
  `payroll_rate_type_id` int(11) DEFAULT NULL,
  `sbr_no` varchar(16) DEFAULT NULL,
  `sbr_date` date DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `period_id` (`period_id`),
  KEY `processing_type_id` (`processing_type_id`),
  KEY `payroll_date` (`payroll_date`),
  KEY `transaction_id` (`transaction_id`),
  KEY `transaction_type_id` (`transaction_type_id`),
  KEY `deleted` (`deleted`),
  KEY `company_id` (`company_id`),
  KEY `employee_id` (`employee_id`),
  KEY `minwageflag` (`minwageflag`),
  KEY `transaction_code` (`transaction_code`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_current_transaction` */

DROP TABLE IF EXISTS `ww_payroll_current_transaction`;

CREATE TABLE `ww_payroll_current_transaction` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `period_id` int(11) DEFAULT NULL,
  `company_id` int(11) DEFAULT '0',
  `processing_type_id` int(1) DEFAULT NULL,
  `payroll_date` date DEFAULT NULL,
  `employee_id` int(11) DEFAULT NULL,
  `transaction_id` int(1) DEFAULT NULL,
  `transaction_class_id` int(11) DEFAULT NULL,
  `transaction_code` varchar(32) DEFAULT NULL,
  `quantity` varbinary(255) DEFAULT NULL,
  `unit_rate` varbinary(255) DEFAULT NULL,
  `amount` varbinary(255) DEFAULT NULL,
  `transaction_type_id` int(1) DEFAULT NULL,
  `inserted_from_id` int(1) DEFAULT NULL,
  `record_from` varchar(64) DEFAULT NULL,
  `record_id` int(11) DEFAULT NULL,
  `on_hold` tinyint(1) DEFAULT '0',
  `remarks` text,
  `group_id` int(11) NOT NULL DEFAULT '0',
  `department_id` int(11) NOT NULL DEFAULT '0',
  `section_id` int(11) DEFAULT NULL,
  `division_id` int(11) NOT NULL DEFAULT '0',
  `position_id` int(11) NOT NULL DEFAULT '0',
  `location_id` int(11) NOT NULL DEFAULT '0',
  `project_id` int(11) DEFAULT NULL,
  `branch_id` int(11) DEFAULT '0',
  `payment_type_id` tinyint(1) NOT NULL DEFAULT '0',
  `minwageflag` tinyint(1) NOT NULL DEFAULT '0',
  `payroll_rate_type_id` int(11) DEFAULT NULL,
  `sbr_no` varchar(16) DEFAULT NULL,
  `sbr_date` date DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `period_id` (`period_id`),
  KEY `processing_type_id` (`processing_type_id`),
  KEY `payroll_date` (`payroll_date`),
  KEY `transaction_id` (`transaction_id`),
  KEY `transaction_type_id` (`transaction_type_id`),
  KEY `deleted` (`deleted`),
  KEY `current` (`employee_id`,`transaction_code`,`on_hold`,`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=2448845 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_entry_batch` */

DROP TABLE IF EXISTS `ww_payroll_entry_batch`;

CREATE TABLE `ww_payroll_entry_batch` (
  `batch_entry_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `payroll_date` date NOT NULL,
  `transaction_code` varchar(64) DEFAULT NULL,
  `transaction_id` int(11) DEFAULT NULL,
  `document_no` varchar(64) DEFAULT NULL,
  `unit_rate_main` varbinary(255) DEFAULT NULL,
  `remarks` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`batch_entry_id`),
  KEY `payroll_date` (`payroll_date`),
  KEY `document_no` (`document_no`),
  KEY `deleted` (`deleted`),
  KEY `transaction_id` (`transaction_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4111 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_entry_batch_employee` */

DROP TABLE IF EXISTS `ww_payroll_entry_batch_employee`;

CREATE TABLE `ww_payroll_entry_batch_employee` (
  `batch_entry_id` int(11) NOT NULL,
  `document_no` varchar(64) DEFAULT NULL,
  `id_number` varchar(16) DEFAULT '',
  `employee_id` int(11) NOT NULL,
  `quantity` varbinary(255) DEFAULT NULL,
  `unit_rate` varbinary(255) DEFAULT NULL,
  `amount` varbinary(255) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` tinyint(1) DEFAULT '0',
  KEY `batch_entry_id` (`batch_entry_id`),
  KEY `employee_id` (`employee_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_entry_recurring` */

DROP TABLE IF EXISTS `ww_payroll_entry_recurring`;

CREATE TABLE `ww_payroll_entry_recurring` (
  `recurring_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `transaction_code` varchar(64) DEFAULT NULL,
  `transaction_id` int(11) NOT NULL,
  `document_no` varchar(32) CHARACTER SET latin1 DEFAULT NULL,
  `date_from` date DEFAULT NULL,
  `date_to` date DEFAULT NULL,
  `week` varchar(16) CHARACTER SET latin1 DEFAULT NULL,
  `amount` varbinary(255) DEFAULT NULL,
  `transaction_type_id` int(1) NOT NULL,
  `transaction_method` varchar(64) DEFAULT NULL,
  `transaction_method_id` int(1) NOT NULL,
  `remarks` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `account_id` int(11) DEFAULT NULL,
  `account_code` varchar(32) CHARACTER SET latin1 DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`recurring_id`),
  KEY `transaction_id` (`transaction_id`),
  KEY `document_no` (`document_no`),
  KEY `date_from` (`date_from`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=261 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_entry_recurring_employee` */

DROP TABLE IF EXISTS `ww_payroll_entry_recurring_employee`;

CREATE TABLE `ww_payroll_entry_recurring_employee` (
  `recurring_id` int(11) unsigned NOT NULL,
  `document_no` varchar(64) NOT NULL,
  `id_number` varchar(16) DEFAULT '',
  `employee_id` int(11) NOT NULL,
  `quantity` varbinary(255) DEFAULT NULL,
  `amount` varbinary(255) NOT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` tinyint(1) DEFAULT '0',
  KEY `recurring_id` (`recurring_id`),
  KEY `employee_id` (`employee_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_govt_contribution` */

DROP TABLE IF EXISTS `ww_payroll_govt_contribution`;

CREATE TABLE `ww_payroll_govt_contribution` (
  `govt_contribution_id` tinyint(11) NOT NULL AUTO_INCREMENT,
  `code` varchar(20) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL,
  `from` double(15,2) NOT NULL DEFAULT '0.00',
  `to` double(15,2) NOT NULL DEFAULT '0.00',
  `eeshare` double(15,2) NOT NULL DEFAULT '0.00' COMMENT 'employee share',
  `ershare` double(15,2) NOT NULL DEFAULT '0.00' COMMENT 'employer share',
  `ec` double(15,2) NOT NULL DEFAULT '0.00',
  `msb_id` int(2) NOT NULL DEFAULT '0',
  `deleted` int(1) DEFAULT '0',
  PRIMARY KEY (`govt_contribution_id`)
) ENGINE=InnoDB AUTO_INCREMENT=64 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ww_payroll_inserted_from` */

DROP TABLE IF EXISTS `ww_payroll_inserted_from`;

CREATE TABLE `ww_payroll_inserted_from` (
  `inserted_from_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `inserted_from` varchar(64) CHARACTER SET latin1 NOT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`inserted_from_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_interest_type` */

DROP TABLE IF EXISTS `ww_payroll_interest_type`;

CREATE TABLE `ww_payroll_interest_type` (
  `interest_type_id` int(1) NOT NULL AUTO_INCREMENT,
  `interest_type` varchar(64) CHARACTER SET latin1 NOT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`interest_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_late_exemption` */

DROP TABLE IF EXISTS `ww_payroll_late_exemption`;

CREATE TABLE `ww_payroll_late_exemption` (
  `payroll_late_exemption_id` int(11) NOT NULL AUTO_INCREMENT,
  `company_id` int(11) DEFAULT NULL,
  `employment_type_id` int(11) DEFAULT NULL,
  `lates_exemption` decimal(5,2) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` date DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`payroll_late_exemption_id`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;

/*Table structure for table `ww_payroll_leave_conversion` */

DROP TABLE IF EXISTS `ww_payroll_leave_conversion`;

CREATE TABLE `ww_payroll_leave_conversion` (
  `leave_conversion_id` int(11) NOT NULL AUTO_INCREMENT,
  `company_id` int(11) NOT NULL,
  `job_rank_id` int(11) NOT NULL,
  `form_id` int(11) NOT NULL,
  `convertible` decimal(5,2) NOT NULL DEFAULT '0.00',
  `employment_status_id` varchar(255) DEFAULT NULL,
  `employment_type_id` text NOT NULL,
  `carry_over` decimal(5,2) DEFAULT '0.00',
  `nontax` decimal(5,2) NOT NULL DEFAULT '0.00',
  `taxable` decimal(5,2) NOT NULL DEFAULT '0.00',
  `forfeited` decimal(5,2) NOT NULL DEFAULT '0.00',
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`leave_conversion_id`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_leave_conversion_period` */

DROP TABLE IF EXISTS `ww_payroll_leave_conversion_period`;

CREATE TABLE `ww_payroll_leave_conversion_period` (
  `leave_conversion_period_id` int(11) NOT NULL AUTO_INCREMENT,
  `payroll_date` date NOT NULL,
  `year` int(4) NOT NULL,
  `apply_to_id` int(11) NOT NULL,
  `status` tinyint(1) NOT NULL DEFAULT '1',
  `form_id` int(11) DEFAULT NULL,
  `nontax_leave_id` int(11) DEFAULT NULL,
  `taxable_leave_id` int(11) DEFAULT NULL,
  `remarks` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`leave_conversion_period_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_leave_conversion_period_apply_to` */

DROP TABLE IF EXISTS `ww_payroll_leave_conversion_period_apply_to`;

CREATE TABLE `ww_payroll_leave_conversion_period_apply_to` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `leave_conversion_id` int(11) NOT NULL,
  `apply_to` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_loan` */

DROP TABLE IF EXISTS `ww_payroll_loan`;

CREATE TABLE `ww_payroll_loan` (
  `loan_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `loan_code` varchar(64) DEFAULT NULL,
  `loan` varchar(128) NOT NULL,
  `principal_transid` int(1) DEFAULT NULL,
  `amortization_transid` int(1) DEFAULT NULL,
  `interest_transid` int(1) DEFAULT NULL,
  `loan_type_id` int(1) DEFAULT NULL,
  `loan_mode_id` int(1) DEFAULT NULL,
  `amount_limit` decimal(9,2) DEFAULT '0.00',
  `interest` decimal(9,2) DEFAULT '0.00',
  `interest_type_id` int(1) DEFAULT NULL,
  `debit` int(1) DEFAULT NULL,
  `credit` int(1) DEFAULT NULL,
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` datetime DEFAULT NULL,
  `modified_on` int(11) DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`loan_id`),
  UNIQUE KEY `loan_code_loan_deleted` (`loan_code`,`loan`,`deleted`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_loan_interest_type` */

DROP TABLE IF EXISTS `ww_payroll_loan_interest_type`;

CREATE TABLE `ww_payroll_loan_interest_type` (
  `interest_type_id` int(11) NOT NULL AUTO_INCREMENT,
  `interest_type` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `description` text,
  `deleted` int(1) DEFAULT '0',
  PRIMARY KEY (`interest_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_loan_mode` */

DROP TABLE IF EXISTS `ww_payroll_loan_mode`;

CREATE TABLE `ww_payroll_loan_mode` (
  `loan_mode_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `loan_mode` varchar(128) DEFAULT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`loan_mode_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_loan_status` */

DROP TABLE IF EXISTS `ww_payroll_loan_status`;

CREATE TABLE `ww_payroll_loan_status` (
  `loan_status_id` int(1) NOT NULL AUTO_INCREMENT,
  `loan_status` varchar(32) DEFAULT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`loan_status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_loan_type` */

DROP TABLE IF EXISTS `ww_payroll_loan_type`;

CREATE TABLE `ww_payroll_loan_type` (
  `loan_type_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `loan_type` varchar(128) DEFAULT NULL,
  `loan_code` varchar(3) DEFAULT NULL,
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`loan_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_location` */

DROP TABLE IF EXISTS `ww_payroll_location`;

CREATE TABLE `ww_payroll_location` (
  `payroll_location_id` int(11) NOT NULL AUTO_INCREMENT,
  `payroll_location_code` varchar(32) DEFAULT NULL,
  `payroll_location_label` varchar(100) DEFAULT NULL,
  `min_wage_amt` decimal(12,2) DEFAULT '0.00',
  `ecola_amt` decimal(12,2) DEFAULT '0.00',
  `ecola_amt_month` decimal(12,2) DEFAULT '0.00',
  `description` text,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`payroll_location_id`),
  UNIQUE KEY `payroll_location_code` (`payroll_location_code`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_overtime` */

DROP TABLE IF EXISTS `ww_payroll_overtime`;

CREATE TABLE `ww_payroll_overtime` (
  `overtime_id` int(11) NOT NULL AUTO_INCREMENT,
  `overtime_code` varchar(32) NOT NULL DEFAULT '',
  `overtime` varchar(64) DEFAULT NULL,
  `overtime_rate` decimal(5,2) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`overtime_id`)
) ENGINE=InnoDB AUTO_INCREMENT=49 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_overtime_rates` */

DROP TABLE IF EXISTS `ww_payroll_overtime_rates`;

CREATE TABLE `ww_payroll_overtime_rates` (
  `overtime_rate_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `company_id` int(1) NOT NULL DEFAULT '0',
  `partner_status_id` int(1) NOT NULL DEFAULT '0',
  `overtime_id` int(11) NOT NULL,
  `overtime_code` varchar(32) NOT NULL DEFAULT '',
  `overtime` varchar(64) DEFAULT NULL,
  `overtime_rate` decimal(5,3) DEFAULT NULL,
  `sequence` tinyint(1) DEFAULT NULL,
  `class` varchar(32) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` datetime DEFAULT NULL,
  `modified_on` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`overtime_rate_id`),
  UNIQUE KEY `company_partner_overtime` (`company_id`,`partner_status_id`,`overtime_code`),
  KEY `company_id` (`company_id`),
  KEY `partner_status_id` (`partner_status_id`),
  KEY `overtime_code` (`overtime_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=910 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_overtime_rates_amount` */

DROP TABLE IF EXISTS `ww_payroll_overtime_rates_amount`;

CREATE TABLE `ww_payroll_overtime_rates_amount` (
  `overtime_rate_amount_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `company_id` int(1) NOT NULL DEFAULT '0',
  `partner_status_id` int(1) NOT NULL DEFAULT '0',
  `employment_type_id` int(11) DEFAULT NULL,
  `overtime_location_id` int(11) DEFAULT NULL,
  `overtime_id` int(11) NOT NULL,
  `overtime_code` varchar(32) NOT NULL DEFAULT '',
  `overtime` varchar(64) DEFAULT NULL,
  `overtime_amount` decimal(9,3) DEFAULT NULL,
  `sequence` tinyint(1) DEFAULT NULL,
  `class` varchar(32) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` datetime DEFAULT NULL,
  `modified_on` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`overtime_rate_amount_id`),
  KEY `company_id` (`company_id`),
  KEY `partner_status_id` (`partner_status_id`),
  KEY `overtime_code` (`overtime_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=427 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_overtime_rates_default` */

DROP TABLE IF EXISTS `ww_payroll_overtime_rates_default`;

CREATE TABLE `ww_payroll_overtime_rates_default` (
  `overtime_rate_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `company_id` int(1) NOT NULL DEFAULT '0',
  `partner_status_id` int(1) NOT NULL DEFAULT '0',
  `overtime_id` int(11) NOT NULL,
  `overtime_code` varchar(32) NOT NULL DEFAULT '',
  `overtime` varchar(64) DEFAULT NULL,
  `overtime_rate` decimal(5,3) DEFAULT NULL,
  `sequence` tinyint(1) DEFAULT NULL,
  `class` varchar(32) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` datetime DEFAULT NULL,
  `modified_on` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`overtime_rate_id`),
  UNIQUE KEY `company_partner_overtime` (`company_id`,`partner_status_id`,`overtime_code`),
  KEY `company_id` (`company_id`),
  KEY `partner_status_id` (`partner_status_id`),
  KEY `overtime_code` (`overtime_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_partners` */

DROP TABLE IF EXISTS `ww_payroll_partners`;

CREATE TABLE `ww_payroll_partners` (
  `user_id` int(11) unsigned NOT NULL,
  `company_id` int(11) DEFAULT NULL,
  `taxcode_id` int(1) DEFAULT NULL,
  `taxcode_id_org` int(11) DEFAULT NULL,
  `payroll_rate_type_id` int(1) DEFAULT NULL,
  `payroll_schedule_id` int(1) DEFAULT NULL,
  `total_year_days` decimal(5,2) DEFAULT NULL,
  `whole_half` tinyint(1) DEFAULT '0' COMMENT 'if 0 whole salary',
  `payout_schedule` tinyint(1) DEFAULT '0' COMMENT 'if 0 payout schedule on 15 or else end of the month',
  `salary` varbinary(255) DEFAULT NULL,
  `minimum_takehome` varbinary(255) DEFAULT NULL,
  `bank_id` int(11) DEFAULT NULL,
  `bank_account` varchar(32) DEFAULT NULL,
  `quitclaim` tinyint(1) DEFAULT '0',
  `location_id` int(11) DEFAULT NULL,
  `sss_no` varchar(16) DEFAULT NULL,
  `sss_mode` int(1) DEFAULT NULL,
  `sss_week` varchar(32) DEFAULT NULL,
  `sss_amount` varbinary(255) DEFAULT NULL,
  `hdmf_no` varchar(16) DEFAULT NULL,
  `hdmf_mode` int(1) DEFAULT NULL,
  `hdmf_week` varchar(32) DEFAULT NULL,
  `hdmf_amount` varbinary(255) DEFAULT NULL,
  `phic_no` varchar(16) DEFAULT NULL,
  `phic_mode` int(11) DEFAULT NULL,
  `phic_week` varchar(32) DEFAULT NULL,
  `phic_amount` varbinary(255) DEFAULT NULL,
  `ecola_week` varchar(32) DEFAULT NULL,
  `tin` varchar(16) DEFAULT NULL,
  `tax_mode` int(1) DEFAULT NULL,
  `tax_amount` varbinary(255) DEFAULT NULL,
  `tax_week` varchar(32) DEFAULT NULL,
  `account_type_id` int(11) DEFAULT '2',
  `payment_type_id` int(11) DEFAULT '2',
  `fixed_rate` tinyint(1) DEFAULT '0',
  `sensitivity` tinyint(1) DEFAULT '1',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `remain` int(11) DEFAULT NULL,
  `attendance_base` tinyint(1) DEFAULT '1',
  `on_hold` tinyint(1) DEFAULT '0',
  `hold_payroll` tinyint(1) DEFAULT '0',
  `non_swipe` tinyint(1) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_partners_contribution` */

DROP TABLE IF EXISTS `ww_payroll_partners_contribution`;

CREATE TABLE `ww_payroll_partners_contribution` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `period_id` int(11) NOT NULL,
  `payroll_date` date NOT NULL,
  `user_id` int(11) NOT NULL,
  `transaction_id` int(11) DEFAULT NULL,
  `employee` decimal(10,2) DEFAULT '0.00',
  `company` decimal(10,2) DEFAULT '0.00',
  `ec` decimal(10,2) DEFAULT '0.00',
  `msb_id` int(11) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `create_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_partners_loan` */

DROP TABLE IF EXISTS `ww_payroll_partners_loan`;

CREATE TABLE `ww_payroll_partners_loan` (
  `partner_loan_id` int(11) NOT NULL AUTO_INCREMENT,
  `id_number` varchar(64) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `loan_code` varchar(64) DEFAULT NULL,
  `loan_id` int(11) DEFAULT NULL,
  `loan_status` varchar(64) DEFAULT NULL,
  `loan_status_id` int(1) DEFAULT NULL,
  `description` text,
  `entry_date` date DEFAULT NULL,
  `remarks` text,
  `loan_principal` varbinary(255) DEFAULT NULL,
  `amount` varbinary(255) DEFAULT NULL,
  `interest` varbinary(255) DEFAULT NULL,
  `interest_type_id` int(1) DEFAULT NULL,
  `no_payments` int(1) DEFAULT NULL,
  `no_payments_paid` int(1) DEFAULT NULL,
  `no_payments_remaining` int(1) DEFAULT NULL,
  `beginning_balance` varbinary(255) DEFAULT NULL,
  `running_balance` varbinary(255) DEFAULT NULL,
  `release_date` date DEFAULT NULL,
  `payment_mode` varchar(64) DEFAULT NULL,
  `payment_mode_id` int(1) DEFAULT NULL,
  `start_date` date DEFAULT NULL,
  `releasing_debit_account_id` int(11) DEFAULT NULL,
  `releasing_credit_account_id` int(11) DEFAULT NULL,
  `system_amortization` varbinary(255) DEFAULT NULL,
  `user_amortization` varbinary(255) DEFAULT NULL,
  `system_interest` varbinary(255) DEFAULT NULL,
  `user_interest` varbinary(255) DEFAULT NULL,
  `total_arrears` varbinary(255) DEFAULT NULL,
  `total_amount_paid` varbinary(255) DEFAULT NULL,
  `last_payment_date` date DEFAULT NULL,
  `amortization_credit_account_id` int(11) DEFAULT NULL,
  `interest_credit_account_id` int(11) DEFAULT NULL,
  `interest_amortization_credit_account_id` int(11) DEFAULT NULL,
  `week` varchar(64) DEFAULT NULL,
  `previous_employee_loan_id` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` int(1) DEFAULT '0',
  PRIMARY KEY (`partner_loan_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1551 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_partners_loan_payment` */

DROP TABLE IF EXISTS `ww_payroll_partners_loan_payment`;

CREATE TABLE `ww_payroll_partners_loan_payment` (
  `loan_payment_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `partner_loan_id` int(11) NOT NULL,
  `payroll_date` date DEFAULT NULL,
  `type` varchar(10) DEFAULT NULL,
  `amount` varbinary(255) DEFAULT NULL,
  `paid` tinyint(1) DEFAULT '0',
  `date_paid` date DEFAULT NULL,
  `balance` decimal(12,2) DEFAULT '0.00',
  `sbr_no` varchar(16) DEFAULT NULL,
  `sbr_date` date DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`loan_payment_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13190 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_partners_previous_employer` */

DROP TABLE IF EXISTS `ww_payroll_partners_previous_employer`;

CREATE TABLE `ww_payroll_partners_previous_employer` (
  `payroll_partners_previous_employer_id` int(11) NOT NULL AUTO_INCREMENT,
  `company_name` varchar(255) DEFAULT NULL,
  `address` varchar(255) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `prev_nontax_thirten_month` varbinary(255) DEFAULT NULL,
  `prev_nontax_deminimis` varbinary(255) DEFAULT NULL,
  `prev_nontax_sss_etc` varchar(255) DEFAULT NULL,
  `prev_nontax_salaries` varbinary(255) DEFAULT NULL,
  `prev_nontax_comp_income` varbinary(255) DEFAULT NULL,
  `prev_taxable_basic_salary` varbinary(255) DEFAULT NULL,
  `prev_taxable_thirten_month` varbinary(255) DEFAULT NULL,
  `prev_taxable_salaries` varbinary(255) DEFAULT NULL,
  `prev_total_taxable` varbinary(255) DEFAULT NULL,
  `prev_tax_w_held` varbinary(255) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` int(1) DEFAULT '0',
  PRIMARY KEY (`payroll_partners_previous_employer_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_paycode` */

DROP TABLE IF EXISTS `ww_payroll_paycode`;

CREATE TABLE `ww_payroll_paycode` (
  `paycode_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `paycode` varchar(64) CHARACTER SET latin1 NOT NULL,
  `description` text CHARACTER SET latin1,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`paycode_id`),
  KEY `paycode` (`paycode`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_payment_mode` */

DROP TABLE IF EXISTS `ww_payroll_payment_mode`;

CREATE TABLE `ww_payroll_payment_mode` (
  `payment_mode_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `payment_mode` varchar(64) CHARACTER SET latin1 NOT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`payment_mode_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_payment_type` */

DROP TABLE IF EXISTS `ww_payroll_payment_type`;

CREATE TABLE `ww_payroll_payment_type` (
  `payment_type_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `payment_type` varchar(64) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`payment_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_payout_schedule` */

DROP TABLE IF EXISTS `ww_payroll_payout_schedule`;

CREATE TABLE `ww_payroll_payout_schedule` (
  `pay_out_schedule_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `schedule` varchar(64) CHARACTER SET latin1 NOT NULL,
  `description` text CHARACTER SET latin1,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`pay_out_schedule_id`),
  KEY `paycode` (`schedule`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_period` */

DROP TABLE IF EXISTS `ww_payroll_period`;

CREATE TABLE `ww_payroll_period` (
  `payroll_period_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `period_status_id` tinyint(1) DEFAULT '1',
  `payroll_date` date DEFAULT NULL,
  `date_from` date DEFAULT NULL,
  `date_to` date DEFAULT NULL,
  `date_closing` date DEFAULT NULL,
  `week` int(1) DEFAULT NULL,
  `annualized` tinyint(1) DEFAULT '0',
  `payroll_schedule_id` int(11) DEFAULT NULL,
  `period_processing_type_id` int(11) DEFAULT '1',
  `include_basic_and_allowances` tinyint(1) DEFAULT '0',
  `include_13th_month_pay` tinyint(1) DEFAULT '0',
  `apply_to_id` int(11) DEFAULT NULL,
  `posting_date` date DEFAULT NULL,
  `remarks` text,
  `last_processed` datetime DEFAULT NULL,
  `bonus_tag` tinyint(1) DEFAULT '0',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`payroll_period_id`),
  KEY `payroll_date` (`payroll_date`),
  KEY `date_from` (`date_from`),
  KEY `date_to` (`date_to`),
  KEY `period_status_id` (`period_status_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=1532 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_period_apply_to` */

DROP TABLE IF EXISTS `ww_payroll_period_apply_to`;

CREATE TABLE `ww_payroll_period_apply_to` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `payroll_period_id` int(11) NOT NULL,
  `apply_to` int(11) NOT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `last_processed` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8768 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_period_processing_type` */

DROP TABLE IF EXISTS `ww_payroll_period_processing_type`;

CREATE TABLE `ww_payroll_period_processing_type` (
  `period_processing_type_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `period_processing_type` varchar(64) CHARACTER SET latin1 NOT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`period_processing_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_period_status` */

DROP TABLE IF EXISTS `ww_payroll_period_status`;

CREATE TABLE `ww_payroll_period_status` (
  `period_status_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `period_status` varchar(64) NOT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`period_status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_phic_table` */

DROP TABLE IF EXISTS `ww_payroll_phic_table`;

CREATE TABLE `ww_payroll_phic_table` (
  `phic_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `from` decimal(10,2) NOT NULL DEFAULT '0.00',
  `to` decimal(10,2) NOT NULL DEFAULT '0.00',
  `eeshare` decimal(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employee share',
  `ershare` decimal(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employer share',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`phic_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ww_payroll_phic_table_org` */

DROP TABLE IF EXISTS `ww_payroll_phic_table_org`;

CREATE TABLE `ww_payroll_phic_table_org` (
  `phic_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `from` decimal(10,2) NOT NULL DEFAULT '0.00',
  `to` decimal(10,2) NOT NULL DEFAULT '0.00',
  `eeshare` decimal(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employee share',
  `ershare` decimal(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employer share',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`phic_id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ww_payroll_phic_table_updated` */

DROP TABLE IF EXISTS `ww_payroll_phic_table_updated`;

CREATE TABLE `ww_payroll_phic_table_updated` (
  `phic_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `from` decimal(10,2) NOT NULL DEFAULT '0.00',
  `to` decimal(10,2) NOT NULL DEFAULT '0.00',
  `eeshare` decimal(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employee share',
  `ershare` decimal(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employer share',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`phic_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ww_payroll_rate_type` */

DROP TABLE IF EXISTS `ww_payroll_rate_type`;

CREATE TABLE `ww_payroll_rate_type` (
  `payroll_rate_type_id` int(11) NOT NULL AUTO_INCREMENT,
  `payroll_rate_type` varchar(64) CHARACTER SET latin1 DEFAULT NULL,
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`payroll_rate_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_schedule` */

DROP TABLE IF EXISTS `ww_payroll_schedule`;

CREATE TABLE `ww_payroll_schedule` (
  `payroll_schedule_id` int(11) NOT NULL AUTO_INCREMENT,
  `payroll_schedule` varchar(64) CHARACTER SET latin1 DEFAULT NULL,
  `yearly` int(1) DEFAULT '0',
  `monthly` int(1) DEFAULT '0',
  `daily` int(1) DEFAULT '0',
  `piece_rate` int(1) DEFAULT '0',
  `commision` int(1) DEFAULT '0',
  `total_period_per_annum` int(1) DEFAULT '24',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`payroll_schedule_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_schedule_rate_divisor` */

DROP TABLE IF EXISTS `ww_payroll_schedule_rate_divisor`;

CREATE TABLE `ww_payroll_schedule_rate_divisor` (
  `payroll_rate_type_id` int(11) DEFAULT NULL,
  `payroll_schedule_id` int(11) DEFAULT NULL,
  `divisor` float DEFAULT NULL,
  `deleted` int(1) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_sss_table` */

DROP TABLE IF EXISTS `ww_payroll_sss_table`;

CREATE TABLE `ww_payroll_sss_table` (
  `sss_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `from` decimal(10,2) NOT NULL DEFAULT '0.00',
  `to` decimal(10,2) NOT NULL DEFAULT '0.00',
  `eeshare` decimal(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employee share',
  `ershare` decimal(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employer share',
  `ec` decimal(6,2) NOT NULL DEFAULT '0.00',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`sss_id`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_sss_table_org` */

DROP TABLE IF EXISTS `ww_payroll_sss_table_org`;

CREATE TABLE `ww_payroll_sss_table_org` (
  `sss_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `from` decimal(10,2) NOT NULL DEFAULT '0.00',
  `to` decimal(10,2) NOT NULL DEFAULT '0.00',
  `eeshare` decimal(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employee share',
  `ershare` decimal(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employer share',
  `ec` decimal(6,2) NOT NULL DEFAULT '0.00',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`sss_id`)
) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_tax_shield` */

DROP TABLE IF EXISTS `ww_payroll_tax_shield`;

CREATE TABLE `ww_payroll_tax_shield` (
  `tax_shield_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `job_class_id` int(11) NOT NULL DEFAULT '0',
  `max_amount` decimal(12,2) NOT NULL DEFAULT '0.00',
  `description` text,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`tax_shield_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_transaction` */

DROP TABLE IF EXISTS `ww_payroll_transaction`;

CREATE TABLE `ww_payroll_transaction` (
  `transaction_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `transaction_code` varchar(32) NOT NULL,
  `transaction_label` varchar(128) DEFAULT NULL,
  `transaction_class_id` int(1) DEFAULT '0',
  `transaction_type_id` int(1) DEFAULT '0',
  `debit_account_id` int(1) DEFAULT '0',
  `credit_account_id` int(1) DEFAULT '0',
  `debit_account` varchar(255) DEFAULT NULL,
  `credit_account` varchar(255) DEFAULT NULL,
  `per_annum_cap` decimal(15,2) DEFAULT '0.00',
  `priority_id` tinyint(1) DEFAULT '3',
  `is_bonus` tinyint(1) NOT NULL DEFAULT '0',
  `is_sss` tinyint(1) NOT NULL DEFAULT '0',
  `is_pagibig` tinyint(1) NOT NULL DEFAULT '0',
  `is_philhealth` tinyint(1) NOT NULL DEFAULT '0',
  `is_hazardpay` tinyint(1) NOT NULL DEFAULT '0',
  `is_holidaypay` tinyint(1) NOT NULL DEFAULT '0',
  `is_deminimis` tinyint(1) NOT NULL DEFAULT '0',
  `is_representation` tinyint(1) NOT NULL DEFAULT '0',
  `is_transportation` tinyint(1) NOT NULL DEFAULT '0',
  `is_cost_living` tinyint(1) NOT NULL DEFAULT '0',
  `is_fixed_housing` tinyint(1) NOT NULL DEFAULT '0',
  `is_commission` tinyint(1) NOT NULL DEFAULT '0',
  `is_profit_sharing` tinyint(1) NOT NULL DEFAULT '0',
  `is_fees` tinyint(1) NOT NULL DEFAULT '0',
  `show_in_movement` tinyint(1) DEFAULT NULL,
  `show_in_recruitment` tinyint(1) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`transaction_id`),
  KEY `transaction_code` (`transaction_code`),
  KEY `transaction_class_id` (`transaction_class_id`),
  KEY `transaction_type_id` (`transaction_type_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=292 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_transaction_class` */

DROP TABLE IF EXISTS `ww_payroll_transaction_class`;

CREATE TABLE `ww_payroll_transaction_class` (
  `transaction_class_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `transaction_class_code` varchar(32) NOT NULL,
  `transaction_class` varchar(128) NOT NULL,
  `regular_processing` tinyint(1) DEFAULT '0',
  `special_processing` tinyint(1) DEFAULT '0',
  `final_pay_processing` tinyint(1) DEFAULT '0',
  `is_recurring` tinyint(1) DEFAULT '0',
  `is_irregular` tinyint(1) DEFAULT '0',
  `is_loan` tinyint(1) DEFAULT '0',
  `is_bonus` tinyint(1) DEFAULT '0',
  `government_mandated` tinyint(1) DEFAULT '0',
  `filter_by` tinyint(1) NOT NULL DEFAULT '0',
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`transaction_class_id`),
  KEY `transaction_class_code` (`transaction_class_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_transaction_method` */

DROP TABLE IF EXISTS `ww_payroll_transaction_method`;

CREATE TABLE `ww_payroll_transaction_method` (
  `payroll_transaction_method_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `payroll_transaction_method` varchar(32) NOT NULL,
  `sequence` tinyint(1) DEFAULT '1',
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`payroll_transaction_method_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_transaction_method_bonus` */

DROP TABLE IF EXISTS `ww_payroll_transaction_method_bonus`;

CREATE TABLE `ww_payroll_transaction_method_bonus` (
  `payroll_transaction_method_bonus_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `payroll_transaction_method_bonus` varchar(32) NOT NULL,
  `sequence` tinyint(1) DEFAULT '1',
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`payroll_transaction_method_bonus_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_transaction_mode` */

DROP TABLE IF EXISTS `ww_payroll_transaction_mode`;

CREATE TABLE `ww_payroll_transaction_mode` (
  `payroll_transaction_mode_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `payroll_transaction_mode` varchar(32) NOT NULL,
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`payroll_transaction_mode_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_transaction_mode_tax` */

DROP TABLE IF EXISTS `ww_payroll_transaction_mode_tax`;

CREATE TABLE `ww_payroll_transaction_mode_tax` (
  `payroll_transaction_mode_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `payroll_transaction_mode` varchar(32) NOT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`payroll_transaction_mode_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_transaction_priority` */

DROP TABLE IF EXISTS `ww_payroll_transaction_priority`;

CREATE TABLE `ww_payroll_transaction_priority` (
  `priority_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `priority` varchar(32) NOT NULL,
  `priority_index` tinyint(1) DEFAULT '1',
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`priority_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_transaction_type` */

DROP TABLE IF EXISTS `ww_payroll_transaction_type`;

CREATE TABLE `ww_payroll_transaction_type` (
  `transaction_type_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `transaction_type` varchar(32) NOT NULL,
  `operation` varchar(1) NOT NULL DEFAULT '+',
  `description` text,
  `sort_order` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`transaction_type_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_upload_results` */

DROP TABLE IF EXISTS `ww_payroll_upload_results`;

CREATE TABLE `ww_payroll_upload_results` (
  `result_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `category_id` int(11) DEFAULT NULL,
  `filepath` varchar(128) DEFAULT NULL,
  `filetype` varchar(16) DEFAULT NULL,
  `remarks` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`result_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_week` */

DROP TABLE IF EXISTS `ww_payroll_week`;

CREATE TABLE `ww_payroll_week` (
  `week_id` int(1) NOT NULL AUTO_INCREMENT,
  `week` varchar(8) NOT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`week_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_payroll_whtax_table` */

DROP TABLE IF EXISTS `ww_payroll_whtax_table`;

CREATE TABLE `ww_payroll_whtax_table` (
  `whtax_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `payroll_schedule_id` int(1) NOT NULL,
  `taxcode_id` int(1) NOT NULL,
  `salary_from` decimal(10,2) NOT NULL DEFAULT '0.00',
  `salary_to` decimal(10,2) NOT NULL DEFAULT '0.00',
  `fixed_amount` decimal(10,2) NOT NULL DEFAULT '0.00',
  `excess_percentage` decimal(6,2) NOT NULL DEFAULT '0.00',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`whtax_id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8 ROW_FORMAT=FIXED;

/*Table structure for table `ww_payroll_whtax_table_org` */

DROP TABLE IF EXISTS `ww_payroll_whtax_table_org`;

CREATE TABLE `ww_payroll_whtax_table_org` (
  `whtax_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `payroll_schedule_id` int(1) NOT NULL,
  `taxcode_id` int(1) NOT NULL,
  `salary_from` decimal(10,2) NOT NULL DEFAULT '0.00',
  `salary_to` decimal(10,2) NOT NULL DEFAULT '0.00',
  `fixed_amount` decimal(10,2) NOT NULL DEFAULT '0.00',
  `excess_percentage` decimal(6,2) NOT NULL DEFAULT '0.00',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`whtax_id`)
) ENGINE=InnoDB AUTO_INCREMENT=193 DEFAULT CHARSET=utf8 ROW_FORMAT=FIXED;

/*Table structure for table `ww_payroll_whtax_table_updated` */

DROP TABLE IF EXISTS `ww_payroll_whtax_table_updated`;

CREATE TABLE `ww_payroll_whtax_table_updated` (
  `whtax_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `payroll_schedule_id` int(1) NOT NULL,
  `taxcode_id` int(1) NOT NULL,
  `salary_from` decimal(10,2) NOT NULL DEFAULT '0.00',
  `salary_to` decimal(10,2) NOT NULL DEFAULT '0.00',
  `fixed_amount` decimal(10,2) NOT NULL DEFAULT '0.00',
  `excess_percentage` decimal(6,2) NOT NULL DEFAULT '0.00',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`whtax_id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8 ROW_FORMAT=FIXED;

/*Table structure for table `ww_payroll_year` */

DROP TABLE IF EXISTS `ww_payroll_year`;

CREATE TABLE `ww_payroll_year` (
  `payroll_year_id` int(11) NOT NULL AUTO_INCREMENT,
  `payroll_year` varchar(4) NOT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`payroll_year_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal` */

DROP TABLE IF EXISTS `ww_performance_appraisal`;

CREATE TABLE `ww_performance_appraisal` (
  `appraisal_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `planning_id` int(1) NOT NULL,
  `year` int(1) NOT NULL DEFAULT '1900',
  `date_from` date NOT NULL DEFAULT '0000-00-00',
  `date_to` date NOT NULL DEFAULT '0000-00-00',
  `performance_type_id` int(1) NOT NULL DEFAULT '0',
  `template_id` varchar(64) DEFAULT NULL,
  `employment_status_id` varchar(64) DEFAULT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `notes` text,
  `filter_by` int(1) DEFAULT '0',
  `filter_id` text,
  `planning_created_by` int(11) DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`appraisal_id`),
  KEY `location` (`year`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_applicable` */

DROP TABLE IF EXISTS `ww_performance_appraisal_applicable`;

CREATE TABLE `ww_performance_appraisal_applicable` (
  `appraisal_id` int(11) unsigned NOT NULL,
  `template_id` int(1) unsigned NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `fullname` varchar(64) DEFAULT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `cs_status` tinyint(1) DEFAULT '0',
  `to_user_id` int(11) DEFAULT '0',
  `appraisee_acceptance` tinyint(1) DEFAULT '0',
  `appraisee_remarks` varchar(255) DEFAULT NULL,
  `date` date DEFAULT NULL,
  `supervisor_summary` text,
  `partner_summary` text,
  `approved_date` date DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  PRIMARY KEY (`appraisal_id`,`template_id`,`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_applicable_user` */

DROP TABLE IF EXISTS `ww_performance_appraisal_applicable_user`;

CREATE TABLE `ww_performance_appraisal_applicable_user` (
  `appraisal_id` int(11) unsigned NOT NULL,
  `template_id` int(11) unsigned NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `fullname` varchar(64) DEFAULT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `to_user_id` int(11) DEFAULT '0',
  `date` date DEFAULT NULL,
  `selfrate_date` date DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  PRIMARY KEY (`appraisal_id`,`template_id`,`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_approver` */

DROP TABLE IF EXISTS `ww_performance_appraisal_approver`;

CREATE TABLE `ww_performance_appraisal_approver` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `appraisal_id` int(11) unsigned NOT NULL DEFAULT '0',
  `appraisee_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `approver_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) CHARACTER SET latin1 DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '1',
  `performance_status_id` int(1) DEFAULT '0',
  `performance_status` varchar(16) DEFAULT '',
  `remarks` varchar(255) DEFAULT NULL,
  `approved_date` datetime DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT '0000-00-00 00:00:00',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `forms_user` (`appraisal_id`,`user_id`,`sequence`,`appraisee_id`),
  KEY `forms_id` (`appraisal_id`),
  KEY `user_id` (`user_id`),
  KEY `sequence` (`sequence`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_contributor` */

DROP TABLE IF EXISTS `ww_performance_appraisal_contributor`;

CREATE TABLE `ww_performance_appraisal_contributor` (
  `appraisal_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `template_section_id` int(1) NOT NULL,
  `contributor_id` int(11) NOT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `finalized` tinyint(1) DEFAULT '0',
  `modified_date` datetime DEFAULT NULL,
  PRIMARY KEY (`appraisal_id`,`user_id`,`template_section_id`,`contributor_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_contributor_fields` */

DROP TABLE IF EXISTS `ww_performance_appraisal_contributor_fields`;

CREATE TABLE `ww_performance_appraisal_contributor_fields` (
  `appraisal_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `contributor_id` int(11) DEFAULT NULL,
  `item_id` int(11) DEFAULT NULL,
  `section_column_id` int(11) DEFAULT NULL,
  `value` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_contributor_notes` */

DROP TABLE IF EXISTS `ww_performance_appraisal_contributor_notes`;

CREATE TABLE `ww_performance_appraisal_contributor_notes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `appraisal_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `note_to` int(11) DEFAULT NULL,
  `note` text,
  `section_id` int(11) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_fields` */

DROP TABLE IF EXISTS `ww_performance_appraisal_fields`;

CREATE TABLE `ww_performance_appraisal_fields` (
  `appraisal_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `item_id` int(11) DEFAULT NULL,
  `section_column_id` int(11) DEFAULT NULL,
  `value` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_logs` */

DROP TABLE IF EXISTS `ww_performance_appraisal_logs`;

CREATE TABLE `ww_performance_appraisal_logs` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `appraisal_id` int(11) unsigned NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `status_id` int(1) DEFAULT '0',
  `cs_status_id` int(1) DEFAULT '0',
  `to_user_id` int(11) DEFAULT NULL,
  `to_user` varchar(64) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_pdp` */

DROP TABLE IF EXISTS `ww_performance_appraisal_pdp`;

CREATE TABLE `ww_performance_appraisal_pdp` (
  `appraisal_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `item_id` int(11) DEFAULT NULL,
  `column_id` int(11) DEFAULT NULL,
  `library_id` int(11) DEFAULT NULL,
  `date` text,
  `comment` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_personnel_action` */

DROP TABLE IF EXISTS `ww_performance_appraisal_personnel_action`;

CREATE TABLE `ww_performance_appraisal_personnel_action` (
  `appraisal_id` int(11) unsigned NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `recommendation_id` int(1) DEFAULT '0',
  `date` date DEFAULT NULL,
  `position_id` int(11) DEFAULT NULL,
  `others` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_recommendation` */

DROP TABLE IF EXISTS `ww_performance_appraisal_recommendation`;

CREATE TABLE `ww_performance_appraisal_recommendation` (
  `recommendation_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `recommendation` varchar(64) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`recommendation_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_reminder` */

DROP TABLE IF EXISTS `ww_performance_appraisal_reminder`;

CREATE TABLE `ww_performance_appraisal_reminder` (
  `reminder_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `appraisal_id` int(11) NOT NULL,
  `notification_id` int(1) NOT NULL DEFAULT '0',
  `date` date NOT NULL DEFAULT '0000-00-00',
  `status_id` tinyint(1) DEFAULT '1',
  `file` varchar(256) DEFAULT '',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`reminder_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_self_review` */

DROP TABLE IF EXISTS `ww_performance_appraisal_self_review`;

CREATE TABLE `ww_performance_appraisal_self_review` (
  `appraisal_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `accomplishments` text,
  `evidences` text,
  `areas_to_improve` text,
  `items_to_address` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_appraisal_user_fields` */

DROP TABLE IF EXISTS `ww_performance_appraisal_user_fields`;

CREATE TABLE `ww_performance_appraisal_user_fields` (
  `appraisal_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `item_id` int(11) DEFAULT NULL,
  `section_column_id` int(11) DEFAULT NULL,
  `value` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_contributor_status` */

DROP TABLE IF EXISTS `ww_performance_contributor_status`;

CREATE TABLE `ww_performance_contributor_status` (
  `cs_stat_id` int(11) NOT NULL AUTO_INCREMENT,
  `cs_stat` varchar(64) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`cs_stat_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning` */

DROP TABLE IF EXISTS `ww_performance_planning`;

CREATE TABLE `ww_performance_planning` (
  `planning_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `year` int(1) NOT NULL DEFAULT '1900',
  `date_from` date NOT NULL DEFAULT '0000-00-00',
  `date_to` date NOT NULL DEFAULT '0000-00-00',
  `performance_type_id` int(1) NOT NULL DEFAULT '0',
  `template_id` varchar(64) DEFAULT NULL,
  `employment_status_id` varchar(64) NOT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `notes` text,
  `immediate_remarks` text,
  `filter_by` int(1) DEFAULT '0',
  `filter_id` text,
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`planning_id`),
  KEY `location` (`year`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=352 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning_applicable` */

DROP TABLE IF EXISTS `ww_performance_planning_applicable`;

CREATE TABLE `ww_performance_planning_applicable` (
  `planning_id` int(11) unsigned NOT NULL,
  `template_id` int(11) unsigned NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `fullname` varchar(64) DEFAULT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `to_user_id` int(11) DEFAULT '0',
  `appraisee_acceptance` tinyint(1) DEFAULT '0',
  `appraisee_remarks` text,
  `approved_date` date DEFAULT NULL,
  `date` date DEFAULT NULL,
  PRIMARY KEY (`planning_id`,`template_id`,`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning_applicable_fields` */

DROP TABLE IF EXISTS `ww_performance_planning_applicable_fields`;

CREATE TABLE `ww_performance_planning_applicable_fields` (
  `planning_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `item_id` int(11) DEFAULT NULL,
  `section_column_id` int(11) DEFAULT NULL,
  `value` text,
  KEY `item_id` (`item_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning_applicable_fields_header` */

DROP TABLE IF EXISTS `ww_performance_planning_applicable_fields_header`;

CREATE TABLE `ww_performance_planning_applicable_fields_header` (
  `planning_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `item_id` int(11) DEFAULT NULL,
  `section_column_id` int(11) DEFAULT NULL,
  `value` text,
  KEY `item_id` (`item_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning_applicable_items` */

DROP TABLE IF EXISTS `ww_performance_planning_applicable_items`;

CREATE TABLE `ww_performance_planning_applicable_items` (
  `item_id` int(11) NOT NULL AUTO_INCREMENT,
  `planning_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `section_column_id` int(11) DEFAULT NULL,
  `item` varchar(256) DEFAULT NULL,
  `sequence` int(11) DEFAULT NULL,
  `parent_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`item_id`)
) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning_applicable_items_header` */

DROP TABLE IF EXISTS `ww_performance_planning_applicable_items_header`;

CREATE TABLE `ww_performance_planning_applicable_items_header` (
  `item_id` int(11) NOT NULL AUTO_INCREMENT,
  `planning_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `section_column_id` int(11) DEFAULT NULL,
  `item` varchar(256) DEFAULT NULL,
  `sequence` int(11) DEFAULT NULL,
  `parent_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`item_id`)
) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning_applicable_status` */

DROP TABLE IF EXISTS `ww_performance_planning_applicable_status`;

CREATE TABLE `ww_performance_planning_applicable_status` (
  `applicable_status_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `status` varchar(255) NOT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`applicable_status_id`,`status`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning_approver` */

DROP TABLE IF EXISTS `ww_performance_planning_approver`;

CREATE TABLE `ww_performance_planning_approver` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `planning_id` int(11) unsigned NOT NULL DEFAULT '0',
  `appraisee_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `approver_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) CHARACTER SET latin1 DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '1',
  `performance_status_id` int(1) DEFAULT '0',
  `performance_status` varchar(16) DEFAULT '',
  `approved_date` datetime DEFAULT NULL,
  `disapproved_date` datetime DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT '0000-00-00 00:00:00',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `forms_user` (`planning_id`,`user_id`,`sequence`,`appraisee_id`),
  KEY `forms_id` (`planning_id`),
  KEY `user_id` (`user_id`),
  KEY `sequence` (`sequence`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning_crowdsource` */

DROP TABLE IF EXISTS `ww_performance_planning_crowdsource`;

CREATE TABLE `ww_performance_planning_crowdsource` (
  `planning_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `section_id` int(11) DEFAULT NULL,
  `crowdsource_user_id` varchar(64) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning_filter` */

DROP TABLE IF EXISTS `ww_performance_planning_filter`;

CREATE TABLE `ww_performance_planning_filter` (
  `filter_id` int(1) NOT NULL AUTO_INCREMENT,
  `filter_by` varchar(64) NOT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`filter_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning_layout` */

DROP TABLE IF EXISTS `ww_performance_planning_layout`;

CREATE TABLE `ww_performance_planning_layout` (
  `planning_layout_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `planning_id` int(1) DEFAULT NULL,
  `immediate_id` int(11) DEFAULT NULL,
  `kpi` text,
  `below_standard` text,
  `meet_standard_low` text,
  `meet_standard_high` text,
  `exceed_standard` text,
  `weight` int(11) DEFAULT NULL,
  `points` int(11) DEFAULT NULL,
  `rating` decimal(10,2) DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`planning_layout_id`),
  KEY `location` (`planning_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning_logs` */

DROP TABLE IF EXISTS `ww_performance_planning_logs`;

CREATE TABLE `ww_performance_planning_logs` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `planning_id` int(11) unsigned NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `status_id` int(1) DEFAULT '0',
  `to_user_id` int(11) DEFAULT NULL,
  `to_user` varchar(64) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning_notes` */

DROP TABLE IF EXISTS `ww_performance_planning_notes`;

CREATE TABLE `ww_performance_planning_notes` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `planning_id` int(11) unsigned NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `notes` text,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_planning_reminder` */

DROP TABLE IF EXISTS `ww_performance_planning_reminder`;

CREATE TABLE `ww_performance_planning_reminder` (
  `reminder_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `planning_id` int(11) NOT NULL,
  `notification_id` int(1) NOT NULL DEFAULT '0',
  `date` date NOT NULL DEFAULT '0000-00-00',
  `status_id` tinyint(1) DEFAULT '1',
  `file` varchar(256) DEFAULT '',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` datetime DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`reminder_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_rating_classification` */

DROP TABLE IF EXISTS `ww_performance_rating_classification`;

CREATE TABLE `ww_performance_rating_classification` (
  `rating_classification_id` int(11) NOT NULL AUTO_INCREMENT,
  `rating_classification` varchar(255) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`rating_classification_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_rating_classification_items` */

DROP TABLE IF EXISTS `ww_performance_rating_classification_items`;

CREATE TABLE `ww_performance_rating_classification_items` (
  `item_id` int(11) NOT NULL AUTO_INCREMENT,
  `rc_id` int(11) DEFAULT NULL,
  `min_score` decimal(4,2) DEFAULT NULL,
  `max_score` decimal(4,2) DEFAULT NULL,
  `item_code` varchar(3) DEFAULT NULL,
  `item_label` varchar(255) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`item_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_selfreview_status` */

DROP TABLE IF EXISTS `ww_performance_selfreview_status`;

CREATE TABLE `ww_performance_selfreview_status` (
  `sr_status_id` int(11) NOT NULL AUTO_INCREMENT,
  `sr_status` varchar(64) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`sr_status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_setup_library` */

DROP TABLE IF EXISTS `ww_performance_setup_library`;

CREATE TABLE `ww_performance_setup_library` (
  `library_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `library` varchar(64) NOT NULL DEFAULT '',
  `description` text,
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`library_id`),
  KEY `location` (`library`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_setup_notification` */

DROP TABLE IF EXISTS `ww_performance_setup_notification`;

CREATE TABLE `ww_performance_setup_notification` (
  `notification_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `notification` varchar(64) NOT NULL DEFAULT '',
  `description` text,
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`notification_id`),
  KEY `location` (`notification`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_setup_performance` */

DROP TABLE IF EXISTS `ww_performance_setup_performance`;

CREATE TABLE `ww_performance_setup_performance` (
  `performance_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `performance` varchar(64) NOT NULL DEFAULT '',
  `performance_group` int(1) NOT NULL DEFAULT '0',
  `description` text,
  `status_id` tinyint(1) DEFAULT '0',
  `send_feeds` tinyint(1) NOT NULL DEFAULT '1',
  `send_email` tinyint(1) NOT NULL DEFAULT '1',
  `send_sms` tinyint(1) NOT NULL DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`performance_id`),
  KEY `location` (`performance`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_setup_rating_group` */

DROP TABLE IF EXISTS `ww_performance_setup_rating_group`;

CREATE TABLE `ww_performance_setup_rating_group` (
  `rating_group_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `rating_group` varchar(64) NOT NULL DEFAULT '',
  `description` text,
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`rating_group_id`),
  KEY `location` (`rating_group`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_setup_rating_score` */

DROP TABLE IF EXISTS `ww_performance_setup_rating_score`;

CREATE TABLE `ww_performance_setup_rating_score` (
  `rating_score_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `rating_group_id` int(1) NOT NULL,
  `rating_score` varchar(64) NOT NULL DEFAULT '',
  `score` int(11) NOT NULL,
  `description` text,
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`rating_score_id`),
  KEY `location` (`rating_score`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_setup_scorecard` */

DROP TABLE IF EXISTS `ww_performance_setup_scorecard`;

CREATE TABLE `ww_performance_setup_scorecard` (
  `scorecard_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `scorecard` varchar(64) NOT NULL DEFAULT '',
  `description` text,
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`scorecard_id`),
  KEY `location` (`scorecard`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_status` */

DROP TABLE IF EXISTS `ww_performance_status`;

CREATE TABLE `ww_performance_status` (
  `performance_status_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `performance_status` varchar(32) NOT NULL DEFAULT '',
  `class` varchar(32) DEFAULT 'badge badge-default',
  `description` tinytext,
  `planning` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`performance_status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_template` */

DROP TABLE IF EXISTS `ww_performance_template`;

CREATE TABLE `ww_performance_template` (
  `template_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `template` varchar(64) NOT NULL DEFAULT '',
  `template_code` varchar(64) DEFAULT NULL,
  `applicable_to_id` int(11) DEFAULT NULL,
  `applicable_to` varchar(255) DEFAULT NULL,
  `description` text,
  `set_crowdsource_by` enum('Appraiser','Appraisee','Both') DEFAULT 'Appraiser',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  `max_crowdsource` int(1) DEFAULT '2',
  PRIMARY KEY (`template_id`),
  KEY `location` (`template`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_template_applicable` */

DROP TABLE IF EXISTS `ww_performance_template_applicable`;

CREATE TABLE `ww_performance_template_applicable` (
  `applicable_to_id` int(11) NOT NULL AUTO_INCREMENT,
  `applicable_to` varchar(64) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`applicable_to_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_template_section` */

DROP TABLE IF EXISTS `ww_performance_template_section`;

CREATE TABLE `ww_performance_template_section` (
  `template_section_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `template_id` int(1) NOT NULL DEFAULT '0',
  `parent_id` int(1) NOT NULL DEFAULT '0',
  `template_section` varchar(128) NOT NULL DEFAULT '',
  `sequence` int(1) DEFAULT '0',
  `weight` int(1) DEFAULT '0',
  `section_type_id` int(1) DEFAULT NULL,
  `header` text,
  `footer` text,
  `description` text,
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `min_crowdsource` int(11) DEFAULT NULL,
  `rc_id` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`template_section_id`),
  KEY `location` (`template_section`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_template_section_column` */

DROP TABLE IF EXISTS `ww_performance_template_section_column`;

CREATE TABLE `ww_performance_template_section_column` (
  `section_column_id` int(11) NOT NULL AUTO_INCREMENT,
  `template_section_id` int(11) DEFAULT NULL,
  `title` varchar(64) DEFAULT NULL,
  `sequence` int(1) DEFAULT NULL,
  `uitype_id` int(1) DEFAULT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `rating_group_id` int(1) DEFAULT NULL,
  `width` int(11) DEFAULT NULL,
  `min_items` int(11) DEFAULT NULL,
  `max_items` int(11) DEFAULT NULL,
  `min_weight` int(11) DEFAULT NULL,
  `readonly` tinyint(1) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`section_column_id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_template_section_column_fields` */

DROP TABLE IF EXISTS `ww_performance_template_section_column_fields`;

CREATE TABLE `ww_performance_template_section_column_fields` (
  `item_id` int(11) DEFAULT NULL,
  `section_column_id` int(11) DEFAULT NULL,
  `value` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_template_section_column_item` */

DROP TABLE IF EXISTS `ww_performance_template_section_column_item`;

CREATE TABLE `ww_performance_template_section_column_item` (
  `item_id` int(11) NOT NULL AUTO_INCREMENT,
  `section_column_id` int(11) NOT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `item` varchar(256) DEFAULT NULL,
  `tripart` tinyint(1) DEFAULT '0',
  `sequence` int(1) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`item_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_template_section_column_uitype` */

DROP TABLE IF EXISTS `ww_performance_template_section_column_uitype`;

CREATE TABLE `ww_performance_template_section_column_uitype` (
  `uitype_id` int(1) NOT NULL AUTO_INCREMENT,
  `uitype` varchar(64) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`uitype_id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_performance_template_section_type` */

DROP TABLE IF EXISTS `ww_performance_template_section_type`;

CREATE TABLE `ww_performance_template_section_type` (
  `section_type_id` int(1) NOT NULL AUTO_INCREMENT,
  `section_type` varchar(64) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`section_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_play_badges` */

DROP TABLE IF EXISTS `ww_play_badges`;

CREATE TABLE `ww_play_badges` (
  `badge_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `badge_code` varchar(16) NOT NULL,
  `badge` varchar(32) NOT NULL,
  `points` int(3) DEFAULT '0',
  `description` text,
  `image_path` varchar(128) DEFAULT NULL,
  `modified_by` int(1) DEFAULT NULL,
  `modified_on` datetime DEFAULT '0000-00-00 00:00:00',
  `created_by` int(1) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`badge_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_play_league` */

DROP TABLE IF EXISTS `ww_play_league`;

CREATE TABLE `ww_play_league` (
  `league_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `league_code` varchar(50) DEFAULT NULL,
  `league` varchar(64) NOT NULL,
  `description` text,
  `modified_by` int(1) DEFAULT NULL,
  `modified_on` datetime DEFAULT '0000-00-00 00:00:00',
  `created_by` int(1) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`league_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_play_level` */

DROP TABLE IF EXISTS `ww_play_level`;

CREATE TABLE `ww_play_level` (
  `level_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `level` varchar(64) NOT NULL,
  `league_id` int(11) NOT NULL,
  `league` varchar(64) NOT NULL,
  `points_fr` int(1) DEFAULT '1',
  `points_to` int(1) DEFAULT '100',
  `description` text,
  `modified_by` int(1) DEFAULT NULL,
  `modified_on` datetime DEFAULT '0000-00-00 00:00:00',
  `created_by` int(1) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`level_id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_play_partner_badge` */

DROP TABLE IF EXISTS `ww_play_partner_badge`;

CREATE TABLE `ww_play_partner_badge` (
  `user_id` int(11) unsigned NOT NULL,
  `badge_id` int(11) NOT NULL,
  `badge_points` int(11) NOT NULL DEFAULT '0',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  PRIMARY KEY (`user_id`,`badge_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_play_partner_points` */

DROP TABLE IF EXISTS `ww_play_partner_points`;

CREATE TABLE `ww_play_partner_points` (
  `user_id` int(11) unsigned NOT NULL,
  `league_id` int(11) NOT NULL DEFAULT '1',
  `level_no` int(11) NOT NULL DEFAULT '1',
  `points` int(11) NOT NULL DEFAULT '0',
  `total_points` int(11) NOT NULL DEFAULT '0',
  `jars` int(11) NOT NULL DEFAULT '0',
  `used_points` int(11) NOT NULL DEFAULT '0',
  `redeemed` int(11) NOT NULL DEFAULT '0',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  KEY `user` (`user_id`,`league_id`,`level_no`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_play_partner_redeemed` */

DROP TABLE IF EXISTS `ww_play_partner_redeemed`;

CREATE TABLE `ww_play_partner_redeemed` (
  `user_id` int(11) unsigned NOT NULL,
  `item_id` int(11) NOT NULL,
  `points` int(11) NOT NULL DEFAULT '0',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_play_redeemable` */

DROP TABLE IF EXISTS `ww_play_redeemable`;

CREATE TABLE `ww_play_redeemable` (
  `item_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `item` varchar(64) NOT NULL,
  `level_id` int(11) NOT NULL DEFAULT '0',
  `points` int(3) NOT NULL,
  `image_path` varchar(128) NOT NULL,
  `description` text,
  `modified_by` int(1) DEFAULT NULL,
  `modified_on` datetime DEFAULT '0000-00-00 00:00:00',
  `created_by` int(1) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`item_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_profile_menu` */

DROP TABLE IF EXISTS `ww_profile_menu`;

CREATE TABLE `ww_profile_menu` (
  `menu_item_id` int(1) unsigned NOT NULL,
  `profile_id` int(1) NOT NULL,
  UNIQUE KEY `profile_id` (`profile_id`,`menu_item_id`),
  KEY `menu_item_id` (`menu_item_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_profiles` */

DROP TABLE IF EXISTS `ww_profiles`;

CREATE TABLE `ww_profiles` (
  `profile_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `profile` varchar(32) NOT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `can_view` tinyint(1) DEFAULT '1',
  `can_delete` tinyint(1) DEFAULT '1',
  `description` text,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` int(1) DEFAULT '0',
  PRIMARY KEY (`profile_id`),
  KEY `profile` (`profile`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_profiles_permission` */

DROP TABLE IF EXISTS `ww_profiles_permission`;

CREATE TABLE `ww_profiles_permission` (
  `profile_id` int(1) NOT NULL DEFAULT '0',
  `mod_id` int(1) NOT NULL DEFAULT '0',
  `action_id` int(1) NOT NULL DEFAULT '0',
  `grant` tinyint(1) NOT NULL DEFAULT '0',
  UNIQUE KEY `mod_profile_action` (`profile_id`,`mod_id`,`action_id`),
  KEY `mod_id` (`mod_id`),
  KEY `profile_id` (`profile_id`),
  KEY `action_id` (`action_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_profiles_sensitivity` */

DROP TABLE IF EXISTS `ww_profiles_sensitivity`;

CREATE TABLE `ww_profiles_sensitivity` (
  `profile_id` tinyint(11) DEFAULT NULL,
  `mod_id` tinyint(11) DEFAULT NULL,
  `sensitivity_id` tinyint(1) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_quarters` */

DROP TABLE IF EXISTS `ww_quarters`;

CREATE TABLE `ww_quarters` (
  `quarters_id` int(11) NOT NULL AUTO_INCREMENT,
  `quarters` varchar(32) DEFAULT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`quarters_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment` */

DROP TABLE IF EXISTS `ww_recruitment`;

CREATE TABLE `ww_recruitment` (
  `recruit_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `recruitment_date` date NOT NULL DEFAULT '0000-00-00',
  `status_id` int(1) DEFAULT '1',
  `title` enum('Mr.','Miss','Mrs.') DEFAULT 'Mr.',
  `suffix` varchar(16) DEFAULT NULL,
  `lastname` varchar(32) NOT NULL,
  `firstname` varchar(32) DEFAULT NULL,
  `middlename` varchar(32) DEFAULT NULL,
  `maidenname` varchar(32) DEFAULT NULL,
  `nickname` varchar(32) DEFAULT NULL,
  `fullname` varchar(255) DEFAULT NULL,
  `email` varchar(128) DEFAULT NULL,
  `birth_date` date DEFAULT '0000-00-00',
  `gender` enum('Male','Female') NOT NULL DEFAULT 'Male',
  `request_id` int(11) DEFAULT '0',
  `hired` tinyint(1) DEFAULT '0',
  `partner_id` int(11) DEFAULT NULL,
  `source_id` int(1) DEFAULT '0',
  `blacklisted` tinyint(1) DEFAULT '0',
  `oth_position` varchar(255) DEFAULT NULL,
  `from_seting_final_interview` tinyint(1) DEFAULT '0',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`recruit_id`),
  KEY `recruitment_date` (`recruitment_date`),
  KEY `status_id` (`status_id`),
  KEY `lastname` (`lastname`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_age_gender` */

DROP TABLE IF EXISTS `ww_recruitment_age_gender`;

CREATE TABLE `ww_recruitment_age_gender` (
  `age_gender` varchar(16) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_background_item` */

DROP TABLE IF EXISTS `ww_recruitment_background_item`;

CREATE TABLE `ww_recruitment_background_item` (
  `background_item_id` int(11) NOT NULL AUTO_INCREMENT,
  `background_code` varchar(32) DEFAULT NULL,
  `background` varchar(64) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`background_item_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_background_status` */

DROP TABLE IF EXISTS `ww_recruitment_background_status`;

CREATE TABLE `ww_recruitment_background_status` (
  `status_id` int(11) NOT NULL AUTO_INCREMENT,
  `status_code` varchar(32) DEFAULT NULL,
  `status` varchar(64) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_benefit` */

DROP TABLE IF EXISTS `ww_recruitment_benefit`;

CREATE TABLE `ww_recruitment_benefit` (
  `benefit_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `package_id` int(11) NOT NULL,
  `benefit` varchar(64) DEFAULT NULL,
  `amount` decimal(9,2) DEFAULT '0.00',
  `is_basic` tinyint(1) DEFAULT '0',
  `status_id` tinyint(1) NOT NULL DEFAULT '1',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`benefit_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_benefit_package` */

DROP TABLE IF EXISTS `ww_recruitment_benefit_package`;

CREATE TABLE `ww_recruitment_benefit_package` (
  `package_id` int(11) NOT NULL AUTO_INCREMENT,
  `benefit` varchar(64) NOT NULL,
  `rank_id` int(1) DEFAULT '0',
  `description` text,
  `status_id` tinyint(1) NOT NULL DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`package_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_educational_background` */

DROP TABLE IF EXISTS `ww_recruitment_educational_background`;

CREATE TABLE `ww_recruitment_educational_background` (
  `educational_background_id` int(11) NOT NULL AUTO_INCREMENT,
  `educational_background_code` varchar(32) DEFAULT NULL,
  `educational_background` varchar(64) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`educational_background_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_employment_checklist` */

DROP TABLE IF EXISTS `ww_recruitment_employment_checklist`;

CREATE TABLE `ww_recruitment_employment_checklist` (
  `checklist_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `checklist` varchar(128) DEFAULT NULL,
  `description` text,
  `for_submission` tinyint(1) DEFAULT '1',
  `print_function` varchar(128) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`checklist_id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_interview_attachment` */

DROP TABLE IF EXISTS `ww_recruitment_interview_attachment`;

CREATE TABLE `ww_recruitment_interview_attachment` (
  `recruitment_interview_attachment_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `schedule_id` int(11) NOT NULL DEFAULT '0',
  `process_id` int(11) DEFAULT NULL,
  `type` varchar(100) DEFAULT NULL,
  `photo` varchar(255) DEFAULT NULL,
  `filename` varchar(255) DEFAULT NULL,
  `size` varchar(30) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`recruitment_interview_attachment_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_interview_details` */

DROP TABLE IF EXISTS `ww_recruitment_interview_details`;

CREATE TABLE `ww_recruitment_interview_details` (
  `detail_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `interview_id` int(11) NOT NULL DEFAULT '0',
  `key_id` int(1) DEFAULT '0',
  `key` varchar(32) NOT NULL,
  `sequence` tinyint(1) DEFAULT '1',
  `key_name` varchar(64) NOT NULL,
  `key_value` text,
  `other_remarks` text,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`detail_id`),
  UNIQUE KEY `interview_key` (`interview_id`,`sequence`,`key`),
  KEY `interview_id` (`interview_id`)
) ENGINE=InnoDB AUTO_INCREMENT=100 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_interview_key` */

DROP TABLE IF EXISTS `ww_recruitment_interview_key`;

CREATE TABLE `ww_recruitment_interview_key` (
  `key_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `key_code` varchar(32) NOT NULL,
  `key_label` varchar(128) NOT NULL,
  `key_class_id` int(1) DEFAULT '0',
  `uitype_id` int(1) DEFAULT '0',
  `show_key_label` tinyint(1) DEFAULT '1',
  `key_type_id` int(1) DEFAULT '0',
  `sort_order` int(11) DEFAULT NULL,
  `hidden` tinyint(1) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`key_id`),
  KEY `transaction_code` (`key_code`),
  KEY `transaction_class_id` (`key_class_id`),
  KEY `transaction_type_id` (`key_type_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=68 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_interview_key_class` */

DROP TABLE IF EXISTS `ww_recruitment_interview_key_class`;

CREATE TABLE `ww_recruitment_interview_key_class` (
  `key_class_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `key_class_code` varchar(32) NOT NULL,
  `key_class` varchar(128) NOT NULL,
  `header_text` varchar(128) DEFAULT NULL,
  `user_edit` tinyint(1) DEFAULT '0',
  `for_approval` tinyint(1) DEFAULT '0',
  `layout` enum('Tabular','By Field','Customize') DEFAULT NULL,
  `layout_custom_file` text,
  `other_remarks` tinyint(1) DEFAULT '0',
  `sort_order` int(1) unsigned DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`key_class_id`),
  KEY `transaction_class_code` (`key_class_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_interview_location` */

DROP TABLE IF EXISTS `ww_recruitment_interview_location`;

CREATE TABLE `ww_recruitment_interview_location` (
  `interview_location_id` int(11) NOT NULL AUTO_INCREMENT,
  `interview_location_code` varchar(32) DEFAULT NULL,
  `interview_location` varchar(150) DEFAULT NULL,
  `company_id` int(1) DEFAULT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`interview_location_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_interview_remarks` */

DROP TABLE IF EXISTS `ww_recruitment_interview_remarks`;

CREATE TABLE `ww_recruitment_interview_remarks` (
  `remarks_id` int(11) NOT NULL AUTO_INCREMENT,
  `remarks_code` varchar(32) DEFAULT NULL,
  `remarks` varchar(64) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`remarks_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_interview_uitype` */

DROP TABLE IF EXISTS `ww_recruitment_interview_uitype`;

CREATE TABLE `ww_recruitment_interview_uitype` (
  `uitype_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `uitype` varchar(32) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`uitype_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_key` */

DROP TABLE IF EXISTS `ww_recruitment_key`;

CREATE TABLE `ww_recruitment_key` (
  `key_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `key_code` varchar(32) NOT NULL,
  `key_label` varchar(128) DEFAULT NULL,
  `key_class_id` int(1) DEFAULT '0',
  `key_type_id` int(1) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`key_id`),
  KEY `transaction_code` (`key_code`),
  KEY `transaction_class_id` (`key_class_id`),
  KEY `transaction_type_id` (`key_type_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=217 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_key_class` */

DROP TABLE IF EXISTS `ww_recruitment_key_class`;

CREATE TABLE `ww_recruitment_key_class` (
  `key_class_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `key_class_code` varchar(32) NOT NULL,
  `key_class` varchar(128) NOT NULL,
  `user_edit` tinyint(1) DEFAULT '0',
  `for_approval` tinyint(1) DEFAULT '0',
  `sort_order` int(1) unsigned DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`key_class_id`),
  KEY `transaction_class_code` (`key_class_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=84 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_manpower_plan` */

DROP TABLE IF EXISTS `ww_recruitment_manpower_plan`;

CREATE TABLE `ww_recruitment_manpower_plan` (
  `plan_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `display_name` varchar(155) DEFAULT NULL,
  `alias` varchar(64) DEFAULT NULL,
  `company_id` int(11) DEFAULT NULL,
  `division_id` int(11) DEFAULT NULL,
  `department_id` int(11) DEFAULT NULL,
  `year` year(4) DEFAULT NULL,
  `status_id` int(1) DEFAULT '1',
  `manpower_plan_status_id` int(11) DEFAULT '1',
  `attachment` text,
  `created_by` varchar(255) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `date_approved` date DEFAULT NULL,
  `date_declined` date DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`plan_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_manpower_plan_action` */

DROP TABLE IF EXISTS `ww_recruitment_manpower_plan_action`;

CREATE TABLE `ww_recruitment_manpower_plan_action` (
  `action_id` int(1) NOT NULL AUTO_INCREMENT,
  `action` varchar(32) DEFAULT NULL,
  `class` varchar(32) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`action_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_manpower_plan_approver` */

DROP TABLE IF EXISTS `ww_recruitment_manpower_plan_approver`;

CREATE TABLE `ww_recruitment_manpower_plan_approver` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `plan_id` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `approver_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) CHARACTER SET latin1 DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '1',
  `plan_status_id` int(1) DEFAULT '0',
  `plan_status` varchar(16) DEFAULT '',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT '0000-00-00 00:00:00',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `forms_user` (`plan_id`,`user_id`,`sequence`),
  KEY `forms_id` (`plan_id`),
  KEY `user_id` (`user_id`),
  KEY `sequence` (`sequence`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_manpower_plan_incumbent` */

DROP TABLE IF EXISTS `ww_recruitment_manpower_plan_incumbent`;

CREATE TABLE `ww_recruitment_manpower_plan_incumbent` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `plan_id` int(11) NOT NULL,
  `position_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  `alias` varchar(64) DEFAULT NULL,
  `action_id` int(1) DEFAULT '0',
  `action` varchar(32) DEFAULT NULL,
  `year` int(1) DEFAULT '0',
  `month` int(1) DEFAULT '0',
  `budget` decimal(9,2) DEFAULT '0.00',
  `company_id` int(11) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_manpower_plan_position` */

DROP TABLE IF EXISTS `ww_recruitment_manpower_plan_position`;

CREATE TABLE `ww_recruitment_manpower_plan_position` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `plan_id` int(11) NOT NULL,
  `position_id` int(11) DEFAULT NULL,
  `job_rank_id` int(11) DEFAULT NULL,
  `employment_status_id` int(11) DEFAULT NULL,
  `job_class_id` int(11) DEFAULT NULL,
  `company_id` int(11) DEFAULT NULL,
  `incumbent` int(1) NOT NULL DEFAULT '0',
  `year` int(1) DEFAULT '0',
  `month` int(1) DEFAULT '0',
  `needed` int(1) DEFAULT '0',
  `budget` decimal(9,2) DEFAULT '0.00',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_manpower_plan_position_new` */

DROP TABLE IF EXISTS `ww_recruitment_manpower_plan_position_new`;

CREATE TABLE `ww_recruitment_manpower_plan_position_new` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `plan_id` int(11) NOT NULL,
  `position` varchar(128) DEFAULT NULL,
  `position_code` varchar(16) DEFAULT NULL,
  `job_rank_id` int(1) DEFAULT '0',
  `employment_status_id` int(11) DEFAULT NULL,
  `job_class_id` int(11) DEFAULT NULL,
  `company_id` int(11) DEFAULT NULL,
  `budget` decimal(8,2) DEFAULT '0.00',
  `month` int(11) DEFAULT NULL,
  `notes` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_manpower_plan_status` */

DROP TABLE IF EXISTS `ww_recruitment_manpower_plan_status`;

CREATE TABLE `ww_recruitment_manpower_plan_status` (
  `manpower_plan_status_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `status` varchar(16) NOT NULL DEFAULT '',
  `color` varchar(8) DEFAULT '#ffffff',
  `description` tinytext,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`manpower_plan_status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_mrf_pointperson` */

DROP TABLE IF EXISTS `ww_recruitment_mrf_pointperson`;

CREATE TABLE `ww_recruitment_mrf_pointperson` (
  `pointperson_id` int(11) NOT NULL AUTO_INCREMENT,
  `pointperson` varchar(256) DEFAULT NULL,
  `role_id` int(11) DEFAULT NULL,
  `type_id` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  PRIMARY KEY (`pointperson_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_personal` */

DROP TABLE IF EXISTS `ww_recruitment_personal`;

CREATE TABLE `ww_recruitment_personal` (
  `personal_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `recruit_id` int(11) NOT NULL DEFAULT '0',
  `key_id` int(1) DEFAULT '0',
  `key` varchar(32) NOT NULL,
  `sequence` tinyint(1) DEFAULT '1',
  `key_name` varchar(64) NOT NULL,
  `key_value` text,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`personal_id`),
  UNIQUE KEY `partner_key` (`recruit_id`,`sequence`,`key`),
  KEY `partner_id` (`recruit_id`)
) ENGINE=InnoDB AUTO_INCREMENT=491 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_personal_history` */

DROP TABLE IF EXISTS `ww_recruitment_personal_history`;

CREATE TABLE `ww_recruitment_personal_history` (
  `personal_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `recruit_id` int(11) NOT NULL DEFAULT '0',
  `key` varchar(32) NOT NULL,
  `sequence` int(1) DEFAULT '1',
  `key_id` int(1) NOT NULL DEFAULT '0',
  `key_name` varchar(64) NOT NULL,
  `key_value` text,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  PRIMARY KEY (`personal_id`),
  UNIQUE KEY `partner_key` (`recruit_id`,`sequence`,`key`),
  KEY `partner_id` (`recruit_id`)
) ENGINE=InnoDB AUTO_INCREMENT=211 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process` */

DROP TABLE IF EXISTS `ww_recruitment_process`;

CREATE TABLE `ww_recruitment_process` (
  `process_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `request_id` int(11) NOT NULL,
  `status_id` int(1) NOT NULL,
  `status` varchar(32) DEFAULT NULL,
  `recruit_id` int(11) NOT NULL,
  `recruit_name` varchar(64) DEFAULT NULL,
  `hired` tinyint(1) DEFAULT '0',
  `hired_when` datetime DEFAULT '0000-00-00 00:00:00',
  `blacklisted` tinyint(1) DEFAULT '0',
  `blacklisted_until` date DEFAULT '0000-00-00',
  `from_seting_final_interview` tinyint(1) DEFAULT '0' COMMENT '1 = from initial interview, 2 = from final interview',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT '0000-00-00 00:00:00',
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`process_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_background` */

DROP TABLE IF EXISTS `ww_recruitment_process_background`;

CREATE TABLE `ww_recruitment_process_background` (
  `rpb_id` int(11) NOT NULL AUTO_INCREMENT,
  `process_id` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`rpb_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_background_items` */

DROP TABLE IF EXISTS `ww_recruitment_process_background_items`;

CREATE TABLE `ww_recruitment_process_background_items` (
  `rpbi_id` int(11) NOT NULL AUTO_INCREMENT,
  `rpb_id` int(11) DEFAULT NULL,
  `company` varchar(100) DEFAULT NULL,
  `department` varchar(100) DEFAULT NULL,
  `reference_person` varchar(100) DEFAULT NULL,
  `position` varchar(255) DEFAULT NULL,
  `employment_status` varchar(255) DEFAULT '0',
  `date_hired` date DEFAULT NULL,
  `date_resigned` date DEFAULT NULL,
  `reason_for_leaving` varchar(255) DEFAULT NULL,
  `q1` tinyint(1) DEFAULT '0',
  `q1_ans` text,
  `q2` tinyint(1) DEFAULT '0',
  `q3` tinyint(1) DEFAULT '0',
  `q4_ans` text,
  `q5` varchar(10) DEFAULT NULL,
  `q5_ans` text,
  `q6_ans` text,
  `q7_ans` text,
  `q8` tinyint(1) DEFAULT '0',
  `q9_ans` text,
  `q10` tinyint(1) DEFAULT '0',
  `q11` tinyint(1) DEFAULT '0',
  `q12` tinyint(1) DEFAULT '0',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`rpbi_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_employment` */

DROP TABLE IF EXISTS `ww_recruitment_process_employment`;

CREATE TABLE `ww_recruitment_process_employment` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `process_id` int(11) NOT NULL,
  `status_id` int(1) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_employment_checklist` */

DROP TABLE IF EXISTS `ww_recruitment_process_employment_checklist`;

CREATE TABLE `ww_recruitment_process_employment_checklist` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `process_id` int(11) DEFAULT NULL,
  `checklist_id` int(11) NOT NULL,
  `submitted` tinyint(1) DEFAULT '0',
  `date_submitted` date DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=235 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_exam` */

DROP TABLE IF EXISTS `ww_recruitment_process_exam`;

CREATE TABLE `ww_recruitment_process_exam` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `process_id` varchar(150) DEFAULT NULL,
  `exam_name` varchar(150) DEFAULT NULL,
  `date_taken` date DEFAULT '0000-00-00',
  `score` decimal(5,2) NOT NULL DEFAULT '0.00',
  `status_id` tinyint(1) NOT NULL DEFAULT '0',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_interview` */

DROP TABLE IF EXISTS `ww_recruitment_process_interview`;

CREATE TABLE `ww_recruitment_process_interview` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `process_id` int(11) NOT NULL,
  `schedule_id` int(11) NOT NULL,
  `final_schedule_id` int(11) DEFAULT NULL,
  `result_id` int(1) NOT NULL,
  `result` varchar(16) DEFAULT NULL,
  `strength` text,
  `jobfit` text,
  `area_improvement` text,
  `recommendation_id` int(1) DEFAULT NULL,
  `recommendation` varchar(64) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_interview_result` */

DROP TABLE IF EXISTS `ww_recruitment_process_interview_result`;

CREATE TABLE `ww_recruitment_process_interview_result` (
  `result_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `result` varchar(250) DEFAULT NULL,
  `class` varchar(100) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`result_id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_offer` */

DROP TABLE IF EXISTS `ww_recruitment_process_offer`;

CREATE TABLE `ww_recruitment_process_offer` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `process_id` int(11) NOT NULL,
  `employment_status_id` int(1) DEFAULT NULL,
  `start_date` date DEFAULT NULL,
  `end_date` date DEFAULT NULL,
  `no_months` int(1) DEFAULT NULL,
  `reports_to` int(1) DEFAULT NULL,
  `template_id` int(11) DEFAULT NULL,
  `template_value` text,
  `work_schedule` int(1) DEFAULT NULL,
  `shift_id` int(1) DEFAULT NULL,
  `lunch_break` int(1) DEFAULT NULL,
  `accept_offer` tinyint(1) DEFAULT '0',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_offer_compben` */

DROP TABLE IF EXISTS `ww_recruitment_process_offer_compben`;

CREATE TABLE `ww_recruitment_process_offer_compben` (
  `process_id` int(11) NOT NULL,
  `benefit_id` int(11) NOT NULL,
  `permanent` tinyint(1) DEFAULT '0',
  `amount` decimal(9,2) DEFAULT '0.00',
  `rate_id` int(11) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_offer_template` */

DROP TABLE IF EXISTS `ww_recruitment_process_offer_template`;

CREATE TABLE `ww_recruitment_process_offer_template` (
  `template_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `template_name` varchar(100) NOT NULL,
  `template` text,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`template_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_schedule` */

DROP TABLE IF EXISTS `ww_recruitment_process_schedule`;

CREATE TABLE `ww_recruitment_process_schedule` (
  `schedule_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `process_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `display_name` varchar(64) DEFAULT NULL,
  `date` datetime DEFAULT '0000-00-00 00:00:00',
  `location_id` int(1) NOT NULL DEFAULT '0',
  `location` varchar(128) DEFAULT NULL,
  `status_id` int(1) NOT NULL,
  `status` varchar(32) DEFAULT NULL,
  `type` tinyint(1) DEFAULT '1' COMMENT '1 = initial interview, 2 = final interview',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`schedule_id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_signing` */

DROP TABLE IF EXISTS `ww_recruitment_process_signing`;

CREATE TABLE `ww_recruitment_process_signing` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `process_id` int(11) NOT NULL,
  `template_id` int(11) DEFAULT NULL,
  `accepted` int(1) DEFAULT '0',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_status` */

DROP TABLE IF EXISTS `ww_recruitment_process_status`;

CREATE TABLE `ww_recruitment_process_status` (
  `status_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `status_code` varchar(16) NOT NULL,
  `status` varchar(64) NOT NULL,
  `label` varchar(125) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `can_view` tinyint(1) DEFAULT '1',
  `can_delete` tinyint(1) DEFAULT '0',
  `user_edit` tinyint(1) DEFAULT '0',
  `for_approval` tinyint(1) DEFAULT '0',
  `sort_order` int(1) DEFAULT '1',
  `active` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_process_timeline` */

DROP TABLE IF EXISTS `ww_recruitment_process_timeline`;

CREATE TABLE `ww_recruitment_process_timeline` (
  `log_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `process_id` int(11) NOT NULL,
  `status_id` int(1) NOT NULL,
  `status` varchar(32) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`log_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_request` */

DROP TABLE IF EXISTS `ww_recruitment_request`;

CREATE TABLE `ww_recruitment_request` (
  `request_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `document_no` varchar(16) NOT NULL,
  `user_id` int(11) NOT NULL,
  `alias` varchar(64) DEFAULT NULL,
  `status_id` int(11) DEFAULT '0',
  `position_id` int(11) NOT NULL,
  `position` varchar(128) DEFAULT NULL,
  `nature_id` int(11) DEFAULT NULL,
  `job_class_id` int(11) DEFAULT NULL,
  `budgeted` int(11) DEFAULT NULL,
  `replacement_of` int(11) NOT NULL,
  `due_to_id` int(11) DEFAULT NULL,
  `replacement_transfer_location` varchar(100) DEFAULT NULL,
  `replacement_transfer_leave_date_from` date DEFAULT NULL,
  `replacement_transfer_leave_date_to` date DEFAULT NULL,
  `employment_status_id` int(11) NOT NULL,
  `contract_duration` int(11) DEFAULT NULL,
  `quantity` int(11) NOT NULL,
  `age_range_from` int(11) DEFAULT NULL,
  `age_range_to` int(11) DEFAULT NULL,
  `gender` varchar(50) DEFAULT NULL,
  `civil_status_id` int(11) DEFAULT NULL,
  `date_needed` date NOT NULL,
  `max_no_personel` int(11) DEFAULT NULL,
  `total_no_incumbent` int(11) DEFAULT NULL,
  `salary_from` varchar(250) NOT NULL,
  `salary_to` varchar(250) NOT NULL,
  `description` text,
  `date_approved` datetime DEFAULT NULL,
  `date_cancelled` datetime DEFAULT NULL,
  `date_disapproved` datetime DEFAULT NULL,
  `date_sent` datetime DEFAULT NULL,
  `company_id` int(11) DEFAULT '0',
  `department_id` int(11) DEFAULT '0',
  `rank_id` int(11) DEFAULT '0',
  `hiring_type` int(11) DEFAULT NULL COMMENT 'internal,external,both',
  `internal` tinyint(1) NOT NULL DEFAULT '0',
  `tat_days` int(11) DEFAULT '0',
  `role_id` varchar(32) DEFAULT NULL,
  `attachment` text,
  `delivery_date` date NOT NULL DEFAULT '0000-00-00',
  `hr_remarks` text,
  `educational_attainment` varchar(255) DEFAULT NULL,
  `budget_from` varchar(50) DEFAULT NULL,
  `budget_to` varchar(50) DEFAULT NULL,
  `hr_remarks_by` int(11) DEFAULT '0',
  `hr_remarks_on` datetime DEFAULT NULL,
  `hr_assigned` int(11) DEFAULT '0',
  `closing_remarks` text,
  `closed_on` datetime DEFAULT '0000-00-00 00:00:00',
  `closed_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`request_id`,`document_no`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_request_approver` */

DROP TABLE IF EXISTS `ww_recruitment_request_approver`;

CREATE TABLE `ww_recruitment_request_approver` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `request_id` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `approver_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) CHARACTER SET latin1 DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '1',
  `status_id` int(1) DEFAULT NULL,
  `status` varchar(16) DEFAULT '',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  `comment` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `forms_user` (`request_id`,`user_id`,`sequence`),
  KEY `forms_id` (`request_id`),
  KEY `user_id` (`user_id`),
  KEY `sequence` (`sequence`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=122 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_request_details` */

DROP TABLE IF EXISTS `ww_recruitment_request_details`;

CREATE TABLE `ww_recruitment_request_details` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `request_id` int(11) NOT NULL DEFAULT '0',
  `key` varchar(32) NOT NULL,
  `sequence` int(1) DEFAULT '1',
  `key_id` int(1) NOT NULL DEFAULT '0',
  `key_name` varchar(64) NOT NULL,
  `key_value` text,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=118 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_request_due_to` */

DROP TABLE IF EXISTS `ww_recruitment_request_due_to`;

CREATE TABLE `ww_recruitment_request_due_to` (
  `due_to_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `due_to` varchar(32) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`due_to_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_request_key` */

DROP TABLE IF EXISTS `ww_recruitment_request_key`;

CREATE TABLE `ww_recruitment_request_key` (
  `key_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `key_code` varchar(32) NOT NULL,
  `key_label` varchar(128) NOT NULL,
  `help_block` text,
  `key_class_id` int(11) DEFAULT NULL,
  `sequence` int(1) unsigned DEFAULT '1',
  `uitype_id` int(11) DEFAULT NULL,
  `length` int(1) NOT NULL DEFAULT '1',
  `key_table` varchar(250) DEFAULT NULL,
  `key_field_id` varchar(250) DEFAULT NULL,
  `key_field` varchar(250) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`key_id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_request_key_class` */

DROP TABLE IF EXISTS `ww_recruitment_request_key_class`;

CREATE TABLE `ww_recruitment_request_key_class` (
  `key_class_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `key_class_code` varchar(32) NOT NULL,
  `key_class` varchar(128) NOT NULL,
  `description` text,
  `user_edit` tinyint(1) DEFAULT '0',
  `for_approval` tinyint(1) DEFAULT '0',
  `sequence` int(1) unsigned DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`key_class_id`),
  KEY `transaction_class_code` (`key_class_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_request_nature` */

DROP TABLE IF EXISTS `ww_recruitment_request_nature`;

CREATE TABLE `ww_recruitment_request_nature` (
  `nature_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `nature` varchar(32) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`nature_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_request_option_education` */

DROP TABLE IF EXISTS `ww_recruitment_request_option_education`;

CREATE TABLE `ww_recruitment_request_option_education` (
  `request_option_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `request_option` varchar(32) NOT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`request_option_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_request_option_gender` */

DROP TABLE IF EXISTS `ww_recruitment_request_option_gender`;

CREATE TABLE `ww_recruitment_request_option_gender` (
  `request_option_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `request_option` varchar(16) NOT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`request_option_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_request_status` */

DROP TABLE IF EXISTS `ww_recruitment_request_status`;

CREATE TABLE `ww_recruitment_request_status` (
  `recruit_status_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `recruit_status` varchar(16) NOT NULL DEFAULT '',
  `color` varchar(8) DEFAULT '#ffffff',
  `sequence` int(1) DEFAULT '1',
  `description` tinytext,
  `css_class` varchar(16) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`recruit_status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_source` */

DROP TABLE IF EXISTS `ww_recruitment_source`;

CREATE TABLE `ww_recruitment_source` (
  `source_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `source` varchar(64) DEFAULT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`source_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_sourcing_free_sites` */

DROP TABLE IF EXISTS `ww_recruitment_sourcing_free_sites`;

CREATE TABLE `ww_recruitment_sourcing_free_sites` (
  `sourcing_free_sites_id` int(11) NOT NULL AUTO_INCREMENT,
  `sourcing_free_sites` varchar(150) DEFAULT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`sourcing_free_sites_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_sourcing_tools` */

DROP TABLE IF EXISTS `ww_recruitment_sourcing_tools`;

CREATE TABLE `ww_recruitment_sourcing_tools` (
  `sourcing_tool_id` int(11) NOT NULL AUTO_INCREMENT,
  `sourcing_tool_code` varchar(32) DEFAULT NULL,
  `sourcing_tool` varchar(150) DEFAULT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`sourcing_tool_id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_status` */

DROP TABLE IF EXISTS `ww_recruitment_status`;

CREATE TABLE `ww_recruitment_status` (
  `recruit_status_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `recruit_status` varchar(64) NOT NULL DEFAULT '',
  `color` varchar(8) DEFAULT '#ffffff',
  `sequence` int(1) DEFAULT '1',
  `description` tinytext,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`recruit_status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_recruitment_type_license` */

DROP TABLE IF EXISTS `ww_recruitment_type_license`;

CREATE TABLE `ww_recruitment_type_license` (
  `type_license_id` int(11) NOT NULL AUTO_INCREMENT,
  `type_license` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`type_license_id`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;

/*Table structure for table `ww_report_generator` */

DROP TABLE IF EXISTS `ww_report_generator`;

CREATE TABLE `ww_report_generator` (
  `report_id` int(11) NOT NULL AUTO_INCREMENT,
  `report_code` varchar(128) DEFAULT NULL,
  `report_name` varchar(255) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL,
  `description` text,
  `main_query` text,
  `roles` varchar(255) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`report_id`)
) ENGINE=InnoDB AUTO_INCREMENT=107 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_report_generator_category` */

DROP TABLE IF EXISTS `ww_report_generator_category`;

CREATE TABLE `ww_report_generator_category` (
  `category_id` int(11) NOT NULL AUTO_INCREMENT,
  `category` varchar(128) DEFAULT NULL,
  `caption` text,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_report_generator_column_format` */

DROP TABLE IF EXISTS `ww_report_generator_column_format`;

CREATE TABLE `ww_report_generator_column_format` (
  `format_id` int(11) NOT NULL AUTO_INCREMENT,
  `format` varchar(64) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`format_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_report_generator_columns` */

DROP TABLE IF EXISTS `ww_report_generator_columns`;

CREATE TABLE `ww_report_generator_columns` (
  `report_id` int(11) DEFAULT NULL,
  `column` varchar(128) CHARACTER SET latin1 DEFAULT NULL,
  `alias` varchar(128) CHARACTER SET latin1 DEFAULT NULL,
  `format_id` tinyint(1) DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_report_generator_filter_operators` */

DROP TABLE IF EXISTS `ww_report_generator_filter_operators`;

CREATE TABLE `ww_report_generator_filter_operators` (
  `operator_id` int(11) NOT NULL AUTO_INCREMENT,
  `operator` varchar(16) DEFAULT NULL,
  `label` varchar(64) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`operator_id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_report_generator_filter_uitype` */

DROP TABLE IF EXISTS `ww_report_generator_filter_uitype`;

CREATE TABLE `ww_report_generator_filter_uitype` (
  `uitype_id` int(11) NOT NULL AUTO_INCREMENT,
  `uitype` varchar(128) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`uitype_id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_report_generator_filters` */

DROP TABLE IF EXISTS `ww_report_generator_filters`;

CREATE TABLE `ww_report_generator_filters` (
  `filter_id` int(11) NOT NULL AUTO_INCREMENT,
  `report_id` int(11) DEFAULT NULL,
  `column` varchar(128) CHARACTER SET latin1 DEFAULT NULL,
  `operator` varchar(2) CHARACTER SET latin1 DEFAULT NULL,
  `filter` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `type` tinyint(1) DEFAULT '1',
  `logical_operator` varchar(3) DEFAULT 'AND',
  `bracket` int(11) DEFAULT NULL,
  `required` tinyint(1) DEFAULT '0',
  `uitype_id` tinyint(4) DEFAULT NULL,
  `table` varchar(128) CHARACTER SET latin1 DEFAULT NULL,
  `value_column` varchar(128) DEFAULT NULL,
  `label_column` varchar(128) DEFAULT NULL,
  `order_by` int(11) DEFAULT NULL,
  `filtering_only` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`filter_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4459 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_report_generator_grouping` */

DROP TABLE IF EXISTS `ww_report_generator_grouping`;

CREATE TABLE `ww_report_generator_grouping` (
  `report_id` int(11) DEFAULT NULL,
  `column` varchar(128) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_report_generator_letterhead` */

DROP TABLE IF EXISTS `ww_report_generator_letterhead`;

CREATE TABLE `ww_report_generator_letterhead` (
  `report_id` int(11) DEFAULT NULL,
  `template` varchar(255) DEFAULT NULL,
  `place_in` int(1) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_report_generator_role` */

DROP TABLE IF EXISTS `ww_report_generator_role`;

CREATE TABLE `ww_report_generator_role` (
  `report_id` int(11) DEFAULT NULL,
  `role_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_report_generator_sorting` */

DROP TABLE IF EXISTS `ww_report_generator_sorting`;

CREATE TABLE `ww_report_generator_sorting` (
  `report_id` int(11) DEFAULT NULL,
  `column` varchar(128) DEFAULT NULL,
  `sorting` varchar(4) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_report_generator_tables` */

DROP TABLE IF EXISTS `ww_report_generator_tables`;

CREATE TABLE `ww_report_generator_tables` (
  `report_table_id` int(11) NOT NULL AUTO_INCREMENT,
  `report_id` int(11) DEFAULT NULL,
  `table` varchar(128) CHARACTER SET eucjpms DEFAULT NULL,
  `primary` tinyint(1) DEFAULT '0',
  `alias` varchar(3) CHARACTER SET eucjpms DEFAULT NULL,
  `join_type` varchar(10) CHARACTER SET eucjpms DEFAULT NULL,
  `join_from_column` varchar(128) CHARACTER SET eucjpms DEFAULT NULL,
  `on_operator` varchar(2) CHARACTER SET eucjpms DEFAULT NULL,
  `join_to_column` varchar(128) CHARACTER SET eucjpms DEFAULT NULL,
  PRIMARY KEY (`report_table_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1535 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_report_result_filters` */

DROP TABLE IF EXISTS `ww_report_result_filters`;

CREATE TABLE `ww_report_result_filters` (
  `result_id` int(11) DEFAULT NULL,
  `column` varchar(128) DEFAULT NULL,
  `operator` varchar(2) DEFAULT NULL,
  `filter` varchar(128) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_report_results` */

DROP TABLE IF EXISTS `ww_report_results`;

CREATE TABLE `ww_report_results` (
  `result_id` int(11) NOT NULL AUTO_INCREMENT,
  `report_id` int(11) DEFAULT NULL,
  `filepath` varchar(255) DEFAULT NULL,
  `file_type` varchar(16) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`result_id`),
  KEY `createdon` (`created_on`)
) ENGINE=InnoDB AUTO_INCREMENT=43740 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_requisition` */

DROP TABLE IF EXISTS `ww_requisition`;

CREATE TABLE `ww_requisition` (
  `requisition_id` int(11) NOT NULL AUTO_INCREMENT,
  `project_name` varchar(255) DEFAULT NULL,
  `priority_id` tinyint(4) DEFAULT NULL,
  `status_id` tinyint(4) DEFAULT '1',
  `mc_approval` tinyint(1) DEFAULT '0',
  `approver` int(11) DEFAULT NULL,
  `no_of_items` int(11) DEFAULT '0',
  `total_price` decimal(8,2) DEFAULT '0.00',
  `actual_total_price` decimal(8,2) DEFAULT '0.00',
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`requisition_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_requisition_items` */

DROP TABLE IF EXISTS `ww_requisition_items`;

CREATE TABLE `ww_requisition_items` (
  `requisition_id` int(11) DEFAULT NULL,
  `item` varchar(255) DEFAULT NULL,
  `reason` text,
  `date` date DEFAULT NULL,
  `quantity` decimal(8,2) DEFAULT NULL,
  `unit_price` decimal(8,2) DEFAULT NULL,
  `actual_price` decimal(8,2) DEFAULT NULL,
  `po_number` varchar(32) DEFAULT NULL,
  `po_note` text,
  `po_quantity` decimal(8,2) DEFAULT NULL,
  `po_price` decimal(8,2) DEFAULT NULL,
  `received_quantity` decimal(8,2) DEFAULT NULL,
  `date_received` date DEFAULT NULL,
  `accounting_remarks` text,
  `proceed` tinyint(1) DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_requisition_mc_signatories` */

DROP TABLE IF EXISTS `ww_requisition_mc_signatories`;

CREATE TABLE `ww_requisition_mc_signatories` (
  `requisition_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `full_name` varchar(255) DEFAULT NULL,
  `status_id` tinyint(4) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_requisition_priority` */

DROP TABLE IF EXISTS `ww_requisition_priority`;

CREATE TABLE `ww_requisition_priority` (
  `priority_id` tinyint(4) NOT NULL AUTO_INCREMENT,
  `priority` varchar(64) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`priority_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_requisition_remarks` */

DROP TABLE IF EXISTS `ww_requisition_remarks`;

CREATE TABLE `ww_requisition_remarks` (
  `requisition_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `remarks` text,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_requisition_status` */

DROP TABLE IF EXISTS `ww_requisition_status`;

CREATE TABLE `ww_requisition_status` (
  `status_id` tinyint(4) NOT NULL AUTO_INCREMENT,
  `status` varchar(64) DEFAULT NULL,
  `description` text,
  `class` varchar(32) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`status_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_resources_category` */

DROP TABLE IF EXISTS `ww_resources_category`;

CREATE TABLE `ww_resources_category` (
  `category_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `category` varchar(32) DEFAULT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_resources_downloadable` */

DROP TABLE IF EXISTS `ww_resources_downloadable`;

CREATE TABLE `ww_resources_downloadable` (
  `resource_download_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(128) DEFAULT NULL,
  `category` enum('Internal','External') NOT NULL DEFAULT 'Internal',
  `description` text,
  `attachments` varchar(128) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`resource_download_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_resources_policies` */

DROP TABLE IF EXISTS `ww_resources_policies`;

CREATE TABLE `ww_resources_policies` (
  `resource_policy_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(128) DEFAULT NULL,
  `category` enum('Internal','External') NOT NULL DEFAULT 'Internal',
  `description` text,
  `attachments` varchar(255) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`resource_policy_id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_resources_request` */

DROP TABLE IF EXISTS `ww_resources_request`;

CREATE TABLE `ww_resources_request` (
  `request_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `request` varchar(128) DEFAULT NULL,
  `request_status_id` int(11) NOT NULL,
  `status` enum('Open','Pending','Close') NOT NULL DEFAULT 'Open',
  `date_needed` date DEFAULT NULL,
  `reason` text,
  `date_sent` timestamp NULL DEFAULT NULL,
  `remarks` text,
  `notify_immediate` int(1) DEFAULT '0',
  `notify_others` varchar(128) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`request_id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_resources_request_approver` */

DROP TABLE IF EXISTS `ww_resources_request_approver`;

CREATE TABLE `ww_resources_request_approver` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `request_id` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) CHARACTER SET latin1 DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '1',
  `request_status_id` int(1) DEFAULT '0',
  `request_status` varchar(16) DEFAULT '',
  `comment_date` datetime DEFAULT '0000-00-00 00:00:00',
  `comment` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `request_user` (`request_id`,`user_id`,`sequence`),
  KEY `request_id` (`request_id`),
  KEY `user_id` (`user_id`),
  KEY `sequence` (`sequence`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_resources_request_notes` */

DROP TABLE IF EXISTS `ww_resources_request_notes`;

CREATE TABLE `ww_resources_request_notes` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `request_id` int(11) unsigned NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `notes` text,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_resources_request_status` */

DROP TABLE IF EXISTS `ww_resources_request_status`;

CREATE TABLE `ww_resources_request_status` (
  `request_status_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `request_status` varchar(16) NOT NULL DEFAULT '',
  `color` varchar(8) DEFAULT '#ffffff',
  `description` tinytext,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`request_status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_resources_request_upload` */

DROP TABLE IF EXISTS `ww_resources_request_upload`;

CREATE TABLE `ww_resources_request_upload` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `request_id` int(11) unsigned NOT NULL,
  `upload_id` int(11) unsigned NOT NULL DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `request_id` (`request_id`),
  KEY `upload_id` (`upload_id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_resources_request_upload_hr` */

DROP TABLE IF EXISTS `ww_resources_request_upload_hr`;

CREATE TABLE `ww_resources_request_upload_hr` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `request_id` int(11) unsigned NOT NULL,
  `upload_id` int(11) unsigned NOT NULL DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `request_id` (`request_id`),
  KEY `upload_id` (`upload_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_roles` */

DROP TABLE IF EXISTS `ww_roles`;

CREATE TABLE `ww_roles` (
  `role_id` int(1) NOT NULL AUTO_INCREMENT,
  `role` varchar(64) NOT NULL,
  `default` tinyint(1) NOT NULL DEFAULT '0',
  `description` varchar(255) DEFAULT NULL,
  `profile_id` varchar(255) DEFAULT NULL,
  `category_id` varchar(255) DEFAULT NULL,
  `company_id` varchar(255) DEFAULT NULL,
  `branch_id` varchar(255) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` timestamp NULL DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`role_id`),
  KEY `role` (`role`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_roles_category` */

DROP TABLE IF EXISTS `ww_roles_category`;

CREATE TABLE `ww_roles_category` (
  `role_category_id` int(1) NOT NULL AUTO_INCREMENT,
  `role_id` varchar(64) NOT NULL,
  `category_field` varchar(255) NOT NULL DEFAULT '0',
  `category_val` varchar(255) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` timestamp NULL DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`role_category_id`),
  KEY `role` (`role_id`)
) ENGINE=InnoDB AUTO_INCREMENT=142 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_roles_menu` */

DROP TABLE IF EXISTS `ww_roles_menu`;

CREATE TABLE `ww_roles_menu` (
  `menu_item_id` int(1) unsigned NOT NULL,
  `role_id` int(1) NOT NULL,
  UNIQUE KEY `profile_id` (`role_id`,`menu_item_id`),
  KEY `menu_item_id` (`menu_item_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_roles_profile` */

DROP TABLE IF EXISTS `ww_roles_profile`;

CREATE TABLE `ww_roles_profile` (
  `role_id` int(1) NOT NULL DEFAULT '0',
  `profile_id` int(1) NOT NULL DEFAULT '0',
  KEY `role_id` (`role_id`),
  KEY `profile_id` (`profile_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_scheduler` */

DROP TABLE IF EXISTS `ww_scheduler`;

CREATE TABLE `ww_scheduler` (
  `scheduler_id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(150) DEFAULT NULL,
  `sp_function` varchar(150) DEFAULT NULL,
  `arguments` varchar(255) DEFAULT NULL,
  `description` text,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(4) DEFAULT '0',
  PRIMARY KEY (`scheduler_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

/*Table structure for table `ww_searchable_type` */

DROP TABLE IF EXISTS `ww_searchable_type`;

CREATE TABLE `ww_searchable_type` (
  `searchable_type_id` int(11) NOT NULL AUTO_INCREMENT,
  `searchable_type` varchar(255) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`searchable_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_sensitivity` */

DROP TABLE IF EXISTS `ww_sensitivity`;

CREATE TABLE `ww_sensitivity` (
  `sensitivity_id` int(11) NOT NULL AUTO_INCREMENT,
  `sensitivity` varchar(32) DEFAULT NULL,
  `description` text,
  `deleted` int(1) DEFAULT '0',
  PRIMARY KEY (`sensitivity_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_sessions` */

DROP TABLE IF EXISTS `ww_sessions`;

CREATE TABLE `ww_sessions` (
  `session_id` varchar(40) NOT NULL,
  `ip_address` varchar(16) NOT NULL,
  `user_agent` text NOT NULL,
  `last_activity` int(11) NOT NULL,
  `user_data` longtext NOT NULL,
  `delete_counter` int(1) DEFAULT NULL,
  PRIMARY KEY (`session_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_birthday` */

DROP TABLE IF EXISTS `ww_system_birthday`;

CREATE TABLE `ww_system_birthday` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `status` enum('info','success','warning','danger') DEFAULT 'info',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) DEFAULT '',
  `content` text,
  `birthday` date NOT NULL DEFAULT '0000-00-00',
  `recipient_id` int(11) NOT NULL DEFAULT '0' COMMENT 'thankyou: array of user ids',
  `readon` datetime DEFAULT '0000-00-00 00:00:00' COMMENT 'whoread: array of user ids',
  `createdon` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `reactedon` datetime DEFAULT '0000-00-00 00:00:00',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `createdon` (`createdon`),
  KEY `readon` (`readon`),
  KEY `deleted` (`deleted`),
  KEY `recipient_id` (`birthday`,`recipient_id`)
) ENGINE=InnoDB AUTO_INCREMENT=403 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_chat` */

DROP TABLE IF EXISTS `ww_system_chat`;

CREATE TABLE `ww_system_chat` (
  `from` int(11) DEFAULT NULL,
  `from_name` varchar(64) DEFAULT NULL,
  `to` int(11) DEFAULT NULL,
  `to_name` varchar(64) DEFAULT NULL,
  `message` text,
  `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `seen` tinyint(1) DEFAULT '0',
  KEY `from` (`from`),
  KEY `to` (`to`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_email_queue` */

DROP TABLE IF EXISTS `ww_system_email_queue`;

CREATE TABLE `ww_system_email_queue` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `timein` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` enum('queued','sending','sent') DEFAULT 'queued',
  `to` text,
  `cc` text,
  `bcc` text,
  `subject` varchar(128) DEFAULT NULL,
  `body` text,
  `attachment` text,
  `attempts` tinyint(1) DEFAULT '0',
  `sent_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `status` (`status`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_feeds` */

DROP TABLE IF EXISTS `ww_system_feeds`;

CREATE TABLE `ww_system_feeds` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `status` enum('info','success','warning','danger') DEFAULT 'info',
  `message_type` enum('Admin','Announcement','Birthday','Comment','Company News','Feedback','Partners','Personnel','System','Time Record','Code of Conduct','Movement','Signatories','Clearance','Recruitment','Performance Appraisal') DEFAULT 'Comment',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) DEFAULT '',
  `feed_content` text,
  `uri` varchar(128) DEFAULT NULL,
  `record_id` int(11) DEFAULT '0',
  `recipient_id` int(11) DEFAULT '0' COMMENT 'thankyou: array of user ids',
  `readon` datetime DEFAULT '0000-00-00 00:00:00' COMMENT 'whoread: array of user ids',
  `createdon` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modifiedon` datetime DEFAULT NULL,
  `reactedon` datetime DEFAULT '0000-00-00 00:00:00',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `createdon` (`createdon`),
  KEY `readon` (`readon`),
  KEY `deleted` (`deleted`),
  KEY `recipient_id` (`recipient_id`,`createdon`,`deleted`),
  KEY `recipient` (`recipient_id`),
  KEY `record_id` (`record_id`)
) ENGINE=InnoDB AUTO_INCREMENT=737 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_feeds_comments` */

DROP TABLE IF EXISTS `ww_system_feeds_comments`;

CREATE TABLE `ww_system_feeds_comments` (
  `feeds_comment_id` int(11) NOT NULL AUTO_INCREMENT,
  `id` int(11) unsigned NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `comment` text,
  `createdon` timestamp NULL DEFAULT NULL,
  `modifiedon` datetime DEFAULT NULL,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`feeds_comment_id`),
  KEY `id_user` (`id`,`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_feeds_recipient` */

DROP TABLE IF EXISTS `ww_system_feeds_recipient`;

CREATE TABLE `ww_system_feeds_recipient` (
  `id` int(11) unsigned NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `department_id` int(11) DEFAULT '0',
  `like` tinyint(1) DEFAULT '0',
  `view` tinyint(1) DEFAULT '0',
  `like_date` datetime DEFAULT NULL,
  `view_date` datetime DEFAULT NULL,
  UNIQUE KEY `id_user` (`id`,`user_id`),
  KEY `id_department` (`id`,`department_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_inbox` */

DROP TABLE IF EXISTS `ww_system_inbox`;

CREATE TABLE `ww_system_inbox` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `status` enum('info','success','warning','danger') DEFAULT 'info',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) DEFAULT '',
  `content` text,
  `recipient_id` int(11) DEFAULT '0' COMMENT 'thankyou: array of user ids',
  `readon` datetime DEFAULT '0000-00-00 00:00:00' COMMENT 'whoread: array of user ids',
  `createdon` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `reactedon` datetime DEFAULT '0000-00-00 00:00:00',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `recipient_id` (`recipient_id`),
  KEY `createdon` (`createdon`),
  KEY `readon` (`readon`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_inbox_recipient` */

DROP TABLE IF EXISTS `ww_system_inbox_recipient`;

CREATE TABLE `ww_system_inbox_recipient` (
  `id` int(11) unsigned NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  KEY `id_user` (`id`,`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_messages` */

DROP TABLE IF EXISTS `ww_system_messages`;

CREATE TABLE `ww_system_messages` (
  `msg_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `msg_type` enum('success','error','attention','warning') NOT NULL,
  `msg_code` varchar(64) DEFAULT NULL,
  `msg` text,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`msg_id`),
  KEY `msg_code` (`msg_code`)
) ENGINE=InnoDB AUTO_INCREMENT=2919 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_messages_template` */

DROP TABLE IF EXISTS `ww_system_messages_template`;

CREATE TABLE `ww_system_messages_template` (
  `msg_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `msg_type` enum('success','error','attention','warning') NOT NULL,
  `module` enum('Dashboard','My Account','Partners','Time Record','Personnel','Appraisal','Training','Analytics') DEFAULT NULL,
  `ext_code` varchar(8) DEFAULT '',
  `msg_code` varchar(64) DEFAULT NULL,
  `msg` text,
  `variable` text,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`msg_id`),
  KEY `msg_code` (`msg_code`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_password_request` */

DROP TABLE IF EXISTS `ww_system_password_request`;

CREATE TABLE `ww_system_password_request` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) unsigned NOT NULL,
  `email` varchar(128) NOT NULL,
  `hash` varchar(128) DEFAULT '',
  `datetime_of_request` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `expiration` datetime DEFAULT NULL,
  `link` varchar(128) NOT NULL,
  `confirmed` tinyint(1) DEFAULT '0',
  `randomized` varchar(8) DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=590 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_series` */

DROP TABLE IF EXISTS `ww_system_series`;

CREATE TABLE `ww_system_series` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `series_code` varchar(32) NOT NULL,
  `series_format` varchar(64) NOT NULL,
  `sequence` int(3) NOT NULL DEFAULT '1',
  `last_sequence` varchar(64) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_series_variable` */

DROP TABLE IF EXISTS `ww_system_series_variable`;

CREATE TABLE `ww_system_series_variable` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `id_code` varchar(32) NOT NULL,
  `id_format` varchar(32) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_sms_queue` */

DROP TABLE IF EXISTS `ww_system_sms_queue`;

CREATE TABLE `ww_system_sms_queue` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `timein` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` enum('queued','sending','sent') DEFAULT 'queued',
  `to` tinytext,
  `cc` text,
  `bcc` text,
  `subject` varchar(128) DEFAULT NULL,
  `body` text,
  `attachment` text,
  `attempts` tinyint(1) DEFAULT '0',
  `sent_on` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_support` */

DROP TABLE IF EXISTS `ww_system_support`;

CREATE TABLE `ww_system_support` (
  `msg_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `msg_code` varchar(64) DEFAULT NULL,
  `msg` text,
  `user_id` int(11) DEFAULT NULL,
  `attachment` varchar(128) DEFAULT NULL,
  `upload` varchar(128) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`msg_id`),
  KEY `msg_code` (`msg_code`)
) ENGINE=InnoDB AUTO_INCREMENT=167 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_template` */

DROP TABLE IF EXISTS `ww_system_template`;

CREATE TABLE `ww_system_template` (
  `template_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `mod_id` int(1) NOT NULL,
  `code` varchar(64) NOT NULL,
  `name` varchar(64) DEFAULT NULL,
  `subject` varchar(64) DEFAULT NULL,
  `body` text,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`template_id`)
) ENGINE=InnoDB AUTO_INCREMENT=136 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_upload_log` */

DROP TABLE IF EXISTS `ww_system_upload_log`;

CREATE TABLE `ww_system_upload_log` (
  `log_id` int(11) NOT NULL AUTO_INCREMENT,
  `template_id` int(11) DEFAULT NULL,
  `file_path` varchar(255) DEFAULT NULL,
  `filesize` int(11) DEFAULT NULL,
  `rows` int(11) DEFAULT NULL,
  `valid_count` int(11) DEFAULT NULL,
  `error_count` int(11) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`log_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_upload_template` */

DROP TABLE IF EXISTS `ww_system_upload_template`;

CREATE TABLE `ww_system_upload_template` (
  `template_id` int(11) NOT NULL AUTO_INCREMENT,
  `template_code` varchar(16) DEFAULT NULL,
  `template_name` varchar(255) DEFAULT NULL,
  `delimiter` varchar(6) DEFAULT NULL,
  `sample_name` varchar(128) DEFAULT NULL,
  `sample_path` varchar(128) DEFAULT NULL,
  `accepted_file_types` varchar(128) DEFAULT NULL,
  `skip_headers` varchar(1) DEFAULT '0',
  `module_id` int(11) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`template_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_upload_template_column` */

DROP TABLE IF EXISTS `ww_system_upload_template_column`;

CREATE TABLE `ww_system_upload_template_column` (
  `template_id` int(11) DEFAULT NULL,
  `table` varchar(64) DEFAULT NULL,
  `column` varchar(64) DEFAULT NULL,
  `data_type` varchar(32) DEFAULT NULL,
  `length` tinyint(4) DEFAULT NULL,
  `required` tinyint(1) DEFAULT '0',
  `sequence` tinyint(4) DEFAULT NULL,
  `encrypt` tinyint(1) DEFAULT '0',
  `allow_blank` tinyint(1) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_system_uploads` */

DROP TABLE IF EXISTS `ww_system_uploads`;

CREATE TABLE `ww_system_uploads` (
  `upload_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `mod_id` int(1) NOT NULL DEFAULT '0',
  `field_id` int(1) NOT NULL DEFAULT '0',
  `tag` varchar(64) DEFAULT '',
  `upload_path` varchar(255) DEFAULT '',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`upload_id`),
  KEY `tag` (`tag`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=907 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_taxcode` */

DROP TABLE IF EXISTS `ww_taxcode`;

CREATE TABLE `ww_taxcode` (
  `taxcode_id` int(11) NOT NULL AUTO_INCREMENT,
  `taxcode` varchar(50) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL,
  `amount` double(15,2) NOT NULL,
  `dependent` varchar(1) DEFAULT NULL,
  `description` text,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) NOT NULL,
  PRIMARY KEY (`taxcode_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ww_time_coordinator` */

DROP TABLE IF EXISTS `ww_time_coordinator`;

CREATE TABLE `ww_time_coordinator` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `alias` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_coordinator_partners` */

DROP TABLE IF EXISTS `ww_time_coordinator_partners`;

CREATE TABLE `ww_time_coordinator_partners` (
  `coordinator_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `deleted` tinyint(1) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_day_allowance` */

DROP TABLE IF EXISTS `ww_time_day_allowance`;

CREATE TABLE `ww_time_day_allowance` (
  `allowance_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `employment_type_id` int(1) NOT NULL,
  `meal` decimal(5,2) DEFAULT '0.00',
  `transpo` decimal(5,2) DEFAULT '0.00',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`allowance_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_day_break` */

DROP TABLE IF EXISTS `ww_time_day_break`;

CREATE TABLE `ww_time_day_break` (
  `break_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `break_name` varchar(64) NOT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`break_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_day_break_range` */

DROP TABLE IF EXISTS `ww_time_day_break_range`;

CREATE TABLE `ww_time_day_break_range` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `company_id` int(11) NOT NULL,
  `break_id` int(1) NOT NULL,
  `hour_from` decimal(5,2) DEFAULT '0.00',
  `hour_to` decimal(5,2) DEFAULT '0.00',
  `deduction` decimal(5,2) DEFAULT '0.00',
  PRIMARY KEY (`id`),
  KEY `company_id` (`break_id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_day_meal` */

DROP TABLE IF EXISTS `ww_time_day_meal`;

CREATE TABLE `ww_time_day_meal` (
  `meal_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `meal_name` varchar(64) NOT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`meal_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_day_meal_range` */

DROP TABLE IF EXISTS `ww_time_day_meal_range`;

CREATE TABLE `ww_time_day_meal_range` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `meal_id` int(1) NOT NULL,
  `hour_from` decimal(5,2) DEFAULT '0.00',
  `hour_to` decimal(5,2) DEFAULT '0.00',
  `multiplier` decimal(5,2) DEFAULT '0.00',
  PRIMARY KEY (`id`),
  KEY `company_id` (`meal_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_day_transpo` */

DROP TABLE IF EXISTS `ww_time_day_transpo`;

CREATE TABLE `ww_time_day_transpo` (
  `transpo_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `transpo_name` varchar(64) NOT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`transpo_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_day_transpo_range` */

DROP TABLE IF EXISTS `ww_time_day_transpo_range`;

CREATE TABLE `ww_time_day_transpo_range` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `transpo_id` int(1) NOT NULL,
  `hour_from` decimal(5,2) DEFAULT '0.00',
  `hour_to` decimal(5,2) DEFAULT '0.00',
  `multiplier` decimal(5,2) DEFAULT '0.00',
  PRIMARY KEY (`id`),
  KEY `company_id` (`transpo_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_day_type` */

DROP TABLE IF EXISTS `ww_time_day_type`;

CREATE TABLE `ww_time_day_type` (
  `day_type_id` int(11) NOT NULL AUTO_INCREMENT,
  `day_type` varchar(64) DEFAULT NULL,
  `day_type_code` varchar(63) DEFAULT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`day_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_day_type_allowance` */

DROP TABLE IF EXISTS `ww_time_day_type_allowance`;

CREATE TABLE `ww_time_day_type_allowance` (
  `type_allowance_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `day_type_id` int(1) NOT NULL,
  `meal_id` int(1) NOT NULL,
  `transpo_id` int(1) NOT NULL,
  PRIMARY KEY (`type_allowance_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_day_type_break` */

DROP TABLE IF EXISTS `ww_time_day_type_break`;

CREATE TABLE `ww_time_day_type_break` (
  `type_break_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `day_type_id` int(1) NOT NULL,
  `break_id` int(1) NOT NULL,
  PRIMARY KEY (`type_break_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_delivery` */

DROP TABLE IF EXISTS `ww_time_delivery`;

CREATE TABLE `ww_time_delivery` (
  `delivery_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `delivery` varchar(32) NOT NULL,
  `leave_days` int(2) NOT NULL DEFAULT '0',
  `paternity_leave_days` int(2) NOT NULL DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`delivery_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_device` */

DROP TABLE IF EXISTS `ww_time_device`;

CREATE TABLE `ww_time_device` (
  `device_id` int(1) NOT NULL AUTO_INCREMENT,
  `device` varchar(32) NOT NULL DEFAULT '',
  `with_col_headers` tinyint(1) DEFAULT '0',
  `delimeter` enum('comma','tab','none') DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `description` text,
  `file_format` enum('Fixed-Length','Comma-Delimited','Tab-Delimited') DEFAULT 'Fixed-Length',
  `column_headers` int(1) DEFAULT '1',
  `folder_location` varchar(64) DEFAULT NULL,
  `file_extension` varchar(16) DEFAULT 'dat',
  `query` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`device_id`),
  KEY `name` (`device`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_device_column` */

DROP TABLE IF EXISTS `ww_time_device_column`;

CREATE TABLE `ww_time_device_column` (
  `column_id` int(1) NOT NULL AUTO_INCREMENT,
  `device_id` int(1) NOT NULL DEFAULT '0',
  `sequence` tinyint(1) DEFAULT '0',
  `field` varchar(16) DEFAULT '',
  `table` varchar(32) DEFAULT '',
  `datatype` enum('numeric','character','datetime') DEFAULT 'numeric',
  `length` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`column_id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_duration` */

DROP TABLE IF EXISTS `ww_time_duration`;

CREATE TABLE `ww_time_duration` (
  `duration_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `duration` varchar(32) NOT NULL,
  `credit` decimal(5,2) NOT NULL DEFAULT '0.00',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`duration_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form` */

DROP TABLE IF EXISTS `ww_time_form`;

CREATE TABLE `ww_time_form` (
  `form_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `form_code` varchar(8) NOT NULL,
  `form` varchar(32) NOT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `can_view` tinyint(1) DEFAULT '1',
  `can_delete` tinyint(1) DEFAULT '1',
  `is_leave` tinyint(1) DEFAULT '1',
  `special_leave` tinyint(1) DEFAULT '0',
  `with_credits` tinyint(1) DEFAULT '0',
  `is_blanket` tinyint(1) DEFAULT '0',
  `only_male` tinyint(1) DEFAULT '0',
  `only_female` tinyint(1) DEFAULT '0',
  `hr_validation` tinyint(1) DEFAULT '0',
  `class` varchar(32) DEFAULT 'fa fa-square-o',
  `description` text,
  `order_by` int(1) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`form_id`),
  KEY `form_code` (`form_code`),
  KEY `form` (`form`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance` */

DROP TABLE IF EXISTS `ww_time_form_balance`;

CREATE TABLE `ww_time_form_balance` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `year` int(1) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `form_id` int(1) NOT NULL DEFAULT '0',
  `form_code` varchar(8) DEFAULT '',
  `previous` decimal(7,4) DEFAULT '0.0000',
  `current` decimal(7,4) DEFAULT '0.0000',
  `used` decimal(7,4) DEFAULT '0.0000',
  `used_insert` decimal(7,4) DEFAULT '0.0000',
  `forfeited` decimal(7,4) DEFAULT '0.0000',
  `balance` decimal(7,4) DEFAULT '0.0000',
  `paid_unit` decimal(7,4) DEFAULT '0.0000',
  `period_from` date DEFAULT '0000-00-00',
  `period_to` date DEFAULT '0000-00-00',
  `period_extension` date DEFAULT '0000-00-00',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `year` (`year`),
  KEY `user_id` (`user_id`),
  KEY `form_id` (`form_id`)
) ENGINE=InnoDB AUTO_INCREMENT=10601 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_20170501` */

DROP TABLE IF EXISTS `ww_time_form_balance_20170501`;

CREATE TABLE `ww_time_form_balance_20170501` (
  `id` int(11) unsigned NOT NULL DEFAULT '0',
  `year` int(1) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `form_id` int(1) NOT NULL DEFAULT '0',
  `form_code` varchar(8) DEFAULT '',
  `previous` decimal(7,4) DEFAULT '0.0000',
  `current` decimal(7,4) DEFAULT '0.0000',
  `used` decimal(7,4) DEFAULT '0.0000',
  `used_insert` decimal(7,4) DEFAULT '0.0000',
  `balance` decimal(7,4) DEFAULT '0.0000',
  `paid_unit` decimal(7,4) DEFAULT '0.0000',
  `period_from` date DEFAULT '0000-00-00',
  `period_to` date DEFAULT '0000-00-00',
  `period_extension` date DEFAULT '0000-00-00',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_20180224` */

DROP TABLE IF EXISTS `ww_time_form_balance_20180224`;

CREATE TABLE `ww_time_form_balance_20180224` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `year` int(1) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `form_id` int(1) NOT NULL DEFAULT '0',
  `form_code` varchar(8) DEFAULT '',
  `previous` decimal(7,4) DEFAULT '0.0000',
  `current` decimal(7,4) DEFAULT '0.0000',
  `used` decimal(7,4) DEFAULT '0.0000',
  `used_insert` decimal(7,4) DEFAULT '0.0000',
  `balance` decimal(7,4) DEFAULT '0.0000',
  `paid_unit` decimal(7,4) DEFAULT '0.0000',
  `period_from` date DEFAULT '0000-00-00',
  `period_to` date DEFAULT '0000-00-00',
  `period_extension` date DEFAULT '0000-00-00',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `year` (`year`),
  KEY `user_id` (`user_id`),
  KEY `form_id` (`form_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_20181201` */

DROP TABLE IF EXISTS `ww_time_form_balance_20181201`;

CREATE TABLE `ww_time_form_balance_20181201` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `year` int(1) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `form_id` int(1) NOT NULL DEFAULT '0',
  `form_code` varchar(8) DEFAULT '',
  `previous` decimal(7,4) DEFAULT '0.0000',
  `current` decimal(7,4) DEFAULT '0.0000',
  `used` decimal(7,4) DEFAULT '0.0000',
  `used_insert` decimal(7,4) DEFAULT '0.0000',
  `forfeited` decimal(7,4) DEFAULT '0.0000',
  `balance` decimal(7,4) DEFAULT '0.0000',
  `paid_unit` decimal(7,4) DEFAULT '0.0000',
  `period_from` date DEFAULT '0000-00-00',
  `period_to` date DEFAULT '0000-00-00',
  `period_extension` date DEFAULT '0000-00-00',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `year` (`year`),
  KEY `user_id` (`user_id`),
  KEY `form_id` (`form_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8802 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_20181226` */

DROP TABLE IF EXISTS `ww_time_form_balance_20181226`;

CREATE TABLE `ww_time_form_balance_20181226` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `year` int(1) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `form_id` int(1) NOT NULL DEFAULT '0',
  `form_code` varchar(8) DEFAULT '',
  `previous` decimal(7,4) DEFAULT '0.0000',
  `current` decimal(7,4) DEFAULT '0.0000',
  `used` decimal(7,4) DEFAULT '0.0000',
  `used_insert` decimal(7,4) DEFAULT '0.0000',
  `forfeited` decimal(7,4) DEFAULT '0.0000',
  `balance` decimal(7,4) DEFAULT '0.0000',
  `paid_unit` decimal(7,4) DEFAULT '0.0000',
  `period_from` date DEFAULT '0000-00-00',
  `period_to` date DEFAULT '0000-00-00',
  `period_extension` date DEFAULT '0000-00-00',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `year` (`year`),
  KEY `user_id` (`user_id`),
  KEY `form_id` (`form_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8804 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_20190129` */

DROP TABLE IF EXISTS `ww_time_form_balance_20190129`;

CREATE TABLE `ww_time_form_balance_20190129` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `year` int(1) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `form_id` int(1) NOT NULL DEFAULT '0',
  `form_code` varchar(8) DEFAULT '',
  `previous` decimal(7,4) DEFAULT '0.0000',
  `current` decimal(7,4) DEFAULT '0.0000',
  `used` decimal(7,4) DEFAULT '0.0000',
  `used_insert` decimal(7,4) DEFAULT '0.0000',
  `forfeited` decimal(7,4) DEFAULT '0.0000',
  `balance` decimal(7,4) DEFAULT '0.0000',
  `paid_unit` decimal(7,4) DEFAULT '0.0000',
  `period_from` date DEFAULT '0000-00-00',
  `period_to` date DEFAULT '0000-00-00',
  `period_extension` date DEFAULT '0000-00-00',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `year` (`year`),
  KEY `user_id` (`user_id`),
  KEY `form_id` (`form_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9709 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_20190301` */

DROP TABLE IF EXISTS `ww_time_form_balance_20190301`;

CREATE TABLE `ww_time_form_balance_20190301` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `year` int(1) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `form_id` int(1) NOT NULL DEFAULT '0',
  `form_code` varchar(8) DEFAULT '',
  `previous` decimal(7,4) DEFAULT '0.0000',
  `current` decimal(7,4) DEFAULT '0.0000',
  `used` decimal(7,4) DEFAULT '0.0000',
  `used_insert` decimal(7,4) DEFAULT '0.0000',
  `forfeited` decimal(7,4) DEFAULT '0.0000',
  `balance` decimal(7,4) DEFAULT '0.0000',
  `paid_unit` decimal(7,4) DEFAULT '0.0000',
  `period_from` date DEFAULT '0000-00-00',
  `period_to` date DEFAULT '0000-00-00',
  `period_extension` date DEFAULT '0000-00-00',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `year` (`year`),
  KEY `user_id` (`user_id`),
  KEY `form_id` (`form_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9819 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_20191223` */

DROP TABLE IF EXISTS `ww_time_form_balance_20191223`;

CREATE TABLE `ww_time_form_balance_20191223` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `year` int(1) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `form_id` int(1) NOT NULL DEFAULT '0',
  `form_code` varchar(8) DEFAULT '',
  `previous` decimal(7,4) DEFAULT '0.0000',
  `current` decimal(7,4) DEFAULT '0.0000',
  `used` decimal(7,4) DEFAULT '0.0000',
  `used_insert` decimal(7,4) DEFAULT '0.0000',
  `forfeited` decimal(7,4) DEFAULT '0.0000',
  `balance` decimal(7,4) DEFAULT '0.0000',
  `paid_unit` decimal(7,4) DEFAULT '0.0000',
  `period_from` date DEFAULT '0000-00-00',
  `period_to` date DEFAULT '0000-00-00',
  `period_extension` date DEFAULT '0000-00-00',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `year` (`year`),
  KEY `user_id` (`user_id`),
  KEY `form_id` (`form_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_accrual` */

DROP TABLE IF EXISTS `ww_time_form_balance_accrual`;

CREATE TABLE `ww_time_form_balance_accrual` (
  `user_id` int(11) unsigned NOT NULL,
  `leave_balance_id` int(11) unsigned NOT NULL DEFAULT '0',
  `form_id` int(11) NOT NULL DEFAULT '0',
  `form_code` varchar(10) NOT NULL,
  `date_accrued` date NOT NULL DEFAULT '0000-00-00',
  `accrual` decimal(7,4) NOT NULL DEFAULT '0.0000',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`user_id`,`leave_balance_id`,`form_id`,`date_accrued`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_accrual_04232018` */

DROP TABLE IF EXISTS `ww_time_form_balance_accrual_04232018`;

CREATE TABLE `ww_time_form_balance_accrual_04232018` (
  `user_id` int(11) unsigned NOT NULL,
  `leave_balance_id` int(11) unsigned NOT NULL DEFAULT '0',
  `form_id` int(11) NOT NULL DEFAULT '0',
  `form_code` varchar(10) NOT NULL,
  `date_accrued` date NOT NULL DEFAULT '0000-00-00',
  `accrual` decimal(7,4) NOT NULL DEFAULT '0.0000',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`user_id`,`leave_balance_id`,`form_id`,`date_accrued`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_accrual_20170807` */

DROP TABLE IF EXISTS `ww_time_form_balance_accrual_20170807`;

CREATE TABLE `ww_time_form_balance_accrual_20170807` (
  `user_id` int(11) unsigned NOT NULL,
  `leave_balance_id` int(11) unsigned NOT NULL DEFAULT '0',
  `form_id` int(11) NOT NULL DEFAULT '0',
  `form_code` varchar(10) NOT NULL,
  `date_accrued` date NOT NULL DEFAULT '0000-00-00',
  `accrual` decimal(7,4) NOT NULL DEFAULT '0.0000',
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`user_id`,`leave_balance_id`,`form_id`,`date_accrued`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_accrual_20180224` */

DROP TABLE IF EXISTS `ww_time_form_balance_accrual_20180224`;

CREATE TABLE `ww_time_form_balance_accrual_20180224` (
  `user_id` int(11) unsigned NOT NULL,
  `leave_balance_id` int(11) unsigned NOT NULL DEFAULT '0',
  `form_id` int(11) NOT NULL DEFAULT '0',
  `form_code` varchar(10) NOT NULL,
  `date_accrued` date NOT NULL DEFAULT '0000-00-00',
  `accrual` decimal(7,4) NOT NULL DEFAULT '0.0000',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`user_id`,`leave_balance_id`,`form_id`,`date_accrued`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_accrual_20181127` */

DROP TABLE IF EXISTS `ww_time_form_balance_accrual_20181127`;

CREATE TABLE `ww_time_form_balance_accrual_20181127` (
  `user_id` int(11) unsigned NOT NULL,
  `leave_balance_id` int(11) unsigned NOT NULL DEFAULT '0',
  `form_id` int(11) NOT NULL DEFAULT '0',
  `form_code` varchar(10) NOT NULL,
  `date_accrued` date NOT NULL DEFAULT '0000-00-00',
  `accrual` decimal(7,4) NOT NULL DEFAULT '0.0000',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`user_id`,`leave_balance_id`,`form_id`,`date_accrued`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_accrual_deleted` */

DROP TABLE IF EXISTS `ww_time_form_balance_accrual_deleted`;

CREATE TABLE `ww_time_form_balance_accrual_deleted` (
  `user_id` int(11) unsigned NOT NULL,
  `leave_balance_id` int(11) unsigned NOT NULL DEFAULT '0',
  `form_id` int(11) NOT NULL DEFAULT '0',
  `form_code` varchar(10) NOT NULL,
  `date_accrued` date NOT NULL DEFAULT '0000-00-00',
  `accrual` decimal(7,4) NOT NULL DEFAULT '0.0000',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`user_id`,`leave_balance_id`,`form_id`,`date_accrued`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_before_update_from_2017` */

DROP TABLE IF EXISTS `ww_time_form_balance_before_update_from_2017`;

CREATE TABLE `ww_time_form_balance_before_update_from_2017` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `year` int(1) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `form_id` int(1) NOT NULL DEFAULT '0',
  `form_code` varchar(8) DEFAULT '',
  `previous` decimal(7,4) DEFAULT '0.0000',
  `current` decimal(7,4) DEFAULT '0.0000',
  `used` decimal(7,4) DEFAULT '0.0000',
  `used_insert` decimal(7,4) DEFAULT '0.0000',
  `balance` decimal(7,4) DEFAULT '0.0000',
  `paid_unit` decimal(7,4) DEFAULT '0.0000',
  `period_from` date DEFAULT '0000-00-00',
  `period_to` date DEFAULT '0000-00-00',
  `period_extension` date DEFAULT '0000-00-00',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `year` (`year`),
  KEY `user_id` (`user_id`),
  KEY `form_id` (`form_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8680 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_credit_class` */

DROP TABLE IF EXISTS `ww_time_form_balance_credit_class`;

CREATE TABLE `ww_time_form_balance_credit_class` (
  `class_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `class_code` varchar(32) DEFAULT NULL,
  `class` varchar(64) DEFAULT NULL,
  `form_id` int(1) NOT NULL,
  `form_code` varchar(16) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`class_id`),
  KEY `class_code` (`class_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_setup` */

DROP TABLE IF EXISTS `ww_time_form_balance_setup`;

CREATE TABLE `ww_time_form_balance_setup` (
  `balance_setup_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `policy_id` int(1) DEFAULT '0',
  `employment_status_id` int(1) NOT NULL,
  `employment_type_id` int(1) NOT NULL,
  `user_id` int(11) DEFAULT '0',
  `effective_date` date NOT NULL DEFAULT '0000-00-00',
  `employment_status` varchar(32) DEFAULT NULL,
  `employment_type` varchar(32) DEFAULT NULL,
  `from` date NOT NULL DEFAULT '0000-00-00',
  `to` date NOT NULL DEFAULT '0000-00-00',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`balance_setup_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_setup_increment` */

DROP TABLE IF EXISTS `ww_time_form_balance_setup_increment`;

CREATE TABLE `ww_time_form_balance_setup_increment` (
  `id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `policy_id` int(1) unsigned NOT NULL DEFAULT '0',
  `tenure` int(1) NOT NULL DEFAULT '0',
  `from` decimal(4,2) DEFAULT '0.00',
  `to` decimal(4,2) DEFAULT '0.00',
  `unit` enum('MONTH','YEAR') NOT NULL DEFAULT 'YEAR',
  `credits` decimal(7,4) NOT NULL DEFAULT '0.0000',
  `balance_setup_id` int(11) DEFAULT '0',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `tenure` (`tenure`)
) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_balance_setup_policy` */

DROP TABLE IF EXISTS `ww_time_form_balance_setup_policy`;

CREATE TABLE `ww_time_form_balance_setup_policy` (
  `policy_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `class_id` int(1) DEFAULT '0',
  `form_id` int(1) NOT NULL DEFAULT '0',
  `form_code` varchar(16) DEFAULT NULL,
  `starting_credit` decimal(10,2) NOT NULL DEFAULT '0.00',
  `max_credit` decimal(10,2) NOT NULL DEFAULT '0.00',
  `effectivity` date DEFAULT '0000-00-00',
  `company_ids` varchar(64) DEFAULT NULL,
  `employment_status_ids` varchar(64) DEFAULT NULL,
  `employment_type_ids` varchar(64) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `company_id` int(11) DEFAULT NULL,
  `balance_setup_id` int(1) unsigned NOT NULL DEFAULT '0',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`policy_id`),
  KEY `balance_setup_id` (`balance_setup_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_class` */

DROP TABLE IF EXISTS `ww_time_form_class`;

CREATE TABLE `ww_time_form_class` (
  `class_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `form_id` int(1) NOT NULL,
  `form_code` varchar(8) DEFAULT NULL,
  `class_code` varchar(85) DEFAULT NULL,
  `class` varchar(150) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`class_id`),
  KEY `class_code` (`class_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=729 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_class_policy` */

DROP TABLE IF EXISTS `ww_time_form_class_policy`;

CREATE TABLE `ww_time_form_class_policy` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `class_id` int(1) NOT NULL DEFAULT '0',
  `class_value` text,
  `description` varchar(128) DEFAULT NULL,
  `severity` enum('Warning','Strict Compliance') DEFAULT 'Warning',
  `company_id` varchar(255) DEFAULT 'ALL',
  `employment_status_id` varchar(32) DEFAULT 'ALL',
  `employment_type_id` varchar(32) DEFAULT 'ALL',
  `role_id` varchar(32) DEFAULT 'ALL',
  `division_id` varchar(128) DEFAULT 'ALL',
  `department_id` text,
  `group_id` text,
  `project_id` text,
  `created_by` int(11) DEFAULT '0',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `shift_company_class` (`class_id`)
) ENGINE=InnoDB AUTO_INCREMENT=166 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_class_policy_setup` */

DROP TABLE IF EXISTS `ww_time_form_class_policy_setup`;

CREATE TABLE `ww_time_form_class_policy_setup` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `class_id` int(1) NOT NULL DEFAULT '0',
  `class_value` text,
  `field_id` varchar(32) DEFAULT NULL,
  `field_value` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `shift_company_class` (`class_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_employment` */

DROP TABLE IF EXISTS `ww_time_form_employment`;

CREATE TABLE `ww_time_form_employment` (
  `employment_type` int(11) NOT NULL DEFAULT '0',
  `no_late` tinyint(1) DEFAULT '0',
  `no_undertime` tinyint(1) DEFAULT '0',
  `no_absent` tinyint(1) DEFAULT '0',
  `no_awol` tinyint(1) DEFAULT '0',
  `days_awol` tinyint(1) DEFAULT '5',
  `send_notification` tinyint(1) DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_form_status` */

DROP TABLE IF EXISTS `ww_time_form_status`;

CREATE TABLE `ww_time_form_status` (
  `form_status_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `form_status` varchar(16) NOT NULL DEFAULT '',
  `color` varchar(8) DEFAULT '#ffffff',
  `description` tinytext,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`form_status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_forms` */

DROP TABLE IF EXISTS `ww_time_forms`;

CREATE TABLE `ww_time_forms` (
  `forms_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `form_status_id` tinyint(1) NOT NULL DEFAULT '0',
  `form_id` int(1) NOT NULL DEFAULT '0',
  `form_code` varchar(8) DEFAULT '',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) DEFAULT '',
  `day` decimal(5,2) DEFAULT '0.00',
  `hrs` decimal(5,2) DEFAULT '0.00',
  `ot_break` decimal(5,2) DEFAULT '0.00',
  `focus_date` date DEFAULT '0000-00-00',
  `date_from` date DEFAULT '0000-00-00',
  `date_to` date DEFAULT '0000-00-00',
  `date_approved` datetime DEFAULT '0000-00-00 00:00:00',
  `date_declined` datetime DEFAULT '0000-00-00 00:00:00',
  `date_cancelled` datetime DEFAULT '0000-00-00 00:00:00',
  `date_sent` datetime DEFAULT '0000-00-00 00:00:00',
  `reason` text,
  `scheduled` enum('YES','NO') DEFAULT 'YES',
  `type` enum('File','Use') DEFAULT 'File',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`forms_id`),
  KEY `form_id` (`form_id`),
  KEY `user_id` (`user_id`),
  KEY `deleted` (`deleted`),
  KEY `created_on` (`created_on`),
  KEY `date_from` (`date_from`),
  KEY `forms_status_id` (`form_status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=151315 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_forms_approver` */

DROP TABLE IF EXISTS `ww_time_forms_approver`;

CREATE TABLE `ww_time_forms_approver` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `forms_id` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) CHARACTER SET latin1 DEFAULT '',
  `condition` enum('ALL','By Level','Either Of') DEFAULT 'By Level',
  `sequence` tinyint(1) DEFAULT '1',
  `form_status_id` int(1) DEFAULT '0',
  `form_status` varchar(16) DEFAULT '',
  `comment_date` datetime DEFAULT '0000-00-00 00:00:00',
  `comment` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `forms_user` (`forms_id`,`user_id`,`sequence`),
  KEY `forms_id` (`forms_id`),
  KEY `user_id` (`user_id`),
  KEY `sequence` (`sequence`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=180135 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_forms_blanket` */

DROP TABLE IF EXISTS `ww_time_forms_blanket`;

CREATE TABLE `ww_time_forms_blanket` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `forms_id` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) DEFAULT '',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1378 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_forms_date` */

DROP TABLE IF EXISTS `ww_time_forms_date`;

CREATE TABLE `ww_time_forms_date` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `forms_id` int(11) unsigned NOT NULL DEFAULT '0',
  `date` date NOT NULL,
  `day` decimal(3,2) DEFAULT '0.00',
  `hrs` decimal(5,2) DEFAULT '0.00',
  `duration_id` tinyint(1) DEFAULT '1',
  `time_from` datetime DEFAULT '0000-00-00 00:00:00',
  `time_to` datetime DEFAULT '0000-00-00 00:00:00',
  `shift_id` int(1) DEFAULT '0',
  `shift_to` int(1) DEFAULT '0',
  `credit` decimal(5,2) DEFAULT NULL,
  `credit_back` decimal(5,2) DEFAULT NULL,
  `leave_balance_id` int(11) DEFAULT '0',
  `approved_comment` text,
  `declined_comment` text,
  `cancelled_comment` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `forms_id` (`forms_id`),
  KEY `forms_date` (`date`,`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=182036 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_forms_maternity` */

DROP TABLE IF EXISTS `ww_time_forms_maternity`;

CREATE TABLE `ww_time_forms_maternity` (
  `forms_id` int(11) unsigned NOT NULL DEFAULT '0',
  `delivery_id` int(1) DEFAULT '0',
  `expected_date` date DEFAULT '0000-00-00',
  `actual_date` date DEFAULT '0000-00-00',
  `return_date` date DEFAULT '0000-00-00',
  `pregnancy_no` tinyint(1) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_forms_obt` */

DROP TABLE IF EXISTS `ww_time_forms_obt`;

CREATE TABLE `ww_time_forms_obt` (
  `forms_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `contact_no` varchar(32) DEFAULT NULL,
  `name` varchar(64) DEFAULT NULL,
  `position` varchar(64) DEFAULT NULL,
  `company_to_visit` varchar(64) DEFAULT NULL,
  `location` varchar(128) DEFAULT NULL,
  PRIMARY KEY (`forms_id`)
) ENGINE=InnoDB AUTO_INCREMENT=151315 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_forms_obt_purpose` */

DROP TABLE IF EXISTS `ww_time_forms_obt_purpose`;

CREATE TABLE `ww_time_forms_obt_purpose` (
  `purpose_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `purpose` varchar(250) NOT NULL,
  `description` text,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(1) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(1) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`purpose_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_forms_obt_transpo` */

DROP TABLE IF EXISTS `ww_time_forms_obt_transpo`;

CREATE TABLE `ww_time_forms_obt_transpo` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `forms_id` int(11) unsigned NOT NULL DEFAULT '0',
  `purpose_id` int(11) DEFAULT NULL,
  `transpo_mode` enum('Airplane','Bus','Jeep','Taxi','Train','Tricycle','Van','Others') DEFAULT 'Others',
  `remarks` text,
  `amount` decimal(10,2) DEFAULT '0.00',
  `status_id` int(1) DEFAULT '3',
  `request_remarks` text,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_forms_ot_leave` */

DROP TABLE IF EXISTS `ww_time_forms_ot_leave`;

CREATE TABLE `ww_time_forms_ot_leave` (
  `forms_id` int(11) NOT NULL,
  `credit` decimal(5,2) DEFAULT NULL,
  `remarks` text,
  `validated_by` int(11) DEFAULT NULL,
  `status_id` int(1) DEFAULT NULL,
  `expiration_date` date NOT NULL DEFAULT '0000-00-00',
  `used_by_form` int(11) NOT NULL DEFAULT '0',
  `used` decimal(5,2) NOT NULL DEFAULT '0.00',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`forms_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_forms_ot_leave_used` */

DROP TABLE IF EXISTS `ww_time_forms_ot_leave_used`;

CREATE TABLE `ww_time_forms_ot_leave_used` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `forms_id` int(11) NOT NULL DEFAULT '0',
  `used_by_form` int(11) NOT NULL DEFAULT '0',
  `used` double(5,2) NOT NULL DEFAULT '0.00',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_forms_upload` */

DROP TABLE IF EXISTS `ww_time_forms_upload`;

CREATE TABLE `ww_time_forms_upload` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `forms_id` int(11) NOT NULL,
  `upload_id` int(11) NOT NULL DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `forms_id` (`forms_id`),
  KEY `upload_id` (`upload_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1106 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_grace_period` */

DROP TABLE IF EXISTS `ww_time_grace_period`;

CREATE TABLE `ww_time_grace_period` (
  `grace_period_id` int(11) NOT NULL AUTO_INCREMENT,
  `company_id` int(11) NOT NULL DEFAULT '0',
  `employment_type` int(1) DEFAULT '0',
  `employee_type` int(1) DEFAULT '0',
  `grace_period` time DEFAULT '00:00:00',
  `grace_period_minutes` decimal(5,2) DEFAULT '0.00',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`grace_period_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_holiday` */

DROP TABLE IF EXISTS `ww_time_holiday`;

CREATE TABLE `ww_time_holiday` (
  `holiday_id` int(11) NOT NULL AUTO_INCREMENT,
  `holiday` varchar(64) NOT NULL DEFAULT '',
  `holiday_date` date NOT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `legal` tinyint(1) DEFAULT '1',
  `locations` varchar(128) DEFAULT NULL,
  `location_count` int(1) DEFAULT '0',
  `user_count` int(1) DEFAULT '0',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`holiday_id`),
  KEY `holiday_date` (`holiday_date`),
  KEY `deleted` (`deleted`),
  KEY `legal` (`legal`)
) ENGINE=InnoDB AUTO_INCREMENT=126 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_holiday_event` */

DROP TABLE IF EXISTS `ww_time_holiday_event`;

CREATE TABLE `ww_time_holiday_event` (
  `event_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `event` varchar(64) NOT NULL DEFAULT '',
  `event_month` int(1) NOT NULL DEFAULT '1',
  `event_day` int(1) NOT NULL DEFAULT '1',
  `status_id` tinyint(1) DEFAULT '0',
  `days_before` int(1) DEFAULT '0',
  `days_after` int(1) DEFAULT '0',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`event_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_holiday_location` */

DROP TABLE IF EXISTS `ww_time_holiday_location`;

CREATE TABLE `ww_time_holiday_location` (
  `holiday_id` int(11) NOT NULL DEFAULT '0',
  `location_id` int(1) DEFAULT '0',
  `location` varchar(64) DEFAULT '',
  `user_id` int(11) DEFAULT '0',
  `user` varchar(64) DEFAULT '',
  `deleted` tinyint(1) DEFAULT '0',
  KEY `location_id` (`location_id`),
  KEY `user_id` (`user_id`),
  KEY `deleted` (`deleted`),
  KEY `holiday_id` (`holiday_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_leave_duration` */

DROP TABLE IF EXISTS `ww_time_leave_duration`;

CREATE TABLE `ww_time_leave_duration` (
  `leave_duration_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `leave_duration` varchar(32) NOT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`leave_duration_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_period` */

DROP TABLE IF EXISTS `ww_time_period`;

CREATE TABLE `ww_time_period` (
  `period_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `period_year` varchar(4) NOT NULL DEFAULT '',
  `period_month` enum('01','02','03','04','05','06','07','08','09','10','11','12') NOT NULL,
  `project_id` int(1) NOT NULL DEFAULT '0',
  `company_id` int(11) DEFAULT NULL,
  `apply_to_id` int(1) DEFAULT '0',
  `cutoff_monthly` varchar(20) DEFAULT NULL,
  `payroll_date` date NOT NULL,
  `date_from` date NOT NULL,
  `date_to` date NOT NULL,
  `cutoff` date NOT NULL,
  `previous_cutoff` date NOT NULL,
  `pop_dates` tinyint(1) DEFAULT '0',
  `closed` tinyint(1) DEFAULT '0',
  `last_processed` datetime DEFAULT NULL,
  `processed` int(1) DEFAULT '0',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`period_id`),
  UNIQUE KEY `period_coverage` (`period_year`,`period_month`,`payroll_date`,`date_from`,`date_to`,`company_id`),
  KEY `period_year` (`period_year`,`period_month`)
) ENGINE=InnoDB AUTO_INCREMENT=794 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_period_apply_to` */

DROP TABLE IF EXISTS `ww_time_period_apply_to`;

CREATE TABLE `ww_time_period_apply_to` (
  `apply_to_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `apply_to` varchar(64) NOT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`apply_to_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_period_apply_to_id` */

DROP TABLE IF EXISTS `ww_time_period_apply_to_id`;

CREATE TABLE `ww_time_period_apply_to_id` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `period_id` int(11) NOT NULL,
  `apply_to_id` int(11) NOT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `last_processed` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2513 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_period_extension` */

DROP TABLE IF EXISTS `ww_time_period_extension`;

CREATE TABLE `ww_time_period_extension` (
  `extension_id` int(11) NOT NULL AUTO_INCREMENT,
  `period_id` int(11) NOT NULL,
  `process_until` date DEFAULT NULL,
  `allow_pending_until` date DEFAULT NULL,
  `apply_lates` tinyint(1) DEFAULT '0',
  `apply_late_from` date DEFAULT NULL,
  `apply_late_to` date DEFAULT NULL,
  `apply_overtime_from` date DEFAULT NULL,
  `apply_overtime_to` date DEFAULT NULL,
  PRIMARY KEY (`extension_id`),
  KEY `period_id` (`period_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_period_log` */

DROP TABLE IF EXISTS `ww_time_period_log`;

CREATE TABLE `ww_time_period_log` (
  `proc_log_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `period_id` int(11) NOT NULL DEFAULT '0',
  `partner_type_id` int(1) DEFAULT '0',
  `partner_type` varchar(16) DEFAULT '',
  `proc_log` int(1) DEFAULT '0',
  `processed` int(1) DEFAULT '0',
  PRIMARY KEY (`proc_log_id`),
  UNIQUE KEY `period_partner_type` (`period_id`,`partner_type_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record` */

DROP TABLE IF EXISTS `ww_time_record`;

CREATE TABLE `ww_time_record` (
  `record_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `biometric` varchar(8) NOT NULL DEFAULT '',
  `shift_id` int(1) DEFAULT '0',
  `shift` varchar(32) DEFAULT NULL,
  `date` date NOT NULL,
  `processed` tinyint(1) DEFAULT '0',
  `override` tinyint(1) DEFAULT '0',
  `aux_shift_id` int(1) DEFAULT '0',
  `aux_shift` varchar(32) DEFAULT '',
  `aux_time_in` datetime DEFAULT NULL,
  `aux_time_out` datetime DEFAULT NULL,
  `time_in` datetime DEFAULT NULL,
  `time_out` datetime DEFAULT NULL,
  `flexible_min` int(1) DEFAULT '0',
  `flexible_time` time DEFAULT '00:00:00',
  `breaka_in` datetime DEFAULT NULL,
  `breaka_out` datetime DEFAULT NULL,
  `breakb_in` datetime DEFAULT NULL,
  `breakb_out` datetime DEFAULT NULL,
  `ot_in` datetime DEFAULT NULL,
  `ot_out` datetime DEFAULT NULL,
  `ot_in2` datetime DEFAULT NULL,
  `ot_out2` datetime DEFAULT NULL,
  `suspended` tinyint(1) DEFAULT '0',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  PRIMARY KEY (`record_id`),
  UNIQUE KEY `user_date` (`user_id`,`date`),
  KEY `user_id` (`user_id`),
  KEY `date` (`date`)
) ENGINE=InnoDB AUTO_INCREMENT=1768037 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record_allowance` */

DROP TABLE IF EXISTS `ww_time_record_allowance`;

CREATE TABLE `ww_time_record_allowance` (
  `id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `company_id` int(1) NOT NULL,
  `employment_type_id` int(1) NOT NULL,
  `from` int(1) DEFAULT '0',
  `to` int(1) DEFAULT '0',
  `cost` decimal(10,0) DEFAULT '2',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record_process` */

DROP TABLE IF EXISTS `ww_time_record_process`;

CREATE TABLE `ww_time_record_process` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `record_id` int(11) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `time_period_id` int(11) DEFAULT '0',
  `date` date NOT NULL DEFAULT '0000-00-00',
  `payroll_date` date NOT NULL DEFAULT '0000-00-00',
  `original_payroll_date` date DEFAULT '0000-00-00',
  `latefile` tinyint(1) DEFAULT '0',
  `transaction_id` int(1) DEFAULT '0',
  `transaction_code` varchar(32) DEFAULT NULL,
  `transaction_type_id` int(1) DEFAULT '1',
  `quantity` decimal(12,3) DEFAULT '0.000',
  `unit_rate` decimal(12,3) DEFAULT '0.000',
  `remarks` text,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `payroll_date` (`payroll_date`,`date`,`deleted`),
  KEY `user_id_date_payroll_date` (`user_id`,`date`,`payroll_date`,`latefile`,`transaction_code`,`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=107686323 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record_process_20170715` */

DROP TABLE IF EXISTS `ww_time_record_process_20170715`;

CREATE TABLE `ww_time_record_process_20170715` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `record_id` int(11) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `time_period_id` int(11) DEFAULT '0',
  `date` date NOT NULL DEFAULT '0000-00-00',
  `payroll_date` date NOT NULL DEFAULT '0000-00-00',
  `original_payroll_date` date DEFAULT '0000-00-00',
  `latefile` tinyint(1) DEFAULT '0',
  `transaction_id` int(1) DEFAULT '0',
  `transaction_code` varchar(32) DEFAULT NULL,
  `transaction_type_id` int(1) DEFAULT '1',
  `quantity` decimal(12,3) DEFAULT '0.000',
  `unit_rate` decimal(12,3) DEFAULT '0.000',
  `remarks` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `payroll_date` (`payroll_date`,`date`,`deleted`),
  KEY `user_id_date_payroll_date` (`user_id`,`date`,`payroll_date`,`latefile`,`transaction_code`,`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=1798995 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record_process_type` */

DROP TABLE IF EXISTS `ww_time_record_process_type`;

CREATE TABLE `ww_time_record_process_type` (
  `time_record_process_type_id` int(11) NOT NULL AUTO_INCREMENT,
  `time_record_process_type` varchar(30) DEFAULT NULL,
  `description` text,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`time_record_process_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record_raw` */

DROP TABLE IF EXISTS `ww_time_record_raw`;

CREATE TABLE `ww_time_record_raw` (
  `raw_id` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `user_id` int(11) DEFAULT '0',
  `biometric` varchar(8) NOT NULL DEFAULT '',
  `date` date NOT NULL DEFAULT '0000-00-00',
  `location` varchar(128) DEFAULT NULL,
  `location_id` int(1) DEFAULT NULL,
  `device_id` int(1) DEFAULT NULL,
  `checktime` datetime NOT NULL,
  `checktype` varchar(8) DEFAULT NULL,
  `processed` tinyint(1) DEFAULT '0',
  `last_processed` datetime DEFAULT NULL,
  UNIQUE KEY `biometric_date_checktime` (`biometric`,`date`,`checktime`),
  KEY `raw_id` (`raw_id`),
  KEY `user_id` (`user_id`),
  KEY `date` (`date`),
  KEY `biometric` (`biometric`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record_schedule_history` */

DROP TABLE IF EXISTS `ww_time_record_schedule_history`;

CREATE TABLE `ww_time_record_schedule_history` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `coordinator_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `date` date DEFAULT NULL,
  `schedule` date DEFAULT NULL,
  `from_date` date DEFAULT NULL,
  `to_date` date DEFAULT NULL,
  `shift_id` int(11) DEFAULT NULL,
  `calendar_id` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=223139 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record_schedule_history_copy` */

DROP TABLE IF EXISTS `ww_time_record_schedule_history_copy`;

CREATE TABLE `ww_time_record_schedule_history_copy` (
  `id` int(11) unsigned NOT NULL DEFAULT '0',
  `coordinator_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `date` date DEFAULT NULL,
  `schedule` date DEFAULT NULL,
  `from_date` date DEFAULT NULL,
  `to_date` date DEFAULT NULL,
  `shift_id` int(11) DEFAULT NULL,
  `calendar_id` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record_summary` */

DROP TABLE IF EXISTS `ww_time_record_summary`;

CREATE TABLE `ww_time_record_summary` (
  `record_id` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `id_number` varchar(8) NOT NULL DEFAULT '',
  `date` date NOT NULL DEFAULT '0000-00-00',
  `period_id` int(11) DEFAULT '0',
  `payroll_date` date NOT NULL DEFAULT '0000-00-00',
  `day_type` varchar(16) DEFAULT 'REGULAR',
  `hrs_rendered` decimal(5,2) DEFAULT '0.00',
  `hrs_actual` decimal(5,2) DEFAULT '0.00',
  `hrs_break` decimal(5,2) DEFAULT '0.00',
  `absent` tinyint(1) DEFAULT '0',
  `lwp` decimal(5,2) DEFAULT '0.00',
  `lwop` decimal(5,2) DEFAULT '0.00',
  `late` decimal(5,2) DEFAULT '0.00',
  `undertime` decimal(5,2) DEFAULT '0.00',
  `nd` decimal(5,2) DEFAULT '0.00',
  `ot` decimal(5,2) DEFAULT '0.00',
  `ot_break` decimal(5,2) DEFAULT '0.00',
  `meal` decimal(5,2) DEFAULT '0.00',
  `transpo` decimal(5,2) DEFAULT '0.00',
  `resigned` tinyint(1) DEFAULT '0',
  `awol` tinyint(1) DEFAULT '0',
  `project_id` int(11) DEFAULT '0',
  `date_cron_run` datetime DEFAULT NULL,
  `lip_approved_below_13_days` tinyint(1) DEFAULT '0',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`record_id`,`user_id`,`date`,`payroll_date`),
  KEY `user_id` (`user_id`),
  KEY `date` (`date`),
  KEY `payroll_date` (`payroll_date`),
  KEY `user_id_date_payroll_date` (`user_id`,`date`,`payroll_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record_summary_temp` */

DROP TABLE IF EXISTS `ww_time_record_summary_temp`;

CREATE TABLE `ww_time_record_summary_temp` (
  `record_id` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `id_number` varchar(8) NOT NULL DEFAULT '',
  `date` date NOT NULL DEFAULT '0000-00-00',
  `payroll_date` date NOT NULL DEFAULT '0000-00-00',
  `day_type` varchar(16) DEFAULT 'REGULAR',
  `hrs_rendered` decimal(5,2) DEFAULT '0.00',
  `hrs_actual` decimal(5,2) DEFAULT '0.00',
  `hrs_break` decimal(5,2) DEFAULT '0.00',
  `absent` tinyint(1) DEFAULT '0',
  `lwp` decimal(5,2) DEFAULT '0.00',
  `lwop` decimal(5,2) DEFAULT '0.00',
  `late` decimal(5,2) DEFAULT '0.00',
  `undertime` decimal(5,2) DEFAULT '0.00',
  `ot` decimal(5,2) DEFAULT '0.00',
  `ot_break` decimal(5,2) DEFAULT '0.00',
  `meal` decimal(5,2) DEFAULT '0.00',
  `transpo` decimal(5,2) DEFAULT '0.00',
  `resigned` tinyint(1) DEFAULT '0',
  `awol` tinyint(1) DEFAULT '0',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`record_id`,`user_id`,`date`,`payroll_date`),
  KEY `user_id` (`user_id`),
  KEY `date` (`date`),
  KEY `payroll_date` (`payroll_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record_tardiness` */

DROP TABLE IF EXISTS `ww_time_record_tardiness`;

CREATE TABLE `ww_time_record_tardiness` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `period_year` int(1) NOT NULL,
  `period_month` int(1) NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `id_number` varchar(8) NOT NULL DEFAULT '',
  `instances` decimal(5,2) DEFAULT '0.00',
  `total_minutes` decimal(5,2) DEFAULT '0.00',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`period_year`,`period_month`,`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=262 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record_tardiness_detail` */

DROP TABLE IF EXISTS `ww_time_record_tardiness_detail`;

CREATE TABLE `ww_time_record_tardiness_detail` (
  `period_year` int(1) NOT NULL,
  `period_month` int(1) NOT NULL,
  `user_id` int(11) unsigned NOT NULL DEFAULT '0',
  `date` date NOT NULL DEFAULT '0000-00-00',
  `late` decimal(5,2) DEFAULT '0.00',
  `modified_on` datetime DEFAULT NULL,
  PRIMARY KEY (`period_year`,`period_month`,`user_id`,`date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record_tardiness_settings` */

DROP TABLE IF EXISTS `ww_time_record_tardiness_settings`;

CREATE TABLE `ww_time_record_tardiness_settings` (
  `habitual_tardiness_id` int(11) NOT NULL AUTO_INCREMENT,
  `instances` int(11) DEFAULT NULL,
  `minutes_tardy` int(11) DEFAULT NULL,
  `month_within` int(11) DEFAULT NULL,
  `deleted` tinyint(4) DEFAULT '0',
  PRIMARY KEY (`habitual_tardiness_id`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_record_work_schedule_history` */

DROP TABLE IF EXISTS `ww_time_record_work_schedule_history`;

CREATE TABLE `ww_time_record_work_schedule_history` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `from_date` date DEFAULT NULL,
  `to_date` date DEFAULT NULL,
  `shift_id` int(11) DEFAULT NULL,
  `shift` varchar(64) DEFAULT NULL,
  `calendar_id` int(11) DEFAULT NULL,
  `calendar` varchar(64) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` date DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

/*Table structure for table `ww_time_shift` */

DROP TABLE IF EXISTS `ww_time_shift`;

CREATE TABLE `ww_time_shift` (
  `shift_id` int(1) NOT NULL AUTO_INCREMENT,
  `shift` varchar(32) NOT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `default_calendar` int(1) DEFAULT '0',
  `time_start` time NOT NULL,
  `time_end` time NOT NULL,
  `use_tag` tinyint(1) DEFAULT '0',
  `color` varchar(7) DEFAULT '#FFFFFF',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`shift_id`)
) ENGINE=InnoDB AUTO_INCREMENT=155 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_shift_apply_to` */

DROP TABLE IF EXISTS `ww_time_shift_apply_to`;

CREATE TABLE `ww_time_shift_apply_to` (
  `apply_to_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `apply_to` varchar(64) NOT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`apply_to_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_shift_apply_to_id` */

DROP TABLE IF EXISTS `ww_time_shift_apply_to_id`;

CREATE TABLE `ww_time_shift_apply_to_id` (
  `shift_id` int(11) DEFAULT NULL,
  `apply_to` int(11) DEFAULT NULL,
  `apply_to_id` int(11) DEFAULT NULL,
  KEY `memo_id` (`shift_id`,`apply_to_id`,`apply_to`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_shift_apply_to_value` */

DROP TABLE IF EXISTS `ww_time_shift_apply_to_value`;

CREATE TABLE `ww_time_shift_apply_to_value` (
  `shift_id` int(1) NOT NULL AUTO_INCREMENT,
  `shift` text NOT NULL,
  PRIMARY KEY (`shift_id`)
) ENGINE=InnoDB AUTO_INCREMENT=145 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_shift_class` */

DROP TABLE IF EXISTS `ww_time_shift_class`;

CREATE TABLE `ww_time_shift_class` (
  `class_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `class_code` varchar(32) DEFAULT NULL,
  `class` varchar(64) DEFAULT NULL,
  `default_value` varchar(64) DEFAULT NULL,
  `data_type` varchar(32) DEFAULT 'text',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`class_id`),
  KEY `class_code` (`class_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_shift_class_company` */

DROP TABLE IF EXISTS `ww_time_shift_class_company`;

CREATE TABLE `ww_time_shift_class_company` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `shift_id` int(1) NOT NULL DEFAULT '0',
  `company_id` int(1) NOT NULL DEFAULT '0',
  `class_id` int(1) NOT NULL DEFAULT '0',
  `class_value` varchar(64) DEFAULT NULL,
  `employment_status_id` varchar(32) DEFAULT 'ALL',
  `employment_type_id` varchar(32) DEFAULT 'ALL',
  `partners_id` varchar(32) DEFAULT 'NONE',
  `modified_by` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `shift_company_class` (`shift_id`,`company_id`,`class_id`,`class_value`)
) ENGINE=InnoDB AUTO_INCREMENT=498880 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_shift_class_company_department` */

DROP TABLE IF EXISTS `ww_time_shift_class_company_department`;

CREATE TABLE `ww_time_shift_class_company_department` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `shift_id` int(11) NOT NULL,
  `company_id` int(1) NOT NULL DEFAULT '0',
  `department_id` varchar(64) NOT NULL DEFAULT '0',
  `employment_type_id` varchar(32) NOT NULL DEFAULT '0',
  `partners_id` varchar(64) NOT NULL DEFAULT '0',
  `class_id` int(1) NOT NULL DEFAULT '0',
  `class_code` varchar(32) NOT NULL DEFAULT '0',
  `class_value` varchar(64) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_shift_company` */

DROP TABLE IF EXISTS `ww_time_shift_company`;

CREATE TABLE `ww_time_shift_company` (
  `shift_id` int(1) NOT NULL DEFAULT '0',
  `shift` varchar(32) DEFAULT NULL,
  `company_id` int(1) NOT NULL DEFAULT '0',
  `working_hrs` tinyint(1) DEFAULT '8',
  `grace_period` time DEFAULT '00:00:00',
  `grace_minutes` tinyint(2) DEFAULT '0',
  `halfday` time DEFAULT '00:00:00',
  `halfday_minutes` int(1) DEFAULT '0',
  `firsthalf_start` time DEFAULT '00:00:00',
  `firsthalf_end` time DEFAULT '00:00:00',
  `firsthalf_minutes` tinyint(2) DEFAULT '0',
  `secondhalf_grace_period` time DEFAULT '00:00:00',
  `secondhalf_grace_minutes` tinyint(2) DEFAULT '0',
  `max_preshift` time DEFAULT '00:00:00',
  `max_preshift_minutes` int(1) DEFAULT '0',
  `mid_postshift` time DEFAULT '23:59:59',
  `max_postshift` time DEFAULT '00:00:00',
  `max_postshift_minutes` int(1) DEFAULT '0',
  `breaka_start` time DEFAULT '00:00:00',
  `breaka_end` time DEFAULT '00:00:00',
  `breaka_minutes` tinyint(2) DEFAULT '0',
  `breaka_grace_minutes` tinyint(2) DEFAULT '0',
  `breakb_start` time DEFAULT '00:00:00',
  `breakb_end` time DEFAULT '00:00:00',
  `breakb_minutes` tinyint(2) DEFAULT '0',
  `breakb_grace_minutes` tinyint(2) DEFAULT '0',
  UNIQUE KEY `shift_id` (`shift_id`,`company_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_shift_restday` */

DROP TABLE IF EXISTS `ww_time_shift_restday`;

CREATE TABLE `ww_time_shift_restday` (
  `shift_id` int(1) NOT NULL DEFAULT '0',
  `shift` varchar(32) DEFAULT NULL,
  `company_id` int(1) NOT NULL DEFAULT '0',
  `day` enum('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday') DEFAULT 'Sunday',
  `deleted` tinyint(1) DEFAULT '0',
  UNIQUE KEY `shift_company_day` (`shift_id`,`company_id`,`day`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_shift_weekly` */

DROP TABLE IF EXISTS `ww_time_shift_weekly`;

CREATE TABLE `ww_time_shift_weekly` (
  `calendar_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `calendar` varchar(64) NOT NULL DEFAULT '',
  `default` tinyint(1) DEFAULT '0',
  `workingdays` varchar(32) DEFAULT '',
  `restdays` varchar(32) DEFAULT '',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`calendar_id`)
) ENGINE=InnoDB AUTO_INCREMENT=267 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_shift_weekly_calendar` */

DROP TABLE IF EXISTS `ww_time_shift_weekly_calendar`;

CREATE TABLE `ww_time_shift_weekly_calendar` (
  `calendar_id` int(1) unsigned NOT NULL,
  `week_no` enum('1','2','3','4','5','6','7') NOT NULL DEFAULT '1',
  `week_name` enum('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday') NOT NULL DEFAULT 'Sunday',
  `shift_id` int(1) NOT NULL DEFAULT '0',
  `shift` varchar(32) DEFAULT '',
  UNIQUE KEY `calendar_week` (`calendar_id`,`week_no`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_time_work_schedule_history` */

DROP TABLE IF EXISTS `ww_time_work_schedule_history`;

CREATE TABLE `ww_time_work_schedule_history` (
  `work_schedule_history_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` text,
  `from_date` date DEFAULT NULL,
  `to_date` date DEFAULT NULL,
  `shift_id` int(11) DEFAULT NULL,
  `calendar_id` int(11) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` date DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`work_schedule_history_id`)
) ENGINE=MyISAM AUTO_INCREMENT=824 DEFAULT CHARSET=latin1;

/*Table structure for table `ww_training_applicable_for` */

DROP TABLE IF EXISTS `ww_training_applicable_for`;

CREATE TABLE `ww_training_applicable_for` (
  `applicable_for_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `applicable_for` varchar(255) DEFAULT NULL,
  `deleted` tinyint(1) unsigned DEFAULT '0',
  PRIMARY KEY (`applicable_for_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_bond` */

DROP TABLE IF EXISTS `ww_training_bond`;

CREATE TABLE `ww_training_bond` (
  `bond_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `cost_from` decimal(12,2) DEFAULT '0.00',
  `cost_to` decimal(12,2) DEFAULT '0.00',
  `rls_months` int(11) DEFAULT NULL,
  `rls_days` int(11) DEFAULT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`bond_id`),
  KEY `job_class_code` (`cost_from`),
  KEY `job_class` (`cost_to`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_calendar` */

DROP TABLE IF EXISTS `ww_training_calendar`;

CREATE TABLE `ww_training_calendar` (
  `training_calendar_id` int(11) NOT NULL AUTO_INCREMENT,
  `course_id` int(11) NOT NULL,
  `training_revalida_master_id` int(11) NOT NULL,
  `feedback_category_id` text,
  `training_category_id` int(11) DEFAULT NULL,
  `topic` varchar(128) NOT NULL,
  `calendar_type_id` int(11) DEFAULT NULL,
  `partner_id` text,
  `venue` text,
  `room` varchar(32) DEFAULT NULL,
  `equipment` text,
  `min_training_capacity` int(11) DEFAULT NULL,
  `training_capacity` int(11) DEFAULT NULL,
  `with_certification` tinyint(1) DEFAULT '0',
  `with_budget` tinyint(1) DEFAULT '0',
  `with_session` tinyint(1) DEFAULT '0',
  `registration_date` date DEFAULT NULL,
  `last_registration_date` date DEFAULT NULL,
  `total_session_hours` varchar(255) DEFAULT '0:00',
  `total_session_breaks` varchar(255) DEFAULT '0:00',
  `total_cost` decimal(12,2) DEFAULT '0.00',
  `total_pax` int(4) DEFAULT '0',
  `tba` int(1) DEFAULT '0',
  `publish_date` date DEFAULT NULL,
  `published` tinyint(1) DEFAULT '0',
  `confirmed` tinyint(1) DEFAULT '0',
  `closed_date` date DEFAULT NULL,
  `closed` tinyint(1) DEFAULT '0',
  `cancelled` tinyint(1) DEFAULT '2',
  `cancelled_date` date DEFAULT NULL,
  `cost_per_pax` decimal(12,2) DEFAULT '0.00',
  `revalida_date` date DEFAULT NULL,
  `planned` int(11) NOT NULL,
  `location_id` int(11) DEFAULT NULL,
  `company_id` int(11) DEFAULT NULL,
  `project_id` int(11) DEFAULT NULL,
  `department_id` int(11) DEFAULT NULL,
  `branch_id` int(11) DEFAULT NULL,
  `assignment_id` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` date DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`training_calendar_id`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_calendar_budget` */

DROP TABLE IF EXISTS `ww_training_calendar_budget`;

CREATE TABLE `ww_training_calendar_budget` (
  `calendar_budget_id` int(11) NOT NULL AUTO_INCREMENT,
  `training_calendar_id` int(11) NOT NULL,
  `source_id` int(11) DEFAULT NULL,
  `pax` int(3) DEFAULT '0',
  `cost` decimal(12,2) DEFAULT '0.00',
  `total` decimal(12,2) DEFAULT '0.00',
  `remarks` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`calendar_budget_id`)
) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_calendar_participant` */

DROP TABLE IF EXISTS `ww_training_calendar_participant`;

CREATE TABLE `ww_training_calendar_participant` (
  `calendar_participant_id` int(11) NOT NULL AUTO_INCREMENT,
  `training_calendar_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `participant_status_id` int(11) DEFAULT '0',
  `no_show` tinyint(1) DEFAULT '0',
  `bond` tinyint(1) DEFAULT '0',
  `nominate` tinyint(1) DEFAULT '0',
  `send_nominate_status` tinyint(1) DEFAULT '0',
  `send_reject_status` tinyint(1) DEFAULT '0',
  `send_confirm_status` tinyint(1) DEFAULT '0',
  `send_reg_notification` tinyint(1) DEFAULT '0',
  `send_no_show_notification` tinyint(1) DEFAULT '0',
  `previous_participant_status_id` int(11) DEFAULT '0',
  `send_revalida_notification` tinyint(1) DEFAULT '0',
  `remarks` varchar(255) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`calendar_participant_id`)
) ENGINE=MyISAM AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_calendar_participant_status` */

DROP TABLE IF EXISTS `ww_training_calendar_participant_status`;

CREATE TABLE `ww_training_calendar_participant_status` (
  `participant_status_id` int(11) NOT NULL AUTO_INCREMENT,
  `participant_status` varchar(32) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`participant_status_id`)
) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_calendar_session` */

DROP TABLE IF EXISTS `ww_training_calendar_session`;

CREATE TABLE `ww_training_calendar_session` (
  `calendar_session_id` int(11) NOT NULL AUTO_INCREMENT,
  `training_calendar_id` int(11) NOT NULL,
  `session_no` int(2) DEFAULT NULL,
  `session_date` date DEFAULT NULL,
  `sessiontime_from` time DEFAULT NULL,
  `sessiontime_to` time DEFAULT NULL,
  `breaktime_from` time DEFAULT NULL,
  `breaktime_to` time DEFAULT NULL,
  `instructor` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`calendar_session_id`)
) ENGINE=MyISAM AUTO_INCREMENT=36 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_calendar_type` */

DROP TABLE IF EXISTS `ww_training_calendar_type`;

CREATE TABLE `ww_training_calendar_type` (
  `calendar_type_id` int(11) NOT NULL AUTO_INCREMENT,
  `calendar_type` varchar(16) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`calendar_type_id`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_category` */

DROP TABLE IF EXISTS `ww_training_category`;

CREATE TABLE `ww_training_category` (
  `category_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `category` varchar(150) DEFAULT NULL,
  `category_code` varchar(150) DEFAULT NULL,
  `description` varchar(250) DEFAULT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`category_id`),
  KEY `job_class_code` (`category`),
  KEY `job_class` (`category_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_cost` */

DROP TABLE IF EXISTS `ww_training_cost`;

CREATE TABLE `ww_training_cost` (
  `cost_id` int(11) NOT NULL AUTO_INCREMENT,
  `cost` varchar(32) NOT NULL,
  `description` varchar(64) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` date DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`cost_id`)
) ENGINE=MyISAM AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_course` */

DROP TABLE IF EXISTS `ww_training_course`;

CREATE TABLE `ww_training_course` (
  `course_id` int(11) NOT NULL AUTO_INCREMENT,
  `course` varchar(128) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL,
  `type_id` int(11) DEFAULT NULL,
  `provider_id` int(11) DEFAULT NULL,
  `facilitator` varchar(128) DEFAULT NULL,
  `planned` tinyint(1) DEFAULT NULL,
  `position_id` text,
  `with_bond` tinyint(1) DEFAULT NULL,
  `cost` float(11,2) DEFAULT '0.00',
  `length_of_service` varchar(128) DEFAULT NULL,
  `remarks` varchar(128) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` date DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`course_id`)
) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_employee_database` */

DROP TABLE IF EXISTS `ww_training_employee_database`;

CREATE TABLE `ww_training_employee_database` (
  `employee_database_id` int(11) NOT NULL AUTO_INCREMENT,
  `calendar_id` int(11) DEFAULT NULL,
  `employee_id` int(11) DEFAULT NULL,
  `position_id` int(11) DEFAULT NULL,
  `department_id` int(11) DEFAULT NULL,
  `division_id` int(11) DEFAULT NULL,
  `group_name_id` int(11) DEFAULT NULL,
  `project_name_id` int(11) DEFAULT NULL,
  `rank_id` int(11) DEFAULT NULL,
  `start_date` date DEFAULT NULL,
  `end_date` date DEFAULT NULL,
  `bond_start_date` date DEFAULT NULL,
  `bond_end_date` date DEFAULT NULL,
  `no_bond_days` int(11) DEFAULT NULL,
  `training_balance` decimal(14,0) DEFAULT NULL,
  `daily_training_cost` decimal(14,0) DEFAULT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`employee_database_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_evaluation_template` */

DROP TABLE IF EXISTS `ww_training_evaluation_template`;

CREATE TABLE `ww_training_evaluation_template` (
  `evaluation_template_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `applicable_for` int(11) unsigned DEFAULT NULL,
  `status_id` tinyint(1) unsigned DEFAULT '0',
  `can_delete` tinyint(1) unsigned DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) unsigned DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) unsigned DEFAULT NULL,
  `deleted` tinyint(1) unsigned DEFAULT '0',
  PRIMARY KEY (`evaluation_template_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_evaluation_template_section` */

DROP TABLE IF EXISTS `ww_training_evaluation_template_section`;

CREATE TABLE `ww_training_evaluation_template_section` (
  `template_section_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `template_id` int(11) unsigned NOT NULL,
  `template_section` varchar(255) DEFAULT NULL,
  `parent_id` int(11) unsigned NOT NULL,
  `weight` int(11) NOT NULL,
  `section_type_id` int(11) unsigned NOT NULL,
  `sequence` int(11) NOT NULL,
  `header` text,
  `footer` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`template_section_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_evaluation_template_section_type` */

DROP TABLE IF EXISTS `ww_training_evaluation_template_section_type`;

CREATE TABLE `ww_training_evaluation_template_section_type` (
  `section_type_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `section_type` varchar(255) DEFAULT NULL,
  `deleted` tinyint(1) unsigned DEFAULT '0',
  PRIMARY KEY (`section_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_facilitator` */

DROP TABLE IF EXISTS `ww_training_facilitator`;

CREATE TABLE `ww_training_facilitator` (
  `facilitator_id` int(11) NOT NULL AUTO_INCREMENT,
  `facilitator` varchar(64) NOT NULL,
  `is_internal` tinyint(1) DEFAULT NULL,
  `provider_id` int(11) DEFAULT NULL,
  `course_id` text,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` date DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`facilitator_id`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_feedback` */

DROP TABLE IF EXISTS `ww_training_feedback`;

CREATE TABLE `ww_training_feedback` (
  `feedback_id` int(11) DEFAULT NULL,
  `training_calendar_id` int(11) DEFAULT NULL,
  `employee_id` int(11) DEFAULT NULL,
  `feedback_status_id` int(11) DEFAULT NULL,
  `total_score` int(11) DEFAULT NULL,
  `average_score` decimal(8,2) DEFAULT '0.00',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_feedback_category` */

DROP TABLE IF EXISTS `ww_training_feedback_category`;

CREATE TABLE `ww_training_feedback_category` (
  `feedback_category_id` int(11) NOT NULL AUTO_INCREMENT,
  `feedback_category` varchar(32) NOT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`feedback_category_id`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_feedback_item` */

DROP TABLE IF EXISTS `ww_training_feedback_item`;

CREATE TABLE `ww_training_feedback_item` (
  `feedback_item_id` int(11) NOT NULL AUTO_INCREMENT,
  `feedback_category_id` int(11) DEFAULT NULL,
  `feedback_item_no` int(2) NOT NULL,
  `feedback_item` varchar(384) NOT NULL,
  `score_type` int(11) DEFAULT '0',
  `inactive` tinyint(1) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`feedback_item_id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_feedback_score` */

DROP TABLE IF EXISTS `ww_training_feedback_score`;

CREATE TABLE `ww_training_feedback_score` (
  `feedback_score_id` int(11) NOT NULL AUTO_INCREMENT,
  `feedback_id` int(11) NOT NULL,
  `feedback_item_id` int(11) NOT NULL,
  `score` decimal(6,2) DEFAULT '0.00',
  `remarks` text,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`feedback_score_id`)
) ENGINE=InnoDB AUTO_INCREMENT=254 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_feedback_score_type` */

DROP TABLE IF EXISTS `ww_training_feedback_score_type`;

CREATE TABLE `ww_training_feedback_score_type` (
  `score_type_id` int(11) NOT NULL AUTO_INCREMENT,
  `score_type` varchar(48) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`score_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_feedback_status` */

DROP TABLE IF EXISTS `ww_training_feedback_status`;

CREATE TABLE `ww_training_feedback_status` (
  `feedback_status_id` int(8) NOT NULL AUTO_INCREMENT,
  `feedback_status` varchar(255) DEFAULT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`feedback_status_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_library` */

DROP TABLE IF EXISTS `ww_training_library`;

CREATE TABLE `ww_training_library` (
  `library_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `library` varchar(255) DEFAULT NULL,
  `author` varchar(255) DEFAULT NULL,
  `published_date` date DEFAULT NULL,
  `description` text,
  `upload` varchar(255) DEFAULT NULL,
  `module` varchar(255) DEFAULT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`library_id`),
  KEY `job_class_code` (`library`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_provider` */

DROP TABLE IF EXISTS `ww_training_provider`;

CREATE TABLE `ww_training_provider` (
  `provider_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `provider_code` varchar(20) DEFAULT NULL,
  `provider` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`provider_id`),
  KEY `job_class_code` (`provider_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_revalida` */

DROP TABLE IF EXISTS `ww_training_revalida`;

CREATE TABLE `ww_training_revalida` (
  `training_revalida_id` int(11) NOT NULL AUTO_INCREMENT,
  `training_calendar_id` int(11) NOT NULL,
  `employee_id` int(11) NOT NULL,
  `revalida_status_id` int(11) DEFAULT NULL,
  `total_score` int(11) NOT NULL DEFAULT '0',
  `average_score` decimal(6,2) DEFAULT '0.00',
  `created_by` int(11) DEFAULT '0',
  `created_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_by` int(11) DEFAULT '0',
  `updated_date` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`training_revalida_id`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_revalida_category` */

DROP TABLE IF EXISTS `ww_training_revalida_category`;

CREATE TABLE `ww_training_revalida_category` (
  `training_revalida_category_id` int(11) NOT NULL AUTO_INCREMENT,
  `training_revalida_master_id` int(11) DEFAULT NULL,
  `revalida_category` varchar(255) DEFAULT NULL,
  `revalida_category_weight` int(11) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`training_revalida_category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_revalida_item` */

DROP TABLE IF EXISTS `ww_training_revalida_item`;

CREATE TABLE `ww_training_revalida_item` (
  `training_revalida_item_id` int(11) NOT NULL AUTO_INCREMENT,
  `training_revalida_category_id` int(11) DEFAULT NULL,
  `training_revalida_item_no` int(2) NOT NULL,
  `description` varchar(128) NOT NULL,
  `score_type` int(11) DEFAULT '0',
  `item_weight` int(11) DEFAULT NULL,
  `inactive` tinyint(1) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`training_revalida_item_id`)
) ENGINE=MyISAM AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_revalida_master` */

DROP TABLE IF EXISTS `ww_training_revalida_master`;

CREATE TABLE `ww_training_revalida_master` (
  `training_revalida_master_id` int(11) NOT NULL AUTO_INCREMENT,
  `revalida_type` varchar(255) DEFAULT NULL,
  `course_id` int(11) DEFAULT NULL,
  `draft` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` date DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`training_revalida_master_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_revalida_score` */

DROP TABLE IF EXISTS `ww_training_revalida_score`;

CREATE TABLE `ww_training_revalida_score` (
  `training_revalida_score_id` int(11) NOT NULL AUTO_INCREMENT,
  `training_revalida_id` int(11) NOT NULL,
  `training_revalida_item_id` int(11) NOT NULL,
  `score` decimal(6,2) DEFAULT '0.00',
  `remarks` text,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`training_revalida_score_id`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_revalida_score_type` */

DROP TABLE IF EXISTS `ww_training_revalida_score_type`;

CREATE TABLE `ww_training_revalida_score_type` (
  `score_type_id` int(11) NOT NULL AUTO_INCREMENT,
  `score_type` varchar(16) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`score_type_id`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_source` */

DROP TABLE IF EXISTS `ww_training_source`;

CREATE TABLE `ww_training_source` (
  `source_id` int(11) NOT NULL AUTO_INCREMENT,
  `source_code` varchar(16) NOT NULL,
  `source` varchar(32) NOT NULL,
  `description` varchar(64) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` date DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`source_id`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_subject` */

DROP TABLE IF EXISTS `ww_training_subject`;

CREATE TABLE `ww_training_subject` (
  `training_subject_id` int(11) DEFAULT NULL,
  `training_subject` varchar(384) DEFAULT NULL,
  `training_type_id` int(11) DEFAULT NULL,
  `position_id` text,
  `training_provider_id` text,
  `training_category_id` int(11) DEFAULT NULL,
  `cost` decimal(14,0) DEFAULT NULL,
  `remarks` text,
  `training_bond` int(1) DEFAULT NULL,
  `rls` int(11) DEFAULT NULL,
  `training_subject_schedule_id` int(11) DEFAULT NULL,
  `trainor` varchar(765) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_by` int(11) DEFAULT NULL,
  `updated_date` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_training_type` */

DROP TABLE IF EXISTS `ww_training_type`;

CREATE TABLE `ww_training_type` (
  `type_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `training_type_code` varchar(16) DEFAULT NULL,
  `training_type` varchar(255) DEFAULT NULL,
  `description` text,
  `status_id` tinyint(1) unsigned DEFAULT '0',
  `can_delete` tinyint(1) unsigned DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) unsigned DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) unsigned DEFAULT NULL,
  `deleted` tinyint(1) unsigned DEFAULT '0',
  PRIMARY KEY (`type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_uitypes` */

DROP TABLE IF EXISTS `ww_uitypes`;

CREATE TABLE `ww_uitypes` (
  `uitype_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `uitype` varchar(32) NOT NULL,
  `description` text,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`uitype_id`),
  KEY `uitype` (`uitype`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_uploaded_data` */

DROP TABLE IF EXISTS `ww_uploaded_data`;

CREATE TABLE `ww_uploaded_data` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `company_id` int(11) DEFAULT NULL,
  `employee_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=194 DEFAULT CHARSET=latin1;

/*Table structure for table `ww_users` */

DROP TABLE IF EXISTS `ww_users`;

CREATE TABLE `ww_users` (
  `user_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `role_id` int(1) unsigned NOT NULL DEFAULT '0',
  `company_id` int(11) NOT NULL DEFAULT '0',
  `can_view` tinyint(1) DEFAULT '1',
  `can_delete` tinyint(1) DEFAULT '1',
  `email` varchar(128) DEFAULT NULL,
  `full_name` varchar(64) NOT NULL DEFAULT '',
  `login` varchar(64) NOT NULL DEFAULT '',
  `hash` varchar(128) DEFAULT '$2a$08$hRV4eko18h6qPQ0gn7.f.eKk9O9Dv7nPKfZbN1mhregMrBYi3sR6i',
  `last_login` datetime DEFAULT '0000-00-00 00:00:00',
  `display_name` varchar(64) DEFAULT '',
  `timezone` char(64) DEFAULT 'Asia/Manila',
  `language` enum('en','id') DEFAULT 'en',
  `active` tinyint(1) DEFAULT '1',
  `lastactivity` int(11) DEFAULT NULL,
  `login_old` varchar(64) DEFAULT '',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` timestamp NULL DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`user_id`),
  KEY `email` (`email`),
  KEY `role_id` (`role_id`),
  KEY `login` (`login`),
  KEY `deleted` (`deleted`),
  KEY `full_name` (`full_name`)
) ENGINE=InnoDB AUTO_INCREMENT=1335 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_assignment` */

DROP TABLE IF EXISTS `ww_users_assignment`;

CREATE TABLE `ww_users_assignment` (
  `assignment_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `assignment_code` varchar(16) NOT NULL DEFAULT '',
  `assignment` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`assignment_id`),
  KEY `job_class_code` (`assignment_code`),
  KEY `job_class` (`assignment`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_branch` */

DROP TABLE IF EXISTS `ww_users_branch`;

CREATE TABLE `ww_users_branch` (
  `branch_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `branch_code` varchar(16) NOT NULL DEFAULT '',
  `branch` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `payroll_branch_code` varchar(16) DEFAULT '',
  `sss_branch_code` varchar(32) DEFAULT '00',
  `sss_branch_code_locator` varchar(32) DEFAULT NULL,
  `hdmf_branch_code` varchar(32) DEFAULT '00',
  `company_coe` varchar(128) DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`branch_id`),
  KEY `job_class_code` (`branch_code`),
  KEY `job_class` (`branch`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_company` */

DROP TABLE IF EXISTS `ww_users_company`;

CREATE TABLE `ww_users_company` (
  `company_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `company_code` varchar(16) NOT NULL DEFAULT '',
  `company` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `address` varchar(128) DEFAULT NULL,
  `city_id` int(1) DEFAULT NULL,
  `city` varchar(32) DEFAULT NULL,
  `country_id` int(1) DEFAULT NULL,
  `country` varchar(32) DEFAULT NULL,
  `zipcode` varchar(16) DEFAULT NULL,
  `vat` varchar(32) DEFAULT NULL,
  `logo` varchar(128) DEFAULT NULL,
  `print_logo` varchar(128) DEFAULT NULL,
  `bank_id` varchar(32) DEFAULT NULL,
  `sss` varchar(32) DEFAULT NULL,
  `sss_branch_code` varchar(32) DEFAULT '00',
  `sss_branch_code_locator` varchar(32) DEFAULT NULL,
  `hdmf` varchar(32) DEFAULT NULL,
  `hdmf_branch_code` varchar(32) DEFAULT '00',
  `phic` varchar(32) DEFAULT NULL,
  `tin` varchar(32) DEFAULT NULL,
  `rdo` varchar(4) DEFAULT NULL,
  `business_group_id` int(1) DEFAULT '1',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`company_id`),
  UNIQUE KEY `company_code` (`company_code`),
  KEY `company` (`company`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_company_contact` */

DROP TABLE IF EXISTS `ww_users_company_contact`;

CREATE TABLE `ww_users_company_contact` (
  `contacts_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `company_id` int(1) NOT NULL DEFAULT '0',
  `contact_type` enum('Phone','Mobile','Fax') NOT NULL DEFAULT 'Phone',
  `contact_no` varchar(16) DEFAULT '',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`contacts_id`),
  KEY `company_id` (`company_id`),
  KEY `contact_type` (`contact_type`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=376 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_competency_level` */

DROP TABLE IF EXISTS `ww_users_competency_level`;

CREATE TABLE `ww_users_competency_level` (
  `competency_level_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `competency_level_code` varchar(16) NOT NULL DEFAULT '',
  `competency_level` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`competency_level_id`),
  KEY `job_class_code` (`competency_level_code`),
  KEY `job_class` (`competency_level`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_contact_type` */

DROP TABLE IF EXISTS `ww_users_contact_type`;

CREATE TABLE `ww_users_contact_type` (
  `contact_type_id` int(1) NOT NULL AUTO_INCREMENT,
  `contact_type` varchar(32) DEFAULT NULL,
  `deleted` int(1) DEFAULT '0',
  PRIMARY KEY (`contact_type_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_coordinator` */

DROP TABLE IF EXISTS `ww_users_coordinator`;

CREATE TABLE `ww_users_coordinator` (
  `coordinator_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `company_id` varchar(16) NOT NULL DEFAULT '',
  `branch_id` varchar(64) NOT NULL DEFAULT '',
  `coordinator_user_id` text,
  `user_id` text,
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`coordinator_id`),
  KEY `job_class_code` (`company_id`),
  KEY `job_class` (`branch_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_cost_center` */

DROP TABLE IF EXISTS `ww_users_cost_center`;

CREATE TABLE `ww_users_cost_center` (
  `cost_center_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `cost_center_code` varchar(16) NOT NULL DEFAULT '',
  `cost_center` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`cost_center_id`),
  KEY `job_class_code` (`cost_center_code`),
  KEY `job_class` (`cost_center`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_department` */

DROP TABLE IF EXISTS `ww_users_department`;

CREATE TABLE `ww_users_department` (
  `department_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `division_id` int(11) NOT NULL DEFAULT '0',
  `division` varchar(64) DEFAULT '',
  `department_code` varchar(16) NOT NULL DEFAULT '',
  `department_old` varchar(16) DEFAULT NULL,
  `user_count` int(11) DEFAULT '0',
  `department` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `immediate_id` int(11) DEFAULT '0',
  `immediate` varchar(64) DEFAULT '',
  `immediate_position_id` int(11) DEFAULT '0',
  `immediate_position` varchar(64) DEFAULT '',
  `category_id` int(11) DEFAULT '1',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`department_id`),
  KEY `department_code` (`department_code`),
  KEY `department` (`department`),
  KEY `deleted` (`deleted`),
  KEY `division_id` (`division_id`),
  KEY `division` (`division`)
) ENGINE=InnoDB AUTO_INCREMENT=267 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_department_category` */

DROP TABLE IF EXISTS `ww_users_department_category`;

CREATE TABLE `ww_users_department_category` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `category_code` varchar(16) NOT NULL,
  `category` varchar(64) NOT NULL DEFAULT '',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_department_position` */

DROP TABLE IF EXISTS `ww_users_department_position`;

CREATE TABLE `ww_users_department_position` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `department_id` int(11) NOT NULL,
  `position_id` int(11) NOT NULL DEFAULT '0',
  `position` varchar(64) DEFAULT '',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `deleted` (`deleted`),
  KEY `division_id` (`position_id`),
  KEY `division` (`position`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_division` */

DROP TABLE IF EXISTS `ww_users_division`;

CREATE TABLE `ww_users_division` (
  `division_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `division_code` varchar(16) NOT NULL DEFAULT '',
  `division` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `immediate_id` int(11) DEFAULT '0',
  `immediate` varchar(64) DEFAULT '',
  `position_id` int(11) DEFAULT '0',
  `position` varchar(64) DEFAULT '',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`division_id`),
  UNIQUE KEY `division_code` (`division_code`),
  KEY `division` (`division`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_group` */

DROP TABLE IF EXISTS `ww_users_group`;

CREATE TABLE `ww_users_group` (
  `group_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `group_code` varchar(16) NOT NULL DEFAULT '',
  `group` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `immediate_id` int(11) DEFAULT '0',
  `immediate` varchar(64) DEFAULT '',
  `position_id` int(11) DEFAULT '0',
  `position` varchar(64) DEFAULT '',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`group_id`),
  KEY `group_code` (`group_code`),
  KEY `group` (`group`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_job_class` */

DROP TABLE IF EXISTS `ww_users_job_class`;

CREATE TABLE `ww_users_job_class` (
  `job_class_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `job_class_code` varchar(16) NOT NULL DEFAULT '',
  `job_class` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`job_class_id`),
  KEY `job_class_code` (`job_class_code`),
  KEY `job_class` (`job_class`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_job_family` */

DROP TABLE IF EXISTS `ww_users_job_family`;

CREATE TABLE `ww_users_job_family` (
  `job_family_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `job_family_code` varchar(16) NOT NULL DEFAULT '',
  `job_family` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `competency_profile_id` int(11) DEFAULT '0',
  `competency_profile` varchar(64) DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`job_family_id`),
  KEY `job_title_code` (`job_family_code`),
  KEY `job_title` (`job_family`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_job_family_department` */

DROP TABLE IF EXISTS `ww_users_job_family_department`;

CREATE TABLE `ww_users_job_family_department` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `job_family_id` int(11) NOT NULL,
  `department_id` int(11) NOT NULL,
  `department` varchar(64) DEFAULT NULL,
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `job_title_code` (`job_family_id`),
  KEY `job_title` (`department_id`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_job_grade_level` */

DROP TABLE IF EXISTS `ww_users_job_grade_level`;

CREATE TABLE `ww_users_job_grade_level` (
  `job_grade_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `job_grade_code` varchar(16) NOT NULL,
  `job_level` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `min_salary` decimal(10,2) DEFAULT '0.00',
  `max_salary` decimal(10,2) DEFAULT '0.00',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`job_grade_id`),
  KEY `job_title_code` (`job_level`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_job_pay_level` */

DROP TABLE IF EXISTS `ww_users_job_pay_level`;

CREATE TABLE `ww_users_job_pay_level` (
  `pay_level_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `pay_level_code` varchar(16) NOT NULL,
  `pay_level` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `min_salary` decimal(10,2) DEFAULT '0.00',
  `max_salary` decimal(10,2) DEFAULT '0.00',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`pay_level_id`),
  KEY `job_title_code` (`pay_level`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_job_rank` */

DROP TABLE IF EXISTS `ww_users_job_rank`;

CREATE TABLE `ww_users_job_rank` (
  `job_rank_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `job_rank_code` varchar(16) NOT NULL DEFAULT '',
  `job_rank` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`job_rank_id`),
  KEY `job_title_code` (`job_rank_code`),
  KEY `job_title` (`job_rank`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_job_rank_code` */

DROP TABLE IF EXISTS `ww_users_job_rank_code`;

CREATE TABLE `ww_users_job_rank_code` (
  `job_rank_code_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `job_rank_code_code` varchar(16) NOT NULL DEFAULT '',
  `job_rank_code` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`job_rank_code_id`),
  KEY `job_title_code` (`job_rank_code_code`),
  KEY `job_title` (`job_rank_code`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_job_rank_level` */

DROP TABLE IF EXISTS `ww_users_job_rank_level`;

CREATE TABLE `ww_users_job_rank_level` (
  `job_rank_level_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `job_rank_level_code` varchar(16) NOT NULL DEFAULT '',
  `job_rank_level` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`job_rank_level_id`),
  KEY `job_title_code` (`job_rank_level_code`),
  KEY `job_title` (`job_rank_level`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_job_title` */

DROP TABLE IF EXISTS `ww_users_job_title`;

CREATE TABLE `ww_users_job_title` (
  `job_title_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `job_title_code` varchar(16) NOT NULL DEFAULT '',
  `job_title` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `job_family_id` int(11) DEFAULT '0',
  `job_family` varchar(64) DEFAULT NULL,
  `job_rank_id` int(11) DEFAULT '0',
  `job_rank` varchar(64) DEFAULT NULL,
  `pay_level_id` int(11) DEFAULT '0',
  `pay_level` varchar(64) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`job_title_id`),
  KEY `job_title_code` (`job_title_code`),
  KEY `job_title` (`job_title`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_location` */

DROP TABLE IF EXISTS `ww_users_location`;

CREATE TABLE `ww_users_location` (
  `location_id` int(1) unsigned NOT NULL AUTO_INCREMENT,
  `location_code` varchar(16) NOT NULL DEFAULT '',
  `location` varchar(64) NOT NULL DEFAULT '',
  `min_wage_amt` decimal(12,2) DEFAULT '0.00',
  `ecola_amt` decimal(12,2) DEFAULT '0.00',
  `ecola_amt_month` decimal(12,2) DEFAULT '0.00',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`location_id`),
  KEY `location_code` (`location_code`),
  KEY `location` (`location`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_pay_set_rates` */

DROP TABLE IF EXISTS `ww_users_pay_set_rates`;

CREATE TABLE `ww_users_pay_set_rates` (
  `pay_set_rates_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `pay_set_rates_code` varchar(16) NOT NULL DEFAULT '',
  `pay_set_rates` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`pay_set_rates_id`),
  KEY `job_class_code` (`pay_set_rates_code`),
  KEY `job_class` (`pay_set_rates`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_position` */

DROP TABLE IF EXISTS `ww_users_position`;

CREATE TABLE `ww_users_position` (
  `position_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `position_code` varchar(16) NOT NULL DEFAULT '',
  `position` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `job_title_id` int(11) DEFAULT '0',
  `job_title` varchar(64) DEFAULT NULL,
  `job_rank_id` int(11) DEFAULT '0',
  `job_rank` varchar(64) DEFAULT NULL,
  `employee_type_id` int(1) DEFAULT '0',
  `employee_type` varchar(32) DEFAULT '',
  `immediate_id` int(11) DEFAULT '0',
  `immediate` varchar(64) DEFAULT '',
  `immediate_position_id` int(11) DEFAULT '0',
  `immediate_position` varchar(64) DEFAULT '',
  `job_description` varchar(255) DEFAULT NULL,
  `attachment` varchar(255) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `amp_position_id` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`position_id`),
  KEY `position_code` (`position_code`),
  KEY `position` (`position`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=926 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_profile` */

DROP TABLE IF EXISTS `ww_users_profile`;

CREATE TABLE `ww_users_profile` (
  `user_id` int(11) unsigned NOT NULL,
  `partner_id` int(11) NOT NULL DEFAULT '0',
  `recruit_id` int(11) NOT NULL DEFAULT '0',
  `title` varchar(16) DEFAULT '',
  `suffix` varchar(16) DEFAULT '',
  `lastname` varchar(64) NOT NULL DEFAULT '',
  `firstname` varchar(64) NOT NULL DEFAULT '',
  `middlename` varchar(64) DEFAULT '',
  `maidenname` varchar(64) DEFAULT '',
  `nickname` varchar(32) DEFAULT '',
  `company_id` int(1) NOT NULL DEFAULT '0',
  `company` varchar(64) DEFAULT '',
  `coordinator_id` varchar(64) DEFAULT '0',
  `group_id` int(1) NOT NULL DEFAULT '0',
  `division_id` int(1) NOT NULL DEFAULT '0',
  `department_id` int(1) NOT NULL DEFAULT '0',
  `position_id` int(1) NOT NULL DEFAULT '0',
  `reports_to_id` int(11) DEFAULT '0',
  `project_hr_id` int(11) DEFAULT '0',
  `job_title_id` int(1) NOT NULL DEFAULT '0',
  `specialization_id` int(11) DEFAULT '0',
  `location_id` int(1) NOT NULL DEFAULT '0',
  `project_id` int(11) DEFAULT NULL,
  `section_id` int(11) DEFAULT NULL,
  `branch_id` int(11) NOT NULL DEFAULT '0',
  `photo` varchar(128) DEFAULT NULL,
  `birth_date` date DEFAULT '0000-00-00',
  `business_level_id` int(1) DEFAULT '1',
  `start_date` date DEFAULT '0000-00-00',
  `end_date` date DEFAULT '0000-00-00',
  `credit_setup_id` int(11) DEFAULT NULL,
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `modified_on` datetime DEFAULT NULL,
  PRIMARY KEY (`user_id`),
  KEY `employee_id` (`partner_id`),
  KEY `lastname` (`lastname`),
  KEY `firstname` (`firstname`),
  KEY `company_id` (`company_id`),
  KEY `group_id` (`group_id`),
  KEY `division_id` (`division_id`),
  KEY `department_id` (`department_id`),
  KEY `position_id` (`position_id`),
  KEY `job_title_id` (`job_title_id`),
  KEY `location_id` (`location_id`),
  KEY `middlename` (`middlename`),
  KEY `applicant_id` (`recruit_id`),
  KEY `branch_id` (`branch_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_profile_public` */

DROP TABLE IF EXISTS `ww_users_profile_public`;

CREATE TABLE `ww_users_profile_public` (
  `user_id` int(11) unsigned NOT NULL,
  `summary` text,
  `interest` text,
  `language_spoken` text,
  `social` text,
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_profile_public_data` */

DROP TABLE IF EXISTS `ww_users_profile_public_data`;

CREATE TABLE `ww_users_profile_public_data` (
  `interest` varchar(128) DEFAULT 'null'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_project` */

DROP TABLE IF EXISTS `ww_users_project`;

CREATE TABLE `ww_users_project` (
  `project_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `project_code` varchar(16) NOT NULL DEFAULT '',
  `project` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `immediate_id` int(11) DEFAULT '0',
  `immediate` varchar(64) DEFAULT '',
  `position_id` int(11) DEFAULT '0',
  `position` varchar(64) DEFAULT '',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`project_id`),
  KEY `section_code` (`project_code`),
  KEY `section` (`project`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_section` */

DROP TABLE IF EXISTS `ww_users_section`;

CREATE TABLE `ww_users_section` (
  `section_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `section_code` varchar(16) NOT NULL DEFAULT '',
  `section` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `immediate_id` int(11) DEFAULT '0',
  `immediate` varchar(64) DEFAULT '',
  `position_id` int(11) DEFAULT '0',
  `position` varchar(64) DEFAULT '',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`section_id`),
  KEY `section_code` (`section_code`),
  KEY `section` (`section`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_users_specialization` */

DROP TABLE IF EXISTS `ww_users_specialization`;

CREATE TABLE `ww_users_specialization` (
  `specialization_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `specialization_code` varchar(16) NOT NULL DEFAULT '',
  `specialization` varchar(64) NOT NULL DEFAULT '',
  `status_id` tinyint(1) DEFAULT '0',
  `can_delete` tinyint(1) DEFAULT '1',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`specialization_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_utility_task` */

DROP TABLE IF EXISTS `ww_utility_task`;

CREATE TABLE `ww_utility_task` (
  `task_id` int(1) NOT NULL AUTO_INCREMENT,
  `task` varchar(64) NOT NULL,
  `task_status` enum('Idle','Running','Suspended') DEFAULT 'Idle',
  `minute` varchar(180) DEFAULT NULL,
  `hour` varchar(96) DEFAULT NULL,
  `day_of_month` varchar(96) DEFAULT NULL,
  `month` varchar(48) DEFAULT NULL,
  `day_of_week` varchar(16) DEFAULT NULL,
  `variable` text,
  `template_id` int(1) DEFAULT NULL,
  `email_to` text,
  `email_cc` text,
  `email_bcc` text,
  `last_run` datetime DEFAULT NULL,
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`task_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Table structure for table `ww_ww_system_email_queue` */

DROP TABLE IF EXISTS `ww_ww_system_email_queue`;

CREATE TABLE `ww_ww_system_email_queue` (
  `id` int(11) unsigned NOT NULL,
  `timein` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` enum('queued','sending','sent') DEFAULT 'queued',
  `to` text,
  `cc` text,
  `bcc` text,
  `subject` varchar(128) DEFAULT NULL,
  `body` text,
  `attachment` text,
  `attempts` tinyint(1) DEFAULT '0',
  `sent_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_ww_system_feeds` */

DROP TABLE IF EXISTS `ww_ww_system_feeds`;

CREATE TABLE `ww_ww_system_feeds` (
  `id` int(11) unsigned NOT NULL DEFAULT '0',
  `status` enum('info','success','warning','danger') DEFAULT 'info',
  `message_type` enum('Comment','Partners','Time Record','Personnel','Admin','System','Announcement','Company News') DEFAULT 'Comment',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) DEFAULT '',
  `feed_content` text,
  `uri` varchar(128) DEFAULT NULL,
  `record_id` int(11) DEFAULT '0',
  `recipient_id` int(11) DEFAULT '0' COMMENT 'thankyou: array of user ids',
  `readon` datetime DEFAULT '0000-00-00 00:00:00' COMMENT 'whoread: array of user ids',
  `createdon` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modifiedon` datetime DEFAULT NULL,
  `reactedon` datetime DEFAULT '0000-00-00 00:00:00',
  `deleted` tinyint(1) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_ww_time_form_balance` */

DROP TABLE IF EXISTS `ww_ww_time_form_balance`;

CREATE TABLE `ww_ww_time_form_balance` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `year` int(1) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `form_id` int(11) NOT NULL DEFAULT '0',
  `form_code` varchar(8) DEFAULT '',
  `credit` decimal(6,3) DEFAULT '0.000',
  `used` decimal(6,3) DEFAULT '0.000',
  `balance` decimal(6,3) DEFAULT '0.000',
  `paid_unit` decimal(6,3) DEFAULT '0.000',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `year` (`year`),
  KEY `user_id` (`user_id`),
  KEY `form_id` (`form_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_ww_time_forms` */

DROP TABLE IF EXISTS `ww_ww_time_forms`;

CREATE TABLE `ww_ww_time_forms` (
  `forms_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `form_status_id` tinyint(1) NOT NULL DEFAULT '0',
  `form_id` int(1) NOT NULL DEFAULT '0',
  `form_code` varchar(8) DEFAULT '',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(64) DEFAULT '',
  `day` decimal(5,2) DEFAULT '0.00',
  `hrs` decimal(5,2) DEFAULT '0.00',
  `ot_break` decimal(5,2) DEFAULT '0.00',
  `date_from` date DEFAULT '0000-00-00',
  `date_to` date DEFAULT '0000-00-00',
  `date_approved` datetime DEFAULT '0000-00-00 00:00:00',
  `date_declined` datetime DEFAULT '0000-00-00 00:00:00',
  `date_cancelled` datetime DEFAULT '0000-00-00 00:00:00',
  `date_sent` datetime DEFAULT '0000-00-00 00:00:00',
  `reason` text,
  `scheduled` enum('YES','NO') DEFAULT 'YES',
  `type` enum('File','Use') DEFAULT 'File',
  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT '0',
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT '0',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`forms_id`),
  KEY `form_id` (`form_id`),
  KEY `user_id` (`user_id`),
  KEY `deleted` (`deleted`),
  KEY `created_on` (`created_on`),
  KEY `date_from` (`date_from`),
  KEY `forms_status_id` (`form_status_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_ww_time_forms_approver` */

DROP TABLE IF EXISTS `ww_ww_time_forms_approver`;

CREATE TABLE `ww_ww_time_forms_approver` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `forms_id` int(11) unsigned NOT NULL DEFAULT '0',
  `user_id` int(11) DEFAULT '0',
  `display_name` varchar(64) CHARACTER SET latin1 DEFAULT '',
  `condition` tinyint(1) DEFAULT '1',
  `sequence` tinyint(1) DEFAULT '1',
  `approved` datetime DEFAULT '0000-00-00 00:00:00',
  `cancelled` datetime DEFAULT '0000-00-00 00:00:00',
  `deleted` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `forms_id` (`forms_id`),
  KEY `user_id` (`user_id`),
  KEY `sequence` (`sequence`),
  KEY `deleted` (`deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_ww_time_record` */

DROP TABLE IF EXISTS `ww_ww_time_record`;

CREATE TABLE `ww_ww_time_record` (
  `record_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `biometric` varchar(8) NOT NULL DEFAULT '',
  `shift_id` int(1) DEFAULT '0',
  `shift` varchar(32) DEFAULT NULL,
  `date` date NOT NULL,
  `processed` tinyint(1) DEFAULT '0',
  `override` tinyint(1) DEFAULT '0',
  `aux_shift_id` int(1) DEFAULT '0',
  `aux_shift` varchar(16) DEFAULT '',
  `aux_time_in` datetime DEFAULT NULL,
  `aux_time_out` datetime DEFAULT NULL,
  `time_in` datetime DEFAULT NULL,
  `time_out` datetime DEFAULT NULL,
  `flexible_min` int(1) DEFAULT '0',
  `flexible_time` time DEFAULT '00:00:00',
  `breaka_in` datetime DEFAULT NULL,
  `breaka_out` datetime DEFAULT NULL,
  `breakb_in` datetime DEFAULT NULL,
  `breakb_out` datetime DEFAULT NULL,
  `ot_in` datetime DEFAULT NULL,
  `ot_out` datetime DEFAULT NULL,
  `ot_in2` datetime DEFAULT NULL,
  `ot_out2` datetime DEFAULT NULL,
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int(11) DEFAULT NULL,
  `modified_on` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  PRIMARY KEY (`record_id`),
  UNIQUE KEY `user_date` (`user_id`,`date`),
  KEY `user_id` (`user_id`),
  KEY `date` (`date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ww_ww_time_record_raw` */

DROP TABLE IF EXISTS `ww_ww_time_record_raw`;

CREATE TABLE `ww_ww_time_record_raw` (
  `raw_id` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `user_id` int(11) DEFAULT '0',
  `biometric` varchar(8) NOT NULL DEFAULT '',
  `date` date NOT NULL DEFAULT '0000-00-00',
  `location_id` int(1) DEFAULT NULL,
  `device_id` int(1) DEFAULT NULL,
  `checktime` datetime NOT NULL,
  `checktype` varchar(8) DEFAULT NULL,
  `processed` tinyint(1) DEFAULT '0',
  `last_processed` datetime DEFAULT NULL,
  `archive` datetime DEFAULT NULL,
  UNIQUE KEY `biometric_date_checktime` (`biometric`,`date`,`checktime`),
  KEY `raw_id` (`raw_id`),
  KEY `user_id` (`user_id`),
  KEY `date` (`date`),
  KEY `biometric` (`biometric`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/* Trigger structure for table `ww_approver_class_company` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `approver_class_company_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `approver_class_company_insert_before` BEFORE INSERT ON `ww_approver_class_company` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-07-18 initial
                        2014-07-18 
        */ 
        SET NEW.`alias` = (SELECT IFNULL(`display_name`,'*') FROM `users` WHERE `user_id`=NEW.`approver_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_approver_class_company` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `approver_class_company_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `approver_class_company_update_before` BEFORE UPDATE ON `ww_approver_class_company` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-07-18 initial
                        2014-07-18 
        */ 
        SET NEW.`alias` = (SELECT IFNULL(`display_name`,'*') FROM `users` WHERE `user_id`=NEW.`approver_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_approver_class_department` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `approver_class_depatment_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `approver_class_depatment_insert_before` BEFORE INSERT ON `ww_approver_class_department` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-07-18 initial
                        2014-07-18 
        */ 
        SET NEW.`alias` = (SELECT IFNULL(`display_name`,'*') FROM `users` WHERE `user_id`=NEW.`approver_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_approver_class_department` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `approver_class_department_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `approver_class_department_update_before` BEFORE UPDATE ON `ww_approver_class_department` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-07-18 initial
                        2014-07-18 
        */ 
        SET NEW.`alias` = (SELECT IFNULL(`display_name`,'*') FROM `users` WHERE `user_id`=NEW.`approver_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_approver_class_position` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `approver_class_position_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `approver_class_position_insert_before` BEFORE INSERT ON `ww_approver_class_position` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-07-18 initial
                        2014-07-18 
        */
         
        SET NEW.`alias` = (SELECT IFNULL(`display_name`,'*') FROM `users` WHERE `user_id`=NEW.`approver_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_approver_class_position` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `approver_class_position_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `approver_class_position_update_before` BEFORE UPDATE ON `ww_approver_class_position` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-07-18 initial
                        2014-07-18 
        */ 
        SET NEW.`alias` = (SELECT IFNULL(`display_name`,'*') FROM `users` WHERE `user_id`=NEW.`approver_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_approver_class_user` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `approver_class_user_before_insert` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `approver_class_user_before_insert` BEFORE INSERT ON `ww_approver_class_user` FOR EACH ROW BEGIN
	SET NEW.`alias` = (SELECT IFNULL(`display_name`,'*') FROM `users` WHERE `user_id`=NEW.`approver_id` LIMIT 1);
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_approver_class_user` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `approver_class_user_before_update` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `approver_class_user_before_update` BEFORE UPDATE ON `ww_approver_class_user` FOR EACH ROW BEGIN
	SET NEW.`alias` = (SELECT IFNULL(`display_name`,'*') FROM `users` WHERE `user_id`=NEW.`approver_id` LIMIT 1);
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_memo` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `memo_update_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `memo_update_after` AFTER UPDATE ON `ww_memo` FOR EACH ROW BEGIN
        
        /* This will update system feeds on unpublish/deleted content
           last change: 2016-04-01 initial
                        2016-04-01 
        */ 
        IF NEW.`deleted` = 1 THEN
           UPDATE `ww_system_feeds` SET `deleted`=1 WHERE `record_id`=NEW.`memo_id`;
        END IF;
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_menu` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `menu_to_insert_on_profile_menu` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `menu_to_insert_on_profile_menu` BEFORE INSERT ON `ww_menu` FOR EACH ROW BEGIN
        /* 
           - to insert this so that admin profile always has the rights on newly created menu
           - to update/delete on profile to sync records
           
           INSERT INTO www_profile_menu 
           profile_id = 1
        */
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_partners` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `partners_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `partners_insert_before` BEFORE INSERT ON `ww_partners` FOR EACH ROW 
BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-04-16 initial
                        2014-04-16 
        */ 
        
        IF NEW.`deleted` = 0 THEN
           SET @coid = (SELECT company_id FROM users_profile WHERE user_id=NEW.`user_id` LIMIT 1);
           INSERT INTO `ww_payroll_partners` (`user_id`,`company_id`,`salary`) VALUES (NEW.`user_id`,@coid,NEW.`salary`)
           ON DUPLICATE KEY UPDATE company_id=IFNULL(company_id,@coid),`modified_on`=NOW(),`deleted`=0;
        END IF;
                
        SET NEW.`alias` = (SELECT IFNULL(display_name,'*') FROM users WHERE user_id=NEW.`user_id` LIMIT 1);
        SET NEW.`shift` = (SELECT IFNULL(`shift`,'*') FROM `ww_time_shift` WHERE `shift_id`=NEW.shift_id LIMIT 1);
        SET NEW.`status` = (SELECT IFNULL(`employment_status`,'*') FROM `ww_partners_employment_status` WHERE `employment_status_id`=NEW.status_id LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_partners` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `partners_insert_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `partners_insert_after` AFTER INSERT ON `ww_partners` FOR EACH ROW 
BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2015-09-15 initial
                        0000-00-00 
        */ 
        
       IF NEW.`deleted` <> 1 THEN
           SET @p1 = NEW.`effectivity_date`;
           SET @p2 = @p1 + INTERVAL 30 DAY;
           SET @p3 = NEW.`user_id`;
           -- CALL sp_time_period_populate_user(@p1, @p2, @p3);
        END IF;
              
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_partners` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `partners_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `partners_update_before` BEFORE UPDATE ON `ww_partners` FOR EACH ROW 
BEGIN
       
       /* This will insert-update display names accross all modules 
          last change: 2014-04-16 initial
                       2015-09-14 company for payroll 
       */ 
       IF NEW.`deleted` = 0 THEN
          SET @coid = (SELECT company_id FROM ww_users_profile WHERE user_id=NEW.`user_id` LIMIT 1);
          INSERT INTO `ww_payroll_partners` (`user_id`,`company_id`,`salary`) VALUES (NEW.`user_id`,@coid,NEW.`salary`)
          ON DUPLICATE KEY UPDATE company_id=IFNULL(company_id,@coid),`modified_on`=NOW(),`deleted`=0;
       END IF;
       
       SET NEW.`alias` = (SELECT IFNULL(display_name,'*') FROM ww_users WHERE user_id=NEW.`user_id` LIMIT 1);
       SET NEW.`shift` = (SELECT IFNULL(`shift`,'*') FROM `ww_time_shift` WHERE `shift_id`=NEW.shift_id LIMIT 1);
       SET NEW.`calendar` = (SELECT IFNULL(`calendar`,'*') FROM `ww_time_shift_weekly` WHERE `calendar_id`=NEW.calendar_id LIMIT 1);
       SET NEW.`status` = (SELECT IFNULL(`employment_status`,'*') FROM `ww_partners_employment_status` WHERE `employment_status_id`=NEW.status_id LIMIT 1);
       
       SET NEW.`modified_on` = NOW();
       
   END */$$


DELIMITER ;

/* Trigger structure for table `ww_partners` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `partners_update_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `partners_update_after` AFTER UPDATE ON `ww_partners` FOR EACH ROW 
BEGIN
        
        /* This will update partner schedule from this date onwards
           last change: 2015-07-16 initial
                        2015-09-09 update users 
                        2017-03-18 change shift_id to calendar_id
        */ 
        
        IF NEW.`calendar_id` <> OLD.`calendar_id` AND IFNULL(NEW.`resigned_date`,'0000-00-00')='0000-00-00' THEN
           SET @p1 = CURDATE();
           SET @p2 = CONCAT(YEAR(CURDATE()),'-12-31');
           SET @p3 = NEW.`user_id`;
           CALL sp_time_period_populate_user(@p1, @p2, @p3);
        END IF;
        
        IF IFNULL(NEW.`resigned_date`,'0000-00-00') <> '0000-00-00' THEN
           IF NEW.`resigned_date` <= CURDATE() THEN
              UPDATE `ww_users` SET active=0 WHERE `user_id`=NEW.`user_id` LIMIT 1;
           END IF;
        END IF;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_partners_movement_action` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `partners_movement_action_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `partners_movement_action_insert_before` BEFORE INSERT ON `ww_partners_movement_action` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-04-16 initial
                        2014-04-18 
        */ 
        SET NEW.`display_name` = (SELECT IFNULL(display_name,'*') FROM users WHERE user_id=NEW.`user_id` LIMIT 1);
        SET NEW.`type` = (SELECT IFNULL(`type`,'*') FROM `ww_partners_movement_type` WHERE `type_id`=NEW.type_id LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_partners_movement_action` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `partners_movement_action_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `partners_movement_action_update_before` BEFORE UPDATE ON `ww_partners_movement_action` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-04-16 initial
                        2014-04-18 
        */ 
        SET NEW.`display_name` = (SELECT IFNULL(display_name,'*') FROM users WHERE user_id=NEW.`user_id` LIMIT 1);
        SET NEW.`type` = (SELECT IFNULL(`type`,'*') FROM `ww_partners_movement_type` WHERE `type_id`=NEW.type_id LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_payroll_bonus` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `payroll_bonus_before_insert` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `payroll_bonus_before_insert` BEFORE INSERT ON `ww_payroll_bonus` FOR EACH ROW BEGIN
	IF NEW.bonus_transaction_code IS NOT NULL THEN
		SET NEW.bonus_transaction_id = (SELECT transaction_id FROM ww_payroll_transaction WHERE transaction_code = NEW.bonus_transaction_code LIMIT 1);
	END IF;
	
	IF NEW.taxable_bonus_transaction_code IS NOT NULL THEN
		SET NEW.taxable_bonus_transaction_id = (SELECT transaction_id FROM ww_payroll_transaction WHERE transaction_code = NEW.taxable_bonus_transaction_code LIMIT 1);
	END IF;
	
	IF NEW.method IS NOT NULL THEN
		SET NEW.transaction_method_id = (SELECT payroll_transaction_method_id FROM ww_payroll_transaction_method WHERE payroll_transaction_method = NEW.method  LIMIT 1);
	END IF;
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_payroll_bonus_employee` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `payroll_bonus_employee_before_insert` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `payroll_bonus_employee_before_insert` BEFORE INSERT ON `ww_payroll_bonus_employee` FOR EACH ROW BEGIN
    
	IF IFNULL(NEW.`document_no`,'') <> '' THEN
		SET NEW.`bonus_id` = (SELECT `bonus_id` FROM `ww_payroll_bonus` WHERE `document_no` = NEW.`document_no` LIMIT 1);
	END IF;
    
	IF IFNULL(NEW.`id_number`,'') <> '' THEN
		SET NEW.`employee_id` = (SELECT `user_id` FROM `ww_partners` WHERE `id_number` = NEW.`id_number` LIMIT 1);
	END IF;
    
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_payroll_entry_batch` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `payroll_entry_batch_before_insert` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `payroll_entry_batch_before_insert` BEFORE INSERT ON `ww_payroll_entry_batch` FOR EACH ROW BEGIN
	IF NEW.transaction_code IS NOT NULL THEN
		SET NEW.transaction_id = (SELECT transaction_id FROM ww_payroll_transaction where transaction_code = NEW.transaction_code LIMIT 1);
	END IF;
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_payroll_entry_batch_employee` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `payroll_entry_batch_employee` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `payroll_entry_batch_employee` BEFORE INSERT ON `ww_payroll_entry_batch_employee` FOR EACH ROW BEGIN
    
	if NEW.`document_no` is NOT NULL THEN
		SET NEW.`batch_entry_id` = (SELECT `batch_entry_id` FROM `ww_payroll_entry_batch` WHERE `document_no`=NEW.`document_no` LIMIT 1);		
	END IF;
    
	IF IFNULL(NEW.`id_number`,'') <> '' THEN
		SET NEW.`employee_id` = (SELECT `user_id` FROM `ww_partners` WHERE `id_number` = NEW.`id_number` AND deleted = 0 LIMIT 1);	
	END IF;
    
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_payroll_entry_recurring` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `payroll_entry_recurring_before_insert` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `payroll_entry_recurring_before_insert` BEFORE INSERT ON `ww_payroll_entry_recurring` FOR EACH ROW BEGIN
	if NEW.transaction_code is not null then
		set NEW.transaction_id = (Select transaction_id from ww_payroll_transaction where transaction_code = NEW.transaction_code LIMIT 1);
	end if;
	
	IF NEW.transaction_method IS NOT NULL THEN
		SET NEW.transaction_method_id = (SELECT payroll_transaction_method_id FROM ww_payroll_transaction_method WHERE payroll_transaction_method = NEW.transaction_method LIMIT 1);
	END IF;
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_payroll_entry_recurring_employee` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `payroll_entry_recurring_employee_before_insert` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `payroll_entry_recurring_employee_before_insert` BEFORE INSERT ON `ww_payroll_entry_recurring_employee` FOR EACH ROW BEGIN
    
	IF IFNULL(NEW.`document_no`,'') <> '' THEN
		SET NEW.`recurring_id` = (select `recurring_id` from `ww_payroll_entry_recurring` where `document_no` = NEW.`document_no` LIMIT 1);
	END IF;
    
	IF IFNULL(NEW.`id_number`,'') <> '' THEN
		SET NEW.`employee_id` = (SELECT `user_id` FROM `ww_partners` WHERE `id_number` = NEW.`id_number` AND deleted = 0 LIMIT 1);
	END IF;
    
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_payroll_partners_loan` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `payroll_partners_loan_before_insert` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `payroll_partners_loan_before_insert` BEFORE INSERT ON `ww_payroll_partners_loan` FOR EACH ROW BEGIN
	if NEW.id_number is not null then
		SET NEW.user_id = (select user_id from ww_partners where id_number = NEW.id_number limit 1);
	end if;
	
	IF NEW.loan_code IS NOT NULL THEN
		SET NEW.loan_id = (SELECT loan_id FROM ww_payroll_loan where loan_code = NEW.loan_code LIMIT 1);
	END IF;
	
	IF NEW.loan_status IS NOT NULL THEN
		SET NEW.loan_status_id = (SELECT loan_status_id FROM ww_payroll_loan_status WHERE loan_status = NEW.loan_status LIMIT 1);
	END IF;
	
	IF NEW.payment_mode IS NOT NULL THEN
		SET NEW.payment_mode_id = (SELECT payment_mode_id FROM ww_payroll_payment_mode WHERE payment_mode = NEW.payment_mode LIMIT 1);
	END IF;
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_payroll_period` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `payroll_period_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `payroll_period_insert_before` BEFORE INSERT ON `ww_payroll_period` FOR EACH ROW BEGIN
    
        if NEW.period_processing_type_id = 4 then
		set NEW.bonus_tag = 1;
        end if;
         
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_payroll_period` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `payroll_period_insert_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `payroll_period_insert_after` AFTER INSERT ON `ww_payroll_period` FOR EACH ROW BEGIN
        
        /* This will insert Year on ww_payroll_year */
        set @payYear = year(NEW.payroll_date);
        set @nCount = 0;
        select count(*) into @nCount from ww_payroll_year where payroll_year = @payYear;
        if @nCount = 0 then
		insert into ww_payroll_year(payroll_year) values (@payYear);
        end if;
                
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_performance_appraisal_applicable` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `performance_appraisal_logs_insert` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `performance_appraisal_logs_insert` BEFORE INSERT ON `ww_performance_appraisal_applicable` FOR EACH ROW BEGIN
    
       SET @touser = '';
       
       SELECT IFNULL(`display_name`,'') INTO @touser FROM `users` WHERE `user_id`=NEW.`to_user_id` LIMIT 1;
       
       INSERT INTO `ww_performance_appraisal_logs` 
          (appraisal_id, user_id, status_id, to_user_id, to_user)
       SELECT NEW.`appraisal_id`, NEW.`user_id`, NEW.`status_id`, NEW.`to_user_id`, @touser;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_performance_appraisal_applicable` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `performance_appraisal_applicable_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `performance_appraisal_applicable_update_before` BEFORE UPDATE ON `ww_performance_appraisal_applicable` FOR EACH ROW BEGIN
        
        SET NEW.`modified_date` = NOW();
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_performance_appraisal_applicable` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `performance_appraisal_logs_update` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `performance_appraisal_logs_update` AFTER UPDATE ON `ww_performance_appraisal_applicable` FOR EACH ROW BEGIN
    
       SET @touser = '';
       
       SELECT IFNULL(`display_name`,'') INTO @touser FROM `users` WHERE `user_id`=NEW.`to_user_id` LIMIT 1;
       
       INSERT INTO `ww_performance_appraisal_logs` 
          (appraisal_id, user_id, status_id, to_user_id, to_user)
       SELECT NEW.`appraisal_id`, NEW.`user_id`, NEW.`status_id`, NEW.`to_user_id`, @touser;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_performance_appraisal_applicable_user` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `performance_appraisal_applicable_user_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `performance_appraisal_applicable_user_update_before` BEFORE UPDATE ON `ww_performance_appraisal_applicable_user` FOR EACH ROW BEGIN
        
        SET NEW.`modified_date` = NOW();
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_performance_appraisal_approver` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `performance_appraisal_approver_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `performance_appraisal_approver_insert_before` BEFORE INSERT ON `ww_performance_appraisal_approver` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-07-17 initial
                        2014-07-17 
        */ 
        SET NEW.`display_name` = (SELECT IFNULL(`display_name`,'*') FROM `users` WHERE `user_id`=NEW.`approver_id` LIMIT 1);
        SET NEW.`performance_status` = (SELECT IFNULL(`performance_status`,'*') FROM `ww_performance_status` WHERE `performance_status_id`=NEW.`performance_status_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_performance_appraisal_approver` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `performance_appraisal_approver_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `performance_appraisal_approver_update_before` BEFORE UPDATE ON `ww_performance_appraisal_approver` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-07-17 initial
                        2014-07-17 
        */ 
        SET NEW.`performance_status` = (SELECT IFNULL(`performance_status`,'*') FROM `ww_performance_status` WHERE `performance_status_id`=NEW.`performance_status_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_performance_appraisal_contributor` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `performance_appraisal_contributor_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `performance_appraisal_contributor_update_before` BEFORE UPDATE ON `ww_performance_appraisal_contributor` FOR EACH ROW BEGIN
        
        SET NEW.`modified_date` = NOW();
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_performance_planning_applicable` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `performance_planning_logs_insert` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `performance_planning_logs_insert` BEFORE INSERT ON `ww_performance_planning_applicable` FOR EACH ROW BEGIN
    
       SET @touser = '';
       
       SELECT IFNULL(`display_name`,'') INTO @touser FROM `users` WHERE `user_id`=NEW.`to_user_id` LIMIT 1;
       
       INSERT INTO `ww_performance_planning_logs` 
          (planning_id, user_id, status_id, to_user_id, to_user)
       SELECT NEW.`planning_id`, NEW.`user_id`, NEW.`status_id`, NEW.`to_user_id`, @touser;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_performance_planning_applicable` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `performance_planning_logs_update` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `performance_planning_logs_update` AFTER UPDATE ON `ww_performance_planning_applicable` FOR EACH ROW BEGIN
    
       SET @touser = '';
       
       SELECT IFNULL(`display_name`,'') INTO @touser FROM `users` WHERE `user_id`=NEW.`to_user_id` LIMIT 1;
       
       INSERT INTO `ww_performance_planning_logs` 
          (planning_id, user_id, status_id, to_user_id, to_user)
       SELECT NEW.`planning_id`, NEW.`user_id`, NEW.`status_id`, NEW.`to_user_id`, @touser;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_performance_planning_approver` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `performance_planning_approver_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `performance_planning_approver_insert_before` BEFORE INSERT ON `ww_performance_planning_approver` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-07-17 initial
                        2014-07-17 
        */ 
        SET NEW.`display_name` = (SELECT IFNULL(`display_name`,'*') FROM `users` WHERE `user_id`=NEW.`approver_id` LIMIT 1);
        SET NEW.`performance_status` = (SELECT IFNULL(`performance_status`,'*') FROM `ww_performance_status` WHERE `performance_status_id`=NEW.`performance_status_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_performance_planning_approver` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `performance_planning_approver_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `performance_planning_approver_update_before` BEFORE UPDATE ON `ww_performance_planning_approver` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-07-17 initial
                        2014-07-17 
        */ 
        SET NEW.`performance_status` = (SELECT IFNULL(`performance_status`,'*') FROM `ww_performance_status` WHERE `performance_status_id`=NEW.`performance_status_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_recruitment_manpower_plan` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `recruitment_manpower_plan_insert_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `recruitment_manpower_plan_insert_after` AFTER INSERT ON `ww_recruitment_manpower_plan` FOR EACH ROW BEGIN
	IF NEW.`manpower_plan_status_id`=2 THEN
          -- 
          CALL sp_recruitment_manpower_plan_populate_approvers(NEW.`plan_id`, NEW.`user_id`);  
          --                   
       END IF;
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_recruitment_manpower_plan` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `recruitment_manpower_plan_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `recruitment_manpower_plan_update_before` BEFORE UPDATE ON `ww_recruitment_manpower_plan` FOR EACH ROW BEGIN
	IF NEW.`manpower_plan_status_id`=2 THEN
          -- 
          CALL sp_recruitment_manpower_plan_populate_approvers(NEW.`plan_id`, NEW.`user_id`);  
          --                   
       END IF;
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_recruitment_manpower_plan` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `recruitment_manpower_plan_update_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `recruitment_manpower_plan_update_after` AFTER UPDATE ON `ww_recruitment_manpower_plan` FOR EACH ROW BEGIN
	IF NEW.`manpower_plan_status_id`=2 THEN
          -- 
          CALL sp_recruitment_manpower_plan_populate_approvers(NEW.`plan_id`, NEW.`user_id`);  
          --                   
       END IF;
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_recruitment_manpower_plan_position_new` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `users_position_insert_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `users_position_insert_after` AFTER INSERT ON `ww_recruitment_manpower_plan_position_new` FOR EACH ROW BEGIN
        
        /* This will insert Year on ww_payroll_year */
        set @sPosition = '';
        set @iID = '';
        SET @sPosition = NEW.position;
        SET @iID = NEW.id;
        SET @nCount = 0;
        set @sPositionCode = '';
        SELECT COUNT(*) INTO @nCount FROM ww_users_position WHERE `amp_position_id` = @iID;        
        IF @sPosition IS NOT NULL AND @nCount = 0 THEN
		INSERT INTO ww_users_position (position_code,`position`,amp_position_id,status_id) VALUES (@sPositionCode,@sPosition,@iID,1);
        END IF;
                
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_recruitment_request` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `recruitment_request_insert` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `recruitment_request_insert` BEFORE INSERT ON `ww_recruitment_request` FOR EACH ROW BEGIN
	IF NEW.`status_id`=2 THEN
          -- 
          CALL sp_recruitment_request_populate_approvers(NEW.`request_id`, NEW.`user_id`);  
          --                   
       END IF;
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_recruitment_request` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `recruitment_request_update` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `recruitment_request_update` BEFORE UPDATE ON `ww_recruitment_request` FOR EACH ROW BEGIN
	IF NEW.`status_id`=2 THEN
          -- 
          CALL sp_recruitment_request_populate_approvers(NEW.`request_id`, NEW.`user_id`);  
          --                   
       END IF;
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_system_chat` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `system_chat_before_insert` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `system_chat_before_insert` BEFORE INSERT ON `ww_system_chat` FOR EACH ROW BEGIN
	SET NEW.`from_name` = (SELECT CONCAT(ww_users_profile.`lastname`,', ',ww_users_profile.`firstname`) FROM `ww_users_profile` WHERE `user_id`=NEW.from LIMIT 1);
	SET NEW.`to_name` = (SELECT CONCAT(ww_users_profile.`lastname`,', ',ww_users_profile.`firstname`) FROM `ww_users_profile` WHERE `user_id`=NEW.to LIMIT 1);        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_system_feeds` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `system_feeds_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `system_feeds_insert_before` BEFORE INSERT ON `ww_system_feeds` FOR EACH ROW BEGIN
        
        /* This will update header feeds table
           last change: 2015-08-10 initial, just update modification date
                        2015-08-10 
        */ 
        
        SET NEW.`display_name` = (SELECT IFNULL(`display_name`,'*') FROM `users_profile` WHERE `user_id`=NEW.`user_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_system_feeds` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `system_feeds_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `system_feeds_update_before` BEFORE UPDATE ON `ww_system_feeds` FOR EACH ROW BEGIN
        
        /* This will update header feeds table
           last change: 2015-08-10 initial, just update modification date
                        2015-08-10 
        */ 
        
        SET NEW.`display_name` = (SELECT IFNULL(`display_name`,'*') FROM `users_profile` WHERE `user_id`=NEW.`user_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_system_feeds_comments` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `system_feeds_comments_insert_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `system_feeds_comments_insert_after` AFTER INSERT ON `ww_system_feeds_comments` FOR EACH ROW BEGIN
        
        /* This will update header feeds table
           last change: 2014-08-15 initial, just update modification date
                        2014-08-15 
        */ 
        UPDATE `ww_system_feeds` SET `modifiedon` = NOW()
        WHERE `id` = NEW.`id` LIMIT 1;
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_system_feeds_comments` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `system_feeds_comments_update_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `system_feeds_comments_update_after` AFTER UPDATE ON `ww_system_feeds_comments` FOR EACH ROW BEGIN
        
        /* This will update header feeds table
           last change: 2014-08-15 initial, just update modification date
                        2014-08-15 
        */ 
        UPDATE `ww_system_feeds` SET `modifiedon` = NOW()
        WHERE `id` = NEW.`id` LIMIT 1;
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_system_password_request` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `system_password_request_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `system_password_request_insert_before` BEFORE INSERT ON `ww_system_password_request` FOR EACH ROW BEGIN
    
       /* This will insert-update password request and email queue
          last change: 2014-04-25: initial
                       2014-04-25: 
       */ 
          
       SET NEW.`expiration` = DATE_ADD(NOW(), INTERVAL 24 HOUR);
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_system_password_request` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `system_password_request_insert_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `system_password_request_insert_after` AFTER INSERT ON `ww_system_password_request` FOR EACH ROW BEGIN
    
       /* This will insert-update password request and email queue
          last change: 2014-04-25: initial
                       2015-09-13: system logo 
       */ 
                 
       SET @email_to = '';
       SET @email_subject = '';
       SET @email_body = '';
       
       -- get template format
       SELECT `subject`,`body` INTO @email_subject, @email_body
       FROM `ww_system_template`
       WHERE `template_id`=1 LIMIT 1;
       
       -- get profile nickname
       SELECT IFNULL(`nickname`,`firstname`) INTO @email_to
       FROM `users_profile`
       WHERE `user_id`=NEW.`user_id` LIMIT 1;
       
       -- {{link}}
       SET @url = get_config('System','URL');
	   IF RIGHT(TRIM(@url),1) <> '/' THEN
	      SET @url = CONCAT(TRIM(@url),'/');
	   END IF;
	   
       -- {{header/email logo}}
       SET @logo = get_config('System','print_logo'); 
	   IF TRIM(@logo) <> '' THEN
	      SET @logo = CONCAT(@url,@logo);
	   ELSE
	      SET @logo = CONCAT(@url,get_config('System','logo'));
	   END IF;
	   
       -- assign variables
       SET @email_body = REPLACE(@email_body, '{{system_url}}', @url);
       SET @email_body = REPLACE(@email_body, '{{system_logo}}', @logo);
       SET @email_body = REPLACE(@email_body, '{{nickname}}', @email_to);
       SET @email_body = REPLACE(@email_body, '{{expiration}}', NEW.`expiration`);
       SET @email_body = REPLACE(@email_body, '{{link}}', CONCAT(NEW.`link`,'&id=',NEW.`id`));
       
       -- insert final format
       INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
       SELECT NEW.`email`, @email_subject, @email_body;
       
       -- remove link for security
       -- UPDATE `ww_system_password_request` SET `link`='forwarded' WHERE `id`=NEW.`id` LIMIT 1;
       
       -- done
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_system_password_request` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `system_password_request_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `system_password_request_update_before` BEFORE UPDATE ON `ww_system_password_request` FOR EACH ROW BEGIN
    
       /* This will insert-update password request and user hash
          last change: 2014-04-25: initial
                       2015-09-13: system logo 
       */ 
       
       IF NEW.`confirmed` = 1 THEN
          
          -- INSERT INTO `ww_system_email_queue`
          SET @email_to = '';
          SET @email_subject = '';
          SET @email_body = '';
       
          -- get template format
          SELECT `subject`,`body` INTO @email_subject, @email_body
          FROM `ww_system_template`
          WHERE `template_id`=2 LIMIT 1;
       
          -- get profile nickname
          SELECT IFNULL(`nickname`,`firstname`) INTO @email_to
          FROM `users_profile`
          WHERE `user_id`=NEW.`user_id` LIMIT 1;
       
          -- {{link}}
          SET @url = get_config('System','URL');
	      IF RIGHT(TRIM(@url),1) <> '/' THEN
	         SET @url = CONCAT(TRIM(@url),'/');
	      END IF;
	      
          -- {{header/email logo}}
          SET @logo = get_config('System','print_logo'); 
	      IF TRIM(@logo) <> '' THEN
	         SET @logo = CONCAT(@url,@logo);
	      ELSE
	         SET @logo = CONCAT(@url,get_config('System','logo'));
	      END IF;
	   
          -- assign variables
          SET @email_body = REPLACE(@email_body, '{{system_url}}', @url);
          SET @email_body = REPLACE(@email_body, '{{system_logo}}', @logo);
          SET @email_body = REPLACE(@email_body, '{{nickname}}', @email_to);
          SET @email_body = REPLACE(@email_body, '{{randomize}}', NEW.`randomized`);
          SET @email_body = REPLACE(@email_body, '{{link}}', @url);
          -- insert final format
          INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
          SELECT NEW.`email`, @email_subject, @email_body;
       
       
       
          -- initialize values for security  
          SET NEW.`hash` = '';
          SET NEW.`link` = 'forwarded';        
          SET NEW.`confirmed` = 0;
          SET NEW.`randomized` = '';
          
       END IF;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_system_support` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `system_support_insert_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `system_support_insert_after` AFTER INSERT ON `ww_system_support` FOR EACH ROW BEGIN
    
       /* This will insert-update time_record
          last change: 2016-02-10 initial
                       2014-02-10 
       */
          
       CALL `sp_system_support_email`(NEW.msg_id);
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_form_balance` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_form_balance_before_ins` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_form_balance_before_ins` BEFORE INSERT ON `ww_time_form_balance` FOR EACH ROW BEGIN
       
       
       -- [1] Compute available credit using accrual table
       SET NEW.`current` = ( SELECT IFNULL(SUM(tfba.`accrual`),0)
                             FROM `ww_time_form_balance_accrual` tfba
                             WHERE tfba.`leave_balance_id` = NEW.`id` AND tfba.`user_id` = NEW.`user_id` AND tfba.`deleted` = 0);
       
       -- SET NEW.`used` = (SELECT IFNULL(SUM(`day`),0) FROM `time_forms` WHERE `form_status_id`=6 AND `form_id`=NEW.`form_id` AND YEAR(`date_from`)=NEW.`year` AND `user_id`=NEW.`user_id`);       
       
       
       -- [2] Compute for the usage
       /*
       SET NEW.`used` = ( SELECT IFNULL(SUM(tfd.`day`),0)
                          FROM `time_forms` AS tf
                          JOIN ww_time_forms_date AS tfd ON tfd.forms_id = tf.forms_id
                          WHERE tf.`form_status_id` = 6 AND
                                tf.`form_id` = NEW.`form_id` AND
                                tf.`user_id`=NEW.`user_id` AND
                                tfd.leave_balance_id = NEW.id ) + 
                        ( SELECT IFNULL(SUM(tfd.`day`),0)
                          FROM `ww_time_forms` AS tf
                          LEFT JOIN ww_time_forms_date AS tfd ON tfd.forms_id = tf.forms_id
                          JOIN ww_time_forms_blanket tfb ON tfb.forms_id = tfd.`forms_id`
                          WHERE tf.`form_status_id` = 6 AND
                                tf.`form_id` = NEW.`form_id` AND
                                tfd.leave_balance_id = NEW.`id` );
       */
       SET NEW.`used` = ( SELECT IFNULL(SUM(tf.`day`),0)
                          FROM `time_forms` AS tf
                          WHERE tf.`form_status_id` = 6 AND
                                tf.`form_id` = NEW.`form_id` AND
                                tf.`user_id`=NEW.`user_id` AND 
                                YEAR(tf.`date_from`) = NEW.`year` ) +
                        ( SELECT IFNULL(SUM(tfd.`day`),0)
                          FROM `ww_time_forms` AS tf
                          LEFT JOIN ww_time_forms_date AS tfd ON tfd.forms_id = tf.forms_id
                          JOIN ww_time_forms_blanket tfb ON tfb.forms_id = tfd.`forms_id`
                          WHERE tf.`form_status_id` = 6 AND
                                tf.`form_id` = NEW.`form_id` AND
                                tfd.leave_balance_id = NEW.`id` );
       
       
        -- [3] Compute for the remaining credits
        SET NEW.`balance` = IF(IFNULL(NEW.`previous`,0) + 
                            IFNULL(NEW.`current`,0) - 
                            IFNULL(NEW.`used`,0) - 
                            IFNULL(NEW.`used_insert`,0) - 
                            IFNULL(NEW.`forfeited`,0) - 
                            IFNULL(NEW.`paid_unit`,0) > 0,IFNULL(NEW.`previous`,0) + 
                            IFNULL(NEW.`current`,0) - 
                            IFNULL(NEW.`used`,0) - 
                            IFNULL(NEW.`used_insert`,0) - 
                            IFNULL(NEW.`forfeited`,0) - 
                            IFNULL(NEW.`paid_unit`,0),0);
        
        
        -- [4] Just checking for the codes
        IF IFNULL(NEW.`form_code`,'') = '' THEN
           SET NEW.`form_code` = (SELECT IFNULL(`form_code`,'*') FROM `ww_time_form` WHERE `form_id`=NEW.`form_id` LIMIT 1);
        END IF;
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_form_balance` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_form_balance_before_upd` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_form_balance_before_upd` BEFORE UPDATE ON `ww_time_form_balance` FOR EACH ROW BEGIN
    
    
       -- [1] Compute available credit using accrual table
       SET NEW.`current` = ( SELECT IFNULL(SUM(tfba.`accrual`),0)
                             FROM `ww_time_form_balance_accrual` tfba
                             WHERE tfba.`leave_balance_id` = NEW.`id` AND tfba.`user_id` = NEW.`user_id` AND tfba.`deleted` = 0);
       
       -- SET NEW.`used` = (SELECT IFNULL(SUM(`day`),0) FROM `time_forms` 
       --                   WHERE `form_status_id`=6 AND `form_id`=NEW.`form_id` AND YEAR(`date_from`)=NEW.`year` AND `user_id`=NEW.`user_id`);       
       
       
       -- [2] Compute for the usage
       SET NEW.`used` = ( SELECT IFNULL(SUM(tf.`day`),0)
                          FROM `time_forms` AS tf
                          WHERE tf.`form_status_id` = 6 AND
                                tf.`form_id` = NEW.`form_id` AND
                                tf.`user_id`=NEW.`user_id` AND 
                                YEAR(tf.`date_from`) = NEW.`year` ) +
                        ( SELECT IFNULL(SUM(tfd.`day`),0)
                          FROM `ww_time_forms` AS tf
                          left JOIN ww_time_forms_date AS tfd ON tfd.forms_id = tf.forms_id
                          JOIN ww_time_forms_blanket tfb ON tfb.forms_id = tfd.`forms_id`
                          WHERE tf.`form_status_id` = 6 AND
                                tf.`form_id` = NEW.`form_id` AND
                                tfd.leave_balance_id = NEW.`id` );
       
              
       /*
       IF NEW.`form_code` = 'ADDL' THEN
          SET NEW.`used` = IFNULL(
              (
              SELECT IF( SUM(used)=0,NULL,SUM(used) ) 
              FROM ww_time_forms_ot_leave_used otleave 
              LEFT JOIN ww_time_forms tfs ON otleave.used_by_form = tfs.forms_id 
              WHERE `user_id`=NEW.`user_id` AND NEW.`form_code` = 'ADDL' AND tfs.form_status_id = 6 OR otleave.used_by_form = -1
              ) + NEW.used_insert  
              , 0);
          SET NEW.`current` = IFNULL(
	      (
              SELECT IF( SUM(otleave.credit)=0,NULL,SUM(otleave.credit) ) 
              FROM ww_time_forms_ot_leave otleave 
              LEFT JOIN ww_time_forms tfs ON otleave.forms_id = tfs.forms_id 
              WHERE `user_id`=NEW.`user_id` AND NEW.`form_code` = 'ADDL' AND tfs.form_status_id = 6
              ), 0);
        END IF;
        */
        
        
        -- [3] Compute for the remaining credits
        SET NEW.`balance` = IF(IFNULL(NEW.`previous`,0) + 
                            IFNULL(NEW.`current`,0) - 
                            IFNULL(NEW.`used`,0) - 
                            IFNULL(NEW.`used_insert`,0) - 
                            IFNULL(NEW.`forfeited`,0) - 
                            IFNULL(NEW.`paid_unit`,0) > 0,IFNULL(NEW.`previous`,0) + 
                            IFNULL(NEW.`current`,0) - 
                            IFNULL(NEW.`used`,0) - 
                            IFNULL(NEW.`used_insert`,0) - 
                            IFNULL(NEW.`forfeited`,0) - 
                            IFNULL(NEW.`paid_unit`,0),0);
        
        
        -- [4] Just checking for the codes
        IF IFNULL(NEW.`form_code`,'') = '' THEN
           SET NEW.`form_code` = (SELECT IFNULL(`form_code`,'*') FROM `ww_time_form` WHERE `form_id`=NEW.`form_id` LIMIT 1);
        END IF;
        
        
        -- [5] Time posting
        SET NEW.`modified_on` = NOW();
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_forms` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_forms_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_forms_insert_before` BEFORE INSERT ON `ww_time_forms` FOR EACH ROW BEGIN
    
       /* This will update necessary master table
          last change: 2014-04-25: initial
                       2014-04-26: populate approver/s
       */
       set NEW.form_code = (select form_code from ww_time_form where form_id = NEW.form_id);
       IF NEW.`form_status_id`=2 THEN
          -- 
          CALL sp_time_forms_populate_approvers(NEW.`forms_id`, NEW.`user_id`);   
          -- 
       END IF;
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_forms` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_forms_approval_insert` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_forms_approval_insert` AFTER INSERT ON `ww_time_forms` FOR EACH ROW BEGIN
    
       /* This will insert-update time_forms & time_record_summary
          last change: 2014-02-22: initial
                       2014-02-22: prepare data after approval of application
                       2014-02-22: update leave balance
                       2014-02-22: update record summary
       */
       -- just to push the table's form_balance trigger to update balance field
       if NEW.form_status_id = 6 and NEW.display_name = 'Blanket' then
	update ww_time_form_balance tfb, ww_time_forms tf, ww_time_forms_date tfd
	set tfb.modified_on = now()
	where 	tfb.`year` = year(NEW.date_from) and 
		tfd.forms_id = tf.forms_id and 
		tfd.leave_balance_id = tfb.id and
		tfb.form_id = NEW.form_id;
       end if;
       
  --     UPDATE `ww_time_form_balance` SET modified_on = NOw()
   --    WHERE `year` = YEAR(NEW.`date_from`) AND `user_id`=NEW.`user_id`;
    
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_forms` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_forms_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_forms_update_before` BEFORE UPDATE ON `ww_time_forms` FOR EACH ROW BEGIN
    
       /* This will insert-update approver/s on application
          last change: 2014-04-26: initial
                       2014-04-26: populate approver/s if set to for approval
       */
       -- 
       SET NEW.`modified_on` = NOW();
       set NEw.form_code = (select form_code from ww_time_form where form_id = NEW.form_id);
       -- 
    
       IF NEW.`form_status_id`=2 THEN
          -- 
          CALL sp_time_forms_populate_approvers(NEW.`forms_id`, NEW.`user_id`);  
          --                   
       END IF;
       IF NEW.`form_status_id`=8 THEN
          -- 
          UPDATE `ww_time_forms_approver` SET `form_status_id`=8,`form_status`='Cancelled' WHERE `forms_id`=NEW.`forms_id`;  
          --                   
       END IF;          
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_forms` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_forms_approval` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_forms_approval` AFTER UPDATE ON `ww_time_forms` FOR EACH ROW BEGIN
    
       /* This will insert-update time_forms & time_record_summary
          last change: 2014-02-22: initial
                       2014-02-22: prepare data after approval of application
                       2014-02-22: update leave balance
                       2014-02-22: update record summary
                       2014-07-17: update aux shift and aux in/out
       */
       SET @approved = '';
       SELECT `form_status_id` INTO @approved
       FROM `ww_time_form_status` 
       WHERE `form_status`='Approved' AND `deleted`=0 LIMIT 1;
       
      INSERT INTO `logtable` (`log`) VALUES (CONCAT(NEW.`forms_id`,' ',NEW.`user_id`));
       
       -- [1] Update time record only on approved application
       IF NEW.form_status_id = @approved THEN
          CALL sp_time_forms_aux_shift(NEW.`form_code`, NEW.`user_id`, NEW.`forms_id`);
       END IF;
       
       
       -- [2] Update Leave Balance
       -- just to push the table's form_balance trigger to update balance field
       UPDATE `ww_time_form_balance` tfb, `ww_time_forms_date` tfd 
       SET tfb.modified_on = NOW()
       WHERE tfb.`id` = tfd.leave_balance_id AND tfd.forms_id = NEW.`forms_id` AND tfb.form_code = NEW.form_code AND `user_id`=NEW.`user_id`;
       
       -- YEAR(NEW.`date_from`) AND `user_id`=NEW.`user_id`;
       
       
       -- [3] Insert to Email Queue
       -- IF NEW.form_status_id = @approved THEN
       --    CALL sp_time_forms_email(NEW.`forms_id`);
       -- END IF;
       
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_forms_approver` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_forms_approver_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_forms_approver_insert_before` BEFORE INSERT ON `ww_time_forms_approver` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-07-17 initial
                        2014-07-17 
        */ 
        SET NEW.`display_name` = (SELECT IFNULL(`display_name`,'*') FROM `users` WHERE `user_id`=NEW.`user_id` LIMIT 1);
        SET NEW.`form_status` = (SELECT IFNULL(`form_status`,'*') FROM `ww_time_form_status` WHERE `form_status_id`=NEW.`form_status_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_forms_approver` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_forms_approver_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_forms_approver_update_before` BEFORE UPDATE ON `ww_time_forms_approver` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-07-17 initial
                        2015-05-05 change display name  
        */ 
		SET NEW.`display_name` = (SELECT IFNULL(`display_name`,'*') FROM `users` WHERE `user_id`=NEW.`user_id` LIMIT 1);
        SET NEW.`form_status` = (SELECT IFNULL(`form_status`,'*') FROM `ww_time_form_status` WHERE `form_status_id`=NEW.`form_status_id` LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_forms_approver` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_forms_approver_update_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_forms_approver_update_after` AFTER UPDATE ON `ww_time_forms_approver` FOR EACH ROW BEGIN
	   SET @appCount    = 0;
	   SET @appApproved = 0;
	   SET @appDeclined = 0;
	   
	   SELECT COUNT(*), SUM(IF(`form_status_id`=6,1,0)), SUM(IF(`form_status_id`=7,1,0)) 
	   INTO @appCount, @appApproved, @appDeclined
	   FROM `ww_time_forms_approver`
	   WHERE `forms_id`=NEW.`forms_id`;
	   
	   IF NEW.`form_status_id` != 8 THEN
		   UPDATE `time_forms`
		   SET
		      `form_status_id` = IF(@appCount=@appApproved, 6, IF(@appCount=@appDeclined, 7, IF(@appDeclined > 0, 7, IF(@appApproved > 0, 3, `form_status_id`)))),
		      `date_approved` = IF(@appCount=@appApproved, NOW(), `date_approved`),
		      `date_declined` = IF(@appDeclined > 0, NOW(), `date_declined`)
		   WHERE 
		      `forms_id` = NEW.`forms_id`;
	   END IF;
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_forms_blanket` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_forms_blanket_insert_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_forms_blanket_insert_after` AFTER INSERT ON `ww_time_forms_blanket` FOR EACH ROW BEGIN
	declare formcode varchar(10);
	set formcode = (select form_code from ww_time_forms where forms_id = NEW.forms_id);
	
	if NEW.forms_id <> 0 then
		call sp_time_forms_aux_shift(formcode, NEW.user_id, NEW.forms_id);
	end if;
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_period` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_period_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_period_insert_before` BEFORE INSERT ON `ww_time_period` FOR EACH ROW BEGIN
    
       SET NEW.`period_year` = YEAR(NEW.`payroll_date`);
       SET NEW.`period_month` = MONTH(NEW.`payroll_date`);
       
       /*
       INSERT INTO `ww_time_period_log`
       (`period_id`, `partner_type_id`, `partner_type`, `proc_log`)
       SELECT a.`period_id`, a.`status_id`, a.`employment_status`, a.`proc_log`
       FROM
       (SELECT NEW.`period_id` `period_id`, p.status_id, pes.`employment_status`, COUNT(*) proc_log
       FROM `partners` p, `users_profile` up, `ww_partners_employment_status` pes
       WHERE 
          p.`user_id`=up.`user_id` AND 
          p.`status_id`=pes.`employment_status_id` AND
          up.`company_id`=NEW.`company_id`
       GROUP BY 1,2) a
       ON DUPLICATE KEY UPDATE `partner_type`=a.`employment_status`, `proc_log`=a.`proc_log`;
       */
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_period` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_period_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_period_update_before` BEFORE UPDATE ON `ww_time_period` FOR EACH ROW BEGIN
    
       SET NEW.`period_year` = YEAR(NEW.`payroll_date`);
       SET NEW.`period_month` = MONTH(NEW.`payroll_date`);
    
       IF IFNULL(NEW.`pop_dates`,0) = 1 THEN
          -- IF NEW.`cutoff` <= CURDATE() THEN
             CALL sp_time_period_populate(NEW.`date_from`,NEW.`date_to`,NEW.`company_id`); 
          -- END IF;
       END IF;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_record` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_record_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_record_insert_before` BEFORE INSERT ON `ww_time_record` FOR EACH ROW BEGIN
    
       /* This will insert-update time_record textual
          last change: 2014-02-20 initial
                       2014-02-21 shift name and biometrics
       */
       
       DECLARE shiftname VARCHAR(32) DEFAULT '';
       DECLARE shiftid INT(11) DEFAULT 0;
       DECLARE bio VARCHAR(8) DEFAULT '';
       
       -- [1] Get references
       SELECT `biometric`,`shift_id` INTO bio,shiftid 
       FROM `ww_partners` WHERE `user_id` = NEW.user_id LIMIT 1;
       
       -- [2] Assign values
       IF IFNULL(NEW.shift_id,0) = 0 THEN  -- override assignment if not passed correctly
          SET NEW.shift_id = shiftid;
       END IF;
       
       if NEW.aux_shift_id <> 0 then
	  set NEW.aux_shift = (select shift from ww_time_shift where shift_id = NEW.aux_shift_id);
       end if;
       
       SELECT `shift` INTO shiftname 
       FROM `ww_time_shift` WHERE `shift_id` = NEW.`shift_id` LIMIT 1;
       
       -- [3] Assign values
       SET NEW.shift = shiftname;
       SET NEW.biometric = bio;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_record` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_record_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_record_update_before` BEFORE UPDATE ON `ww_time_record` FOR EACH ROW BEGIN
    
       /* This will insert-update time_record textual
          last change: 2014-02-20 initial
                       2014-02-20 shift name and biometrics
                       2014-07-19 aux shift name
       */       
        
       SET NEW.shift = (SELECT IFNULL(`shift`,'') FROM `ww_time_shift` WHERE `shift_id` = NEW.shift_id LIMIT 1);
       SET NEW.biometric = (SELECT IFNULL(`biometric`,'') FROM `ww_partners` WHERE `user_id` = NEW.user_id LIMIT 1);
       
       IF NEW.aux_shift_id <> 0 THEN
          SET NEW.aux_shift = (SELECT IFNULL(`shift`,'') FROM `ww_time_shift` WHERE `shift_id` = NEW.aux_shift_id LIMIT 1);
       END IF;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_record_raw` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_record_raw_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_record_raw_insert_before` BEFORE INSERT ON `ww_time_record_raw` FOR EACH ROW BEGIN
    
       /* This will insert-update time_record_raw
          last change: 2014-02-21 initial
                       2014-02-22 prepare date if blank, to attend uploading even if with checktime only 
       */
       DECLARE userid INT(11) DEFAULT 0;
       SELECT `user_id` INTO userid FROM `ww_partners` WHERE `biometric`=NEW.`biometric` AND `deleted`=0 LIMIT 1;
       
       IF IFNULL(userid,0) <> 0 THEN
          SET NEW.`user_id` = userid;
          -- SET NEW.`processed` = 1;
       END IF;
       
       IF IFNULL(NEW.`date`,'0000-00-00') = '0000-00-00' THEN
          SET NEW.`date` = DATE(NEW.`checktime`);
       END IF;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_record_raw` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_record_raw_insert_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_record_raw_insert_after` AFTER INSERT ON `ww_time_record_raw` FOR EACH ROW BEGIN
    
       /* This will insert-update time_record
          last change: 2014-02-21 initial
                       2014-05-07 move codes to sp_time_record_raw_process
       */
          
       IF IFNULL(NEW.`processed`,0) = 0 THEN
          IF IFNULL(NEW.`user_id`,0) <> 0 THEN
             SET @news = 1;
             CALL sp_time_record_raw_process(NEW.`user_id`, NEW.`date`, NEW.`checktime`);
          END IF;
       END IF;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_record_raw` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_record_raw_update_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_record_raw_update_after` AFTER UPDATE ON `ww_time_record_raw` FOR EACH ROW BEGIN
    
       /* This will insert-update time_record
          last change: 2015-09-16 run sp_time_record_raw_process
       */
          
       IF IFNULL(NEW.`processed`,0) = 0 THEN
          IF IFNULL(NEW.`user_id`,0) <> 0 THEN
             SET @news = 1;
             CALL sp_time_record_raw_process(NEW.`user_id`, NEW.`date`, NEW.`checktime`);
          END IF;
       END IF;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_record_summary` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_record_summary_insert_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_record_summary_insert_after` AFTER INSERT ON `ww_time_record_summary` FOR EACH ROW BEGIN
    
	UPDATE `ww_time_record` SET `processed`=1 WHERE `user_id`=NEW.`user_id` AND `date`=NEW.`date`;
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_shift` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_shift_class_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_shift_class_insert_before` BEFORE INSERT ON `ww_time_shift` FOR EACH ROW BEGIN
        
	   
          CALL sp_time_shift_class_company(NEW.`shift_id`);
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_shift` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_shift_class_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_shift_class_update_before` BEFORE UPDATE ON `ww_time_shift` FOR EACH ROW BEGIN
        
        /* This will update-update display names accross all modules 
           last change: 2014-07-18 initial
                        2014-07-18 
        */ 
          CALL sp_time_shift_class_company(NEW.`shift_id`);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_shift_apply_to_id` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_shift_apply_to_id_insert_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_shift_apply_to_id_insert_after` AFTER INSERT ON `ww_time_shift_apply_to_id` FOR EACH ROW BEGIN
    
       /* This will insert-update time_record
          last change: 2016-04-21 initial
                       2014-04-21 automatic saving to time-shift-class
       */
      
         IF (NEW.shift_id != '') THEN
           CALL sp_time_shift_process(NEW.`shift_id`);
         END IF;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_shift_class_company_department` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_shift_class_company_department_upd_aft` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_shift_class_company_department_upd_aft` BEFORE UPDATE ON `ww_time_shift_class_company_department` FOR EACH ROW BEGIN
	
	SET NEW.class_code = (SELECT class_code FROM ww_time_shift_class WHERE class_id = NEW.class_id);
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_shift_weekly_calendar` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_shift_weekly_calendar_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_shift_weekly_calendar_insert_before` BEFORE INSERT ON `ww_time_shift_weekly_calendar` FOR EACH ROW BEGIN
    
       SET NEW.`shift` = (SELECT IFNULL(`shift`,'*') FROM `ww_time_shift` WHERE `shift_id`=NEW.shift_id LIMIT 1);
       SET NEW.`week_name` = IF(NEW.`week_no`=1,'Sunday',
                             IF(NEW.`week_no`=2,'Monday',
                             IF(NEW.`week_no`=3,'Tuesday',
                             IF(NEW.`week_no`=4,'Wednesday',
                             IF(NEW.`week_no`=5,'Thursday',
                             IF(NEW.`week_no`=6,'Friday',
                             IF(NEW.`week_no`=7,'Saturday','')))))));
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_time_shift_weekly_calendar` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `time_shift_weekly_calendar_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `time_shift_weekly_calendar_update_before` BEFORE UPDATE ON `ww_time_shift_weekly_calendar` FOR EACH ROW BEGIN
    
       SET NEW.`shift` = (SELECT IFNULL(`shift`,'*') FROM `ww_time_shift` WHERE `shift_id`=NEW.shift_id LIMIT 1);
       SET NEW.`week_name` = IF(NEW.`week_no`=1,'Sunday',
                             IF(NEW.`week_no`=2,'Monday',
                             IF(NEW.`week_no`=3,'Tuesday',
                             IF(NEW.`week_no`=4,'Wednesday',
                             IF(NEW.`week_no`=5,'Thursday',
                             IF(NEW.`week_no`=6,'Friday',
                             IF(NEW.`week_no`=7,'Saturday','')))))));
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_users_company` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `users_company_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `users_company_insert_before` BEFORE INSERT ON `ww_users_company` FOR EACH ROW BEGIN
        
        SET NEW.`city` = (SELECT IFNULL(city,'*') FROM `ww_cities` WHERE city_id=NEW.`city_id` LIMIT 1);
        SET NEW.`country` = (SELECT IFNULL(`short_name`,'*') FROM `ww_countries` WHERE `country_id`=NEW.country_id LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_users_company` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `users_company_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `users_company_update_before` BEFORE UPDATE ON `ww_users_company` FOR EACH ROW BEGIN
        
        SET NEW.`city` = (SELECT IFNULL(city,'*') FROM `ww_cities` WHERE city_id=NEW.`city_id` LIMIT 1);
        SET NEW.`country` = (SELECT IFNULL(`short_name`,'*') FROM `ww_countries` WHERE `country_id`=NEW.country_id LIMIT 1);
        
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_users_department` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `users_department_insert` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `users_department_insert` BEFORE INSERT ON `ww_users_department` FOR EACH ROW BEGIN
    
       SET @immediate = '';
       SET @immediate_position_id = '';
       SET @immediate_position = '';
       SET @division = '';
       
       SELECT IFNULL(`display_name`,'') INTO @immediate FROM `users` WHERE `user_id`=NEW.`immediate_id` LIMIT 1;
       SELECT IFNULL(`position_id`,'') INTO @immediate_position_id FROM `users_profile` WHERE `user_id`=NEW.`immediate_id` LIMIT 1;
       SELECT IFNULL(`position`,'') INTO @immediate_position FROM `users_position` WHERE `position_id`=@immediate_position_id LIMIT 1;
       SELECT IFNULL(`division`,'') INTO @division FROM `ww_users_division` WHERE `division_id`=NEW.`division_id` LIMIT 1;
       
       
       SET NEW.`immediate` = @immediate;
       SET NEW.`immediate_position_id` = @immediate_position_id;
       SET NEW.`immediate_position` = @immediate_position;
       SET NEW.`division` = @division;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_users_department` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `users_department_update` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `users_department_update` BEFORE UPDATE ON `ww_users_department` FOR EACH ROW BEGIN
    
       SET @immediate = '';
       SET @immediate_position_id = '';
       SET @immediate_position = '';
       SET @division = '';
       
       SELECT IFNULL(`display_name`,'') INTO @immediate FROM `users` WHERE `user_id`=NEW.`immediate_id` LIMIT 1;
       SELECT IFNULL(`position_id`,'') INTO @immediate_position_id FROM `users_profile` WHERE `user_id`=NEW.`immediate_id` LIMIT 1;
       SELECT IFNULL(`position`,'') INTO @immediate_position FROM `users_position` WHERE `position_id`=@immediate_position_id LIMIT 1;
       SELECT IFNULL(`division`,'') INTO @division FROM `ww_users_division` WHERE `division_id`=NEW.`division_id` LIMIT 1;
       
       
       SET NEW.`immediate` = @immediate;
       SET NEW.`immediate_position_id` = @immediate_position_id;
       SET NEW.`immediate_position` = @immediate_position;
       SET NEW.`division` = @division;
       
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_users_profile` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `users_profile_insert_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `users_profile_insert_before` BEFORE INSERT ON `ww_users_profile` FOR EACH ROW BEGIN
        
         
        SET NEW.`company` = (SELECT IFNULL(`company`,'') FROM `ww_users_company` WHERE `company_id`=NEW.company_id LIMIT 1);
        UPDATE `ww_users` 
        SET 
           `company_id` = NEW.company_id,
           `full_name` = CONCAT(NEW.`lastname`,', ',NEW.`firstname`,' ',IFNULL(NEW.`suffix`,'')),
           `display_name` = CONCAT(NEW.`lastname`,', ',NEW.`firstname`)
        WHERE `user_id` = NEW.`user_id`;
        
        UPDATE `ww_partners`
        SET 
           `alias` = CONCAT(NEW.`lastname`,', ',NEW.`firstname`,' ',IFNULL(NEW.`suffix`,''))
        WHERE `user_id` = NEW.`user_id`;
                                                                
    END */$$


DELIMITER ;

/* Trigger structure for table `ww_users_profile` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `users_profile_insert_after` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `users_profile_insert_after` AFTER INSERT ON `ww_users_profile` FOR EACH ROW BEGIN 
        
        SET @coid = NEW.`company_id`;
        INSERT INTO ww_payroll_partners (user_id, company_id) VALUES (NEW.user_id, NEW.company_id)
        ON DUPLICATE KEY UPDATE company_id=IFNULL(company_id,@coid),`modified_on`=NOW(),`deleted`=0;
        
   END */$$


DELIMITER ;

/* Trigger structure for table `ww_users_profile` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `users_profile_update_before` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `users_profile_update_before` BEFORE UPDATE ON `ww_users_profile` FOR EACH ROW BEGIN
        
        /* This will insert-update display names accross all modules 
           last change: 2014-02-01 initial
                        2014-02-14 based on existing client (Surname, Given Name Suffix)
        */ 
        SET NEW.`company` = (SELECT IFNULL(`company`,'') FROM `ww_users_company` WHERE `company_id`=NEW.company_id LIMIT 1);
        UPDATE `ww_users` 
        SET 
           `company_id` = NEW.company_id,
           `full_name` = CONCAT(NEW.`lastname`,', ',NEW.`firstname`,' ',IFNULL(NEW.`suffix`,'')),
           `display_name` = CONCAT(NEW.`lastname`,', ',NEW.`firstname`)
        WHERE `user_id` = NEW.`user_id`;
        
        /*UPDATE `ww_partners`
        SET 
           `alias` = CONCAT(NEW.`lastname`,', ',NEW.`firstname`,' ',IFNULL(NEW.`suffix`,''))
        WHERE `user_id` = NEW.`user_id`;*/
        
        -- LATER!!!!
        -- UPDATE `ww_partners`
        -- UPDATE `ww_users_division`
        -- UPDATE `ww_users_department`
        -- UPDATE `ww_users_group`
        -- UPDATE `ww_users_position`
        -- UPDATE `ww_time_forms`
        
    END */$$


DELIMITER ;

/*!50106 set global event_scheduler = 1*/;

/* Event structure for event `archive_expired_sessions` */

/*!50106 DROP EVENT IF EXISTS `archive_expired_sessions`*/;

DELIMITER $$

/*!50106 CREATE EVENT `archive_expired_sessions` ON SCHEDULE EVERY 6 HOUR STARTS '2014-02-22 23:00:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
    SET @expired = 0;
    
    DELETE FROM `ww_sessions` WHERE FROM_UNIXTIME(`last_activity`) < DATE_ADD(NOW(), INTERVAL -6 HOUR);
    DELETE FROM `ww_sessions` WHERE user_data = '';
    -- End of this Event
     
END */$$
DELIMITER ;

/* Event structure for event `archive_system_email` */

/*!50106 DROP EVENT IF EXISTS `archive_system_email`*/;

DELIMITER $$

/*!50106 CREATE EVENT `archive_system_email` ON SCHEDULE EVERY 1 DAY STARTS '2015-05-19 04:00:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
   
   START TRANSACTION; 
   
   INSERT INTO `ww_ww_system_email_queue`
   SELECT * FROM `ww_system_email_queue` WHERE `status`='sent' AND `sent_on` < CURDATE() - INTERVAL 5 DAY;
   
   DELETE FROM `ww_system_email_queue` WHERE `status`='sent' AND `sent_on` < CURDATE() - INTERVAL 5 DAY;
   
   COMMIT;
   -- End of this Event
     
END */$$
DELIMITER ;

/* Event structure for event `archive_system_feeds` */

/*!50106 DROP EVENT IF EXISTS `archive_system_feeds`*/;

DELIMITER $$

/*!50106 CREATE EVENT `archive_system_feeds` ON SCHEDULE EVERY 1 DAY STARTS '2014-10-31 05:00:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
   
   START TRANSACTION; 
   
   INSERT INTO `ww_ww_system_feeds`
   SELECT * FROM `ww_system_feeds` WHERE `createdon` < CURDATE() - INTERVAL 1 MONTH;
   
   DELETE FROM `ww_system_feeds` WHERE `createdon` < CURDATE() - INTERVAL 1 MONTH;
   
   COMMIT;
   -- End of this Event
     
END */$$
DELIMITER ;

/* Event structure for event `archive_time_record` */

/*!50106 DROP EVENT IF EXISTS `archive_time_record`*/;

DELIMITER $$

/*!50106 CREATE EVENT `archive_time_record` ON SCHEDULE EVERY 1 DAY STARTS '2015-05-19 04:00:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
    DECLARE FromDate DATETIME;
    DECLARE ToDate DATETIME;
    
    START TRANSACTION;
    -- [1] Get the range of records to transfer
    SELECT MIN(`raw_id`), MAX(`raw_id`) INTO FromDate, ToDate
    FROM `ww_time_record_raw`
    WHERE `processed`=1;
    
    -- [2] Start the transfer of records
    INSERT INTO `ww_ww_time_record_raw` (
       `raw_id`,
       `user_id`,
       `biometric`,
       `date`,
       `location_id`,
       `device_id`,
       `checktime`,
       `checktype`,
       `processed`,
       `archive`
    )
    SELECT
       `raw_id`,
       `user_id`,
       `biometric`,
       `date`,
       `location_id`,
       `device_id`,
       `checktime`,
       `checktype`,
       `processed`,
       NOW()
    FROM `time_record_raw`
    WHERE `raw_id` BETWEEN FromDate AND ToDate;
    
    -- [3] Cleanup
    DELETE FROM `ww_time_record_raw` WHERE `raw_id` BETWEEN FromDate AND ToDate;
    
    COMMIT;
    -- End of this Event
     
	END */$$
DELIMITER ;

/* Event structure for event `archive_time_record_raw_logs` */

/*!50106 DROP EVENT IF EXISTS `archive_time_record_raw_logs`*/;

DELIMITER $$

/*!50106 CREATE EVENT `archive_time_record_raw_logs` ON SCHEDULE EVERY 1 DAY STARTS '2015-05-19 04:00:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
    DECLARE FromDate DATETIME;
    DECLARE ToDate DATETIME;
    
    START TRANSACTION;
    -- [1] Get the range of records to transfer
    SELECT MIN(`raw_id`), MAX(`raw_id`) INTO FromDate, ToDate
    FROM `ww_time_record_raw`
    WHERE `processed`=1;
    
    -- [2] Start the transfer of records
    INSERT INTO `ww_ww_time_record_raw` (
       `raw_id`,
       `user_id`,
       `biometric`,
       `date`,
       `location_id`,
       `device_id`,
       `checktime`,
       `checktype`,
       `processed`,
       `archive`
    )
    SELECT
       `raw_id`,
       `user_id`,
       `biometric`,
       `date`,
       `location_id`,
       `device_id`,
       `checktime`,
       `checktype`,
       `processed`,
       NOW()
    FROM `time_record_raw`
    WHERE `raw_id` BETWEEN FromDate AND ToDate;
    
    -- [3] Cleanup
    DELETE FROM `ww_time_record_raw` WHERE `raw_id` BETWEEN FromDate AND ToDate;
    
    COMMIT;
    -- End of this Event
     
	END */$$
DELIMITER ;

/* Event structure for event `process_change_password` */

/*!50106 DROP EVENT IF EXISTS `process_change_password`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_change_password` ON SCHEDULE EVERY 1 WEEK STARTS '2015-08-17 09:00:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
    CALL sp_partners_change_password();
       
          
	END */$$
DELIMITER ;

/* Event structure for event `process_partners_birthday_reminder` */

/*!50106 DROP EVENT IF EXISTS `process_partners_birthday_reminder`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_partners_birthday_reminder` ON SCHEDULE EVERY 1 DAY STARTS '2014-11-22 09:00:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
   /* must send email reminder also : pending */
   
   CALL sp_partners_sms_bday(); -- for partners sns sending
   
   CALL sp_partners_email_bday(); -- email sending
   
   -- End of this Event
     
END */$$
DELIMITER ;

/* Event structure for event `process_partners_memo` */

/*!50106 DROP EVENT IF EXISTS `process_partners_memo`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_partners_memo` ON SCHEDULE EVERY 1 DAY STARTS '2014-08-07 07:30:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
   /* populate selected recipients */
   CALL `sp_partners_memo_process`();
   
   -- End of this Event
     
END */$$
DELIMITER ;

/* Event structure for event `process_partners_movement` */

/*!50106 DROP EVENT IF EXISTS `process_partners_movement`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_partners_movement` ON SCHEDULE EVERY 1 DAY STARTS '2015-08-10 07:30:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
   /* POPULATE records of intended recipients */
   
   -- [1] 
   -- 2017-04-04: TEMPORARILY DISABLE
   CALL `sp_partners_movements`();
   
   -- [2]
   CALL `sp_partners_movement_anniversary`();
   
   -- [3]
   -- CALL `sp_partners_email_anniversary`();
   
   -- [4]
   -- CALL `sp_partners_clearance_email_notification`();
   
   -- End of this Event
     
END */$$
DELIMITER ;

/* Event structure for event `process_partners_reminder` */

/*!50106 DROP EVENT IF EXISTS `process_partners_reminder`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_partners_reminder` ON SCHEDULE EVERY 1 DAY STARTS '2015-08-17 08:00:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
    /* EMAIL REMINDER */
    
    -- [1] Remind user thru Email with default password
    -- 2017-04-04: Temporarily disable    
    -- CALL sp_partners_change_password_reminder();
    
    -- [2] 
    -- CALL sp_partners_sms_bday();
   
    -- [3] 
    -- CALL sp_partners_email_bday();
    
    -- [4] 
    CALL `sp_partners_memo_process`();
    
    -- [5]
    CALL `sp_partners_personal_process()`;
    
	END */$$
DELIMITER ;

/* Event structure for event `process_time_forms_reminder` */

/*!50106 DROP EVENT IF EXISTS `process_time_forms_reminder`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_time_forms_reminder` ON SCHEDULE EVERY 1 DAY STARTS '2014-10-29 09:00:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
   /* send email reminder */
   CALL `sp_time_forms_reminder`;
   
   -- End of this Event
     
END */$$
DELIMITER ;

/* Event structure for event `process_time_form_balance` */

/*!50106 DROP EVENT IF EXISTS `process_time_form_balance`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_time_form_balance` ON SCHEDULE EVERY 1 DAY STARTS '2016-02-16 02:00:01' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
   
   -- [2017.05.03]
   
   -- [1] EVERY 12MN
   CALL `sp_time_form_balance_process_credit`();
   
   
END */$$
DELIMITER ;

/* Event structure for event `process_time_periods` */

/*!50106 DROP EVENT IF EXISTS `process_time_periods`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_time_periods` ON SCHEDULE EVERY 1 HOUR STARTS '2014-08-20 06:59:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
   -- 
   -- [1] Process time-record every hour
   -- 
   CALL `sp_time_period_process_all`();
   
   -- End of this Event
     
END */$$
DELIMITER ;

/* Event structure for event `process_time_period_populate` */

/*!50106 DROP EVENT IF EXISTS `process_time_period_populate`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_time_period_populate` ON SCHEDULE EVERY 1 DAY STARTS '2014-03-15 06:00:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
    DECLARE p1 INT(11) DEFAULT 0;    
    
    -- [1] Prepare dates to be executed for new partners
    CALL `sp_time_record_insert_user`();
    -- [2] Prepare dates to be executed for time-record
    SELECT COUNT(`period_id`) INTO p1
    FROM `ww_time_period`
    WHERE `deleted` = 0 AND CURDATE() BETWEEN `date_from` AND `date_to`;
        
    IF p1 > 0 THEN
       CALL sp_time_record_insert(CURDATE());
    END IF;
    
    -- Remove: 2016-06-26
    -- [1]
    -- when trying to enable/disable event
    -- --
    -- SET GLOBAL event_scheduler = 1;
    -- 
    -- [2]
    -- recording this sample of prepare,execute and deallocate
    -- --
    -- PREPARE stpp FROM 'CALL sp_time_period_populate(?,?,?)';
    -- SET @a = '2014-04-16';
    -- SET @b = '2014-04-30';
    -- SET @c = 2;
    -- EXECUTE stpp USING @a, @b, @c;
    -- DEALLOCATE PREPARE stpp;
    -- 
    -- [2]
    -- DECLARE cmd CHAR(255);
    -- DECLARE result CHAR(255);
    -- SET cmd = CONCAT('curl https://pubsub.pubnub.com/publish/demo/demo/0/mysql_triggers/0/%22',p1,',',p2,',',p3,'%22');
    -- SET result = sys_eval(cmd);
          
	END */$$
DELIMITER ;

/* Event structure for event `process_time_period_populate_next` */

/*!50106 DROP EVENT IF EXISTS `process_time_period_populate_next`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_time_period_populate_next` ON SCHEDULE EVERY 1 MONTH STARTS '2014-09-01 04:00:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
    DECLARE p1 DATE;
    DECLARE p2 DATE;
    
    -- [1] Prepare dates to be executed
    SET p1 = ((CURDATE()) - INTERVAL 1 DAY);
    SET p2 = (CURDATE() + INTERVAL 1 MONTH);
    
    -- [2] Create inclusive dates 
    INSERT INTO `ww_system_messages` (msg_code,msg) VALUES ('EVENT_TIME_PERIOD',CONCAT(p1,'-',p2));
    CALL sp_time_period_populate(p1, p2, 0);
       
          
	END */$$
DELIMITER ;

/* Event structure for event `process_time_period_reminder` */

/*!50106 DROP EVENT IF EXISTS `process_time_period_reminder`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_time_period_reminder` ON SCHEDULE EVERY 1 DAY STARTS '2014-10-28 07:00:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
   /* send email reminder */
   CALL `sp_time_period_reminder`;
   
   -- End of this Event
     
END */$$
DELIMITER ;

/* Event structure for event `process_time_record_reminder` */

/*!50106 DROP EVENT IF EXISTS `process_time_record_reminder`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_time_record_reminder` ON SCHEDULE EVERY 1 DAY STARTS '2015-08-17 07:15:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
   /* SEND REMINDER */
   
   -- For Partners To SMS
   -- CALL `sp_time_record_sms_reminder_all`; 
   
   -- For Partners To Email
   -- request by Joyce to disable: 2016-03-30
   -- CALL sp_time_record_reminder(); 
   
   -- For Technical Partners and Timekeeper
   IF DAYNAME(CURDATE()-INTERVAL 1 DAY) NOT IN ('Saturday','Sunday') THEN
      CALL sp_time_server_reminder(); 
   END IF;
   
   -- End of this Event
     
END */$$
DELIMITER ;

/* Event structure for event `process_time_reminder` */

/*!50106 DROP EVENT IF EXISTS `process_time_reminder`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_time_reminder` ON SCHEDULE EVERY 1 DAY STARTS '2014-10-29 07:15:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
   /* REMINDER */
   
   -- [1] Remind the timekeeper to create a period
   CALL `sp_time_period_reminder`;
   
   -- [2] Remind the approver of pending applications by his/her subordinates
   CALL `sp_time_forms_reminder`;
   
   
   -- [3] For Partners To SMS
   -- CALL `sp_time_record_sms_reminder_all`; 
   
   
   -- End of this Event
     
END */$$
DELIMITER ;

/* Event structure for event `process_time_reminder_user` */

/*!50106 DROP EVENT IF EXISTS `process_time_reminder_user`*/;

DELIMITER $$

/*!50106 CREATE EVENT `process_time_reminder_user` ON SCHEDULE EVERY 1 DAY STARTS '2017-04-28 12:15:00' ON COMPLETION NOT PRESERVE ENABLE DO BEGIN
    
   /* REMINDER */
   
   -- [1] Remind the users of discrepancies on their time-record thru Email
   -- 2017.04.27 Move here due to concern on notif timing     
   CALL sp_time_record_reminder(); -- 2017.05.21: temporary disable
   
   
   -- [2] For Technical Partners and Timekeeper
   IF DAYNAME(CURDATE()-INTERVAL 1 DAY) NOT IN ('Saturday','Sunday') THEN
      CALL sp_time_server_reminder(); 
   END IF;
   
   -- End of this Event
     
END */$$
DELIMITER ;

/* Function  structure for function  `encryption_key` */

/*!50003 DROP FUNCTION IF EXISTS `encryption_key` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `encryption_key`() RETURNS char(255) CHARSET utf8
BEGIN
	RETURN '-t33mw0rxp0w3r--';
    END */$$
DELIMITER ;

/* Function  structure for function  `getabsent` */

/*!50003 DROP FUNCTION IF EXISTS `getabsent` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `getabsent`( paydate DATE, puserid INT(11), tran_code VARCHAR(32) ) RETURNS varchar(32) CHARSET utf8
BEGIN
	SET @absent = '';
	SELECT  GROUP_CONCAT( DATE_FORMAT(`date` , '%m/%d' ) ) INTO @absent
	FROM ww_time_record_process 
	WHERE `payroll_date` = paydate AND `user_id` = puserid AND `transaction_code` = tran_code;
	
	RETURN @absent;
    END */$$
DELIMITER ;

/* Function  structure for function  `getage` */

/*!50003 DROP FUNCTION IF EXISTS `getage` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `getage`(BDAY DATE) RETURNS tinyint(3) unsigned
RETURN YEAR(FROM_DAYS(DATEDIFF(NOW(), BDAY))) */$$
DELIMITER ;

/* Function  structure for function  `getbdaystimeline` */

/*!50003 DROP FUNCTION IF EXISTS `getbdaystimeline` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `getbdaystimeline`(STARTDATE DATE) RETURNS varchar(16) CHARSET utf8
BEGIN
    DECLARE timeline VARCHAR(16) DEFAULT 'Upcoming';
    DECLARE days INT(1) DEFAULT 0;
    SET days = DATEDIFF(STARTDATE, CURDATE());
  
    IF days = 0 THEN 
       SET timeline = 'Today';
    ELSEIF days = 1 THEN 
       SET timeline = 'Tomorrow';
    ELSEIF (days >= 2 AND days <= 7) THEN
       SET timeline = CONCAT(days,' days');
    ELSEIF days >= 8 AND days <= 14 THEN
       SET timeline = CONCAT(days,' days');
    END IF;
    
    RETURN timeline;
  
END */$$
DELIMITER ;

/* Function  structure for function  `getcompany` */

/*!50003 DROP FUNCTION IF EXISTS `getcompany` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `getcompany`(userid INT(11)) RETURNS int(11)
BEGIN
	SET @ID = 0;
	SELECT company_id INTO @ID FROM ww_users_profile WHERE user_id = userid;
	RETURN @ID;
    END */$$
DELIMITER ;

/* Function  structure for function  `getcompany_contact` */

/*!50003 DROP FUNCTION IF EXISTS `getcompany_contact` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `getcompany_contact`( companyid INT(11), contacttype varchar(255) ) RETURNS varchar(255) CHARSET utf8
BEGIN
	SET @contact_no = '';
	SELECT GROUP_CONCAT(DISTINCT NULLIF(`contact_no`,'') SEPARATOR ',') INTO @contact_no
	FROM ww_users_company_contact WHERE company_id = companyid AND contact_type = contacttype AND deleted = 0;
	RETURN @contact_no;
    END */$$
DELIMITER ;

/* Function  structure for function  `getdaystimeline` */

/*!50003 DROP FUNCTION IF EXISTS `getdaystimeline` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `getdaystimeline`(STARTDATE DATE) RETURNS varchar(16) CHARSET utf8
BEGIN
    DECLARE timeline VARCHAR(16) DEFAULT 'Upcoming';
    DECLARE days INT(1) DEFAULT 0;
    SET days = DATEDIFF(STARTDATE, CURDATE());
  
    IF days = 0 THEN 
       SET timeline = 'Today';
    ELSEIF days = 1 THEN 
       SET timeline = 'Tomorrow';
    ELSEIF (days >= 2 AND days <= 7) THEN
       SET timeline = CONCAT(days,' days');
    ELSEIF (days >= 8 AND days <= 14) THEN
       SET timeline = CONCAT(days,' days');
    ELSEIF days < 0 THEN 
       SET timeline = 'Past';
    END IF;
    
    RETURN timeline;
  
END */$$
DELIMITER ;

/* Function  structure for function  `getFirstApprover` */

/*!50003 DROP FUNCTION IF EXISTS `getFirstApprover` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `getFirstApprover`(planningid INT(11), userid INT(11)) RETURNS int(11) unsigned
BEGIN
          -- 
          -- [0] Override from USERS
          -- 
          SET @approverID = 0;
          SET @rec = 0;
          SET @class = '';
          
          SELECT c.`class_code`, COUNT(a.`id`) INTO @class, @rec
          FROM `ww_approver_class_user` a
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE a.`deleted`=0 AND a.`user_id`=userid AND c.`class_code`='PPA';
          
          IF @rec > 0 THEN
             SELECT `approver_id` INTO @approverID
             FROM `ww_approver_class_user` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0 
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`approver_id`<>userid 
             AND a.user_id = 1 AND a.sequence = 1;
          ELSE     
          -- 
          -- [1] Override from POSITION
          -- 
          SET @approverID = 0;
          SET @rec = 0;
          SET @class = '';
          SET @positions = '';
          
          SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`) INTO @class, @positions, @rec
          FROM `ww_approver_class_position` a
          JOIN `users_profile` b ON b.position_id = a.`position_id` AND b.`company_id`=a.`company_id`
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE a.`deleted`=0 AND b.`user_id`=userid AND c.`class_code`='PPA';
          
          IF @rec > 0 THEN
             SELECT `approver_id` INTO @approverID
             FROM `ww_approver_class_position` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
             JOIN `users_profile` e ON e.position_id = a.`position_id` AND e.`user_id`=userid
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`position_id`=@positions AND a.`approver_id`<>userid
             AND a.department_id = e.department_id AND a.company_id = e.company_id
             AND a.sequence = 1;
          ELSE     
                    
             -- [2] Override from DEPARTMENT
             -- 
          SET @approverID = 0;
             SET @rec = 0;
             SET @class = '';
             SET @department = '';
          
             SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`) INTO @class, @department, @rec
             FROM `ww_approver_class_department` a
             JOIN `users_profile` b ON b.department_id = a.`department_id` AND b.`company_id`=a.`company_id`
             JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
             WHERE a.`deleted`=0 AND b.`user_id`=userid AND c.`class_code`='PPA' AND a.`approver_id`<>userid;
          
             IF @rec > 0 THEN
		        SELECT `approver_id` INTO @approverID
                FROM `ww_approver_class_department` a
                JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
		        JOIN `users_profile` e ON e.department_id = a.`department_id` AND e.`user_id`=userid
                WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`department_id`=@department AND a.`approver_id`<>userid
                AND a.company_id = e.company_id 
		        AND a.sequence = 1;
             ELSE
                --   
                -- [3] Override from COMPANY
                -- 
                SET @approverID = 0;
                SET @rec = 0;
                SET @class = '';
                SET @company = '';
          
                SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`) INTO @class, @company, @rec
                FROM `ww_approver_class_company` a
                JOIN `users_profile` b ON b.company_id = a.`company_id`
                JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
                WHERE a.`deleted`=0 AND b.`user_id`=userid AND c.`class_code`='PPA';
          
                IF @rec > 0 THEN
		           SELECT `approver_id` INTO @approverID
                   FROM `ww_approver_class_company` a
                   JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                   WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`company_id`=@company AND a.`approver_id`<>userid
		           AND a.sequence = 1;
                END IF; -- IF COMPANY
             
             END IF; -- IF DEPARTMENT
             
          END IF; -- IF POSITION     
             
          END IF; -- IF USERS     
    
    RETURN @approverID; 
        
    END */$$
DELIMITER ;

/* Function  structure for function  `getholiday` */

/*!50003 DROP FUNCTION IF EXISTS `getholiday` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `getholiday`(dateid DATE, userid INT(11)) RETURNS varchar(15) CHARSET utf8
BEGIN
    SET @daytypes = 'REGULAR';
    SET @usercount = 0;
    SET @recs = 0;
    SET @ids = 0;
    SET @nLocationCnt = 0;
    SET @count = 0;
    
    /*SELECT th.holiday_id, IF(IFNULL(`legal`,-1)=-1,'REGULAR',IF(`legal`=1,'LEGAL','SPECIAL')), th.location_count
    INTO @ids, @daytypes, @nLocationCnt
    FROM `time_holiday` th
    WHERE th.`holiday_date` = dateid;*/
    
    SELECT count(*) into @count
    FROM `ww_time_holiday` th
    WHERE th.`holiday_date` = dateid;
    
    if @count = 2 then
	    SELECT th.holiday_id, IF(IFNULL(`legal`,-1)=-1,'REGULAR',IF(`legal`=1,'LEGAL','SPECIAL')) AS htype, th.location_count
	    INTO @ids, @daytypes, @nLocationCnt
	    FROM `ww_time_holiday` th
	    WHERE th.`holiday_date` = dateid AND legal = 0 AND
		  IF(IF(IFNULL(`legal`,-1)=-1,'REGULAR',IF(`legal`=1,'LEGAL','SPECIAL')) = 'LEGAL', 1, 
			IF(IFNULL(th.locations,'') = '',
				1,
				FIND_IN_SET((SELECT location_id FROM ww_users_profile WHERE user_id = userid),th.locations))) AND th.deleted = 0 GROUP BY th.holiday_date;    
    else
	    SELECT th.holiday_id, IF(IFNULL(`legal`,-1)=-1,'REGULAR',IF(`legal`=1,'LEGAL','SPECIAL')) AS htype, th.location_count
	    INTO @ids, @daytypes, @nLocationCnt
	    FROM `ww_time_holiday` th
	    WHERE th.`holiday_date` = dateid AND
		  IF(IF(IFNULL(`legal`,-1)=-1,'REGULAR',IF(`legal`=1,'LEGAL','SPECIAL')) = 'LEGAL', 1, 
			IF(IFNULL(th.locations,'') = '',
				1,
				FIND_IN_SET((SELECT location_id FROM ww_users_profile WHERE user_id = userid),th.locations))) AND th.deleted = 0 GROUP BY th.holiday_date;    
    end if;
    
    IF @daytypes = 'SPECIAL' THEN
       -- exemption if special holiday is set to selected partners or location
       -- if the query returns more than 0 then check for the existence of partner id if not he/she if not included in this special holiday
       -- IF @usercount > 0 THEN
       
       -- SELECT COUNT(*) INTO @recs FROM `ww_time_holiday_location`;
       
       SELECT COUNT(*) INTO @recs
       FROM `ww_time_holiday_location` thl
       WHERE thl.holiday_id=@ids AND thl.`user_id`=userid AND thl.`deleted`=0;
       
       -- override, he/she is not included in the selection of partners in this special holiday
       IF @recs = 0 AND @nLocationCnt > 0 THEN
	  IF @count = 2 THEN
		SET @daytypes = 'DOUBLE';
	  ELSE
		SET @daytypes = 'LEGAL';	  
	  END IF;  
       else
	  if @count = 2 then
		set @daytypes = 'DOUBLE';
	  end if;
       END IF;
       -- END IF;
    
    END IF;
    
    RETURN @daytypes;
  
END */$$
DELIMITER ;

/* Function  structure for function  `getrecipients` */

/*!50003 DROP FUNCTION IF EXISTS `getrecipients` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `getrecipients`(ids INT(11), userids INT(11)) RETURNS varchar(255) CHARSET utf8
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE sendto VARCHAR(255) DEFAULT '';
    DECLARE userid INT(11) DEFAULT 0;
    DECLARE username VARCHAR(64) DEFAULT '';
    
    DECLARE recipients CURSOR FOR
       SELECT `user_id`
       FROM `ww_system_feeds_recipient` WHERE `id`=ids;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    -- SET @sendto = '';
    -- SET @userid = 0;
    -- SET @username = '';
    
    OPEN recipients;
    REPEAT
       FETCH recipients INTO userid;
              
       IF NOT done THEN
          
          IF userid <> userids THEN
             SELECT IFNULL(IF(TRIM(`nickname`)='',`firstname`,`nickname`),`firstname`) INTO username 
             FROM `users_profile` WHERE `user_id`=userid;
          
             SET sendto = CONCAT(sendto,', ',username);
          END IF;
          
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE recipients;
           
    RETURN CONCAT('message sent to - ', MID(sendto, 3));
  
END */$$
DELIMITER ;

/* Function  structure for function  `gettimeline` */

/*!50003 DROP FUNCTION IF EXISTS `gettimeline` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `gettimeline`(STARTDATE DATETIME) RETURNS varchar(32) CHARSET utf8
BEGIN
    DECLARE timeline VARCHAR(32) DEFAULT '1min ago';
    DECLARE days INT(1) DEFAULT 0;
    DECLARE mins INT(1) DEFAULT 0;
    
    SET days = DATEDIFF(CURDATE(), STARTDATE);
    SET mins = TIMESTAMPDIFF(MINUTE, STARTDATE, NOW());
  
    IF days = 0 AND mins = 1 THEN
       SET timeline = '1 min ago';
    ELSEIF days = 0 AND mins = 0 THEN
       SET timeline = 'Just now';
    ELSEIF days = 0 AND mins < 60 THEN
       SET timeline = CONCAT(mins,' mins ago');
    ELSEIF days = 0 AND mins = 60 THEN
       SET timeline = '1 hr ago';
    ELSEIF days = 0 AND mins > 60 THEN
       SET timeline = CONCAT(FLOOR(mins/60),' hr  ago');
    ELSEIF days = 1 THEN 
       SET timeline = '1 day  ago';
    /* ELSEIF (days > 1 AND days <= 7) THEN
       SET timeline = '1 week';
    ELSEIF (days > 7 AND days <= 14) THEN
       SET timeline = '2 weeks';
    ELSEIF (days > 14 AND days <= 21) THEN
       SET timeline = '3 weeks';
    ELSEIF (days > 21 AND days <= 29) THEN
       SET timeline = '4 weeks';
    ELSEIF (days > 29 AND days <= 31) THEN
       SET timeline = '1 month';  */  
    ELSE
       IF YEAR(STARTDATE) = YEAR(CURDATE()) THEN
          SET timeline = DATE_FORMAT(STARTDATE,'%M %e at %l:%i%p');   
       ELSE
          SET timeline = DATE_FORMAT(STARTDATE,'%M %e, %Y at %l:%i%p');
       END IF;
    END IF;
    
    RETURN timeline;
  
END */$$
DELIMITER ;

/* Function  structure for function  `get_additional_amount` */

/*!50003 DROP FUNCTION IF EXISTS `get_additional_amount` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_additional_amount`( sCond VARCHAR(235), dtPay DATE, nCompID INT(11), nClosed INT(1) ) RETURNS decimal(12,2)
BEGIN
	SET @nAmount = 0;
	IF nClosed = 1 THEN
		SELECT ROUND(SUM(AES_DECRYPT(amount,encryption_key())),2) INTO @nAmount
		FROM ww_payroll_closed_transaction
		WHERE deleted = 0 AND FIND_IN_SET(transaction_id , sCond)
			AND payroll_date = dtPay AND company_id = nCompID;
	END IF;
	IF nClosed = 0 THEN
		SELECT ROUND(SUM(AES_DECRYPT(amount,encryption_key())),2) INTO @nAmount
		FROM ww_payroll_current_transaction
		WHERE deleted = 0 AND transaction_code IN (sCond)
			AND payroll_date = dtPay AND company_id = nCompID;
	END IF;
	RETURN @nAmount;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_address` */

/*!50003 DROP FUNCTION IF EXISTS `get_address` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_address`( nUserID int(11)) RETURNS varchar(128) CHARSET utf8
BEGIN
	set @sAddress = '';
	SELECT GROUP_CONCAT( key_value SEPARATOR ', ') into @sAddress
	FROM ww_partners_personal pp
	LEFT JOIN ww_partners_key pk ON pp.`key_id` = pk.`key_id`
	WHERE pk.`key_class_id` = 1 AND pk.`key_type_id` = 0 AND `key` != 'zip_code'
	AND partner_id = nUserID;
	
	return @sAddress;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_balance` */

/*!50003 DROP FUNCTION IF EXISTS `get_balance` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_balance`(nUserID INT(11), sFormCode VARCHAR(11), nMonth INT(11), nYear INT(11) ) RETURNS decimal(5,2)
BEGIN
	SET @nUnit = 0;
	SELECT SUM(IF( tfd.credit = 8 , 1, IF(tfd.credit = 4, .5,0)))
	INTO @nUnit 
	FROM ww_time_forms tf
	LEFT JOIN ww_time_form_balance tfb ON tf.`user_id` = tfb.`user_id` AND tf.`form_code` = tfb.`form_code`
	LEFT JOIN ww_time_forms_date tfd ON tf.`forms_id` = tfd.`forms_id` AND tfd.`leave_balance_id` = tfb.`id`
	WHERE tf.user_id = nUserID AND tf.form_code = sFormCode
	AND MONTH(tfd.`date`) = nMonth AND tfb.`year` = nYear
	GROUP BY tf.user_id;
	
	RETURN @nUnit;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_batch_total` */

/*!50003 DROP FUNCTION IF EXISTS `get_batch_total` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_batch_total`( nBatchID INT(11) ) RETURNS decimal(12,2)
BEGIN
	SET @nAmount = 0;
	SELECT ROUND(SUM(AES_DECRYPT(amount, encryption_key())),2) INTO @nAmount
	FROM ww_payroll_entry_batch_employee
	WHERE deleted = 0
		AND batch_entry_id = nBatchID;	
	RETURN @nAmount;
	
    END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_allow` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_allow` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_allow`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nAllow DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nAllow
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	LEFT JOIN ww_payroll_transaction_class ptc ON pt.transaction_class_id = ptc.transaction_class_id
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.`is_deminimis` = 0
		AND pt.`is_hazardpay` = 0
		AND pt.`is_representation` = 0
		AND pt.`is_transportation` = 0
		AND pt.`is_cost_living` = 0
		AND pt.`is_fixed_housing` = 0
		AND pt.`is_commission` = 0
		AND pt.`is_profit_sharing` = 0
		AND pt.`is_fees` = 0
		AND pt.transaction_type_id = 1
		AND ptc.transaction_class_code NOT IN ('SALARY','OVERTIME','NIGHT DIFF')
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nAllow;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_benefit` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_benefit` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_benefit`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nBenefit DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nBenefit
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.`is_deminimis` = 0
		AND pt.`is_hazardpay` = 0
		AND pt.`is_representation` = 0
		AND pt.`is_transportation` = 0
		AND pt.`is_cost_living` = 0
		AND pt.`is_fixed_housing` = 0
		AND pt.`is_commission` = 0
		AND pt.`is_profit_sharing` = 0
		AND pt.`is_fees` = 0
		AND pt.transaction_type_id = 2
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nBenefit;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_bonus_nt` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_bonus_nt` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_bonus_nt`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nBOnusNT DECIMAL(12,2);
	SELECT ROUND(SUM(IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),2 )
	INTO nBonusNT
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_type_id = 8
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear ;
	IF nBOnusNT > get_max_bonus() THEN
		SET nBonusNT = get_max_bonus();
	END IF;
	RETURN nBOnusNT;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_bonus_tax` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_bonus_tax` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_bonus_tax`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nBonusTax DECIMAL(12,2);
	SELECT ROUND(SUM(IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),2 )
	INTO nBonusTax
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_code = 'BONUS_TAXABLE'
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear ;
	RETURN nBonusTax;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_govt_contri` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_govt_contri` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_govt_contri`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nContri DECIMAL(12,2);
	SELECT ROUND(SUM(IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),2 )
	INTO nContri
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_code IN ('SSS_EMP','PHIC_EMP','HDMF_EMP')
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear ;
	RETURN nContri;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_gross_compensation` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_gross_compensation` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_gross_compensation`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nGross DECIMAL(12,2);
	SET nGross = IFNULL(get_bir_total_non_tax( nYear, nUserID ),0) 		+ 
			IFNULL(get_bir_total_taxable( nYear, nUserID ),0)  ;
	RETURN nGross;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_is_commission` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_is_commission` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_is_commission`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nComm DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nComm
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`is_commission` = 1
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nComm;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_is_cost_living` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_is_cost_living` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_is_cost_living`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nCost DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nCost
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`is_cost_living` = 1
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nCost;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_is_deminimis` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_is_deminimis` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_is_deminimis`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nDeminimis DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nDeminimis
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`is_deminimis` = 1
		AND pct.employee_id = nUserID 
		AND pt.transaction_type_id IN (2)
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nDeminimis;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_is_fees` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_is_fees` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_is_fees`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nFees DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nFees
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`is_fees` = 1
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nFees;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_is_fixed_housing` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_is_fixed_housing` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_is_fixed_housing`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nFixedHouse DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nFixedHouse
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`is_fixed_housing` = 1
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nFixedHouse;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_is_hazardpay` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_is_hazardpay` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_is_hazardpay`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nHazPay DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nHazPay
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`is_hazardpay` = 1
		AND pct.employee_id = nUserID 
		AND pct.minwageflag = 0
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nHazPay;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_is_holidaypay` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_is_holidaypay` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_is_holidaypay`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nHolPay DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nHolPay
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`is_holidaypay` = 1
		AND pct.employee_id = nUserID 
		AND minwageflag = 0
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nHolPay;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_is_profit_sharing` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_is_profit_sharing` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_is_profit_sharing`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nProf DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nProf
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`is_profit_sharing` = 1
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nProf;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_is_representation` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_is_representation` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_is_representation`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nReps DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nReps
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`is_representation` = 1
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nReps;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_is_service_allowance` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_is_service_allowance` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_is_service_allowance`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nCost DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nCost
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`transaction_code` in ('SERVICEALLOW','SERVICEALLOW2')
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nCost;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_is_tempo_allowance` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_is_tempo_allowance` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_is_tempo_allowance`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nCost DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nCost
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`transaction_code` in ('Tempo','TEMPOALLOWRETRO','TEMPO ALLOWRETRO','OTHALLOW','OTHERALLOWRETRO','TRANSPO','TRANSPOALLOWRETRO','COMMISSION')
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nCost;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_is_transportation` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_is_transportation` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_is_transportation`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nTrans DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nTrans
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`is_transportation` = 1
		AND pct.employee_id = nUserID 
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nTrans;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_min_basic` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_min_basic` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_min_basic`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nMinBasic DECIMAL(12,2);
	SELECT ROUND(SUM( 
		( CASE WHEN pt.transaction_code = 'SALARY' THEN 1 
			WHEN pt.transaction_code IN ( 'ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ', 'DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ') THEN -1
			ELSE 0 END ) * 
			IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),
		2 )
	INTO nMinBasic
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_code IN (
			'SALARY','ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ',
			'DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ')
		AND pct.employee_id = nUserID 
		AND minwageflag = 1
		AND YEAR( pct.payroll_date ) = nYear ;
	RETURN nMinBasic - IFNULL(get_bir_govt_contri( nYear, nUserID ),0);
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_min_hazardpay` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_min_hazardpay` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_min_hazardpay`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nHazard DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nHazard
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`is_hazardpay` = 1
		AND pct.employee_id = nUserID 
		AND pct.minwageflag = 1
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nHazard;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_min_holidaypay` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_min_holidaypay` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_min_holidaypay`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nHol DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nHol
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 AND pt.`is_holidaypay` = 1
		AND pct.employee_id = nUserID 
		AND minwageflag = 1
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nHol;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_min_ndiff` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_min_ndiff` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_min_ndiff`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nDiff DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nDiff
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	LEFT JOIN ww_payroll_transaction_class ptc ON pt.transaction_class_id = ptc.transaction_class_id
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_code = 'REGND'
		AND pt.is_holidaypay = 0
		AND pct.employee_id = nUserID 
		AND minwageflag = 1
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nDiff;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_min_overtime` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_min_overtime` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_min_overtime`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nMinOvertime DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nMinOvertime
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	LEFT JOIN ww_payroll_transaction_class ptc ON pt.transaction_class_id = ptc.transaction_class_id
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND ptc.transaction_class_code = 'OVERTIME'
		AND pt.is_holidaypay = 0
		AND pct.employee_id = nUserID 
		AND minwageflag = 1
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nMinOvertime;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_net_taxable` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_net_taxable` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_net_taxable`( nYear INT(4), nUserID INT(11), nExempt DECIMAL(12,2) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nNet DECIMAL(12,2);
	SET nNet = IFNULL(get_bir_total_taxable( nYear, nUserID ),0) - IFNULL(nExempt, 0)  ;
	RETURN nNet;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_overtime` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_overtime` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_overtime`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nOvertime DECIMAL(12,2);
	SELECT ROUND(IFNULL(SUM(AES_DECRYPT(amount, encryption_key())),0),2)
	INTO nOvertime
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	LEFT JOIN ww_payroll_transaction_class ptc ON pt.transaction_class_id = ptc.transaction_class_id
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND (ptc.transaction_class_code = 'OVERTIME' OR pt.transaction_code IN ('REGND','OTADJ'))
		AND pt.is_holidaypay = 0
		AND pct.employee_id = nUserID 
		AND minwageflag = 0
		AND YEAR( pct.payroll_date ) = nYear;
	RETURN nOvertime;
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_tax_basic` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_tax_basic` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_tax_basic`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nTaxBasic DECIMAL(12,2);
	SELECT ROUND(SUM( 
		( CASE WHEN pt.transaction_code IN ('SALARY','SALADJ','REF_ABS','CreditCard') THEN 1 
			WHEN pt.transaction_code IN ( 'ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ', 'DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ') THEN -1
			ELSE 0 END ) * 
			IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),
		2 )
	INTO nTaxBasic
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_code IN (
			'SALARY','SALADJ','REF_ABS','CreditCard','ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ',
			'DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ')
		AND pct.employee_id = nUserID 
		-- AND minwageflag = 0
		AND YEAR( pct.payroll_date ) = nYear ;
	RETURN nTaxBasic - ROUND(IFNULL(get_bir_govt_contri( nYear, nUserID ),0),2);
END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_total_non_tax` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_total_non_tax` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_total_non_tax`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nTotalNonTaxable DECIMAL(12,2);
	SET nTotalNonTaxable = IFNULL(get_bir_bonus_nt( nYear, nUserID ),0) 	     + 
		  IFNULL(get_bir_is_deminimis( nYear, nUserID ),0)   +
		  IFNULL(get_bir_govt_contri( nYear, nUserID ),0)    +
		  IFNULL(get_bir_benefit( nYear, nUserID ),0)	     +
		  IFNULL(get_bir_min_basic( nYear, nUserID ),0)	     + 
		  IFNULL(get_bir_min_holidaypay( nYear, nUserID ),0) + 
		  IFNULL(get_bir_min_overtime( nYear, nUserID ),0)   + 
		  IFNULL(get_bir_min_ndiff( nYear, nUserID ),0)	     +
		  IFNULL(get_bir_min_hazardpay( nYear, nUserID ),0) ;
	RETURN nTotalNonTaxable;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_bir_total_taxable` */

/*!50003 DROP FUNCTION IF EXISTS `get_bir_total_taxable` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bir_total_taxable`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nTotalTaxable DECIMAL(12,2);
	SET nTotalTaxable = IFNULL(get_bir_tax_basic( nYear, nUserID ),0)		+
			IFNULL(get_bir_bonus_tax( nYear, nUserID ),0)		+
			IFNULL(get_bir_overtime( nYear, nUserID ),0)		+
			-- IFNULL(get_bir_allow( nYear, nUserID ),0)		+
			IFNULL(get_bir_is_representation( nYear, nUserID ),0)	+
			IFNULL(get_bir_is_transportation( nYear, nUserID ),0)	+
			IFNULL(get_bir_is_cost_living( nYear, nUserID ),0)	+
			IFNULL(get_bir_is_fixed_housing( nYear, nUserID ),0)	+
			IFNULL(get_bir_is_tempo_allowance( nYear, nUserID ),0)	+
			IFNULL(get_bir_is_service_allowance( nYear, nUserID ),0)+
			IFNULL(get_bir_is_commission( nYear, nUserID ),0)	+
			IFNULL(get_bir_is_profit_sharing( nYear, nUserID ),0)	+
			IFNULL(get_bir_is_fees( nYear, nUserID ),0)		+
			IFNULL(get_bir_is_hazardpay( nYear, nUserID ),0) ;
	RETURN nTotalTaxable;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_bonus_divisor` */

/*!50003 DROP FUNCTION IF EXISTS `get_bonus_divisor` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bonus_divisor`( dtFrom DATE, dtTo DATE ) RETURNS decimal(5,2)
BEGIN
	SET @nDivisor = 0;
	SET @nDivisor =
	  TIMESTAMPDIFF(MONTH, dtFrom, dtTo) +
	  DATEDIFF(
	    dtTo,
	    dtFrom + INTERVAL
	      TIMESTAMPDIFF(MONTH, dtFrom, dtTo)
	    MONTH
	  ) /
	  DATEDIFF(
	    dtFrom + INTERVAL
	      TIMESTAMPDIFF(MONTH, dtFrom, dtTo) + 1
	    MONTH,
	    dtFrom + INTERVAL
	      TIMESTAMPDIFF(MONTH, dtFrom, dtTo)
	    MONTH
	  );
	  
	  RETURN ROUND(@nDivisor);
    END */$$
DELIMITER ;

/* Function  structure for function  `get_bonus_nt` */

/*!50003 DROP FUNCTION IF EXISTS `get_bonus_nt` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bonus_nt`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	SET @nAmt = 0;
	SELECT AES_DECRYPT( ytd, encryption_key() ) INTO @nAmt
	FROM ww_payroll_closed_summary 
	WHERE user_id = nUserID AND `year` = nYear
		AND summary_code = 'BONUS' AND deleted = 0;
	
	RETURN @nAmt;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_bonus_other_income` */

/*!50003 DROP FUNCTION IF EXISTS `get_bonus_other_income` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bonus_other_income`( dtFrom date, dtEnd date, nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	SET @nAmt = 0;
	SELECT ROUND(ifnull( SUM( (CASE ptt.`operation` WHEN '+' THEN 1 ELSE -1 END) * AES_DECRYPT( pct.amount, encryption_key() ) ), 0 ),2) 
	into @nAmt
	FROM ww_payroll_closed_transaction pct
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	LEFT JOIN ww_payroll_transaction_type ptt ON pt.`transaction_type_id` = ptt.`transaction_type_id`
	WHERE pct.deleted = 0 AND pt.deleted = 0 AND pt.is_bonus = 1
		AND pct.employee_id = nUserID and pct.payroll_date between dtFrom and dtEnd;
	
	
	RETURN @nAmt;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_bonus_tax` */

/*!50003 DROP FUNCTION IF EXISTS `get_bonus_tax` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_bonus_tax`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	SET @nAmt = 0;
	SELECT AES_DECRYPT( ytd, encryption_key() ) INTO @nAmt
	FROM ww_payroll_closed_summary 
	WHERE user_id = nUserID AND `year` = nYear
		AND summary_code = 'BONUS_TAXABLE' AND deleted = 0;
	
	RETURN @nAmt;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_civil_status` */

/*!50003 DROP FUNCTION IF EXISTS `get_civil_status` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_civil_status`(nUserID INT(11) ) RETURNS int(11)
BEGIN
	SET @nCivilID = 0;
	SET @sKey = '';
	
	SELECT key_value INTO @sKey
	FROM ww_partners_personal pp 
	LEFT JOIN ww_partners p ON pp.`partner_id` = p.`partner_id`
	WHERE p.`user_id` = nUserID AND `key` = 'civil_status';
	
	SELECT civil_status_id INTO @nCivilID FROM ww_partners_civil_status WHERE civil_status = @sKey;
	
	RETURN @nCivilID;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_cola` */

/*!50003 DROP FUNCTION IF EXISTS `get_cola` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_cola`( nUserID INT(11), dtPay DATE) RETURNS decimal(12,2)
BEGIN
	SET @cola = 0;
	SELECT IFNULL(AES_DECRYPT(re.amount, encryption_key() ),0) * 2 INTO @cola
	FROM ww_payroll_entry_recurring r
	LEFT JOIN ww_payroll_entry_recurring_employee re ON r.`recurring_id` = re.`recurring_id`
	LEFT JOIN ww_payroll_transaction p ON p.`transaction_id` = r.`transaction_id`
	WHERE p.transaction_code = 'ECOLA' AND re.employee_id = nUserID 
		AND dtPay BETWEEN r.date_from AND r.date_to AND r.deleted = 0 AND p.deleted = 0;
		
	RETURN @cola;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_config` */

/*!50003 DROP FUNCTION IF EXISTS `get_config` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_config`( configgroup VARCHAR(32), config_key VARCHAR(32) ) RETURNS varchar(255) CHARSET utf8
BEGIN
	SET @val = '';
	
	SELECT c.`value` INTO @val 
	FROM `ww_config_group` g
	JOIN `ww_config` c ON g.`config_group_id` = c.`config_group_id`
	WHERE g.`deleted` = 0 AND c.`deleted` = 0 AND g.`module_group` = configgroup AND `key` = config_key;
	
	RETURN @val;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_current_balance` */

/*!50003 DROP FUNCTION IF EXISTS `get_current_balance` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_current_balance`(nUserID INT(11), sFormCode VARCHAR(11), nYear INT(11) ) RETURNS decimal(5,2)
BEGIN
	SET @nUnit = 0;
	SELECT current
	INTO @nUnit
	FROM ww_time_form_balance
	where user_id = nUserID and form_code = sFormCode and `year` = nYear;
	RETURN @nUnit;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_dailyrate` */

/*!50003 DROP FUNCTION IF EXISTS `get_dailyrate` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_dailyrate`( nUserID int(11) ) RETURNS decimal(12,2)
BEGIN
	set @nDaily = 0;
	set @nPayrate = 0;
	set @nSalary = 0;
	set @nDays = 0;
	
	SELECT AES_DECRYPT(salary, encryption_key()) , payroll_rate_type_id, total_year_days
	into @nSalary, @nPayrate, @nDays
	FROM ww_payroll_partners
	where user_id = nUserID;
	
	IF @nPayrate = 2 THEN
		SET @nDaily = @nSalary / ( @nDays / 12 );
	-- weekly
	ELSEIF @nPayrate = 6 THEN
		SET @nDaily = @nSalary;
	END IF;
	
	return @nDaily;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_day_remain` */

/*!50003 DROP FUNCTION IF EXISTS `get_day_remain` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_day_remain`( dtDate date) RETURNS int(3)
BEGIN
	set @nCount = 0;
	set @nCount = DAY(LAST_DAY(dtDate)) - DAY(dtDate);
	
	return @nCount;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_employmentType` */

/*!50003 DROP FUNCTION IF EXISTS `get_employmentType` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_employmentType`(nUserId INT(11) ) RETURNS int(11)
BEGIN
	DECLARE empTypeID INT(11);
	
	SELECT IFNULL(pet.employment_type_id,0) INTO empTypeID
	FROM ww_partners_employment_type pet, ww_partners p
	WHERE 	p.employment_type_id = pet.employment_type_id AND
		p.user_id = nUserId;
	
	RETURN empTypeID ;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_fiscaldate_end` */

/*!50003 DROP FUNCTION IF EXISTS `get_fiscaldate_end` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_fiscaldate_end`( dtDate DATE) RETURNS date
BEGIN
	SET @may31 = IF(MONTH(dtDate) BETWEEN '01' AND '05',CONCAT(YEAR(dtDate),'-05-31'),CONCAT(YEAR(dtDate + INTERVAL 1 YEAR),'-05-31'));
	SET @fiscaldate = @may31; -- IF(dtDate > @may31 , CONCAT(YEAR(DATE_SUB(@may31,INTERVAL 1 YEAR)),'-05-31'), @may31 );
	  
	RETURN @fiscaldate;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_fiscaldate_start` */

/*!50003 DROP FUNCTION IF EXISTS `get_fiscaldate_start` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_fiscaldate_start`( dtDate DATE) RETURNS date
BEGIN
	SET @june1 = CONCAT(YEAR(dtDate),'-06-01');
	SET @fiscaldate = IF(dtDate >= @june1 , @june1 ,CONCAT(YEAR(DATE_SUB(@june1,INTERVAL 1 YEAR)),'-06-01'));
	  
	RETURN @fiscaldate;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_focus_date` */

/*!50003 DROP FUNCTION IF EXISTS `get_focus_date` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_focus_date`( formsid int(11) ) RETURNS date
BEGIN
	set @dates = '0000-00-00';
	select `date` into @dates from ww_time_forms_date WHERE `forms_id` = formsid;
	
	return @dates;
	
    END */$$
DELIMITER ;

/* Function  structure for function  `get_govt_contri` */

/*!50003 DROP FUNCTION IF EXISTS `get_govt_contri` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_govt_contri`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	SET @nAmt = 0;
	SELECT AES_DECRYPT( ytd, encryption_key() ) INTO @nAmt
	FROM ww_payroll_closed_summary 
	WHERE user_id = nUserID AND `year` = nYear
		AND summary_code = 'ADDITIONAL_EXCLUSION' AND deleted = 0;
	
	RETURN @nAmt;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_headcount` */

/*!50003 DROP FUNCTION IF EXISTS `get_headcount` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_headcount`( sMonth varchar(30), nYear INT(4),nDivision int(11), sStatus varchaR(255) ) RETURNS int(11)
BEGIN
	SET @nHeadCount= 0;
	if( sStatus != '' ) then
		SELECT COUNT(p.user_id) INTO @nHeadCount
		FROM ww_partners p
		left join ww_users_profile u on u.user_id = p.user_id
		WHERE MONTH(effectivity_date) IN (sMonth) AND year(effectivity_date) = nYear AND u.division_id = nDivision;
	else
		SELECT COUNT(user_id) INTO @nHeadCount
		FROM ww_partners
		WHERE MONTH(effectivity_date) IN (sMonth) 
			AND YEAR(effectivity_date) = nYear AND u.division_id = nDivision
		AND `status` IN (sStatus);
	end if;
	
	RETURN @nHeadCount;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_headcount_before` */

/*!50003 DROP FUNCTION IF EXISTS `get_headcount_before` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_headcount_before`( nYear INT(4),nCompany int(11), nDivision int(11) ) RETURNS int(11)
BEGIN
	set @headCount = 0;
	SET @ActiveheadCount = 0;
	SET @InactiveheadCount = 0;
	-- head count active
	SELECT COUNT(u.user_id) INTO @ActiveheadCount
	FROM ww_users u
	INNER JOIN ww_partners p ON u.`user_id` = p.`user_id`
	INNER JOIN ww_users_profile up ON u.`user_id` = up.`user_id` 
	WHERE p.deleted = 0 AND u.`deleted` = 0
		AND up.company_id = nCompany 
		AND up.`division_id` = nDivision
		AND YEAR(p.`effectivity_date`) < nYear;
	
	SELECT COUNT(u.user_id) INTO @InactiveheadCount
	FROM ww_users u
	INNER JOIN ww_partners p ON u.`user_id` = p.`user_id`
	INNER JOIN ww_users_profile up ON u.`user_id` = up.`user_id` 
	WHERE p.deleted = 0 AND u.`deleted` = 0
		AND up.company_id = nCompany 
		AND up.`division_id` = nDivision
		AND YEAR(p.resigned_date) < nYear AND p.resigned_date != '0000-00-00';
		
	RETURN @ActiveheadCount - @InactiveheadCount;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_headcount_per_dept` */

/*!50003 DROP FUNCTION IF EXISTS `get_headcount_per_dept` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_headcount_per_dept`( nDepartment INT(11), nCompanyid INT(11), nBranchid INT(11), sPayrolldate VARCHAR(255) ) RETURNS int(11)
BEGIN
	SET @nHeadCount= 0;
	SELECT COUNT(*) INTO @nHeadCount 
		FROM (SELECT pct.department_id,pct.`payroll_date` from 
			`ww_payroll_closed_transaction` `pct`
			JOIN `ww_users_profile` `up` ON `pct`.`employee_id` = `up`.`user_id` 
			JOIN `ww_users_branch` `ub` ON `up`.`branch_id` = `ub`.`branch_id`
			where pct.department_id = nDepartment and up.branch_id = nBranchid and pct.payroll_date = sPayrolldate and pct.company_id = nCompanyid GROUP BY employee_id) as tmp 
		group by department_id,payroll_date;	
	RETURN @nHeadCount;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_headcount_within_active` */

/*!50003 DROP FUNCTION IF EXISTS `get_headcount_within_active` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_headcount_within_active`( nYear INT(4), nMonth int(11),nCompany INT(11), nDivision INT(11) ) RETURNS int(11)
BEGIN
	SET @headCount = 0;
	SET @activeHeadcount = 0;
	set @activeHeadcount = get_headcount_before(nYear, nCompany, nDivision);
	
	SELECT COUNT(u.user_id) INTO @headCount
	FROM ww_users u
	INNER JOIN ww_partners p ON u.`user_id` = p.`user_id`
	INNER JOIN ww_users_profile up ON u.`user_id` = up.`user_id` 
	WHERE p.deleted = 0 AND u.`deleted` = 0
		AND up.company_id = nCompany 
		AND up.`division_id` = nDivision
		AND YEAR(p.`effectivity_date`) = nYear
		AND MONTH(p.`effectivity_date`) <= nMonth;
	
	SELECT COUNT(u.user_id) INTO @inactiveheadCount
	FROM ww_users u
	INNER JOIN ww_partners p ON u.`user_id` = p.`user_id`
	INNER JOIN ww_users_profile up ON u.`user_id` = up.`user_id` 
	WHERE p.deleted = 0 AND u.`deleted` = 0
		AND up.company_id = nCompany 
		AND up.`division_id` = nDivision
		AND YEAR(p.`resigned_date`) = nYear
		AND MONTH(p.`resigned_date`) < nMonth;
		
	RETURN @headCount + @activeHeadcount - @inactiveheadCount;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_headcount_within_resigned` */

/*!50003 DROP FUNCTION IF EXISTS `get_headcount_within_resigned` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_headcount_within_resigned`( nYear INT(4), nMonth varchar(60), nCompany INT(11), nDivision INT(11), sStatus varchar(255) ) RETURNS int(11)
BEGIN
	SET @headCount = 0;
	SELECT COUNT(u.user_id) INTO @headCount
	FROM ww_users u
	INNER JOIN ww_partners p ON u.`user_id` = p.`user_id`
	INNER JOIN ww_users_profile up ON u.`user_id` = up.`user_id` 
	WHERE p.deleted = 0 AND u.`deleted` = 0
		AND up.company_id = nCompany 
		AND up.`division_id` = nDivision
		AND YEAR(p.`resigned_date`) = nYear
		AND FIND_IN_SET( MONTH(p.`resigned_date`), nMonth  )
		and p.status_id in (sStatus);
	
	-- insert into checkhead
	-- select nYear, nMonth, nCompany, nDivision, sStatus;
	
	RETURN @headCount;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_leave_used_carry_over` */

/*!50003 DROP FUNCTION IF EXISTS `get_leave_used_carry_over` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_leave_used_carry_over`(userid INT(11), nYear int(4)) RETURNS decimal(3,2)
BEGIN
    SET @nLWP = 0.00;
    
    SELECT IFNULL(SUM(tf.`day`),0) INTO @nLWP
    FROM `time_forms` tf
    WHERE 
       tf.`user_id` = userid AND 
       tf.`form_id` = 22 AND
       tf.`form_status_id` = 6 AND
       tf.`date_from` between concat(nYear,'-01-01') and concat(nYear,'-03-31');
           
    RETURN @nLWP;
  
END */$$
DELIMITER ;

/* Function  structure for function  `get_loan_started` */

/*!50003 DROP FUNCTION IF EXISTS `get_loan_started` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_loan_started`( intLoanID int(11)) RETURNS date
BEGIN
	declare dtDate date;
	
	select start_date 
	into dtDate
	from ww_payroll_partners_loan
	where partner_loan_id = intLoanID;
	
	return dtDate;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_manpower_count` */

/*!50003 DROP FUNCTION IF EXISTS `get_manpower_count` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_manpower_count`( intID int(11), intStatus int(11), varType varchar(32), intEmploymentStatus INT(11), varEmploymentType varchar(32), intCompany int(11) ) RETURNS int(11)
BEGIN
	declare intCount int(11);
	
	IF varType = 'Department' THEN 
		SELECT COUNT(u.user_id) 
		INTO intCount
		FROM ww_users u
		INNER JOIN ww_users_profile up ON u.`user_id` = up.`user_id`
		INNER JOIN ww_partners p ON u.user_id = p.user_id
		WHERE u.`deleted` = 0
			AND up.`department_id` = intID
			AND u.`active` = intStatus
			AND p.status_id = intEmploymentStatus
			AND FIND_IN_SET( p.employment_type_id, varEmploymentType )
			and u.company_id = intCompany;
			
	ELSE
		SELECT COUNT(u.user_id) 
		INTO intCount
		FROM ww_users u
		INNER JOIN ww_users_profile up ON u.`user_id` = up.`user_id`
		INNER JOIN ww_partners p ON u.user_id = p.user_id
		WHERE u.`deleted` = 0
			AND up.`project_id` = intID
			AND u.`active` = intStatus
			AND p.status_id = intEmploymentStatus
			AND find_in_set( p.employment_type_id, varEmploymentType )
			AND u.company_id = intCompany;
	END IF;
	return intCount;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_manpower_count_by_rate_type` */

/*!50003 DROP FUNCTION IF EXISTS `get_manpower_count_by_rate_type` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_manpower_count_by_rate_type`(intID INT(11), intStatus INT(11), varType VARCHAR(32), intPayrollRateType int(11), intCompany INT(11)) RETURNS int(11)
BEGIN
	DECLARE intCount INT(11);
	
	IF varType = 'Department' THEN 
		SELECT COUNT(u.user_id) 
		INTO intCount
		FROM ww_users u
		INNER JOIN ww_users_profile up ON u.`user_id` = up.`user_id`
		INNER JOIN ww_partners p ON u.user_id = p.user_id
		inner JOIN `ww_payroll_partners` `pp` ON `pp`.`user_id` = `u`.`user_id` 
		WHERE u.`deleted` = 0
			AND up.`department_id` = intID
			AND u.`active` = intStatus
			AND p.status_id IN (1,4)
			AND pp.payroll_rate_type_id = intPayrollRateType
			AND u.company_id = intCompany;
			
	ELSE
		SELECT COUNT(u.user_id) 
		INTO intCount
		FROM ww_users u
		INNER JOIN ww_users_profile up ON u.`user_id` = up.`user_id`
		INNER JOIN ww_partners p ON u.user_id = p.user_id
		INNER JOIN `ww_payroll_partners` `pp` ON `pp`.`user_id` = `u`.`user_id`
		WHERE u.`deleted` = 0
			AND up.`project_id` = intID
			AND u.`active` = intStatus
			AND p.status_id in (1,4)
			and pp.payroll_rate_type_id = intPayrollRateType
			AND u.company_id = intCompany;
	END IF;
	RETURN intCount;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_max_bonus` */

/*!50003 DROP FUNCTION IF EXISTS `get_max_bonus` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_max_bonus`() RETURNS decimal(12,2)
BEGIN
	set @max_bonus = 0;
	SELECT `value` into @max_bonus FROM ww_config WHERE `key` = 'max_bonus';
	
	return @max_bonus;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_minwage` */

/*!50003 DROP FUNCTION IF EXISTS `get_minwage` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_minwage`( nLoc INT(11) ) RETURNS decimal(12,2)
BEGIN
	SET @Amt = 0.00;
	SELECT minimum_wage INTO @Amt FROM ww_cities WHERE city_id = nLoc;
	RETURN @Amt;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_min_basic` */

/*!50003 DROP FUNCTION IF EXISTS `get_min_basic` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_min_basic`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	SET @nAmt = 0;
	SELECT AES_DECRYPT( ytd, encryption_key() ) INTO @nAmt
	FROM ww_payroll_closed_summary 
	WHERE user_id = nUserID AND `year` = nYear
		AND summary_code = 'TAXABLE_INCOME' AND deleted = 0;
	
	RETURN @nAmt;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_min_deminimis` */

/*!50003 DROP FUNCTION IF EXISTS `get_min_deminimis` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_min_deminimis`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	SET @nAmt = 0;
	SELECT ROUND(SUM(AES_DECRYPT( amount, encryption_key() ) ),2) INTO @nAmt
	FROM ww_payroll_closed_transaction pct
	LEFT JOIN ww_payroll_transaction_class ptc ON pct.transaction_class_id = ptc.transaction_class_id
	WHERE employee_id = nUserID AND YEAR(payroll_date) = nYear
		AND transaction_class_code IN ('DE_MINIMIS_BENEFIT_BATCH','DE_MINIMIS_BENEFIT_RECURRING')
		AND pct.deleted = 0;
	
	RETURN @nAmt;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_min_ndiff` */

/*!50003 DROP FUNCTION IF EXISTS `get_min_ndiff` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_min_ndiff`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	SET @nAmt = 0;
	SELECT ROUND(SUM(AES_DECRYPT( amount, encryption_key() ) ),2) INTO @nAmt
	FROM ww_payroll_closed_transaction
	WHERE employee_id = nUserID AND YEAR(payroll_date) = nYear
		AND transaction_code = 'REGND' AND deleted = 0;
	
	RETURN @nAmt;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_min_overtime` */

/*!50003 DROP FUNCTION IF EXISTS `get_min_overtime` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_min_overtime`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	SET @nAmt = 0;
	SELECT AES_DECRYPT( ytd, encryption_key() ) INTO @nAmt
	FROM ww_payroll_closed_summary 
	WHERE user_id = nUserID AND `year` = nYear
		AND summary_code = 'OVERTIME' AND deleted = 0;
	
	RETURN @nAmt;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_ndiff` */

/*!50003 DROP FUNCTION IF EXISTS `get_ndiff` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_ndiff`( nUserID INT(11), dtDate DATE, nCompID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE ShiftID INT(11) DEFAULT 0;
	DECLARE SchedIn DATETIME DEFAULT '0000-00-00 00:00:00';
	DECLARE SchedOut DATETIME DEFAULT '0000-00-00 00:00:00';
	DECLARE curStartND DATETIME DEFAULT '0000-00-00 00:00:00';
	DECLARE curEndND DATETIME DEFAULT '0000-00-00 00:00:00';
	DECLARE ActualIN DATETIME DEFAULT '0000-00-00 00:00:00';
	DECLARE ActualOUT DATETIME DEFAULT '0000-00-00 00:00:00';
	DECLARE TimeStart DATETIME DEFAULT '0000-00-00 00:00:00';
	DECLARE TimeEnd DATETIME DEFAULT '0000-00-00 00:00:00';
	DECLARE tStart DATETIME DEFAULT '0000-00-00 00:00:00';
	DECLARE tEnd DATETIME DEFAULT '0000-00-00 00:00:00';
	DECLARE unit DECIMAL(5,2) DEFAULT 0.00;
	DECLARE ND DECIMAL(5,2) DEFAULT 0.00;
	DECLARE ShiftStart TIME DEFAULT '00:00:00';
	DECLARE ShiftEnd TIME DEFAULT '00:00:00';
	DECLARE prevStartND DATETIME DEFAULT '0000-00-00 00:00:00';
	DECLARE prevEndND DATETIME DEFAULT '0000-00-00 00:00:00';
	DECLARE isPremium TINYINT(1) DEFAULT 1;
	-- get shift
	SET ShiftID = time_get_shift(nUserID, dtDate);	
	SET ShiftStart = (SELECT time_start FROM ww_time_shift WHERE shift_id = ShiftID);
	SET ShiftEnd = (SELECT time_end FROM ww_time_shift WHERE shift_id = ShiftID);
	
	-- get sched out
	IF ( time_get_sched_out( ShiftID ) < time_get_sched_in( ShiftID ) ) THEN
		SET SchedOut = CONCAT( ADDDATE( dtDate, 1 ), ' ', time_get_sched_out( ShiftID ) );
	ELSE 
		SET SchedOut = CONCAT(dtDate, ' ', time_get_sched_out( ShiftID ) );
	END IF;
	
	SET SchedIn = CONCAT(dtDate, ' ', time_get_sched_in( ShiftID ) );
	
	-- get current ND set up
	SET curStartND = CONCAT(dtDate, ' ', time_get_nd_start( ShiftID, nCompID ) );
	SET curEndND = CONCAT( ADDDATE( dtDate, 1 ), ' ', time_get_nd_end( ShiftID, nCompID ) );
	
	SET prevStartND = CONCAT(ADDDATE((dtDate), -1), ' ', time_get_nd_start( ShiftID, nCompID));
	SET prevEndND = CONCAT(dtDate, ' ', time_get_nd_end( ShiftID, nCompID ));
	-- get actual time in / out
	SET ActualIN = time_get_time_in( nUserID, dtDate);
	SET ActualOUT = time_get_time_out( nUserID, dtDate);
	SET @EmpType = 0;
	SET @EmpType = get_employmentType(nUserID);
	
	IF @EmpType = 6 THEN
		IF ( ActualIN IS NOT NULL AND ActualOUT IS NOT NULL ) THEN
			IF ShiftStart BETWEEN '00:00:00' AND '05:59:00' THEN
				IF SchedIN <= prevStartND THEN
					SET TimeStart = prevStartND;
				END IF;
				IF SchedIN > prevStartND THEN
					SET TimeStart = SchedIN; -- SET TIME START = SchedIN
				END IF;
			
				SET TimeStart = ActualIN;
			
				IF ActualIN < SchedIN THEN
					SET TimeStart = SchedIN;
				END IF;
			
				SET TimeEnd = prevEndND;
			
				IF SchedOut < prevEndND THEN
					SET TimeEnd = SchedOut;
				END IF;
				
				IF ( TimeStart < TimeEnd ) THEN 
					
					IF (ActualIN <= TimeStart + INTERVAL (time_period_process_shift('GRACE-PERIOD-IN-MINUTES','EMPLOYMENT-TYPE', 
							    nUserID, ShiftID,'0')) MINUTE) THEN
						SET tStart = TimeStart;
					END IF;
					IF (ActualIN > (TimeStart + INTERVAL (time_period_process_shift('GRACE-PERIOD-IN-MINUTES','EMPLOYMENT-TYPE', 
							    nUserID, ShiftID,'0')) MINUTE)) THEN
						SET tStart = ActualIN;
					END IF;
					IF (ActualOUT <= TimeEnd) THEN
						SET tEnd = ActualOUT;
					END IF;
					IF (ActualOUT >= TimeEnd) THEN
						SET tEnd= TimeEnd;
					END IF;
					
					SELECT ActualIN, ActualOUT, TimeStart, TimeEnd, curStartND, curEndND, SchedIN, SchedOUT, tStart, tEnd
					INTO  @ActualIN, @ActualOUT, @TimeStart, @TimeEnd, @curStartND, @curEndND, @SchedIN, @SchedOUT, @tStart, @tEnd;
					
					SET unit = ROUND( ( TIME_TO_SEC( TIMEDIFF( tEnd, tStart ) ) / 3600 ), 2 );
				
				END IF;
				
			ELSE
				SET @Name=0;
				-- check if schedule has ND	
				IF (SchedIn <= curStartND) THEN
					SET TimeStart = curStartND;
				END IF;
				IF (SchedIn >= curStartND) THEN
					SET TimeStart = SchedIn;
				END IF;
				IF (SchedOut >= curEndND) THEN
					SET TimeEnd = curEndND;
				END IF;
				IF (SchedOut <= curEndND) THEN
					SET TimeEnd = SchedOut;
				END IF;
					
				IF ( TimeStart < TimeEnd ) THEN 
					
						-- check in out
					IF (ActualIN <= TimeStart + INTERVAL (time_period_process_shift('GRACE-PERIOD-IN-MINUTES','EMPLOYMENT-TYPE', 
							    nUserID, ShiftID,'0')) MINUTE) THEN
						SET tStart = TimeStart;
					END IF;
					IF (ActualIN > (TimeStart + INTERVAL (time_period_process_shift('GRACE-PERIOD-IN-MINUTES','EMPLOYMENT-TYPE', 
							    nUserID, ShiftID,'0')) MINUTE)) THEN
						SET tStart = ActualIN;
					END IF;
					IF (ActualOUT <= TimeEnd) THEN
						SET tEnd = ActualOUT;
					END IF;
					IF (ActualOUT >= TimeEnd) THEN
						SET tEnd= TimeEnd;
					END IF;
					
					SELECT ActualIN, ActualOUT, TimeStart, TimeEnd, curStartND, curEndND, SchedIN, SchedOUT, tStart, tEnd
					INTO  @ActualIN, @ActualOUT, @TimeStart, @TimeEnd, @curStartND, @curEndND, @SchedIN, @SchedOUT, @tStart, @tEnd;
					
					
					SET unit = ROUND( ( TIME_TO_SEC( TIMEDIFF( tEnd, tStart ) ) / 3600 ), 2 );
				END IF;
			END IF;
		END IF;
	END IF ;
	
	SET ND = 0;
	IF ( unit > 0 ) THEN
		SET ND = unit;
	END IF;
	
	RETURN ND; 
	
END */$$
DELIMITER ;

/* Function  structure for function  `get_overtime_break` */

/*!50003 DROP FUNCTION IF EXISTS `get_overtime_break` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_overtime_break`( day_type VARCHAR(32), unit DECIMAL(5,3), comp_id INT(11) ) RETURNS decimal(5,2)
BEGIN
	SET @deduction = 0;
	
	SELECT deduction INTO @deduction
	FROM ww_time_day_type dt
	LEFT JOIN ww_time_day_type_break dtb ON dt.`day_type_id` = dtb.`day_type_id`
	LEFT JOIN ww_time_day_break db ON db.`break_id` = dtb.`break_id`
	LEFT JOIN ww_time_day_break_range dbr ON dbr.`break_id` = db.`break_id`
	WHERE dt.`day_type` = day_type AND unit BETWEEN dbr.`hour_from` AND dbr.`hour_to` AND dbr.`company_id` = comp_id;
	RETURN @deduction;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_overtime_rate_amount` */

/*!50003 DROP FUNCTION IF EXISTS `get_overtime_rate_amount` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_overtime_rate_amount`( nOvertimeId INT(4), nCompanyid INT(11), nLocationid INT(11) ) RETURNS decimal(12,3)
BEGIN
	SET @nAmt = 0;
	SELECT overtime_amount INTO @nAmt
	FROM ww_payroll_overtime_rates_amount 
	WHERE company_id = nCompanyid AND overtime_id = nOvertimeId
		AND overtime_location_id = nLocationid
		group by company_id,overtime_id,overtime_location_id;
	RETURN @nAmt;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_partners_personal` */

/*!50003 DROP FUNCTION IF EXISTS `get_partners_personal` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_partners_personal`( nUserID INT(11), nKey VARCHAR(32) ) RETURNS varchar(100) CHARSET utf8
BEGIN
	SET @nValue = '';
	SELECT pp.`key_value` INTO @nValue FROM ww_partners_personal pp
	LEFT JOIN ww_users_profile up ON pp.`partner_id` = up.`partner_id`
	WHERE pp.`key` = nKey AND up.`user_id` = nUserID;
	RETURN @nValue;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_paydate_bonus` */

/*!50003 DROP FUNCTION IF EXISTS `get_paydate_bonus` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_paydate_bonus`( dtPay DATE, nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nBonus DECIMAL(12,2);
	SELECT ROUND(SUM( IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),2 )
	INTO nBonus 
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_type_id = 8
		AND pct.employee_id = nUserID 
		AND pct.payroll_date = dtPay ;
	RETURN nBonus ;
END */$$
DELIMITER ;

/* Function  structure for function  `get_paydate_deminimis` */

/*!50003 DROP FUNCTION IF EXISTS `get_paydate_deminimis` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_paydate_deminimis`( dtPay DATE, nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nDeminimis DECIMAL(12,2);
	SELECT ROUND(SUM( IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),2 )
	INTO nDeminimis 
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.is_deminimis = 1
		AND pct.employee_id = nUserID 
		AND pct.payroll_date = dtPay ;
	RETURN nDeminimis ;
END */$$
DELIMITER ;

/* Function  structure for function  `get_paydate_hdmf` */

/*!50003 DROP FUNCTION IF EXISTS `get_paydate_hdmf` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_paydate_hdmf`( dtPay DATE, nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nHDMF DECIMAL(12,2);
	SELECT ROUND(SUM( IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),2 )
	INTO nHDMF 
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_code = 'HDMF_EMP'
		AND pct.employee_id = nUserID 
		AND pct.payroll_date = dtPay ;
	RETURN nHDMF ;
END */$$
DELIMITER ;

/* Function  structure for function  `get_paydate_nontax_income` */

/*!50003 DROP FUNCTION IF EXISTS `get_paydate_nontax_income` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_paydate_nontax_income`( dtPay DATE, nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nNonTaxIncome DECIMAL(12,2);
	SELECT ROUND(SUM( IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),2 )
	INTO nNonTaxIncome 
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_type_id IN (2,6,7)
		AND pt.is_deminimis = 0
		AND pct.employee_id = nUserID 
		AND pct.payroll_date = dtPay ;
	RETURN nNonTaxIncome ;
END */$$
DELIMITER ;

/* Function  structure for function  `get_paydate_phic` */

/*!50003 DROP FUNCTION IF EXISTS `get_paydate_phic` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_paydate_phic`( dtPay DATE, nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nPHIC DECIMAL(12,2);
	SELECT ROUND(SUM( IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),2 )
	INTO nPHIC 
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_code = 'PHIC_EMP'
		AND pct.employee_id = nUserID 
		AND pct.payroll_date = dtPay ;
	RETURN nPHIC ;
END */$$
DELIMITER ;

/* Function  structure for function  `get_paydate_sss` */

/*!50003 DROP FUNCTION IF EXISTS `get_paydate_sss` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_paydate_sss`( dtPay DATE, nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nSSS DECIMAL(12,2);
	SELECT ROUND(SUM( IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),2 )
	INTO nSSS 
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_code = 'SSS_EMP'
		AND pct.employee_id = nUserID 
		AND pct.payroll_date = dtPay ;
	RETURN nSSS ;
END */$$
DELIMITER ;

/* Function  structure for function  `get_paydate_tax_basic` */

/*!50003 DROP FUNCTION IF EXISTS `get_paydate_tax_basic` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_paydate_tax_basic`( dtPay DATE, nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nTaxBasic DECIMAL(12,2);
	SELECT ROUND(SUM( 
		( CASE WHEN pt.transaction_code = 'SALARY' THEN 1 
			WHEN pt.transaction_code IN ( 'ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ', 'DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ') THEN -1
			ELSE 0 END ) * 
			IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),
		2 )
	INTO nTaxBasic
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_code IN (
			'SALARY','ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ',
			'DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ')
		AND pct.employee_id = nUserID 
		AND minwageflag = 0
		AND pct.payroll_date = dtPay ;
	RETURN nTaxBasic;
END */$$
DELIMITER ;

/* Function  structure for function  `get_paydate_tax_basic_min` */

/*!50003 DROP FUNCTION IF EXISTS `get_paydate_tax_basic_min` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_paydate_tax_basic_min`( dtPay DATE, nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nTaxBasicMin DECIMAL(12,2);
	SELECT ROUND(SUM( 
		( CASE WHEN pt.transaction_code = 'SALARY' THEN 1 
			WHEN pt.transaction_code IN ( 'ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ', 'DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ') THEN -1
			ELSE 0 END ) * 
			IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),
		2 )
	INTO nTaxBasicMin
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_code IN (
			'SALARY','ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ',
			'DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ')
		AND pct.employee_id = nUserID 
		AND minwageflag = 1
		AND pct.payroll_date = dtPay ;
	RETURN nTaxBasicMin;
END */$$
DELIMITER ;

/* Function  structure for function  `get_paydate_tax_income` */

/*!50003 DROP FUNCTION IF EXISTS `get_paydate_tax_income` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_paydate_tax_income`( dtPay DATE, nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nTaxIncome DECIMAL(12,2);
	SELECT ROUND(SUM( IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),2 )
	INTO nTaxIncome
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_code NOT IN (
			'SALARY','ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ',
			'DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ')
		AND pt.transaction_type_id = 1
		AND pct.employee_id = nUserID 
		AND pct.payroll_date = dtPay ;
	RETURN nTaxIncome;
END */$$
DELIMITER ;

/* Function  structure for function  `get_paydate_wtax` */

/*!50003 DROP FUNCTION IF EXISTS `get_paydate_wtax` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_paydate_wtax`( dtPay DATE, nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nWtax DECIMAL(12,2);
	SELECT ROUND(SUM( IFNULL(AES_DECRYPT(amount, encryption_key()),0) ),2 )
	INTO nWtax 
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_code = 'WHTAX'
		AND pct.employee_id = nUserID 
		AND pct.payroll_date = dtPay ;
	RETURN nWtax ;
END */$$
DELIMITER ;

/* Function  structure for function  `get_paytag_bonus` */

/*!50003 DROP FUNCTION IF EXISTS `get_paytag_bonus` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_paytag_bonus`( dtPay DATE, nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nBonus DECIMAL(12,2) DEFAULT 0;
	SELECT IFNULL(AES_DECRYPT(amount, encryption_key()),0)
	INTO nBonus 
	FROM ww_payroll_closed_transaction pct 
	LEFT JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id`
	WHERE pct.`deleted` = 0 AND pt.deleted = 0 
		AND pt.transaction_type_id = 8
		AND pct.employee_id = nUserID 
		AND pct.payroll_date = dtPay 
		AND AES_DECRYPT(amount, encryption_key()) > 0 LIMIT 1;
	RETURN nBonus ;
END */$$
DELIMITER ;

/* Function  structure for function  `get_project_movement` */

/*!50003 DROP FUNCTION IF EXISTS `get_project_movement` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_project_movement`( intUser int(11), dtStart date, dtEnd date ) RETURNS int(11)
BEGIN
	declare intMovement int(11);
	
	SELECT m.`movement_id`
	into intMovement
	FROM ww_partners_movement m
	LEFT JOIN ww_partners_movement_action ma ON m.`movement_id` = ma.`movement_id`
	LEFT JOIN ww_partners_movement_action_transfer mat ON ma.`movement_id` = mat.`movement_id`
	WHERE field_name IN ('project') AND m.`status_id` = 3
	AND ma.`user_id` = intUser
	AND ( ma.`effectivity_date` BETWEEN dtStart AND dtEnd
	OR STR_TO_DATE(mat.`to_name`, '%M %d,%Y') BETWEEN dtStart AND dtEnd);
	
	return intMovement;
	
    END */$$
DELIMITER ;

/* Function  structure for function  `get_recurring_total` */

/*!50003 DROP FUNCTION IF EXISTS `get_recurring_total` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_recurring_total`( nRecurringID INT(11) ) RETURNS decimal(12,2)
BEGIN
	SET @nAmount = 0;
	SELECT ROUND(SUM(AES_DECRYPT(amount, encryption_key())),2) INTO @nAmount
	FROM ww_payroll_entry_recurring_employee
	WHERE deleted = 0 AND recurring_id = nRecurringID;
	
	RETURN @nAmount;
	
    END */$$
DELIMITER ;

/* Function  structure for function  `get_relation` */

/*!50003 DROP FUNCTION IF EXISTS `get_relation` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_relation`( varKey varchar(128), intSeq int(11), varKeyName varchar(128), intRecruit int(11) ) RETURNS varchar(128) CHARSET utf8
BEGIN
	declare varValue VARCHAR(128);
	SELECT key_value
	into varValue
	FROM ww_recruitment_personal_history
	WHERE `key` = varKey AND sequence = intSeq AND key_name = varKeyName AND recruit_id = intRecruit;
	return varValue;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_sbr_date` */

/*!50003 DROP FUNCTION IF EXISTS `get_sbr_date` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_sbr_date`( nUserID int(11), dtPay date, sType varchar(11) ) RETURNS date
BEGIN
	set @sbr_date = '';
	
	SELECT distinct sbr_date into @sbr_date
	FROM ww_payroll_closed_transaction 
	WHERE deleted = 0 and employee_id = nUserID AND transaction_code = sType
		AND YEAR(payroll_date) = year(dtPay) AND MONTH(payroll_date )= month(dtPay);
	return @sbr_date;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_sbr_no` */

/*!50003 DROP FUNCTION IF EXISTS `get_sbr_no` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_sbr_no`( nUserID INT(11), dtPay DATE, sType VARCHAR(11) ) RETURNS varchar(16) CHARSET utf8
BEGIN
	SET @sbr_no = '';
	
	SELECT DISTINCT sbr_no INTO @sbr_no
	FROM ww_payroll_closed_transaction 
	WHERE deleted = 0 AND employee_id = nUserID AND transaction_code = sType
		AND YEAR(payroll_date) = YEAR(dtPay) AND MONTH(payroll_date )= MONTH(dtPay);
	RETURN @sbr_no;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_search` */

/*!50003 DROP FUNCTION IF EXISTS `get_search` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_search`() RETURNS char(255) CHARSET utf8
BEGIN
	RETURN IFNULL(@search,'');
    END */$$
DELIMITER ;

/* Function  structure for function  `get_sensitivity` */

/*!50003 DROP FUNCTION IF EXISTS `get_sensitivity` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_sensitivity`( roleID INT(11) ) RETURNS varchar(9) CHARSET utf8
BEGIN
	SET @sSensitivity = '';
	SET @sProfile = '';
	set @sProfileID = '';
	SELECT profile_id, role into @nProfileID, @sProfile  FROM ww_roles WHERE role_id = roleID;
	
	SELECT GROUP_CONCAT(sensitivity_id) into @sSensitivity FROM ww_profiles_sensitivity ps
	LEFT JOIN ww_profiles p ON ps.`profile_id` = p.`profile_id`
	WHERE FIND_IN_SET(ps.profile_id, @nProfileID ) and p.profile = @sProfile and mod_id = 4;
	RETURN @sSensitivity;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_taxdue` */

/*!50003 DROP FUNCTION IF EXISTS `get_taxdue` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_taxdue`( nYear INT(4), nUserID INT(11), nExempt DECIMAL(12,2) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nTaxdue  DECIMAL(12,2);
	DECLARE nSalary  DECIMAL(12,2);
	DECLARE nAmount  DECIMAL(12,2);
	DECLARE nRate    DECIMAL(12,2);
	DECLARE nTaxable DECIMAL(12,2);
	SET nTaxable = IFNULL(get_bir_net_taxable(nYear, nUserID, nExempt),0);
	
	IF nTaxable > 0 THEN 
		SELECT salary_from, amount, rate 
		INTO nSalary, nAmount, nRate
		FROM ww_payroll_annual_tax 
		WHERE nTaxable BETWEEN salary_from AND salary_to
		ORDER BY salary_from DESC
		LIMIT 1;
		SET nTaxdue = ROUND( ( ( nTaxable - nSalary ) * ROUND( ( nRate / 100 ) ,2) + nAmount ),2);
	ELSE
		SET nTaxdue = 0;
	END IF;
	RETURN nTaxdue;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_tax_basic` */

/*!50003 DROP FUNCTION IF EXISTS `get_tax_basic` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_tax_basic`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	SET @nAmt = 0;
	SELECT AES_DECRYPT( ytd, encryption_key() ) INTO @nAmt
	FROM ww_payroll_closed_summary 
	WHERE user_id = nUserID AND `year` = nYear
		AND summary_code = 'TAXABLE_INCOME' AND deleted = 0;
	
	RETURN @nAmt;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_tax_overtime` */

/*!50003 DROP FUNCTION IF EXISTS `get_tax_overtime` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_tax_overtime`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	SET @nAmt = 0;
	SELECT AES_DECRYPT( ytd, encryption_key() ) INTO @nAmt
	FROM ww_payroll_closed_summary 
	WHERE user_id = nUserID AND `year` = nYear
		AND summary_code = 'OVERTIME' AND deleted = 0;
	
	RETURN @nAmt;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_time_daytype` */

/*!50003 DROP FUNCTION IF EXISTS `get_time_daytype` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_time_daytype`(userid INT(11), dtDate DATE) RETURNS varchar(32) CHARSET utf8
BEGIN
	SET @sShift = '' ;
	SET @daytype = '';
	-- validate if holiday
	SELECT getholiday( dtDate, userid ) INTO @daytype;
	IF @daytype = 'REGULAR' THEN
		-- validate if REST DAY
		SELECT UPPER(shift) INTO @sShift FROM ww_time_record WHERE user_id = userid AND DATE = dtDate;
		IF @sShift = 'RESTDAY' THEN
			SET @sShift = 'RESTDAY';
		ELSE 
			SET @sShift = 'REGULAR';
		END IF;
	ELSE
		SET @sShift = @daytype;
	END IF;
	RETURN @sShift;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_time_period_from` */

/*!50003 DROP FUNCTION IF EXISTS `get_time_period_from` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_time_period_from`(periodid INT(11), compid INT(11)) RETURNS date
BEGIN
	SET @dtFrom = '0000-00-00';
	SELECT date_from INTO @dtFrom FROM ww_time_period WHERE period_id = periodid AND company_id = compid;
	RETURN @dtFrom;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_time_period_to` */

/*!50003 DROP FUNCTION IF EXISTS `get_time_period_to` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_time_period_to`(periodid INT(11), compid INT(11)) RETURNS date
BEGIN
	SET @dtTo = '0000-00-00';
	SELECT date_to INTO @dtTo FROM ww_time_period WHERE period_id = periodid AND company_id = compid;
	RETURN @dtTo;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_total_hours` */

/*!50003 DROP FUNCTION IF EXISTS `get_total_hours` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_total_hours`( nUserID INT(11), varPayrollDate VARCHAR(128)) RETURNS decimal(12,2)
BEGIN
	SET @hours = 0;
	SELECT SUM(hrs_actual) INTO @hours
	FROM ww_time_record_summary 
	WHERE user_id = nUserID AND payroll_date = varPayrollDate GROUP BY `user_id` ;
	RETURN @hours;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_used_leave` */

/*!50003 DROP FUNCTION IF EXISTS `get_used_leave` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_used_leave`(nUserID INT(11), sFormCode VARCHAR(11), nYear INT(11), nMonth int(11) ) RETURNS decimal(5,2)
BEGIN
	SET @nUsed = 0;
	set @nMonthID = 0;
	SET @nMonthID = nMonth - 1;
	SELECT used
	into @nUsed 
	FROM time_forms_sl_vl
	WHERE user_id = nUserID
	AND `month` = @nMonthID 
	AND `year` = nYear
	AND form_code = sFormCode;
	RETURN @nUsed;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_wtax` */

/*!50003 DROP FUNCTION IF EXISTS `get_wtax` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_wtax`( nYear INT(4), nUserID INT(11) ) RETURNS decimal(12,2)
BEGIN
	DECLARE nWtax DECIMAL(12,2);
	SELECT ROUND(SUM(AES_DECRYPT( amount, encryption_key() ) ),2) INTO nWtax
	FROM ww_payroll_closed_transaction
	WHERE employee_id = nUserID AND YEAR(payroll_date) = nYear
		AND transaction_code = 'WHTAX' AND deleted = 0;
	
	RETURN nWtax;
    END */$$
DELIMITER ;

/* Function  structure for function  `get_zipcode` */

/*!50003 DROP FUNCTION IF EXISTS `get_zipcode` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `get_zipcode`( nUserID int(11) ) RETURNS varchar(4) CHARSET utf8
BEGIN
	SET @sZip = '';
	SELECT key_value INTO @sZip
	FROM ww_partners_personal pp
	LEFT JOIN ww_partners_key pk ON pp.`key_id` = pk.`key_id`
	WHERE pk.`key_class_id` = 1 AND `key` = 'zip_code'
	AND partner_id = nUserID;
	
	RETURN @sZip;
    END */$$
DELIMITER ;

/* Function  structure for function  `is_minimum_wage_earner` */

/*!50003 DROP FUNCTION IF EXISTS `is_minimum_wage_earner` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `is_minimum_wage_earner`( nUserID INT(11) ) RETURNS tinyint(1)
BEGIN
	SET @nMin = 0;
	SELECT 
	IF( ROUND( ( CASE payroll_rate_type_id 
		WHEN 2 THEN ( AES_DECRYPT( `salary`, encryption_key() ) / ( `total_year_days` / 12 ) )
		WHEN 6 THEN ( AES_DECRYPT( `salary`, encryption_key() ) )
		END ), 2 ) > 
		IF(`location_id` IS NULL OR `location_id` = 0, get_config('Payroll','minwage_amount'), get_minwage(`location_id`) ) ,
	0, 1)
	INTO @nMin
	FROM ww_payroll_partners WHERE user_id = nUserID;
	RETURN @nMin;
    END */$$
DELIMITER ;

/* Function  structure for function  `is_thrash` */

/*!50003 DROP FUNCTION IF EXISTS `is_thrash` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `is_thrash`() RETURNS char(1) CHARSET utf8
BEGIN
	RETURN @thrash;
    END */$$
DELIMITER ;

/* Function  structure for function  `is_trash` */

/*!50003 DROP FUNCTION IF EXISTS `is_trash` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `is_trash`() RETURNS char(1) CHARSET utf8
BEGIN
	RETURN IFNULL(@trash,0);
    END */$$
DELIMITER ;

/* Function  structure for function  `nextbday` */

/*!50003 DROP FUNCTION IF EXISTS `nextbday` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `nextbday`(bday DATE) RETURNS date
RETURN DATE_ADD(bday, INTERVAL YEAR(FROM_DAYS(DATEDIFF(NOW(), bday) - 1)) + 1 YEAR) */$$
DELIMITER ;

/* Function  structure for function  `nextbday2` */

/*!50003 DROP FUNCTION IF EXISTS `nextbday2` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `nextbday2`(bday DATE) RETURNS date
BEGIN
SET @retdate = CURDATE();
IF (nextbday(bday) > (CURDATE() + INTERVAL 15 DAY)) THEN
   SET @retdate = DATE_ADD(bday, INTERVAL YEAR(FROM_DAYS(DATEDIFF(NOW(), bday) - 1)) + 0 YEAR);
ELSE
   SET @retdate = DATE_ADD(bday, INTERVAL YEAR(FROM_DAYS(DATEDIFF(NOW(), bday) - 1)) + 1 YEAR);
END IF;
RETURN @retdate;
END */$$
DELIMITER ;

/* Function  structure for function  `payroll_get_wtax` */

/*!50003 DROP FUNCTION IF EXISTS `payroll_get_wtax` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `payroll_get_wtax`(payroll_schedule INT(11), taxcode INT(11), salary DECIMAL(10,2)	) RETURNS decimal(10,2)
BEGIN
   
    SET @salary_from = 0.00;
    SET @salary_to = 0.00;
    SET @salary = salary;
    SET @fixed_amount = 0.00;
    SET @excess_percentage = 0.00;
    SET @wtax = 0.00;
    
    SELECT salary_from, salary_to, fixed_amount, excess_percentage 
    INTO @salary_from, @salary_to, @fixed_amount, @excess_percentage
    FROM `ww_payroll_whtax_table`
	WHERE `payroll_schedule_id` = payroll_schedule
	AND `taxcode_id` = taxcode
	AND @salary BETWEEN `salary_from` AND `salary_to`;
	
	SET @wtax = ( ( @salary - @salary_from ) * @excess_percentage/100 ) + @fixed_amount;
    
    RETURN @wtax ;
  
END */$$
DELIMITER ;

/* Function  structure for function  `set_2_decimal` */

/*!50003 DROP FUNCTION IF EXISTS `set_2_decimal` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `set_2_decimal`( decAmount decimal(12,3)) RETURNS decimal(12,2)
BEGIN
	DECLARE decValAmount DECIMAL(12,2);
	SELECT round(decAmount,2) 
	INTO decValAmount;
	
	RETURN decValAmount;
    END */$$
DELIMITER ;

/* Function  structure for function  `set_salary` */

/*!50003 DROP FUNCTION IF EXISTS `set_salary` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `set_salary`( intUser INT(11), dtPay DATE) RETURNS decimal(12,2)
BEGIN
	DECLARE decSalary DECIMAL(12,2);
	SELECT SUM(AES_DECRYPT(`amount`,encryption_key())) 
	INTO decSalary
	FROM ww_payroll_closed_transaction
	WHERE employee_id = intUser AND payroll_date = dtPay 
	AND transaction_code IN ('SALARY','SSS_EMP','PHIC_EMP','HDMF_EMP');
	
	RETURN decSalary;
    END */$$
DELIMITER ;

/* Function  structure for function  `set_search` */

/*!50003 DROP FUNCTION IF EXISTS `set_search` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `set_search`( search CHAR(255) ) RETURNS tinyint(1)
BEGIN
	SET @search = search;
	return true;
    END */$$
DELIMITER ;

/* Function  structure for function  `set_trash` */

/*!50003 DROP FUNCTION IF EXISTS `set_trash` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `set_trash`( trash BOOLEAN ) RETURNS tinyint(1)
BEGIN
	IF trash THEN SET @trash = 1;
	ELSE SET @trash = 0;
	END IF;
	RETURN TRUE;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_form_balance_email` */

/*!50003 DROP FUNCTION IF EXISTS `time_form_balance_email` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_form_balance_email`(userid INT(11), periodyear INT(1)) RETURNS mediumtext CHARSET utf8
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE formname VARCHAR(32);
    DECLARE nprevious DECIMAL(6,3);
    DECLARE ncurrent DECIMAL(6,3);
    DECLARE nused DECIMAL(6,3);
    DECLARE nbalance DECIMAL(6,3);
    DECLARE nprevyear YEAR;
    DECLARE nperiodfrom DATE;
    DECLARE nperiodto DATE;
    
    -- 
    --  
    DECLARE forms CURSOR FOR
       SELECT tfb.year,tf.form, tfb.previous, tfb.current, tfb.used, tfb.balance, tfb.period_from,tfb.period_to
       FROM `time_form_balance` tfb 
       LEFT JOIN `ww_time_form` tf ON tf.`form_id`=tfb.`form_id` AND tf.`deleted`=0 
       WHERE tfb.`deleted`=0 AND tfb.`user_id`=userid AND (tfb.year = periodyear OR YEAR(tfb.period_extension) = periodyear)
       AND tf.form_code != 'BL';
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
    -- 
    -- 
    OPEN forms;
    
    SET @tbody = '';
    REPEAT
       FETCH forms INTO nprevyear,formname,nprevious,ncurrent,nused,nbalance,nperiodfrom,nperiodto;
       
       IF NOT done THEN
          
          SET nprevious = IFNULL(nprevious,0);
          SET ncurrent  = IFNULL(ncurrent,0);
          SET nused     = IFNULL(nused,0);
          SET nbalance  = IFNULL(nbalance,0);
          SET nprevyear = IFNULL(nprevyear,0);
          SET nperiodfrom = IFNULL(nperiodfrom,0);
          SET nperiodto = IFNULL(nperiodto,0);
          
          
          SET @tbody = CONCAT(@tbody,'<tr>');
          SET @tbody = CONCAT(@tbody,'<td style="padding: 8px;vertical-align: top;border-top: 1px solid #dddddd;">',formname,' <br> <span class="help-block" style="font-size:80%"> ',
		IF(nperiodfrom = '0000-00-00',
			" ",
			DATE_FORMAT(nperiodfrom, '%b %d, %Y')),' - ',
		IF(nperiodto = '0000-00-00',
			" ",
			DATE_FORMAT(nperiodto, '%b %d, %Y')),
		' </span> <br><span class="help-block" style="font-size:80%"> ',nprevyear,'</span> </td>');
          SET @tbody = CONCAT(@tbody,'<td style="padding: 8px;vertical-align: top;border-top: 1px solid #dddddd;">',IF(nprevious=0,'-',nprevious),'</td>');
          SET @tbody = CONCAT(@tbody,'<td style="padding: 8px;vertical-align: top;border-top: 1px solid #dddddd;">',IF(ncurrent=0,'-',ncurrent),'</td>');
          SET @tbody = CONCAT(@tbody,'<td style="padding: 8px;vertical-align: top;border-top: 1px solid #dddddd;">',IF(nused=0,'-',nused),'</td>');
          SET @tbody = CONCAT(@tbody,'<td style="padding: 8px;vertical-align: top;border-top: 1px solid #dddddd;">',IF(nbalance=0,'-',nbalance),'</td>');
          SET @tbody = CONCAT(@tbody,'<td style="padding: 8px;vertical-align: top;border-top: 1px solid #dddddd;">',IF(nprevious=0,'-',nprevious),'</td>');
          SET @tbody = CONCAT(@tbody,'<td style="padding: 8px;vertical-align: top;border-top: 1px solid #dddddd;">&nbsp;</td>');
          SET @tbody = CONCAT(@tbody,'</tr>');
          
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE forms;
    
    RETURN @tbody;
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_form_obt_request` */

/*!50003 DROP FUNCTION IF EXISTS `time_form_obt_request` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_form_obt_request`(formsid INT(11)) RETURNS mediumtext CHARSET utf8
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE requestpurpose VARCHAR(250);
    DECLARE requestamount DECIMAL(6,3);
    DECLARE requestremarks TEXT;
    -- 
    --  
    DECLARE forms CURSOR FOR
       SELECT purpose, amount, remarks 
       FROM `ww_time_forms_obt_transpo` tfot 
	LEFT JOIN ww_time_forms_obt_purpose tfop ON tfot.purpose_id = tfop.purpose_id
       WHERE tfot.`forms_id`= formsid;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
    -- 
    -- 
    OPEN forms;
    
    SET @tbody = '';
    REPEAT
       FETCH forms INTO requestpurpose,requestamount,requestremarks;
       
       IF NOT done THEN
          
          SET requestpurpose = requestpurpose;
          SET requestamount  = IFNULL(requestamount,0);
          SET requestremarks = requestremarks;
           
          SET @tbody = CONCAT(@tbody,'<tr>');
          SET @tbody = CONCAT(@tbody,'<td style="padding: 8px;vertical-align: top;border-top: 1px solid #dddddd;">',requestpurpose,'</td>');
          SET @tbody = CONCAT(@tbody,'<td style="padding: 8px;vertical-align: top;border-top: 1px solid #dddddd;">',requestamount,'</td>');
          SET @tbody = CONCAT(@tbody,'<td style="padding: 8px;vertical-align: top;border-top: 1px solid #dddddd;">',requestremarks,'</td>');
          SET @tbody = CONCAT(@tbody,'</tr>');
          
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE forms;
    
    RETURN @tbody;
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_get_allowance_meal` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_allowance_meal` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_allowance_meal`( daytypecode VARCHAR(16), employmenttypeid INT(11), ot_hours DECIMAL(6,2) ) RETURNS decimal(5,2)
BEGIN
    
	SET @amt = 0.00;
	SET @mux = 0.00;
	SET @tot = 0.00;
    SELECT tdmr.`multiplier` INTO @mux
    FROM `ww_time_day_type` tdt
    JOIN `ww_time_day_type_allowance` tdta ON tdta.`day_type_id`=tdt.`day_type_id`
    JOIN `ww_time_day_meal` tdm ON tdm.`meal_id`=tdta.`meal_id` AND tdm.`deleted`=0
    JOIN `ww_time_day_meal_range` tdmr ON tdmr.`meal_id`=tdm.`meal_id`
    WHERE tdt.`deleted`=0 AND 
          tdt.`day_type_code`=daytypecode AND 
          ot_hours BETWEEN tdmr.hour_from AND tdmr.hour_to;
	
	SELECT `meal` INTO @amt
	FROM `ww_time_day_allowance` WHERE `employment_type_id`=employmenttypeid;
	
	SET @tot = @amt * @mux;
	
	return @tot;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_allowance_transpo` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_allowance_transpo` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_allowance_transpo`( daytypecode VARCHAR(16), employmenttypeid INT(11), ot_hours DECIMAL(6,2) ) RETURNS decimal(5,2)
BEGIN
    
	SET @amt = 0.00;
	SET @mux = 0.00;
	SET @tot = 0.00;
    SELECT tdtr.`multiplier` INTO @mux
    FROM `ww_time_day_type` tdt
    JOIN `ww_time_day_type_allowance` tdta ON tdta.`day_type_id`=tdt.`day_type_id`
    JOIN `ww_time_day_transpo` tdtp ON tdtp.`transpo_id`=tdta.`transpo_id` AND tdtp.`deleted`=0
    JOIN `ww_time_day_transpo_range` tdtr ON tdtr.`transpo_id`=tdtp.`transpo_id`
    WHERE tdt.`deleted`=0 AND 
          tdt.`day_type_code`=daytypecode AND 
          ot_hours BETWEEN tdtr.hour_from AND tdtr.hour_to;
	
	SELECT `transpo` INTO @amt
	FROM `ww_time_day_allowance` WHERE `employment_type_id`=employmenttypeid;
	
	SET @tot = @amt * @mux;
	
	return @tot;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_approver_with_email` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_approver_with_email` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_approver_with_email`(
	classid INT(11),
	userid INT(11),
	approverid INT(11)
    ) RETURNS tinyint(1)
BEGIN
	
    SET @nApproverID = 0;
    SET @nIsEmail = 0;
    
    -- users
    SELECT `approver_id`, `email` INTO @nApproverID, @nIsEmail
    FROM `ww_approver_class_user`
    WHERE `deleted`=0 AND `class_id`=classid AND `approver_id`=approverid AND `user_id`=userid
    LIMIT 1;
	
	IF @nApproverID > 0 THEN
	   RETURN @nIsEmail;
	END IF;
	
	-- position
    SELECT apc.`approver_id`, apc.`email` INTO @nApproverID, @nIsEmail
    FROM `ww_approver_class_position` apc
    INNER JOIN `users_profile` up ON up.`user_id`=apc.`approver_id`
	WHERE apc.`deleted`=0 AND apc.`class_id`=classid AND apc.`approver_id`=approverid AND apc.`position_id`=up.`position_id`
	LIMIT 1;
	
	IF @nApproverID > 0 THEN
	   RETURN @nIsEmail;
	END IF;
    
    -- department
    SELECT acd.`approver_id`, acd.`email` INTO @nApproverID, @nIsEmail
    FROM `ww_approver_class_department` acd 
    INNER JOIN `users_profile` up ON up.`user_id`=acd.`approver_id` 
    WHERE acd.`deleted`=0 AND acd.`class_id`=classid AND acd.`approver_id`=approverid AND acd.`department_id`=up.`department_id`;
    
	IF @nApproverID > 0 THEN
	   RETURN @nIsEmail;
	END IF;
    
    -- company
    SELECT acc.`approver_id`, acc.`email` INTO @nApproverID, @nIsEmail
    FROM `ww_approver_class_company` acc 
    INNER JOIN `users_profile` up ON up.`user_id`=acc.`approver_id` 
    WHERE acc.`deleted`=0 AND acc.`class_id`=classid AND acc.`approver_id`=approverid AND acc.`company_id`=up.`company_id`;
    
	IF @nApproverID > 0 THEN
	   RETURN @nIsEmail;
	END IF;
    -- approver has no rights to receive email
    RETURN 0;
    
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_break_deduction` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_break_deduction` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_break_deduction`( daytypecode VARCHAR(16), ot_hours DECIMAL(6,2) ) RETURNS decimal(5,2)
BEGIN
    
	SET @deduction = 0.00;
    SELECT tdbr.deduction INTO @deduction
    FROM `ww_time_day_type` tdt
    JOIN `ww_time_day_type_break` tdtb ON tdtb.`day_type_id`=tdt.`day_type_id`
    JOIN `ww_time_day_break` tdb ON tdb.`break_id`=tdtb.`break_id` AND tdb.`deleted`=0
    JOIN `ww_time_day_break_range` tdbr ON tdbr.`break_id`=tdb.`break_id`
    WHERE tdt.`deleted`=0 AND 
          tdt.`day_type_code`=daytypecode AND 
          ot_hours BETWEEN tdbr.hour_from AND tdbr.hour_to;
	
	return @deduction;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_cut_off` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_cut_off` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_cut_off`( dtDate date, comp_id int(11) ) RETURNS date
BEGIN
    
	SET @cut_off = '0000-00-00';
	SELECT cutoff INTO @cut_off
	FROM ww_time_period WHERE dtDate BETWEEN date_from AND date_to AND company_id = comp_id AND deleted = 0 LIMIT 1;
	
	return @cut_off;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_nd_end` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_nd_end` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_nd_end`(
	shiftid int(11), comp_id int(11)
    ) RETURNS time
BEGIN
	set @value = '00:00:00';
	SELECT a.`class_value` into @value
	FROM ww_time_shift_class_company a
	INNER JOIN ww_time_shift_class b ON a.`class_id` = b.`class_id` AND b.`class_code` = 'NIGHT-DIFF-END'
	WHERE shift_id = shiftid AND company_id = comp_id AND b.`deleted` = 0;
	
	return @value;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_nd_start` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_nd_start` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_nd_start`(
	shiftid int(11), comp_id int(11)
    ) RETURNS time
BEGIN
	set @value = '00:00:00';
	SELECT a.`class_value` into @value
	FROM ww_time_shift_class_company a
	INNER JOIN ww_time_shift_class b ON a.`class_id` = b.`class_id` AND b.`class_code` = 'NIGHT-DIFF-START'
	WHERE shift_id = shiftid AND company_id = comp_id AND b.`deleted` = 0;
	
	return @value;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_ot_rate` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_ot_rate` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_ot_rate`( ot_code varchar(32), comp_id int(11), hourly_rate decimal(12,2) ) RETURNS decimal(5,2)
BEGIN
	set @rate = 0.00;
	SELECT overtime_rate into @rate FROM ww_payroll_overtime_rates where overtime_code = ot_code and company_id = comp_id ;
	set @rate = round( @rate * hourly_rate , 2);
	return @rate;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_payroll_date` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_payroll_date` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_payroll_date`(
	dtDate date,
	comp_id int(11)
    ) RETURNS date
BEGIN
	
	set @paydate = '0000-00-00';
	SELECT payroll_date into @paydate
	FROM ww_time_period WHERE dtDate BETWEEN date_from AND date_to AND company_id = comp_id and deleted = 0 LIMIT 1;
	
	return @paydate;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_previous_period` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_previous_period` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_previous_period`( periodid INT(11)) RETURNS int(11)
BEGIN
	SET @nPeriod = 0;
	SET @dtFrom = '0000-00-00';
	SET @dtTo = '0000-00-00';
	SET @nComp = 0;
	SELECT previous_cutoff, DATE_SUB(date_from, INTERVAL 1 DAY), company_id 
	INTO @dtFrom, @dtTo, @nComp
	FROM ww_time_period WHERE period_id = periodid;
	
	SELECT MIN(period_id) INTO @nPeriod 
	FROM ww_time_period WHERE date_from = @dtFrom AND date_to = @dtTo AND company_id = @nComp;
	RETURN @nPeriod;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_sched_in` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_sched_in` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_sched_in`(
	shiftid int(11)
    ) RETURNS varchar(32) CHARSET utf8
BEGIN
	set @sched_id = '';
	SELECT time_start into @sched_id FROM ww_time_shift WHERE shift_id = shiftid and deleted = 0;
	
	return @sched_id;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_sched_out` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_sched_out` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_sched_out`(
	shiftid int(11)
    ) RETURNS varchar(32) CHARSET utf8
BEGIN
	set @sched_out = '';
	SELECT time_end into @sched_out FROM ww_time_shift WHERE shift_id = shiftid and deleted = 0;
	
	return @sched_out;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_shift` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_shift` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_shift`( puserid int(11), dates date ) RETURNS int(11)
BEGIN
	set @shift_id = 0;
	SELECT if(`aux_shift_id` = 0, `shift_id`, `aux_shift_id`) into @shift_id FROM ww_time_record WHERE `user_id` = puserid AND `date` = dates;
	return @shift_id;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_time_in` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_time_in` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_time_in`( puserid int(11), dates date ) RETURNS datetime
BEGIN
	SET @TimeIN = '0000-00-00 00:0:00';
	set @time_in = '0000-00-00 00:0:00';
	SET @aux_time_in = '0000-00-00 00:0:00';
	SELECT time_in, aux_time_in into @time_in, @aux_time_in FROM ww_time_record WHERE user_id = puserid AND `date` = dates;
	if @time_in is null or @aux_time_in < @time_in then
		set @TimeIN = @aux_time_in;
	else 
		set @TimeIN = @time_in;
	end if;
	
	
	return @TimeIN;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_get_time_out` */

/*!50003 DROP FUNCTION IF EXISTS `time_get_time_out` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_get_time_out`( puserid int(11), dates date ) RETURNS datetime
begin
	set @TimeOUT = '0000-00-00 00:0:00';
	set @time_out = '0000-00-00 00:0:00';
	set @aux_time_out = '0000-00-00 00:0:00';
	SELECT time_out, aux_time_out into @time_out, @aux_time_out FROM ww_time_record WHERE user_id = puserid AND `date` = dates;
	if @time_out is null or @time_out < @aux_time_out then
		set @TimeOUT = @aux_time_out;
	else
		set @TimeOUT = @time_out;
	end if;
	
	return @TimeOUT;
    END */$$
DELIMITER ;

/* Function  structure for function  `time_period_process_absent` */

/*!50003 DROP FUNCTION IF EXISTS `time_period_process_absent` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_period_process_absent`(userid INT(11), dateid DATE) RETURNS tinyint(1)
BEGIN
    SET @ifabsent = 0;
    
    SELECT IF(COUNT(tf.`forms_id`)=0,1,0) INTO @ifabsent
    FROM `time_forms` tf, `time_forms_date` tfd, `ww_time_form_status` tfs
    WHERE 
       tfd.`date` = dateid AND
       tf.`user_id` = userid AND 
       tf.`forms_id` = tfd.`forms_id` AND
       tf.`form_status_id` = tfs.form_status_id AND tfs.form_status = 'Approved';
    
    RETURN @ifabsent;
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_period_process_absent_w_in_cutoff` */

/*!50003 DROP FUNCTION IF EXISTS `time_period_process_absent_w_in_cutoff` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_period_process_absent_w_in_cutoff`(userid INT(11), dateid DATE, period_date_from date, period_cutoff date) RETURNS tinyint(1)
BEGIN
    SET @ifabsent = 0;
    
    SELECT IF(COUNT(tf.`forms_id`)=0,0,1) INTO @ifabsent
    FROM `time_forms` tf, `time_forms_date` tfd, `ww_time_form_status` tfs, `ww_time_record` tr
    WHERE 
       tfd.`date` = dateid AND
       tf.`user_id` = userid AND 
       tf.`forms_id` = tfd.`forms_id` AND
       tfd.date = tr.date and
       tf.`form_status_id` = tfs.form_status_id AND tfs.form_status = 'Approved' AND
       (tr.aux_time_in IS NOT NULL OR tr.aux_time_out IS NOT NULL) AND
       tf.`date_approved` > period_cutoff;
    
    RETURN @ifabsent;
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_period_process_lwop` */

/*!50003 DROP FUNCTION IF EXISTS `time_period_process_lwop` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_period_process_lwop`(userid INT(11), dateid DATE, lwopid INT(1), cutoffdate DATE, cutoffdateFrom DATE) RETURNS decimal(3,2)
BEGIN
    SET @nLWOP = 0;
    
    SELECT IFNULL(SUM(tfd.`day`),0) INTO @nLWOP
    FROM `time_forms` tf, `time_forms_date` tfd, `ww_time_form_status` tfs
    WHERE 
       tfd.`date` = dateid AND
       tf.`user_id` = userid AND 
       tf.`form_id` IN (23,7) AND
       tf.`forms_id` = tfd.`forms_id` AND
       ((tf.`date_approved` < cutoffdate) OR (tfd.`date` BETWEEN cutoffdateFrom AND cutoffdate)) AND
       tf.`form_status_id` = tfs.form_status_id AND tfs.form_status = 'Approved';
    
    RETURN @nLWOP;
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_period_process_lwp` */

/*!50003 DROP FUNCTION IF EXISTS `time_period_process_lwp` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_period_process_lwp`(userid INT(11), dateid DATE, lwopid INT(1), cutoffdate DATE) RETURNS decimal(3,2)
BEGIN
    SET @nLWP = 0.00;
    
    SELECT IFNULL(SUM(tfd.`day`),0) INTO @nLWP
    FROM `time_forms` tf, `time_forms_date` tfd, `ww_time_form_status` tfs, `ww_time_form` tfc
    WHERE 
       tf.`user_id` = userid AND 
       tf.`forms_id` = tfd.`forms_id` AND
       tfd.`date` = dateid AND
       tf.`form_id` not in (23,7) AND
       tfc.`is_leave` = 1 AND tfc.`form_id` = tf.`form_id` AND
       tf.`form_status_id` = tfs.form_status_id AND tfs.form_status = 'Approved' AND
       tf.`date_approved` < cutoffdate AND
       (tf.form_code != 'ADDL' OR (tf.form_code = 'ADDL' and tf.type='Use'));
           
    RETURN @nLWP;
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_period_process_ot` */

/*!50003 DROP FUNCTION IF EXISTS `time_period_process_ot` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_period_process_ot`(userid INT(11), dateid DATE) RETURNS decimal(5,2)
BEGIN
    SET @nOvertime = 0.00;
    
    SELECT IFNULL(SUM(tfd.`hrs`),0) INTO @nOvertime
    FROM `time_forms` tf, `time_forms_date` tfd, `ww_time_form_status` tfs, `ww_time_form` tfc
    WHERE 
       tf.`user_id` = userid AND 
       tf.`forms_id` = tfd.`forms_id` AND
       tfd.`date` = dateid AND
       tfc.`form_id` = tf.`form_id` AND
       tf.`form_status_id` = tfs.form_status_id AND tfs.form_status = 'Approved';
    
    RETURN @nOvertime;
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_period_process_resigned` */

/*!50003 DROP FUNCTION IF EXISTS `time_period_process_resigned` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_period_process_resigned`(userid INT(11), dates DATE) RETURNS tinyint(1)
BEGIN
    SET @resigned = 0;
    SET @resigned_date = (SELECT `resigned_date` FROM `partners` WHERE `user_id`=userid LIMIT 1);
    
    IF IFNULL(@resigned_date,'0000-00-00')='0000-00-00' THEN
       SET @resigned = 0;
    ELSE
       IF dates > @resigned_date THEN
          SET @resigned = 1;
       END IF;
    END IF;
    
    RETURN @resigned;
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_period_process_shift` */

/*!50003 DROP FUNCTION IF EXISTS `time_period_process_shift` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_period_process_shift`(classcode VARCHAR(32), classgroup VARCHAR(32), userid INT(11), shiftid INT(11), optreturn VARCHAR(32)) RETURNS varchar(64) CHARSET utf8
BEGIN
    
    RETURN IFNULL((SELECT `class_value`
            FROM `time_shift_class_company`,`users_profile`,`partners` 
            WHERE `class_code`=classcode AND 
                  `time_shift_class_company`.`shift_id`=shiftid AND 
                  (IF(classgroup='EMPLOYMENT-TYPE',
                     IF(`time_shift_class_company`.`employment_type_id`='ALL', 1, FIND_IN_SET(`partners`.`employment_type_id`, `time_shift_class_company`.`employment_type_id`)),
                        IF(classgroup='EMPLOYMENT-STATUS',
                           IF(`time_shift_class_company`.`employment_status_id`='ALL', 1, FIND_IN_SET(`partners`.`status_id`, `time_shift_class_company`.`employment_status_id`)),
                              IF(classgroup='PARTNERS-ID',
                                 IF(`time_shift_class_company`.`partners_id`='ALL', 1, FIND_IN_SET(`partners`.`partner_id`, `time_shift_class_company`.`partners_id`)),
                  optreturn)))) AND
                  `users_profile`.`company_id`=`time_shift_class_company`.`company_id` AND 
                  `users_profile`.`user_id`=`partners`.`user_id` AND
                  `users_profile`.`user_id`=userid
            LIMIT 1)
            , optreturn);
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_period_process_shift_department` */

/*!50003 DROP FUNCTION IF EXISTS `time_period_process_shift_department` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_period_process_shift_department`(classcode VARCHAR(32), classgroup VARCHAR(32), comp_id INT(11), shiftid INT(11), userid INT(11), optreturn VARCHAR(32)) RETURNS varchar(64) CHARSET utf8
BEGIN
    
    RETURN IFNULL((SELECT `class_value`
            FROM `ww_time_shift_class_company_department`,`users_profile`,`partners` 
            WHERE `class_code`=classcode AND
		IF(classgroup='DEPARTMENT-ID',
                     IF(`ww_time_shift_class_company_department`.`department_id`='ALL', 1, FIND_IN_SET(users_profile.`department_id`, `ww_time_shift_class_company_department`.`department_id`)),optreturn) AND
                  `users_profile`.`company_id`=`ww_time_shift_class_company_department`.`company_id` AND 
                  `users_profile`.`department_id` = `ww_time_shift_class_company_department`.`department_id` AND
                  `users_profile`.`user_id`=`partners`.`user_id` AND
                  `users_profile`.`user_id`=userid AND
                  ww_time_shift_class_company_department.shift_id = shiftid
                  
            LIMIT 1)
            , optreturn);
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_period_process_ut` */

/*!50003 DROP FUNCTION IF EXISTS `time_period_process_ut` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_period_process_ut`(userid INT(11), dateid DATE, time_start varchar(20), time_end varchar(2)) RETURNS decimal(5,2)
BEGIN
    SET @nUndertimeAM = 0.00;
    SET @nUndertimePM = 0.00;
    
    SELECT MAX(ifnull((TIMESTAMPDIFF(MINUTE, CONCAT(dateid + INTERVAL IF(time_start='00:00:00', 1, 0) DAY,' ',time_start),tfd.`time_from`) / 60),0)), 
           MAX(ifnull((TIMESTAMPDIFF(minute, tfd.`time_to`, CONCAT(dateid + INTERVAL IF(time_end='00:00:00', 1, 0) DAY,' ',time_end)) / 60),0)) 
    INTO @nUndertimeAM, @nUndertimePM
    FROM `time_forms` tf, `time_forms_date` tfd, `ww_time_form_status` tfs, `ww_time_form` tfc
    WHERE 
       tf.`user_id` = userid AND 
       tf.`forms_id` = tfd.`forms_id` AND
       tfd.`date` = dateid AND
       tfc.`form_id` = tf.`form_id` AND
       tf.`form_code` = 'UT' AND 
       tf.`form_status_id` = tfs.form_status_id AND tfs.form_status = 'Approved';
    
    RETURN @nUndertimeAM + @nUndertimePM;
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_period_process_ut_checking` */

/*!50003 DROP FUNCTION IF EXISTS `time_period_process_ut_checking` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_period_process_ut_checking`(userid INT(11), dateid DATE) RETURNS decimal(5,2)
BEGIN
    SET @count = 0;
    
    SELECT count(*) INTO @count
    FROM `time_forms` tf, `time_forms_date` tfd, `ww_time_form_status` tfs, `ww_time_form` tfc
    WHERE 
       tf.`user_id` = userid AND 
       tf.`forms_id` = tfd.`forms_id` AND
       tfd.`date` = dateid AND
       tfc.`form_id` = tf.`form_id` AND
       tf.`form_code` = 'UT' AND 
       tf.`form_status_id` = tfs.form_status_id AND tfs.form_status = 'Approved';
    
    RETURN @count;
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_period_process_workhrs` */

/*!50003 DROP FUNCTION IF EXISTS `time_period_process_workhrs` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_period_process_workhrs`(userid INT(11), dates DATE) RETURNS decimal(5,2)
BEGIN
    SET @workhrs = (
       SELECT IFNULL(tssc.`class_value`,0) working_hrs
       FROM `time_record` tr
       JOIN `users_profile` up ON tr.`user_id` = up.`user_id`
       JOIN `ww_time_shift_class_company` tssc ON tssc.`shift_id` = IF(tr.`aux_shift_id`>0,tr.`aux_shift_id`,tr.`shift_id`) AND tssc.`company_id` = up.`company_id`
       JOIN `ww_time_shift_class` tsc ON tsc.`class_id` = tssc.`class_id` AND tsc.`deleted` = 0
       WHERE 
          UPPER(tsc.`class_code`) = 'WORKING-HOURS' AND
          tr.`date`    = dates AND
          tr.`user_id` = userid
       LIMIT 1
    );
    RETURN IFNULL(@workhrs,0.00);
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_record_form_lwp` */

/*!50003 DROP FUNCTION IF EXISTS `time_record_form_lwp` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_record_form_lwp`(userid INT(11), year_id INT(1), month_id INT(1)) RETURNS decimal(3,2)
BEGIN
    SET @nLWP = 0.00;
    
    SELECT IFNULL(SUM(tfd.`day`),0) INTO @nLWP
    FROM `ww_time_forms` tf, `ww_time_forms_date` tfd, `ww_time_form_status` tfs, `ww_time_form` tfc
    WHERE 
       tf.`deleted` = 0 AND
       tf.`user_id` = userid AND 
       tf.`forms_id` = tfd.`forms_id` AND
       YEAR(tfd.`date`) = year_id AND
       MONTH(tfd.`date`) = month_id AND
       tfc.`is_leave` = 1 AND tfc.`form_id` = tf.`form_id` AND
       tf.`form_status_id` = tfs.form_status_id AND tfs.form_status = 'Approved' AND
       -- TIMESTAMPDIFF(DAY,  tf.`created_on`, tf.`date_from`) < 14 AND
       TIMESTAMPDIFF(DAY,  tf.`date_approved`, tf.`date_from`) < 13 ;
    RETURN @nLWP;
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_record_list_forms` */

/*!50003 DROP FUNCTION IF EXISTS `time_record_list_forms` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_record_list_forms`(dateid DATE, userid INT(11)) RETURNS tinyint(1)
BEGIN
    SET @formcount=0;
    
    SELECT COUNT(time_forms.forms_id) INTO @formcount
    FROM ww_time_forms time_forms, ww_time_forms_date time_forms_date
    WHERE time_forms.forms_id=time_forms_date.forms_id AND time_forms.user_id=userid AND time_forms_date.`date`=dateid AND
    time_forms.deleted=0 AND time_forms_date.deleted=0;
    
    
    RETURN @formcount;
  
END */$$
DELIMITER ;

/* Function  structure for function  `time_validate_attendance_deduction` */

/*!50003 DROP FUNCTION IF EXISTS `time_validate_attendance_deduction` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` FUNCTION `time_validate_attendance_deduction`(
	nUserID int(11),   	-- employee subject for adjustment
	dtDate date,   		-- date that has deduction
	nUnit decimal(12,2), 	-- unit deducted 
	sType varchar(32)	-- type of deduction
    ) RETURNS decimal(12,2)
BEGIN
	-- validate the data of affected dates
	SET @nUnit = 0;
	set @nAdjustment = 0;
	SET @nAbsent = 0;
	SET @lwop = 0;
	if sType = 'ABSENCES' then
		SELECT absent, ( ifnull(absent,0) * hrs_rendered ),( IFNULL(lwop,0) * hrs_rendered ) into @nAbsent, @nUnit, @lwop FROM ww_time_record_summary WHERE user_id = nUserID AND `date` = dtDate LIMIT 1;
		IF @nAbsent = 1 tHEN
		   SET @nAdjustment = 0;
		ELSE
		   if @lwop = 0 then
			SET @nAdjustment = @nUnit - nUnit;
		   end if;
		END IF;
	elseif sType = 'LWOP' then
		SELECT absent, ( ifnull(lwop,0) * hrs_rendered ) into @nAbsent, @nUnit FROM ww_time_record_summary WHERE user_id = nUserID AND `date` = dtDate LIMIT 1;
		IF @nAbsent = 1 THEN
		   SET @nAdjustment = 0;
		ELSE
		   SET @nAdjustment = @nUnit - nUnit;
		END IF;
	elseif sType = 'DEDUCTION_LATE' then
		SELECT ifnull(late,0) into @nUnit FROM ww_time_record_summary WHERE user_id = nUserID AND `date` = dtDate LIMIT 1;
		SET @nAdjustment = @nUnit - nUnit;
	elseif sType = 'DEDUCTION_UNDERTIME' then
		SELECT ifnull(undertime,0) into @nUnit FROM ww_time_record_summary WHERE user_id = nUserID AND `date` = dtDate LIMIT 1;
		SET @nAdjustment = @nUnit - nUnit;
	end if;
		
	return @nAdjustment;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `log_msg` */

/*!50003 DROP PROCEDURE IF EXISTS  `log_msg` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `log_msg`(msg VARCHAR(255))
BEGIN
	insert into logtable (`log`) values(msg);	
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_approvers_change_applicable` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_approvers_change_applicable` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_approvers_change_applicable`(IN classid INT(11), userid INT(11), positionid INT(11), departmentid INT(11), companyid INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE done_1 TINYINT(11) DEFAULT 0;
    DECLARE done_2 TINYINT(11) DEFAULT 0;
    DECLARE done_3 TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE uid INT;
    DECLARE ccode VARCHAR(16);
    
    
    -- STEP 1: scan class user
    -- 
    DECLARE user_approvers CURSOR FOR
       SELECT up.`user_id`
       FROM `ww_approver_class_user` acp
       INNER JOIN `users_profile` up ON acp.`user_id` = up.`user_id`
       WHERE 
             acp.`position_id` = positionid AND 
             acp.`department_id` = departmentid AND 
             acp.`company_id` = companyid AND
             acp.`user_id` = userid AND 
             acp.`deleted` = 0 AND
             up.`active` = 1
       GROUP BY up.`user_id`;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    SET ccode = (SELECT `class_code` FROM `ww_approver_class` WHERE `class_id`=classid LIMIT 1);
    
       OPEN user_approvers;
       REPEAT
          FETCH user_approvers INTO uid;
          IF NOT done THEN
             SET rec = rec + 1;
             
             IF ccode = '201REQ' THEN
                SET rec = rec;
             ELSEIF ccode='PPA' THEN
                CALL sp_approvers_change_applicable_pending('PPA-PLANNING',uid);
                CALL sp_approvers_change_applicable_pending('PPA-APPRAISAL',uid);
             ELSEIF ccode='REC' THEN
                SET rec = rec;
             ELSE
                CALL sp_approvers_change_applicable_pending(ccode,uid);
             END IF;
                 
          END IF;
       UNTIL done END REPEAT;
       CLOSE user_approvers;
    
    
    -- STEP 2: scan class position
    -- 
    IF rec = 0 THEN
       BEGIN
          DECLARE position_approvers CURSOR FOR
          SELECT up.`user_id`
          FROM `ww_approver_class_position` acp
          INNER JOIN `users_profile` up 
                  ON 
                     acp.`position_id` = up.`position_id` AND
                     acp.`department_id` = up.`department_id` AND
                     acp.`company_id` = up.`company_id` 
          WHERE 
                acp.`position_id` = positionid AND 
                acp.`department_id` = departmentid AND 
                acp.`company_id` = companyid AND
                acp.`deleted`=0 AND
                up.`active` = 1
          GROUP BY up.`user_id`;
          DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done_1 = 1;
       
          OPEN position_approvers;
          REPEAT
             FETCH position_approvers INTO uid;
             IF NOT done_1 THEN
                SET rec = rec + 1;
             
                IF ccode = '201REQ' THEN
                   SET rec = rec;
                ELSEIF ccode='PPA' THEN
                   SET @strings = CONCAT('PPA-PLANNING',uid);
                   INSERT INTO ww_system_messages (msg_type, msg_code, msg) VALUES ('attention','PLANNING',@strings);
                   CALL sp_approvers_change_applicable_pending('PPA-PLANNING',uid);
                   SET @strings = CONCAT('PPA-APPRAISAL',uid);
                   CALL sp_approvers_change_applicable_pending('PPA-APPRAISAL',uid);
                   INSERT INTO ww_system_messages (msg_type, msg_code, msg) VALUES ('attention','APPRAISAL',@strings);
                ELSEIF ccode='REC' THEN
                   SET rec = rec;
                ELSE
                   CALL sp_approvers_change_applicable_pending(ccode,uid);
                END IF;
             
             END IF;
          UNTIL done_1 END REPEAT;
          CLOSE position_approvers;
       END; 
    END IF;    
    
    
    -- STEP 3: scan class department
    -- 
    IF rec = 0 THEN
       BEGIN
          DECLARE department_approvers CURSOR FOR
          SELECT up.`user_id`
          FROM `ww_approver_class_department` acp
          INNER JOIN `users_profile` up 
                  ON 
                     acp.`department_id` = up.`department_id` AND
                     acp.`company_id` = up.`company_id`
          WHERE 
                acp.`department_id` = departmentid AND 
                acp.`company_id` = companyid AND
                acp.`deleted` = 0 AND
                up.`active` = 1
          GROUP BY up.`user_id`;
          DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done_2 = 1;
       
          OPEN department_approvers;
          REPEAT
             FETCH department_approvers INTO uid;
             IF NOT done_2 THEN
                SET rec = rec + 1;
             
                IF ccode = '201REQ' THEN
                   SET rec = rec;
                ELSEIF ccode='PPA' THEN
                   CALL sp_approvers_change_applicable_pending('PPA-PLANNING',uid);
                   CALL sp_approvers_change_applicable_pending('PPA-APPRAISAL',uid);
                ELSEIF ccode='REC' THEN
                   SET rec = rec;
                ELSE
                   CALL sp_approvers_change_applicable_pending(ccode,uid);
                END IF;
             
             END IF;
          
          UNTIL done_2 END REPEAT;
          CLOSE department_approvers;
       END; 
    END IF;    
    
    -- 
    -- STEP 3: scan class company
    -- 
    IF rec = 0 THEN
       BEGIN
          DECLARE company_approvers CURSOR FOR
          SELECT up.`user_id`
          FROM `ww_approver_class_company` acp
          INNER JOIN `users_profile` up 
                  ON 
                     acp.`company_id` = up.`company_id`
          WHERE 
                acp.`company_id` = companyid AND
                acp.`deleted` = 0 AND
                up.`active` = 1
          GROUP BY up.`user_id`;
          DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done_3 = 1;
       
          OPEN company_approvers;
          REPEAT
             FETCH company_approvers INTO uid;
             IF NOT done_3 THEN
                SET rec = rec + 1;
             
                IF ccode = '201REQ' THEN
                   SET rec = rec;
                ELSEIF ccode='PPA' THEN
                   CALL sp_approvers_change_applicable_pending('PPA-PLANNING',uid);
                   CALL sp_approvers_change_applicable_pending('PPA-APPRAISAL',uid);
                ELSEIF ccode='REC' THEN
                   SET rec = rec;
                ELSE
                   CALL sp_approvers_change_applicable_pending(ccode,uid);
                END IF;
             
             END IF;
          UNTIL done_3 END REPEAT;
          CLOSE company_approvers;
       END; 
    END IF;    
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_approvers_change_applicable_pending` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_approvers_change_applicable_pending` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_approvers_change_applicable_pending`(IN classcode VARCHAR(16), IN userid INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userids INT;
    DECLARE approverid INT;
    DECLARE appraisalid INT;
    DECLARE planningid INT;
    
    IF classcode = '201REQ' THEN
       BEGIN
          SET rec = 0;
       END;
       
    ELSEIF classcode='PPA-PLANNING' THEN
       BEGIN
       DECLARE forms CURSOR FOR
       SELECT  pap.`planning_id`, pap.`user_id`
       FROM ww_performance_planning_applicable pap 
	   WHERE pap.user_id = userid AND ( status_id IN (0,1,2,3));
          DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
          -- START TRANSACTION;
          OPEN forms;
          REPEAT
             FETCH forms INTO planningid, userid;
             IF NOT done THEN
                -- remove existing approver
	            DELETE FROM ww_performance_planning_approver 
	            WHERE planning_id = planningid AND user_id = userid;
                -- insert new approver set
                CALL `sp_performance_planning_populate_approvers`(planningid, userid); 
                -- update main form status
		UPDATE ww_performance_planning_applicable 
		SET to_user_id = IF( status_id = 0, userid, IF(status_id = 1, userid, getFirstApprover(planningid, userid)) ),
		    status_id = IF( status_id = 0, 0, IF(status_id = 1, 1,2) )
		WHERE planning_id = planningid AND user_id = userid;   
             END IF;
          UNTIL done END REPEAT;
          -- END TRANSACTION
          
          CLOSE forms;
       END;
       
    ELSEIF classcode='PPA-APPRAISAL' THEN
       BEGIN
          DECLARE forms CURSOR FOR               
	      SELECT  pap.`appraisal_id`, pap.`user_id`
	      FROM ww_performance_appraisal_applicable pap 
	      WHERE pap.user_id = userid AND ( status_id IN (0,1,2,3));
          DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
          -- START TRANSACTION;
          OPEN forms;
          REPEAT
             FETCH forms INTO appraisalid, userid;
             IF NOT done THEN
                -- remove existing approver/s
                DELETE FROM ww_performance_appraisal_approver 
                WHERE appraisal_id = appraisalid AND user_id = userid;
                -- insert new approver set
                CALL `sp_performance_appraisal_populate_approvers`(appraisalid, userid);
                -- update main record status
		UPDATE ww_performance_planning_applicable 
		SET to_user_id = IF( status_id = 0, userid, IF(status_id = 1, userid,getFirstApprover(appraisalid, userid)) ),
		    status_id = IF( status_id = 0, 0, IF(status_id = 1, 1,2) )
		WHERE appraisal_id = appraisalid AND user_id = userid;   
                SET rec = rec + 1;
             END IF;
          UNTIL done END REPEAT;
          -- END TRANSACTION
          
          CLOSE forms;
       END;
       
    ELSEIF classcode='REC' THEN
       BEGIN
          SET rec = 0;
       END;
       
    ELSE
       BEGIN
          -- TIME FORMS
          DECLARE forms CURSOR FOR
          SELECT  tr.`forms_id`, tr.`user_id` 
          FROM `time_forms` tr 
          WHERE user_id = userid AND form_status_id IN (2,3,4,5) AND UPPER(form_code) = classcode;
          DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
          
          -- START TRANSACTION;
          OPEN forms;
          REPEAT
             FETCH forms INTO recordid, userids;
             IF NOT done THEN
                -- remove existing approvers
	        DELETE FROM ww_time_forms_approver WHERE forms_id = recordid;
	        -- insert approvers
                CALL `sp_time_forms_populate_approvers`(recordid, userid);
                -- update main form status to for-approval
                UPDATE ww_time_forms SET form_status_id = 2 WHERE forms_id = recordid;      
	        SET rec = rec + 1;
             END IF;
          UNTIL done END REPEAT;
          -- END TRANSACTION
          
          CLOSE forms;
       END;
       
    END IF;
           
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_approver_assign_all` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_approver_assign_all` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_approver_assign_all`(IN `userid` INT(11))
BEGIN
	DECLARE done TINYINT(11) DEFAULT 0;
	DECLARE rec INT(11) DEFAULT 0;
	DECLARE recordid INT;
	DECLARE userids INT;
	DECLARE approverid INT;
	DECLARE appraisalid INT;
	DECLARE planningid INT;
	DECLARE classcode VARCHAR(16);
		
	DECLARE forms CURSOR FOR
		SELECT ac.class_code
		FROM ww_approver_class ac
		WHERE ac.deleted=0 
		AND ac.class_code != '201REQ';
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	
	
	DELETE FROM ww_approver_class_user
	WHERE user_id=userid;
	
	OPEN forms;
	REPEAT 
		FETCH forms INTO classcode;
		IF NOT done THEN
					
			INSERT INTO `ww_approver_class_user`
			(`class_id`,`user_id`,`position_id`,`department_id`,`company_id`,`approver_id`,`alias`,`condition`,`sequence`,
			`approver`,`email`,`created_by`,`created_on`,`modified_by`,`modified_on`,`deleted`)
			
			SELECT ac.class_id,acu.`user_id`,acu.`position_id`,acu.`department_id`,acu.`company_id`,acu.`approver_id`,acu.
			`alias`,acu.`condition`,acu.`sequence`,acu.`approver`,acu.`email`,acu.`created_by`,acu.`created_on`,
			acu.`modified_by`,NOW(),acu.`deleted` 
			FROM ww_approver_class_users acu
			INNER JOIN ww_approver_class ac
			WHERE acu.`user_id`=userid
			AND ac.`class_code`=classcode
			AND acu.`deleted`=0
			;	
			
			CALL sp_approvers_change_applicable_pending(classcode,userid);
		END IF;
		UNTIL done END REPEAT;
	CLOSE forms;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_clearance_email_notification` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_clearance_email_notification` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_clearance_email_notification`()
BEGIN
    
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    DECLARE recordid INT;
    
    DECLARE userid INT;
    DECLARE email VARCHAR(128);
    DECLARE full_name VARCHAR(128);
       
    DECLARE users_emails CURSOR FOR
	SELECT u.user_id, u.`email`, u.full_name 
	FROM ww_users u 
	LEFT JOIN ww_roles r ON r.`role_id` = u.`role_id` 
	WHERE r.`role_id` = 2 AND r.deleted=0;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    
    -- [1]      
    SET @system_url = (SELECT `value` FROM `ww_config` WHERE `key`='URL' LIMIT  1);
    SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
    SET @system_author = (SELECT `value` FROM `ww_config` WHERE `key`='author' LIMIT  1);
        
    -- [1] retrieve the email template
    --  
    SET @emailto = 'webmaster@hdisystech.com';
    SET @emailsubject = '';
    SET @emailbody = '';
    SET @email_body = '';
    SET @name_list = '';
       
    SELECT `subject`,`body` INTO @emailsubject, @emailbody
    FROM `ww_system_template`
    WHERE `code` = 'CLEARANCE-NOTIFICATION' LIMIT 1;
       
              
    IF @emailsubject <> '' THEN
       -- [2] replace variables
       SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
       SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @system_url);
       SET @emailbody = REPLACE(@emailbody, '{{system_author}}', @system_author);
       
       
	   OPEN users_emails;
	    
	   REPEAT
	       FETCH users_emails INTO userid,email,full_name;
	       
	       SET @emailto = email;
	       SET @notify_to = userid;
	       SET @name_to_notify = full_name;
	       SET @bcc = 'webmaster@hdisystech.com';
	       
	       
		      
		IF NOT done THEN
		        SET @email_body = @emailbody;
			#SET @emailto = to_email;
			SET rec = rec + 1;
			
		        
		BEGIN
              
                 DECLARE done_1 TINYINT(11) DEFAULT 0;
                 DECLARE turnaround INT;
		 DECLARE display_name VARCHAR(128);
                 DECLARE user_list CURSOR FOR
			SELECT 
			IFNULL(CASE WHEN CURDATE() > ww_partners_clearance.`effectivity_date` THEN DATEDIFF(CURDATE(),ww_partners_clearance.`effectivity_date`) ELSE DATEDIFF(ww_partners_clearance.`effectivity_date`, CURDATE()) END, 0) AS "turnaround",
			`ww_partners`.`alias` AS "display_name"								
			FROM (`ww_partners_clearance`) 
			INNER JOIN ww_partners_clearance_status ON `ww_partners_clearance`.`status_id` = `ww_partners_clearance_status`.`status_id` 
			INNER JOIN ww_partners ON `ww_partners_clearance`.`partner_id` = `ww_partners`.`partner_id` WHERE `ww_partners_clearance_status`.`status` IN('Open','Ongoing') AND ww_partners_clearance.`deleted` = 0 ; 
                 DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done_1 = 1;
                 
		      
                 OPEN user_list;
	    
	             REPEAT
	             FETCH user_list INTO turnaround,display_name ;
	       
	                IF NOT done_1 THEN
				IF turnaround = 23 THEN
				  
				   INSERT INTO `ww_system_email_queue` (`to`, `subject`,`body`)
				   SELECT @emailto, @emailsubject, REPLACE(@email_body, '{{employee_names}}', display_name);
				   
				   INSERT INTO `ww_system_feeds` (`user_id`,`display_name`,`feed_content`,`uri`,`recipient_id`,`createdon`,`deleted`) 
				VALUES
				  ( @notify_to, @name_to_notify, CONCAT('The Exit clearance of ',display_name,' is about to reach 30 days by (Date of exact 30 days). Please be reminded of the standard process and the notification to concerned Department heads. Wednesday, next status meeting.'), 'en/partners/clearance', @notify_to, CURDATE(), 0 ); 
				END IF; 
	                END IF;
	             
	             UNTIL done_1 END REPEAT;
	    
	             CLOSE user_list;
	             
              
              END; -- BEGIN
		        
		        
		END IF;	-- first done	  
		
		
	              
		      
	    UNTIL done END REPEAT;
	    
	    CLOSE users_emails;
	    
	    -- COMMIT;
	    SELECT rec;
     END IF;
     
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_get_last_cutoff_date` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_get_last_cutoff_date` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_get_last_cutoff_date`(IN class_value INT, IN datefrom DATE, IN compid INT)
BEGIN
	DECLARE datetoprevious DATE;
	
	IF class_value = 1 THEN
	
		SELECT date_from, date_to
		FROM ww_time_period
		WHERE (datefrom BETWEEN date_from AND date_to) AND company_id IN(compid);
		
	ELSEIF class_value = 2 THEN
	
		SELECT DATE(date_from - INTERVAL 1 DAY) INTO datetoprevious 
		FROM ww_time_period WHERE datefrom BETWEEN date_from AND date_to AND company_id IN(compid);
		
		SELECT (SELECT date_from FROM ww_time_period
			WHERE date_to=datetoprevious AND company_id IN(compid)) AS date_from,
			date_to
		FROM ww_time_period
		WHERE (datefrom BETWEEN date_from AND date_to) AND company_id IN(compid);
		
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_get_leave_balance` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_get_leave_balance` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_get_leave_balance`(IN iuser_id INT(11), IN iperiod_extension DATE, IN iform_id INT(11))
BEGIN
	SELECT ww_time_form_balance.*, ww_time_form.form  
	FROM ww_time_form_balance
	JOIN ww_time_form ON ww_time_form.form_id = ww_time_form_balance.form_id
	WHERE ww_time_form_balance.deleted = 0 
	  AND ww_time_form.`deleted` = 0
	  AND user_id = iuser_id
	  AND IF(iform_id = 0, 1, ww_time_form_balance.form_id = iform_id)
	  AND iperiod_extension BETWEEN ww_time_form_balance.period_from AND ww_time_form_balance.period_extension
	  AND ww_time_form.form_code <> 'ADDL'
	  AND balance > 0
	  ORDER BY `year` DESC
	  limit 1;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_manpower_plan_email` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_manpower_plan_email` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_manpower_plan_email`(IN planid INT(11),IN emailtype varchar(50))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE userid INT;
    DECLARE planid INT;
    DECLARE email VARCHAR(128);
    DECLARE approver VARCHAR(32);
    DECLARE classid INT;
    DECLARE ownerid INT;
    
    DECLARE approvers CURSOR FOR
       SELECT mp.`plan_id`, mpa.`user_id`, u.`email`, mpa.`display_name`, mp.`user_id` ownid
       FROM `ww_recruitment_manpower_plan_approver` mpa
       INNER JOIN `users` u ON u.user_id=mpa.user_id
       INNER JOIN `users_profile` up ON up.user_id=mpa.user_id
       INNER JOIN `ww_recruitment_manpower_plan` mp ON mp.plan_id = mpa.plan_id
       WHERE mpa.`deleted`=0 AND mpa.`plan_status_id`>=2 AND IFNULL(u.`email`,'')<>'';
    
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    
    OPEN approvers;
    
    REPEAT
       FETCH approvers INTO planid, userid, email, approver, ownerid;
       
       IF NOT done THEN
           SET rec = rec + 1;
           
        --   IF time_get_approver_with_email(classid,ownerid,userid) = 1 THEN
              -- START
           
           -- [1] retrieve the application
           SET @planid = 0;
           SET @displayname = '';
           SET @createdon = '';
           SET @userid = 0;
          
           SELECT `user_id`, `plan_id`, if(`display_name` is not null,`display_name`,''),DATE_FORMAT(`created_on`, '%M-%e %l%p, %W')
           INTO @userid, @planid, @displayname, @createdon
           FROM `ww_recruitment_manpower_plan`
           WHERE `plan_id`=planid LIMIT 1;
           
           -- [3] retrieve the email template
           SET @emailto = email;
           SET @emailsubject = '';
           SET @emailbody = '';
	   set @code_type = case
		when emailtype = 'approved' THEN 'recruitment_manpower_plan_approved'
		when emailtype = 'for_approval' THEN 'recruitment_manpower_plan_for_approval' 
		WHEN emailtype = 'disapproved' THEN 'recruitment_manpower_plan_disapproved' 
		else 'recruitment_manpower_plan_for_approval' 
		END;
	   
           SELECT `subject`,`body` INTO @emailsubject, @emailbody
           FROM `ww_system_template`
           WHERE `code` = @code_type LIMIT 1;
           IF @emailsubject <> '' THEN
              -- [2] replace variables
              SET @emailbody = REPLACE(@emailbody, '{{approver}}', approver);
              SET @emailbody = REPLACE(@emailbody, '{{requestor}}', @displayname);
           
              -- {{link}}
              SET @url = get_config('System','URL');
	          IF RIGHT(TRIM(@url),1) <> '/' THEN
	             SET @url = CONCAT(TRIM(@url),'/');
	          END IF;
	   
              -- {{header/email logo}}
              SET @logo = get_config('System','print_logo'); 
	          IF TRIM(@logo) <> '' THEN
	             SET @logo = CONCAT(@url,@logo);
	          ELSE
	             SET @logo = CONCAT(@url,get_config('System','logo'));
	          END IF;
	   	         
              SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='annual_manpower_planning' LIMIT 1);
              SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
              SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
              SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
              SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
              SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
               
              -- [3] insert to table
              IF TRIM(@emailbody) <> '' THEN
                 INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
                 SELECT @emailto, @emailsubject, @emailbody;
              END IF;
              
              -- SELECT @emailto, @emailsubject, @emailbody;
              
             -- END IF; -- time_get_approver_with_email(classid,ownerid,userid) = 1
              
           END IF;
        END IF;
        
    UNTIL done END REPEAT;
    
    CLOSE approvers;
    
    -- SELECT rec;
    
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_change_password_reminder` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_change_password_reminder` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_change_password_reminder`()
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    DECLARE emails VARCHAR(128);
    
    DECLARE users_emails CURSOR FOR
       SELECT `email` 
       FROM `users`
       WHERE `hash`='$2a$08$hRV4eko18h6qPQ0gn7.f.eKk9O9Dv7nPKfZbN1mhregMrBYi3sR6i' AND active=1;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    SET @system_fromaddress = (SELECT `value` FROM `ww_config` WHERE `key`='from_address' LIMIT  1);
    SET @emailto = @system_fromaddress;
    SET @emailsubject = '';
    SET @emailbody = '';
    
    -- retrieve the email template
    SELECT `subject`,`body` INTO @emailsubject, @emailbody
    FROM `ww_system_template` WHERE `code` = 'PASSWORD-REMINDER' LIMIT 1;
           
    IF @emailsubject <> '' THEN
       -- {{link}}
       SET @url = (SELECT `value` FROM `ww_config` WHERE `key`='URL' LIMIT  1);
	   IF RIGHT(TRIM(@url),1) <> '/' THEN
	      SET @url = CONCAT(TRIM(@url),'/');
	   END IF;
	         
       SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
       SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
       SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
       SET @count_recipients = 0;
       SET @is_hundred = 0;
       SET @bcc = '';
       
       OPEN users_emails;
       REPEAT
          FETCH users_emails INTO emails;
       
	      IF NOT done THEN
             SET @bcc = CONCAT(emails,', ', @bcc);
	         SET @is_hundred = @count_recipients % 100;
	         IF @is_hundred = 0 AND @count_recipients > 0 THEN
	            INSERT INTO `ww_system_email_queue` (`to`, `bcc`, `subject`,`body`)
	            SELECT @emailto, @bcc, @emailsubject, @emailbody;
	            SET @bcc = '';
	         END IF;
	      END IF;
	      SET @count_recipients = @count_recipients + 1;
	       
	   UNTIL done END REPEAT;
	    
	   CLOSE users_emails;
       
	   IF (CHAR_LENGTH(@bcc) > 0) THEN 
	      INSERT INTO `ww_system_email_queue` (`to`, bcc, `subject`,`body`)
	      SELECT @emailto, @bcc, @emailsubject, @emailbody;
	   END IF;
    END IF;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_clearance_action_email` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_clearance_action_email` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_clearance_action_email`(IN clearanceid INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE signatory VARCHAR(32);
        
       SET @userid = 0;
       SET @email = '';
       SET @recipientAlias = '';
       SET @displayname = '';
       SET @user_email_cc = '';   
       
       -- [1] retrieve the recipient email and firstname 
        SELECT pc.alternate_email, u.email, u.full_name INTO @email, @user_email_cc, @displayname
        FROM `ww_partners_clearance` pc
        INNER JOIN `ww_partners` p ON p.`partner_id`=pc.`partner_id`
        INNER JOIN `ww_users` u ON u.user_id=p.user_id AND u.`active`=1 
        WHERE pc.`deleted`=0 AND pc.`clearance_id`=clearanceid LIMIT 1;
       
       -- [3] retrieve the email template
       SET @emailto = @email;
       SET @emailsubject = '';
       SET @emailbody = '';
       
       SELECT `subject`,`body` INTO @emailsubject, @emailbody
       FROM `ww_system_template`
       WHERE `code` = 'CLEARANCE-ACTION' LIMIT 1;
       
       
       IF @emailsubject <> '' THEN
         
           -- {{header/email logo}}
           SET @logo = get_config('System','print_logo'); 
         IF TRIM(@logo) <> '' THEN
            SET @logo = CONCAT(@url,@logo);
         ELSE
            SET @logo = CONCAT(@url,get_config('System','logo'));
         END IF;
               
           SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='forms_request' LIMIT 1);
           SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
           SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
           SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
           SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
           SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
                      
           -- [3] insert to table
           INSERT INTO `ww_system_email_queue` (`to`, `cc`, `subject`,`body`)
           SELECT @emailto, @user_email_cc, @emailsubject, @emailbody;
        
       END IF; -- @emailsubject <> '' THEN
       
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_clearance_email_notification` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_clearance_email_notification` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_clearance_email_notification`()
BEGIN
    
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    DECLARE recordid INT;
    
    DECLARE userid INT;
    DECLARE email VARCHAR(128);
    DECLARE full_name VARCHAR(128);
       
    DECLARE users_emails CURSOR FOR
	SELECT u.user_id, u.`email`, u.full_name 
	FROM ww_users u 
	LEFT JOIN ww_roles r ON r.`role_id` = u.`role_id` 
	WHERE r.`role_id` = 2 AND r.deleted=0;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    
    -- [1]      
    SET @system_url = (SELECT `value` FROM `ww_config` WHERE `key`='URL' LIMIT  1);
    SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
    SET @system_author = (SELECT `value` FROM `ww_config` WHERE `key`='author' LIMIT  1);
    SET @system_fromaddress = (SELECT `value` FROM `ww_config` WHERE `key`='from_address' LIMIT  1);
        
    -- [1] retrieve the email template
    --  
    SET @emailto = @system_fromaddress;
    SET @emailsubject = '';
    SET @emailbody = '';
    SET @email_body = '';
    set @name_list = '';
       
    SELECT `subject`,`body` INTO @emailsubject, @emailbody
    FROM `ww_system_template`
    WHERE `code` = 'CLEARANCE-NOTIFICATION' LIMIT 1;
       
              
    IF @emailsubject <> '' THEN
       -- [2] replace variables
       SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
       SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @system_url);
       SET @emailbody = REPLACE(@emailbody, '{{system_author}}', @system_author);
       
       
	   OPEN users_emails;
	    
	   REPEAT
	       FETCH users_emails INTO userid,email,full_name;
	       
	       SET @emailto = email;
	       SET @notify_to = userid;
	       SET @name_to_notify = full_name;
	       SET @bcc = @system_fromaddress;
	       
	       
		      
		IF NOT done THEN
		        SET @email_body = @emailbody;
			#SET @emailto = to_email;
			SET rec = rec + 1;
			
		        
		BEGIN
              
                 DECLARE done_1 TINYINT(11) DEFAULT 0;
                 DECLARE turnaround int;
		 DECLARE display_name VARCHAR(128);
                 DECLARE user_list CURSOR FOR
			SELECT 
			IFNULL(CASE WHEN CURDATE() > ww_partners_clearance.`effectivity_date` THEN DATEDIFF(CURDATE(),ww_partners_clearance.`effectivity_date`) ELSE DATEDIFF(ww_partners_clearance.`effectivity_date`, CURDATE()) END, 0) AS "turnaround",
			`ww_partners`.`alias` AS "display_name"								
			FROM (`ww_partners_clearance`) 
			INNER JOIN ww_partners_clearance_status ON `ww_partners_clearance`.`status_id` = `ww_partners_clearance_status`.`status_id` 
			INNER JOIN ww_partners ON `ww_partners_clearance`.`partner_id` = `ww_partners`.`partner_id` WHERE `ww_partners_clearance_status`.`status` IN('Open','Ongoing') AND ww_partners_clearance.`deleted` = 0 ; 
                 DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done_1 = 1;
                 
		      
                 OPEN user_list;
	    
	             REPEAT
	             FETCH user_list INTO turnaround,display_name ;
	       
	                IF NOT done_1 THEN
				if turnaround = 23 then
				  
				   INSERT INTO `ww_system_email_queue` (`to`, `subject`,`body`)
				   SELECT @emailto, @emailsubject, REPLACE(@email_body, '{{employee_names}}', display_name);
				   
				   INSERT INTO `ww_system_feeds` (`user_id`,`display_name`,`feed_content`,`uri`,`recipient_id`,`createdon`,`deleted`) 
				VALUES
				  ( @notify_to, @name_to_notify, CONCAT('The Exit clearance of ',display_name,' is about to reach 30 days by (Date of exact 30 days). Please be reminded of the standard process and the notification to concerned Department heads. Wednesday, next status meeting.'), 'en/partners/clearance', @notify_to, CURDATE(), 0 ); 
				end if; 
	                END IF;
	             
	             UNTIL done_1 END REPEAT;
	    
	             CLOSE user_list;
	             
              
              END; -- BEGIN
		        
		        
		END IF;	-- first done	  
		
		
	              
		      
	    UNTIL done END REPEAT;
	    
	    CLOSE users_emails;
	    
	    -- COMMIT;
	    SELECT rec;
     END IF;
     
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_demographics_gender` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_demographics_gender` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_demographics_gender`(IN pYear INT(1), IN pMonth INT(1))
BEGIN
    SET @female = 0;
    SET @male   = 0;
    
    SELECT SUM(IF(UPPER(up.`gender`)='FEMALE',1,0)), SUM(IF(UPPER(up.`gender`)='MALE',1,0))
    INTO @female, @male
    FROM `partners` p, `users_profile` up
    WHERE p.`user_id` = up.`user_id` AND up.`gender` <> '' AND
          -- Check for Resignation Date later: p.`resigned_date` 
          IF(IFNULL(p.`resigned_date`,'0000-00-00') = '0000-00-00', 
             1, 
             IF(DATE_FORMAT(p.`resigned_date`,'%Y%m') <= DATE_FORMAT(CONCAT(pYear,'-',pMonth,'-01'),'%Y%m'), 0, 1)) AND
          IF(DATE_FORMAT(p.`effectivity_date`,'%Y%m') <= DATE_FORMAT(CONCAT(pYear,'-',pMonth,'-01'),'%Y%m'), 1, 0);
    
    SELECT `ag_gen`.`age_gender` `gender`, `ag_grp`.`age_group` AS `edad`, 
           COUNT(`up`.`user_id`) bilang,
           COUNT(`up`.`user_id`)/(IF(UPPER(`ag_gen`.`age_gender`)='FEMALE', @female, @male)) bahagi, 
           @female, @male, pYear, pMonth
    FROM `ww_partners_age_group` `ag_grp`
    JOIN `ww_partners_age_gender` `ag_gen`
    LEFT JOIN `partners` p ON 
                              IF(IFNULL(p.`resigned_date`,'0000-00-00') = '0000-00-00', 
                                 1, 
                                 IF(DATE_FORMAT(p.`resigned_date`,'%Y%m') <= DATE_FORMAT(CONCAT(pYear,'-',pMonth,'-01'),'%Y%m'), 0, 1)) AND
                              IF(DATE_FORMAT(p.`effectivity_date`,'%Y%m') <= DATE_FORMAT(CONCAT(pYear,'-',pMonth,'-01'),'%Y%m'), 1, 0)
    LEFT JOIN `users_profile` up ON p.`user_id` = up.`user_id` AND  up.`gender` = `ag_gen`.`age_gender` AND `up`.`age` BETWEEN `ag_grp`.`age_fr` AND `ag_grp`.`age_to`
    GROUP BY 1,2;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_demographics_status` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_demographics_status` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_demographics_status`(IN pYear INT(1), IN pMonth INT(1))
BEGIN
    SET @female = 0;
    SET @male   = 0;
    
    SELECT SUM(IF(UPPER(up.`gender`)='FEMALE',1,0)), SUM(IF(UPPER(up.`gender`)='MALE',1,0))
    INTO @female, @male
    FROM `partners` p, `users_profile` up
    WHERE p.`user_id` = up.`user_id` AND up.`gender` <> '' AND
          -- Check for Resignation Date later: p.`resigned_date` 
          IF(IFNULL(p.`resigned_date`,'0000-00-00') = '0000-00-00', 
             1, 
             IF(DATE_FORMAT(p.`resigned_date`,'%Y%m') <= DATE_FORMAT(CONCAT(pYear,'-',pMonth,'-01'),'%Y%m'), 0, 1)) AND
          IF(DATE_FORMAT(p.`effectivity_date`,'%Y%m') <= DATE_FORMAT(CONCAT(pYear,'-',pMonth,'-01'),'%Y%m'), 1, 0);
    
    SELECT pet.`employment_status`, pet.`employment_status_id`, 
           IF(up.`gender`='','Male', IFNULL(up.`gender`, 'Male')) `gender`, 
           COUNT(p.`status_id`) bilang,
           COUNT(p.`status_id`)/(IF(UPPER(up.`gender`)='FEMALE', @female, @male)) bahagi,
           @female, @male, pYear, pMonth
    FROM `ww_partners_employment_status` pet
    INNER JOIN `partners` p ON p.`status_id` = pet.`employment_status_id` AND
         IF(IFNULL(p.`resigned_date`,'0000-00-00') = '0000-00-00', 
            1, 
            IF(DATE_FORMAT(p.`resigned_date`,'%Y%m') <= DATE_FORMAT(CONCAT(pYear,'-',pMonth,'-01'),'%Y%m'), 0, 1)) AND
         IF(DATE_FORMAT(p.`effectivity_date`,'%Y%m') <= DATE_FORMAT(CONCAT(pYear,'-',pMonth,'-01'),'%Y%m'), 1, 0)
    INNER JOIN `users_profile` up ON up.`user_id` = p.`user_id` -- AND TRIM(up.`gender`) <> '' 
    WHERE pet.`active` = 1
    GROUP BY 1, 2, 3 
    
    ORDER BY 2;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_demographics_type` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_demographics_type` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_demographics_type`(IN pYear INT(1), IN pMonth INT(1))
BEGIN
    
    SELECT pet.`employment_type`, p.`employment_type_id`, pp.`key_value`, COUNT(p.`employment_type_id`) key_count
    FROM `partners` p, `ww_partners_employment_type` pet, `ww_partners_personal` pp
    WHERE p.`employment_type_id` = pet.`employment_type_id` AND 
          pet.`deleted` = 0 AND
          pp.`deleted` = 0 ANd pp.`key` = 'gender' AND
          IF(IFNULL(p.`resigned_date`,'0000-00-00') = '0000-00-00', 
             1, 
             IF(DATE_FORMAT(p.`resigned_date`,'%Y%m') <= DATE_FORMAT(CONCAT(pYear,'-',pMonth,'-01'),'%Y%m'), 0, 1)) AND
          IF(DATE_FORMAT(p.`effectivity_date`,'%Y%m') <= DATE_FORMAT(CONCAT(pYear,'-',pMonth,'-01'),'%Y%m'), 1, 0)
    GROUP BY 2, 3;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_email_anniversary` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_email_anniversary` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_email_anniversary`()
BEGIN
    
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    DECLARE recordid INT;
    
    DECLARE userid INT;
    DECLARE email VARCHAR(128);
    DECLARE photo VARCHAR(128);
    DECLARE fname VARCHAR(64);
       
    DECLARE users_emails CURSOR FOR
       SELECT `u`.`email`,
              IFNULL(`up`.`photo`,'assets/img/avatar.png') AS `photo`,
              `up`.`firstname`
       FROM (((`users` `u` 
       JOIN `users_profile` `up` ON((`u`.`user_id` = `up`.`user_id`))) 
       JOIN `users_position` `upos` ON((`up`.`position_id` = `upos`.`position_id`))) 
       JOIN `partners` `p` ON(((`u`.`user_id` = `p`.`user_id`) AND (IFNULL(`p`.`resigned_date`,0) = 0)))) 
       WHERE `u`.`active` = 1 AND MONTH(p.effectivity_date) = MONTH(CURDATE()) AND DAY(p.effectivity_date) = DAY(CURDATE());
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    
    -- [1]      
    SET @system_url = (SELECT `value` FROM `ww_config` WHERE `key`='URL' LIMIT  1);
    SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
    SET @system_author = (SELECT `value` FROM `ww_config` WHERE `key`='author' LIMIT  1);
        
    -- [1] retrieve the email template
    --  
    SET @system_fromaddress = (SELECT `value` FROM `ww_config` WHERE `key`='from_address' LIMIT  1);
    SET @emailto = @system_fromaddress;
    SET @emailsubject = '';
    SET @emailbody = '';
    SET @email_body = '';
       
    SELECT `subject`,`body` INTO @emailsubject, @emailbody
    FROM `ww_system_template`
    WHERE `code` = 'EMPLOYEE-ANNIV-NOTIFICATION' LIMIT 1;
       
              
    IF @emailsubject <> '' THEN
       -- [2] replace variables
       SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
       SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @system_url);
       SET @emailbody = REPLACE(@emailbody, '{{system_author}}', @system_author);
       
       
	   OPEN users_emails;
	    
	   REPEAT
	       FETCH users_emails INTO email,photo,fname;
	       
	       SET @emailto = email;
	       SET @bcc = @system_fromaddress;
	       
	       
		      
		IF NOT done THEN
		        SET @email_body = @emailbody;
		        SET @email_body = REPLACE(@email_body, '{{employee_name}}', fname);
			#SET @emailto = to_email;
			SET rec = rec + 1;
			INSERT INTO `ww_system_email_queue` (`to`, `subject`,`body`)
		        SELECT @emailto, @emailsubject, @email_body;
		END IF;		      
		      
	    UNTIL done END REPEAT;
	    
	    CLOSE users_emails;
	    
	    -- COMMIT;
	    SELECT rec;
     END IF;
     
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_email_bday` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_email_bday` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_email_bday`()
BEGIN
    
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    DECLARE recordid INT;
    
    DECLARE userid INT;
    DECLARE email VARCHAR(128);
    DECLARE photo VARCHAR(128);
    DECLARE fname VARCHAR(64);
    DECLARE cname VARCHAR(128);
       
    DECLARE users_emails CURSOR FOR
       SELECT `u`.`email`,
              IFNULL(`up`.`photo`,'assets/img/avatar.png') AS `photo`,
              `up`.`display_name`,
              `up`.`company`
       FROM (((`users` `u` 
       JOIN `users_profile` `up` ON((`u`.`user_id` = `up`.`user_id`))) 
       JOIN `users_position` `upos` ON((`up`.`position_id` = `upos`.`position_id`))) 
       JOIN `partners` `p` ON(((`u`.`user_id` = `p`.`user_id`) AND (IFNULL(`p`.`resigned_date`,0) = 0)))) 
       WHERE `u`.`active` = 1 AND `getdaystimeline`(`nextbday2`(`up`.`birth_date`))='Today';
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    
    -- [1] retrieve the memo
    SET @memo_id = 0;
    SET @memo_type_id = 0;
    SET @memo_type = '';
    SET @memo_title = '';
    SET @attachment = '';
    SET @memo_body = '';
    SET @created_on = '';
    SET @fileattach = '';
       
    SET @system_url = (SELECT `value` FROM `ww_config` WHERE `key`='URL' LIMIT  1);
    SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
    SET @system_author = (SELECT `value` FROM `ww_config` WHERE `key`='author' LIMIT  1);
        
    -- [1] retrieve the email template
    --  
    SET @system_fromaddress = (SELECT `value` FROM `ww_config` WHERE `key`='from_address' LIMIT  1);
    SET @emailto = @system_fromaddress;
    SET @emailsubject = '';
    SET @emailbody = '';
    SET @email_body = '';
       
    SELECT `subject`,`body` INTO @emailsubject, @emailbody
    FROM `ww_system_template`
    WHERE `code` = 'BIRTHDAY-GREETING' LIMIT 1;
       
              
    IF @emailsubject <> '' THEN
       -- [2] replace variables
       SET @emailbody = REPLACE(@emailbody, '{{memo_type}}', @memo_type);
       SET @emailbody = REPLACE(@emailbody, '{{memo_body}}', @memo_body);
       SET @emailbody = REPLACE(@emailbody, '{{memo_created}}', DATE_FORMAT(NOW(),'%M %e, %Y - %W'));
       SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
       SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @system_url);
       SET @emailbody = REPLACE(@emailbody, '{{system_author}}', @system_author);
       SET @emailbody = REPLACE(@emailbody, '{{memo_title}}', 'Birthday Greetings');
       
       -- [3] FORMATTING
       OPEN users_emails;
       REPEAT
          FETCH users_emails INTO email,photo,fname,cname;
	  SET @emailto = email;
	  SET @bcc = @system_fromaddress;
	  --  
	  IF NOT done THEN
             SET @attachment = CONCAT(@attachment,
                                      '<p style="display:inline-block;vertical-align:top;width:30%">',
                                      '<img src="', 
                                      @system_url, IF(TRIM(IFNULL(photo,''))='', '/uploads/users/avatar.jpg', photo),
                                      '" height="125px" width="125px" alt="Please enable images" style="border-radius:50%;padding:15px" /><br>',
                                      '<b>',fname,'</b><br>of ',
                                      cname,
                                      '</p>'
                               );
             SET rec = rec + 1;
          END IF;
	  -- 
       UNTIL done END REPEAT;
	    
       CLOSE users_emails;
       
       
       -- [4] EMAILING
       IF rec > 0 THEN
       BEGIN
          DECLARE done_1 TINYINT(11) DEFAULT 0;
          DECLARE to_email VARCHAR(100);
       
          DECLARE users_recipient CURSOR FOR
          SELECT u.email FROM `users` u
          WHERE u.`deleted`=0 AND u.`active`=1 AND TRIM(IFNULL(u.`email`,''))<>'' ORDER BY 1;
          DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done_1 = 1;
                 
          SET @count_recipients = 0;
          SET @is_hundred = 0;
          SET @emailto = @system_fromaddress;
          SET @bcc = '';
          SET @email_body = REPLACE(@emailbody, '{{memo_attachment}}', @attachment);
          
          OPEN users_recipient;
          
          REPEAT
             FETCH users_recipient INTO to_email;
            
             IF NOT done_1 THEN
                SET @bcc = CONCAT(to_email,', ', @bcc);
	        SET @is_hundred = @count_recipients % 50;
	        IF @is_hundred = 0 AND @count_recipients > 0 THEN
	           INSERT INTO `ww_system_email_queue` (`to`, `bcc`, `subject`,`body`)
	           SELECT @emailto, @bcc, @emailsubject, @email_body;
	           SET @bcc = '';
                END IF;
             END IF;
                
             SET @count_recipients = @count_recipients + 1;
          
          UNTIL done_1 END REPEAT;
    
          CLOSE users_recipient;
          
	  IF (CHAR_LENGTH(@bcc) > 0) THEN 
	     INSERT INTO `ww_system_email_queue` (`to`, bcc, `subject`,`body`)
	     SELECT @emailto, @bcc, @emailsubject, @email_body;
	  END IF;
       END;
       END IF; -- [4] END
       
       
       SELECT rec;
       
   END IF; -- IF @emailsubject
   
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_incident_change_pending_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_incident_change_pending_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_incident_change_pending_approvers`(IN user_ids VARCHAR(256), IN class_id INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE cocincidents CURSOR FOR
       SELECT  tr.`incident_id`, tr.`involved_partners` FROM `ww_partners_incident` tr WHERE `deleted`=0
       AND FIND_IN_SET(involved_partners, user_ids) AND incident_status_id IN (2,3);
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
    -- START TRANSACTION;
        
    OPEN cocincidents;
    
    REPEAT
       FETCH cocincidents INTO recordid, userid;
       
       IF NOT done THEN
	   DELETE FROM ww_partners_incident_approver WHERE incident_id = recordid;
           CALL `sp_partners_incident_populate_approvers`(recordid, userid);
           UPDATE ww_partners_incident SET incident_status_id = 2 WHERE incident_id = recordid;      
	   SET rec = rec + 1;
	   
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE cocincidents;
    
    -- COMMIT;
    
    SELECT rec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_incident_populate_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_incident_populate_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_incident_populate_approvers`(IN incidentid INT(11), IN userid INT(11))
BEGIN
	  -- 
          -- [0] Override from USER
          -- 
          
          SET @rec = 0;
          SET @class = '';
          
	  SELECT c.`class_code`, COUNT(a.`id`) INTO @class, @rec
          FROM `ww_approver_class_user` a
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE a.`user_id`=userid AND c.`class_code`='IR' AND a.deleted = 0;
          
          IF @rec > 0 THEN
             INSERT INTO `ww_partners_incident_approver`
             (`incident_id`, `user_id`, `condition`, `sequence`, `incident_status_id`)
             SELECT incidentid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,8))
             FROM `ww_approver_class_user` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`approver_id`<>userid
             AND a.user_id = userid
             GROUP BY 2
             ON DUPLICATE KEY UPDATE `deleted`=0;             
          ELSE           
          
          -- 
          -- [1] Override from POSITION
          -- 
          
          SET @rec = 0;
          SET @class = '';
          SET @positions = '';
          
          SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`) INTO @class, @positions, @rec
          FROM `ww_approver_class_position` a
          JOIN `users_profile` b ON b.position_id = a.`position_id` AND b.`company_id`=a.`company_id` AND b.department_id=a.department_id
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE b.`user_id`=userid AND c.`class_code`= 'IR';
          
          IF @rec > 0 THEN
             INSERT INTO `ww_partners_incident_approver`
             (`incident_id`, `user_id`, `condition`, `sequence`, `incident_status_id`)
             SELECT incidentid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,8))
             FROM `ww_approver_class_position` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             JOIN `users_profile` u ON u.company_id=a.company_id AND u.department_id=a.department_id AND u.user_id=userid
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`position_id`=@positions AND a.`approver_id`<>userid
             GROUP BY 2
             ON DUPLICATE KEY UPDATE `deleted`=0;             
          ELSE     
                    
             -- [2] Override from DEPARTMENT
             -- 
             SET @rec = 0;
             SET @class = '';
             SET @department = '';
          
             SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`) INTO @class, @department, @rec
             FROM `ww_approver_class_department` a
             JOIN `users_profile` b ON b.department_id = a.`department_id` AND b.`company_id`=a.`company_id`
             JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
	     WHERE b.`user_id`=userid AND c.`class_code`= 'IR'
             AND a.`approver_id`<>userid;
          
             IF @rec > 0 THEN
                INSERT INTO `ww_partners_incident_approver`
                (`incident_id`, `user_id`, `condition`, `sequence`, `incident_status_id`)
                SELECT incidentid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,8))
                FROM `ww_approver_class_department` a
                JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
                WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`department_id`=@department AND a.`approver_id`<>userid
                GROUP BY 2
                ON DUPLICATE KEY UPDATE `incident_status_id`=VALUES(`incident_status_id`), `sequence`=VALUES(`sequence`), `deleted`=0;             
             ELSE
                --   
                -- [3] Override from COMPANY
                -- 
                SET @rec = 0;
                SET @class = '';
                SET @company = '';
          
                SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`) INTO @class, @company, @rec
                FROM `ww_approver_class_company` a
                JOIN `users_profile` b ON b.company_id = a.`company_id`
                JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
	        WHERE b.`user_id`=userid AND c.`class_code`= 'IR'
                AND a.`approver_id`<>userid;
          
                IF @rec > 0 THEN
                   INSERT INTO `ww_partners_incident_approver`
                   (`incident_id`, `user_id`, `condition`, `sequence`, `incident_status_id`)
                   SELECT incidentid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,8))
                   FROM `ww_approver_class_company` a
                   JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                   WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`company_id`=@company AND a.`approver_id`<>userid
                   GROUP BY 2
                   ON DUPLICATE KEY UPDATE `deleted`=0;             
                END IF; -- IF COMPANY
             
             END IF; -- IF DEPARTMENT
          end if;   
          END IF; -- IF POSITION        
          IF @rec > 0 THEN
	     -- email approver/s application content
	     CALL sp_partners_ir_email(incidentid,'for_approval');
          END IF;               
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_ir_approver_approve_email` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_ir_approver_approve_email` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_ir_approver_approve_email`(IN receiver varchar(50),IN emailto VARCHAR(50))
BEGIN
   SET @emailsubject = '';
   SET @emailbody = '';
   set @emailto = emailto;
         
   SELECT `subject`,`body` INTO @emailsubject, @emailbody
   FROM `ww_system_template`
   WHERE `code` = 'IR-APPROVER-APPROVED' LIMIT 1;
   
   IF @emailsubject <> '' THEN
      -- [2] replace variables
      SET @emailbody = REPLACE(@emailbody, '{{receiver_name}}', receiver);
   
      -- {{link}}
      SET @url = get_config('System','URL');
	  IF RIGHT(TRIM(@url),1) <> '/' THEN
	     SET @url = CONCAT(TRIM(@url),'/');
	  END IF;
   
      -- {{header/email logo}}
      SET @logo = get_config('System','print_logo'); 
	  IF TRIM(@logo) <> '' THEN
	     SET @logo = CONCAT(@url,@logo);
	  ELSE
	     SET @logo = CONCAT(@url,get_config('System','logo'));
	  END IF;
		 
      SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='incident_report' LIMIT 1);
      SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
      SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
      SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
      SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
      SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
       
      -- [3] insert to table
      IF TRIM(@emailbody) <> '' THEN
	 INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
	 SELECT @emailto, @emailsubject, @emailbody;
      END IF; 
   END IF; 
    
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_ir_da_email` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_ir_da_email` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_ir_da_email`(IN receiver varchar(50),IN emailto VARCHAR(50),IN involve_employee VARCHAR(50))
BEGIN
   SET @emailsubject = '';
   SET @emailbody = '';
   set @emailto = emailto;
         
   SELECT `subject`,`body` INTO @emailsubject, @emailbody
   FROM `ww_system_template`
   WHERE `code` = 'IR-DA' LIMIT 1;
   
   IF @emailsubject <> '' THEN
      -- [2] replace variables
      SET @emailbody = REPLACE(@emailbody, '{{receiver_name}}', receiver);
      SET @emailbody = REPLACE(@emailbody, '{{involve_employee}}', involve_employee);
   
      -- {{link}}
      SET @url = get_config('System','URL');
	  IF RIGHT(TRIM(@url),1) <> '/' THEN
	     SET @url = CONCAT(TRIM(@url),'/');
	  END IF;
   
      -- {{header/email logo}}
      SET @logo = get_config('System','print_logo'); 
	  IF TRIM(@logo) <> '' THEN
	     SET @logo = CONCAT(@url,@logo);
	  ELSE
	     SET @logo = CONCAT(@url,get_config('System','logo'));
	  END IF;
		 
      SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='incident_report' LIMIT 1);
      SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
      SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
      SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
      SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
      SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
       
      -- [3] insert to table
      IF TRIM(@emailbody) <> '' THEN
	 INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
	 SELECT @emailto, @emailsubject, @emailbody;
      END IF; 
   END IF; 
    
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_ir_email` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_ir_email` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_ir_email`(IN incidentid INT(11),IN emailtype varchar(50))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE userid INT;
    DECLARE incident_id INT;
    DECLARE email VARCHAR(128);
    DECLARE approver VARCHAR(32);
    DECLARE ownerid INT;
    
    DECLARE approvers CURSOR FOR
       SELECT pia.`incident_id`, pia.`user_id`, u.`email`, u.`full_name`, pin.`complainants` ownid
       FROM `ww_partners_incident_approver` pia
       INNER JOIN `ww_partners_incident` pin ON pia.incident_id=pin.incident_id
       INNER JOIN `users` u ON u.user_id=pia.user_id
       INNER JOIN `users_profile` up ON up.user_id=pia.user_id
       WHERE pia.`deleted`=0 AND pia.incident_id=incidentid AND pia.`incident_status_id`=2 AND IFNULL(u.`email`,'')<>'';
    
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    
    OPEN approvers;
    
    REPEAT
       FETCH approvers INTO incident_id, userid, email, approver, ownerid;
       
       IF NOT done THEN
           SET rec = rec + 1;
                  	              
        --   IF time_get_approver_with_email(classid,ownerid,userid) = 1 THEN
              -- START
           
           -- [1] retrieve the application
           SET @incidentid = 0;
           SET @displayname = '';
           SET @createdon = '';
           SET @userid = 0;
          
           SELECT `user_id`, `incident_id`, if(`full_name` is not null,`full_name`,''),DATE_FORMAT(`pin`.`created_on`, '%M-%e %l%p, %W')
           INTO @userid, @incidentid, @complainant, @createdon
           FROM `ww_partners_incident` pin
           INNER JOIN `users` u ON u.user_id=pin.complainants
           WHERE `incident_id`=incidentid LIMIT 1;
           	                   
           -- [3] retrieve the email template
           SET @emailto = email;
           SET @emailsubject = '';
           SET @emailbody = '';
	   set @code_type = case
		when emailtype = 'approved' THEN 'IR-APPROVED'
		when emailtype = 'for_approval' THEN 'IR-FOR-APPROVAL' 
		WHEN emailtype = 'disapproved' THEN 'recruitment_manpower_plan_disapproved' 
		else 'recruitment_manpower_plan_for_approval' 
		END;
	   SET @status = CASE
		WHEN emailtype = 'approved' THEN 'Approved'
		WHEN emailtype = 'for_approval' THEN 'For Approval'  
		ELSE 'Draft' 
		END;
			   
           SELECT `subject`,`body` INTO @emailsubject, @emailbody
           FROM `ww_system_template`
           WHERE `code` = @code_type LIMIT 1;
           IF @emailsubject <> '' THEN
              -- [2] replace variables
              SET @emailbody = REPLACE(@emailbody, '{{approver}}', approver);
              SET @emailbody = REPLACE(@emailbody, '{{complainant}}', @complainant);
              SET @emailbody = REPLACE(@emailbody, '{{status}}', @status);
           
              -- {{link}}
              SET @url = get_config('System','URL');
	          IF RIGHT(TRIM(@url),1) <> '/' THEN
	             SET @url = CONCAT(TRIM(@url),'/');
	          END IF;
	   
              -- {{header/email logo}}
              SET @logo = get_config('System','print_logo'); 
	          IF TRIM(@logo) <> '' THEN
	             SET @logo = CONCAT(@url,@logo);
	          ELSE
	             SET @logo = CONCAT(@url,get_config('System','logo'));
	          END IF;
	   	         
              SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='incident_report' LIMIT 1);
              SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
              SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
              SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
              SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
              SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
               
              -- [3] insert to table
              IF TRIM(@emailbody) <> '' THEN
                 INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
                 SELECT @emailto, @emailsubject, @emailbody;
              END IF;
              
              -- SELECT @emailto, @emailsubject, @emailbody;
              
             -- END IF; -- time_get_approver_with_email(classid,ownerid,userid) = 1
              
           END IF;
        END IF;
        
    UNTIL done END REPEAT;
    
    CLOSE approvers;
    
    -- SELECT rec;
    
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_ir_hearing_schedule_email` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_ir_hearing_schedule_email` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_ir_hearing_schedule_email`(IN receiver varchar(50),IN emailto VARCHAR(50),IN involve_employee VARCHAR(50), IN dates VARCHAR(50))
BEGIN
   SET @emailsubject = '';
   SET @emailbody = '';
   set @emailto = emailto;
         
   SELECT `subject`,`body` INTO @emailsubject, @emailbody
   FROM `ww_system_template`
   WHERE `code` = 'IR-HEARING-SCHEDULE' LIMIT 1;
   
   IF @emailsubject <> '' THEN
      -- [2] replace variables
      SET @emailbody = REPLACE(@emailbody, '{{receiver_name}}', receiver);
      SET @emailbody = REPLACE(@emailbody, '{{involve_employee}}', involve_employee);
      SET @emailbody = REPLACE(@emailbody, '{{dates}}', dates);
   
      -- {{link}}
      SET @url = get_config('System','URL');
	  IF RIGHT(TRIM(@url),1) <> '/' THEN
	     SET @url = CONCAT(TRIM(@url),'/');
	  END IF;
   
      -- {{header/email logo}}
      SET @logo = get_config('System','print_logo'); 
	  IF TRIM(@logo) <> '' THEN
	     SET @logo = CONCAT(@url,@logo);
	  ELSE
	     SET @logo = CONCAT(@url,get_config('System','logo'));
	  END IF;
		 
      SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='incident_report' LIMIT 1);
      SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
      SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
      SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
      SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
      SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
       
      -- [3] insert to table
      IF TRIM(@emailbody) <> '' THEN
	 INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
	 SELECT @emailto, @emailsubject, @emailbody;
      END IF; 
   END IF; 
    
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_ir_immediate_email` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_ir_immediate_email` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_ir_immediate_email`(IN receiver varchar(50),IN emailto VARCHAR(50),IN complainant VARCHAR(50))
BEGIN
   SET @emailsubject = '';
   SET @emailbody = '';
   set @emailto = emailto;
         
   SELECT `subject`,`body` INTO @emailsubject, @emailbody
   FROM `ww_system_template`
   WHERE `code` = 'IR-FOR-APPROVAL' LIMIT 1;
   
   IF @emailsubject <> '' THEN
      -- [2] replace variables
      SET @emailbody = REPLACE(@emailbody, '{{approver}}', receiver);
      SET @emailbody = REPLACE(@emailbody, '{{complainant}}', complainant);
      SET @emailbody = REPLACE(@emailbody, '{{status}}', 'Approval');
   
      -- {{link}}
      SET @url = get_config('System','URL');
	  IF RIGHT(TRIM(@url),1) <> '/' THEN
	     SET @url = CONCAT(TRIM(@url),'/');
	  END IF;
   
      -- {{header/email logo}}
      SET @logo = get_config('System','print_logo'); 
	  IF TRIM(@logo) <> '' THEN
	     SET @logo = CONCAT(@url,@logo);
	  ELSE
	     SET @logo = CONCAT(@url,get_config('System','logo'));
	  END IF;
		 
      SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='incident_report' LIMIT 1);
      SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
      SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
      SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
      SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
      SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
       
      -- [3] insert to table
      IF TRIM(@emailbody) <> '' THEN
	 INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
	 SELECT @emailto, @emailsubject, @emailbody;
      END IF; 
   END IF; 
    
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_ir_nte_from_hr_email` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_ir_nte_from_hr_email` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_ir_nte_from_hr_email`(IN receiver varchar(50),IN emailto VARCHAR(50),IN involve VARCHAR(50))
BEGIN
   SET @emailsubject = '';
   SET @emailbody = '';
   set @emailto = emailto;
         
   SELECT `subject`,`body` INTO @emailsubject, @emailbody
   FROM `ww_system_template`
   WHERE `code` = 'IR-NTE-FROM-HR' LIMIT 1;
   
   IF @emailsubject <> '' THEN
      -- [2] replace variables
      SET @emailbody = REPLACE(@emailbody, '{{receiver_name}}', receiver);
      SET @emailbody = REPLACE(@emailbody, '{{involve_employee}}', involve);
   
      -- {{link}}
      SET @url = get_config('System','URL');
	  IF RIGHT(TRIM(@url),1) <> '/' THEN
	     SET @url = CONCAT(TRIM(@url),'/');
	  END IF;
   
      -- {{header/email logo}}
      SET @logo = get_config('System','print_logo'); 
	  IF TRIM(@logo) <> '' THEN
	     SET @logo = CONCAT(@url,@logo);
	  ELSE
	     SET @logo = CONCAT(@url,get_config('System','logo'));
	  END IF;
		 
      SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='incident_report' LIMIT 1);
      SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
      SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
      SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
      SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
      SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
       
      -- [3] insert to table
      IF TRIM(@emailbody) <> '' THEN
	 INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
	 SELECT @emailto, @emailsubject, @emailbody;
      END IF; 
   END IF; 
    
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_memo_email` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_memo_email` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_memo_email`(IN memoid INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    DECLARE email VARCHAR(100);
       
    DECLARE users_emails CURSOR FOR
       SELECT u.email
       FROM `ww_memo` m
       INNER JOIN `ww_system_feeds` sf ON sf.`record_id`=m.`memo_id`
       INNER JOIN `ww_memo_apply_to` mat ON mat.apply_to_id=m.apply_to_id 
       INNER JOIN `ww_memo_recipient` mr ON mr.memo_id=m.memo_id
       INNER JOIN `ww_users_profile` up ON 
          IF(m.apply_to_id=1, up.user_id=mr.apply_to,
          IF(m.apply_to_id=2, up.company_id=mr.apply_to,
          IF(m.apply_to_id=3, up.division_id=mr.apply_to,
          IF(m.apply_to_id=3, up.department_id=mr.apply_to, 0)))) OR m.created_by=up.user_id
       INNER JOIN `ww_users` u ON u.user_id=up.user_id AND u.`active`=1 AND IFNULL(u.`email`,'') <> ''
       WHERE m.`deleted`=0 AND m.`memo_id`=memoid AND (m.`email`=1 AND CURDATE() BETWEEN m.`publish_from` AND m.`publish_to`);
       
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    
    -- [1] retrieve the memo
    SET @memo_id = 0;
    SET @memo_type_id = 0;
    SET @memo_type = '';
    SET @memo_title = '';
    SET @attachment = '';
    SET @memo_body = '';
    SET @created_on = '';
    SET @fileattach = '';
       
    SET @system_url = (SELECT `value` FROM `ww_config` WHERE `key`='URL' LIMIT  1);
    SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
    SET @system_author = (SELECT `value` FROM `ww_config` WHERE `key`='author' LIMIT  1);
    SET @system_fromaddress = (SELECT `value` FROM `ww_config` WHERE `key`='from_address' LIMIT  1);
    
    SELECT `memo_type_id`, `memo_title`, 
       IF(IFNULL(`attachment`,'')='', '',CONCAT('<img alt="',`memo_title`,'" width="580px" src="', @system_url,`attachment`,'">')), 
       `memo_body`, `memo_id`, `publish_from`, CONCAT(@system_url,`attachment`)
    INTO @memo_type_id, @memo_title, @attachment, @memo_body, @memo_id, @created_on, @fileattach
    FROM `ww_memo`
    WHERE `memo_id`=memoid LIMIT 1;
       
    --  
    -- [2] retrieve the memo type 
    -- 
    SELECT `memo_type` INTO @memo_type
    FROM `ww_memo_type`
    WHERE `memo_type_id`=@memo_type_id LIMIT 1;
       
    --  
    -- [3] retrieve the email template
    --  
    SET @emailto = @system_fromaddress;
    SET @emailsubject = '';
    SET @emailbody = '';
    SET @bcc = '';
       
    SELECT `subject`,`body` INTO @emailsubject, @emailbody
    FROM `ww_system_template`
    WHERE `code` = 'MEMO' LIMIT 1;
       
              
    IF @emailsubject <> '' THEN
       -- [2] replace variables
       SET @emailbody = REPLACE(@emailbody, '{{memo_type}}', @memo_type);
       SET @emailbody = REPLACE(@emailbody, '{{memo_title}}', @memo_title);
       SET @emailbody = REPLACE(@emailbody, '{{memo_attachment}}', @attachment);
       SET @emailbody = REPLACE(@emailbody, '{{memo_body}}', @memo_body);
       SET @emailbody = REPLACE(@emailbody, '{{memo_created}}', DATE_FORMAT(@created_on,'%M %e, %Y - %W'));
       SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
       SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @system_url);
       SET @emailbody = REPLACE(@emailbody, '{{system_route}}', @system_url);
       SET @emailbody = REPLACE(@emailbody, '{{system_author}}', @system_author);
       
       SET @count_recipients = 0;
       SET @is_hundred = 0;
       
       OPEN users_emails;
	    
       REPEAT
          FETCH users_emails INTO email;
       
          IF NOT done THEN
	     SET @bcc = CONCAT(email,', ', @bcc);
	     SET @is_hundred = @count_recipients % 50;
	     IF @is_hundred = 0 AND @count_recipients > 0 THEN
	        INSERT INTO `ww_system_email_queue` (`to`, `bcc`, `subject`,`body`)
	        SELECT @emailto, @bcc, @emailsubject, @emailbody;
	        SET @bcc = '';
	     END IF;
          END IF;
       
          SET @count_recipients = @count_recipients + 1;
       
       UNTIL done END REPEAT;
    
       CLOSE users_emails;
    
       -- COMMIT;
       -- [3] insert to table
	  
       IF (CHAR_LENGTH(@bcc) > 0) THEN 
          INSERT INTO `ww_system_email_queue` (`to`, bcc, `subject`,`body`)
          SELECT @emailto, @bcc, @emailsubject, @emailbody;
       END IF;
       
     END IF;
       
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_memo_feeds` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_memo_feeds` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_memo_feeds`(IN memoid INT(11), IN modulepath VARCHAR(125))
BEGIN
    
    -- [1] add to activity feeds
    SET @messagetype = '';
    SET @userid = 0;
    SET @displayname = '';
    SET @recordid = 0;
    SET @feedcontent = '';
    SET @email = 0;
    SET @publish = 0;
        
    SELECT IF(mt.`memo_type`='Announcement','Announcement','Company News'), 
       m.`created_by`, u.`display_name`, m.`memo_id`,
       CONCAT(
          '<h4>',m.`memo_title`,'</h4><br>',
          IF(IFNULL(m.`attachment`,'')='', '', 
          IF(SUBSTRING_INDEX(m.`attachment`, '.', -1) = 'pdf',
          CONCAT('<img alt="',m.`memo_title`,'" src="',REPLACE(CONCAT(SUBSTRING_INDEX(m.`attachment`, '.', 1),'.jpg'), CONCAT("/",modulepath,"/"), CONCAT("/",modulepath,"/dashboard/") ),'" width="100%" class="pdf" />','<br><br>'),
          CONCAT('<img alt="',m.`memo_title`,'" src="',REPLACE(m.`attachment`, CONCAT("/",modulepath,"/"), CONCAT("/",modulepath,"/dashboard/") ),'" width="100%" class="image" />','<br><br>')
          )),      
          m.`memo_body`,
          '<br>'
          
       ), m.email, m.publish, m.publish_from, m.publish_to
    INTO @messagetype, @userid, @displayname, @recordid, @feedcontent, @email, @publish, @publish_from, @publish_to
    FROM `ww_memo` m
    INNER JOIN `ww_memo_type` mt ON mt.`memo_type_id`=m.`memo_type_id`
    LEFT JOIN `users` u ON u.`user_id`=m.`created_by`
    WHERE m.`deleted`=0 AND m.`memo_id` = memoid LIMIT 1;
    
            
    -- [2] populate to activity feeds recipient
    SET @id = 0;
    SELECT `id` INTO @id 
    FROM `ww_system_feeds` 
    WHERE `record_id`=memoid AND `message_type` IN ('Announcement','Company News')
    LIMIT 1;
    
    IF @id = 0 THEN    
        IF @publish = 1 AND (DATE(NOW()) BETWEEN DATE(@publish_from) AND DATE(@publish_to)) THEN
           INSERT INTO `ww_system_feeds`
           (`message_type`, `user_id`, `display_name`, `record_id`, `feed_content`)
           SELECT @messagetype, @userid, @displayname, @recordid, @feedcontent;
           SELECT `id` INTO @id 
           FROM `ww_system_feeds` WHERE `deleted`=0 AND `record_id`=memoid LIMIT 1;
           /* send email to recipients */   
           IF @email = 1 THEN
              CALL `sp_partners_memo_email`(memoid);
           END IF;
        END IF;
    ELSE
       IF @publish = 1 AND (DATE(NOW()) BETWEEN DATE(@publish_from) AND DATE(@publish_to)) THEN
            UPDATE `ww_system_feeds` 
            SET `feed_content`=@feedcontent , `deleted`=0
            WHERE `record_id`=memoid;
       ELSE
            UPDATE `ww_system_feeds` 
            SET `feed_content`=@feedcontent, `deleted`=1 
            WHERE `record_id`=memoid;
       END IF;
    END IF;
    
    
    -- [2] popute to activity feeds recipient
    IF @id > 0 THEN
       /* to clear existing recipients */
       DELETE FROM `ww_system_feeds_recipient` WHERE `id`=@id AND `like`=0;
    
       /* add selected recipients */
       INSERT INTO `ww_system_feeds_recipient` (`id`, `user_id`)
       SELECT sf.`id`, up.`user_id`
       FROM `ww_memo` m
       INNER JOIN `ww_system_feeds` sf ON sf.`record_id`=m.`memo_id`
       INNER JOIN `ww_memo_apply_to` mat ON mat.apply_to_id=m.apply_to_id 
       INNER JOIN `ww_memo_recipient` mr ON mr.memo_id=m.memo_id
       INNER JOIN `users_profile` up ON 
          IF(m.apply_to_id=1, up.user_id=mr.apply_to,
          IF(m.apply_to_id=2, up.company_id=mr.apply_to,
          IF(m.apply_to_id=3, up.division_id=mr.apply_to,
          IF(m.apply_to_id=3, up.department_id=mr.apply_to, 0)))) OR m.created_by=up.user_id
       INNER JOIN `users` u ON u.user_id=up.user_id AND u.`active`=1
       WHERE m.`deleted`=0 AND m.`memo_id`=memoid
       ON DUPLICATE KEY UPDATE `like`=1;
    END IF;
    
       
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_memo_feeds_recipient` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_memo_feeds_recipient` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_memo_feeds_recipient`(IN memoid INT(11))
BEGIN
    
    
    SET @id = 0;
    SELECT `id` INTO @id 
    FROM `ww_system_feeds` WHERE `deleted`=0 AND `record_id`=memoid LIMIT 1;
           
    IF @id > 0 THEN
       /* to clear existing recipients */
       DELETE FROM `ww_system_feeds_recipient` WHERE `id`=@id AND `like`=0;
       
       INSERT INTO `ww_system_feeds_recipient` (`id`, `user_id`, `department_id`)
       SELECT @id id, up.`user_id`, 0 department_id
       FROM 
          `ww_memo` m, 
          `ww_system_feeds` sf, 
          `ww_memo_apply_to` mat, 
          `ww_memo_recipient` mr, 
          `users_profile` up, 
          `users` u
       WHERE 
          m.`deleted`=0 AND sf.`deleted`=0 AND sf.`id`=@id
          AND sf.record_id=m.memo_id -- AND sf.message_type IN ('Announcement','Company News')
          AND mat.apply_to_id=m.apply_to_id 
          AND mr.memo_id=m.memo_id
          AND 
          IF(m.apply_to_id=1, up.user_id=mr.apply_to,
          IF(m.apply_to_id=2, up.company_id=mr.apply_to,
          IF(m.apply_to_id=3, up.division_id=mr.apply_to,
          IF(m.apply_to_id=4, up.department_id=mr.apply_to, 0)))) OR m.created_by=up.user_id
          AND u.user_id=up.user_id AND u.`active`=1
       ON DUPLICATE KEY UPDATE `like`=1;
    END IF;
       
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_memo_process` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_memo_process` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_memo_process`()
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE periodid INT;
    DECLARE datefrom DATE;
    DECLARE dateto DATE;
    DECLARE cutoff DATE; 
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE memo CURSOR FOR
       SELECT `memo_id`, `publish_from`, `publish_to`
       FROM `ww_memo` 
       WHERE `publish`=1 AND 
             `deleted`=0 AND 
             DATE(NOW()) BETWEEN `publish_from` AND `publish_to`;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
 
    -- START TRANSACTION;
        
    OPEN memo;
    
    REPEAT
       FETCH memo INTO recordid, datefrom, dateto;
       
       IF NOT done THEN
           SET rec = rec + 1;
           
           -- execute processing
           CALL `sp_partners_memo_feeds`(recordid);
           
           -- update memo header
           UPDATE `ww_system_feeds`
           SET `modifiedon` = NOW()
           WHERE `message_type` IN ('Annoucement','Company News') AND
                 `deleted`=0 AND
                 `record_id`=recordid;
                 
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE memo;
    
    -- COMMIT;
    
    SELECT rec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movements` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movements` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movements`()
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE actionid INT;
    DECLARE userid INT;
    DECLARE typeid INT;
    DECLARE typecode VARCHAR(128);
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE forms CURSOR FOR       
	SELECT pm.movement_id, pma.action_id, pma.user_id, pma.type_id, pmt.type_code
	FROM ww_partners_movement pm
	INNER JOIN ww_partners_movement_action pma ON pm.movement_id = pma.movement_id
	INNER JOIN ww_partners_movement_type pmt ON pma.type_id =  pmt.type_id
	WHERE 
	      pm.status_id = 11 AND pma.status_id NOT IN (4,5,6) AND 
	      DATE(pma.effectivity_date) <= CURDATE() AND pm.`deleted`=0;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
    -- START TRANSACTION;
        
    OPEN forms;
    
    REPEAT
       FETCH forms INTO recordid, actionid, userid, typeid, typecode;
       
       IF NOT done THEN
	      CASE 
	      WHEN typecode IN ('REGULAR', 'PROMOTE', 'TRANSFER', 'EMPSTATUS', 'ASSIGN', 'DEVELOP') THEN
		       CALL sp_partners_movement_update_tranfer(actionid, userid, typecode);
	      WHEN typecode IN ('ADDALLOWANCE') THEN
		       CALL sp_partners_movement_update_allowance(actionid, userid, typecode);			       
	      WHEN typecode IN ('SALARY', 'WAGE', 'ALIGNMENT') THEN
		       CALL sp_partners_movement_update_compensation(actionid, userid, typecode);
	      WHEN typecode IN ('RESIGN', 'TERMINATE', 'ENDCNTRCT', 'RETIRE') THEN
		       CALL sp_partners_movement_update_moving(actionid, userid, typecode);
	      WHEN typecode IN ('EXT') THEN
		       CALL sp_partners_movement_update_extension(actionid, userid, typecode);
	      else begin end;
          END CASE;
	
	  INSERT INTO `logtable` (`log`) VALUES (CONCAT(recordid));
	  
	  IF (typecode = 'REGULAR') THEN
	     CALL sp_time_form_balance_process_prorated(userid, actionid);
	  END IF;
			
          UPDATE ww_partners_movement_action
          SET status_id = 6  
          WHERE action_id = actionid;
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE forms;
    
    -- COMMIT;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_anniversary` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_anniversary` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_anniversary`()
BEGIN
	    DECLARE done TINYINT(11) DEFAULT 0;
	    DECLARE actionid INT;
	    DECLARE userid INT;
    	    
	    DECLARE forms CURSOR FOR       
		SELECT pma.action_id,pma.user_id
		FROM ww_partners_movement pm
		INNER JOIN ww_partners_movement_action pma ON pm.movement_id = pma.movement_id
		INNER JOIN ww_partners_movement_type pmt ON pma.type_id =  pmt.type_id
		INNER JOIN ww_partners_movement_action_transfer pmat ON pma.action_id =  pmat.action_id
		WHERE 
		      pma.status_id = 6 AND 
		      pmat.field_name = 'end_date' AND STR_TO_DATE(pmat.to_name,'%M %d,%Y') <= CURDATE() AND pm.`deleted`=0;
	    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	 
	    -- START TRANSACTION;
	    OPEN forms;
	    
	    REPEAT
		FETCH forms INTO actionid,userid;
	       
		IF NOT done THEN
			CALL sp_partners_movement_anniv_update(actionid, userid);
		end if;
		
	    UNTIL done END REPEAT;
		    
	    CLOSE forms;
		    
	     -- COMMIT;	    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_anniv_update` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_anniv_update` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_anniv_update`(IN actionid INT(11), IN userid INT(11))
BEGIN
	
	    DECLARE done TINYINT(11) DEFAULT 0;
	    declare fromname VARCHAR(128);
	    DECLARE fromid INT;
	    DECLARE columnname VARCHAR(250);
	    DECLARE tablename VARCHAR(250);
	    DECLARE columnid VARCHAR(250);
            
	    DECLARE forms CURSOR FOR       
		SELECT pmf.field_name AS column_name, 
		       IF(pmf.table_name IS NULL, 'ww_partners_personal', pmf.table_name) AS table_name, 
		       IF(pmf.field_name='employment_status', 'status_id', CONCAT(pmf.field_name,'_id')) AS column_id,  
		       pmat.from_id, pmat.from_name
		FROM ww_partners_movement_action_transfer pmat 
		LEFT JOIN ww_partners_movement_fields pmf ON pmat.field_id = pmf.field_id
		WHERE pmat.action_id = actionid;
	    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	 
	    -- START TRANSACTION;
	    OPEN forms;
	    
	    REPEAT
		FETCH forms INTO columnname, tablename, columnid, fromid, fromname;
	       
		IF NOT done THEN
			IF tablename = 'ww_partners_personal' THEN
				CALL sp_partners_movement_update_partners_personal(actionid, userid, columnname, fromname);	    
			ELSE 		
				CASE 
				WHEN columnname IN ('department', 'division', 'location', 'position', 'reports_to') THEN	   
				   SET @SQL = CONCAT('UPDATE ww_users_profile SET ', columnid, ' = ', fromid, ' WHERE user_id = ',userid);
				   PREPARE stmt FROM @SQL;
				   EXECUTE stmt;
				   DEALLOCATE PREPARE stmt;
				WHEN columnname IN ('role') THEN
				   SET @SQL = CONCAT('UPDATE ww_users SET ', columnid, ' = ', fromid, ' WHERE user_id = ',userid);
				   PREPARE stmt FROM @SQL;
				   EXECUTE stmt;
				   DEALLOCATE PREPARE stmt;
				WHEN columnname IN ('employment_status', 'employment_type') THEN
				   SET @SQL = CONCAT('UPDATE ww_partners SET ', columnid, ' = ', fromid, ' WHERE user_id = ',userid);
				   PREPARE stmt FROM @SQL;
				   EXECUTE stmt;
				   DEALLOCATE PREPARE stmt;
				ELSE BEGIN END;  
				END CASE;
			end if;
		END IF;
				
	     UNTIL done END REPEAT;
		    
	     CLOSE forms;
		    
	      -- COMMIT;	    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_approval` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_approval` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_approval`(IN movementid INT, IN userid INT, IN statusid INT, IN usercomment TEXT)
BEGIN
   /* This will insert records to ww_time_record and executed thru events
      PARAMETER:
         statusid : 1=APPROVED, 0=DECLINE
      LAST Change: 2014-04-11 initial
                   2014-04-11 
   */
   INSERT INTO ww_system_messages
   (msg_code,msg,created_on)
   VALUES
   ('MV',CONCAT(movementid, ',', userid, ',', statusid, ',', usercomment), NOW());
   -- [1]
   UPDATE `ww_partners_movement_approver`
   SET
      `comment`        = usercomment,
      `comment_date`   = NOW(),
      `movement_status_id` = statusid
   WHERE 
      `movement_id` = movementid AND 
      `user_id` = userid AND
      `deleted` = 0
   LIMIT 1;
             
   -- set next approver
   IF statusid = 3 THEN
      SET @seq = (SELECT MAX(sequence) FROM `ww_partners_movement_approver` WHERE `movement_id`=movementid AND `movement_status_id`=3 AND `deleted`=0)+1;
      UPDATE `ww_partners_movement_approver`
      SET `movement_status_id` = 2
      WHERE `movement_id` = movementid AND `sequence` = @seq AND `deleted`=0 AND `condition` = 'By Level';
   END IF;
   IF statusid = 4 THEN
      SET @seq = (SELECT MAX(sequence) FROM `ww_partners_movement_approver` WHERE `movement_id`=movementid AND `movement_status_id`=4 AND `deleted`=0)+1;
      UPDATE `ww_partners_movement_approver`
      SET `movement_status_id` = 4
      WHERE `movement_id` = movementid AND `sequence` = @seq AND `deleted`=0 AND `condition` = 'By Level';
   END IF;
     
   -- [2] Update status by sequence to approver
   -- Change the status of the next approver
   -- 20150722 Only work on BY LEVEL
   
   -- 20150722 inlcude EITHER OF and ALL on approval condition
   -- [2.5] Check condition on approver   
   SET @conditions = '';
   
   SELECT `condition` INTO @conditions 
   FROM `ww_partners_movement_approver`
   WHERE 
      `movement_id` = movementid AND 
      `user_id` = userid AND
      `deleted` = 0
   LIMIT 1;
   
   -- [3] Update status on header
   -- Check if all approver already approved
   IF(@conditions = 'Either Of') THEN
	   UPDATE `ww_partners_movement`
	   SET
	      `status_id` = statusid,
	      `date_approved` = IF(statusid=3, NOW(), `date_approved`),
	      `date_declined` = IF(statusid=4, `date_declined`, NOW())
	   WHERE 
	      `movement_id` = movementid 
	   LIMIT 1;
	   
	   -- [1]
	   UPDATE `ww_partners_movement_approver`
	   SET
	      `comment`        = usercomment,
	      `comment_date`   = NOW(),
	      `movement_status_id` = statusid
	   WHERE 
	      `movement_id` = movementid AND 
	      `deleted` = 0
	   LIMIT 1;
   
   ELSE
	   SET @appCount    = 0;
	   SET @appApproved = 0;
	   SET @appDeclined = 0;
	   
	   SELECT COUNT(*), SUM(IF(`movement_status_id`=3,1,0)), SUM(IF(`movement_status_id`=4,1,0)) 
	   INTO @appCount, @appApproved, @appDeclined
	   FROM `ww_partners_movement_approver`
	   WHERE `movement_id`=movementid;
     	   
	   UPDATE `ww_partners_movement`
	   SET
	      `status_id` = IF(@appCount=@appApproved, 6, IF(@appCount=@appDeclined, 4, IF(@appDeclined > 0, 4, IF(@appApproved > 0, 7, `status_id`)))),
	      `date_approved` = IF(@appCount=@appApproved, NOW(), `date_approved`),
	      `date_declined` = IF(@appDeclined > 0, NOW(), `date_declined`)
	   WHERE 
	      `movement_id` = movementid 
	   LIMIT 1;
   END IF;
      
   
   -- [4] Push email 
   IF (@appDeclined > 0) THEN
      CALL sp_partners_movement_email_status(movementid);
   ELSE  
      CALL sp_partners_movement_email(movementid);
   END IF;
   -- 
   
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_change_pending_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_change_pending_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_change_pending_approvers`(IN user_ids VARCHAR(256), IN class_id INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE cocincidents CURSOR FOR
       SELECT  mv.`movement_id`, `mva`.`user_id` 
       FROM `ww_partners_movement` mv 
       LEFT JOIN `ww_partners_movement_action` mva on mv.movement_id = mva.movement_id
       WHERE `mv`.`deleted`=0
       AND FIND_IN_SET(`mva`.`user_id` , user_ids) AND `mv`.status_id = 2;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
    -- START TRANSACTION;
        
    OPEN cocincidents;
    
    REPEAT
       FETCH cocincidents INTO recordid, userid;
       
       IF NOT done THEN
	   DELETE FROM ww_partners_movement_approver WHERE movement_id = recordid;
           CALL `sp_partners_movement_populate_approvers`(recordid, userid);
           UPDATE ww_partners_movement SET status_id = 2 WHERE movement_id = recordid;      
	   SET rec = rec + 1;
	   
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE cocincidents;
    
    -- COMMIT;
    
    SELECT rec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_email` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_email` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_email`(IN movementid INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    DECLARE movement_id INT;
    DECLARE email VARCHAR(128);
    DECLARE approver VARCHAR(32);
    DECLARE classid INT;
    DECLARE ownerid INT;
    
    DECLARE approvers CURSOR FOR
       SELECT pma.`id`, pma.`user_id`, u.`email`, up.`firstname`, pma.`movement_id`, pmac.`user_id` ownid
       FROM `ww_partners_movement_approver` pma
       INNER JOIN `users` u ON u.user_id=pma.user_id
       INNER JOIN `users_profile` up ON up.user_id=pma.user_id
       INNER JOIN `ww_partners_movement` pm ON pm.movement_id = pma.movement_id
       INNER JOIN `ww_partners_movement_action` pmac ON pm.movement_id = pmac.movement_id
       WHERE pma.`deleted`=0 AND pma.`movement_status_id`=2 AND pma.`movement_id`=movementid AND IFNULL(u.`email`,'')<>'';
    
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    
    OPEN approvers;
    
    REPEAT
       FETCH approvers INTO recordid, userid, email, approver, movement_id, ownerid;
       
       IF NOT done THEN
           SET rec = rec + 1;      
        --   IF time_get_approver_with_email(classid,ownerid,userid) = 1 THEN
              -- START
           
           -- [1] retrieve the application
           SET @formid = 0;
           SET @formcode = '';
           SET @formname = '';
           SET @displayname = '';
           SET @createdon = '';
           SET @userid = 0;
       
           SELECT `user_id`, `pm`.`movement_id`, 'MV', 'Movement', `display_name`,
                  DATE_FORMAT(`pm`.`created_on`, '%M-%e %l%p, %W')
           INTO @userid, @movementid, @formcode, @formname, @displayname, @createdon
           FROM `ww_partners_movement` pm
           INNER JOIN `ww_partners_movement_action` pmac ON pm.movement_id = pmac.movement_id
           WHERE pm.`movement_id`=movement_id LIMIT 1;
                     
           -- [3] retrieve the email template
           SET @emailto = email;
           SET @emailsubject = '';
           SET @emailbody = '';
       
           SELECT `subject`,`body` INTO @emailsubject, @emailbody
           FROM `ww_system_template`
           WHERE `code` = 'movement' LIMIT 1;
           
           IF @emailsubject <> '' THEN
              -- [2] replace variables
              SET @emailbody = REPLACE(@emailbody, '{{alias}}', approver);
              SET @emailbody = REPLACE(@emailbody, '{{fullname}}', @displayname);
              SET @emailbody = REPLACE(@emailbody, '{{form}}', @formname);
              SET @emailbody = REPLACE(@emailbody, '{{createdon}}', @createdon);
              
              -- {{link}}
              SET @url = get_config('System','URL');
	          IF RIGHT(TRIM(@url),1) <> '/' THEN
	             SET @url = CONCAT(TRIM(@url),'/');
	          END IF;
	   
              -- {{header/email logo}}
              SET @logo = get_config('System','print_logo'); 
	          IF TRIM(@logo) <> '' THEN
	             SET @logo = CONCAT(@url,@logo);
	          ELSE
	             SET @logo = CONCAT(@url,get_config('System','logo'));
	          END IF;
	   	         
              SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='movement_manage' LIMIT 1);
              SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
              SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
              SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
              SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
              SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
               
              -- [3] insert to table
              IF TRIM(@emailbody) <> '' THEN
                 INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
                 SELECT @emailto, @emailsubject, @emailbody;
              END IF;
              
              -- SELECT @emailto, @emailsubject, @emailbody;
              
             -- END IF; -- time_get_approver_with_email(classid,ownerid,userid) = 1
              
           END IF;
        END IF;
        
    UNTIL done END REPEAT;
    
    CLOSE approvers;
    
    -- SELECT rec;
    
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_email_hr_approval` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_email_hr_approval` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_email_hr_approval`(IN movementid INT(11), IN recipientid INT(11),IN mvstatus VARCHAR(50))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE approver VARCHAR(32);
    DECLARE comments TEXT;    
        
       -- [1] retrieve the application
       SET @userid = 0;
       SET @email = '';
       SET @movementstatus = '';
       SET @movementid = 0;
       SET @formcode = '';
       SET @formname = '';
       SET @displayname = '';
       SET @createdon = '';
       
       SELECT pmac.`user_id`, u.`email`, pms.`status`, 
              `pm`.`movement_id`, 'MV', 'Movement', `firstname`,DATE_FORMAT(pm.`created_on`, '%M-%e %l%p, %W')
       INTO @userid, @email, @movementstatus, @movementid, @formcode, @formname, @displayname, @createdon
       FROM `ww_partners_movement` pm
       JOIN `ww_partners_movement_action` pmac ON pmac.`movement_id` = pm.`movement_id`
       JOIN `users` u ON u.`user_id` = pm.`created_by`
       JOIN `users_profile` up ON up.`user_id` = pm.`created_by`
       LEFT JOIN `ww_partners_movement_status` pms ON pms.`status_id` = pm.`status_id` AND pms.`deleted` = 0
       WHERE `pm`.`movement_id`=movementid LIMIT 1;
       
       -- [1.5] retrieve the recipient email and firstname 
       SELECT u.email, up.firstname INTO @email, @recipientAlias
       FROM `ww_users` u 
       LEFT JOIN ww_users_profile up ON u.user_id = up.user_id
       WHERE u.user_id= recipientid LIMIT 1;
       
       -- [3] retrieve the email template
       SET @emailto = @email;
       SET @emailsubject = '';
       SET @emailbody = '';
       
       SELECT `subject`,`body` INTO @emailsubject, @emailbody
       FROM `ww_system_template`
       WHERE `code` = 'movement-hr-approval' LIMIT 1;
       
       
       IF @emailsubject <> '' THEN
           -- [2] replace variables           
           SET @emailbody = REPLACE(@emailbody, '{{fullname}}', @displayname);
           SET @emailbody = REPLACE(@emailbody, '{{alias}}', @recipientAlias);
           SET @emailbody = REPLACE(@emailbody, '{{adstatus}}', mvstatus);
           SET @emailbody = REPLACE(@emailbody, '{{status}}', @movementstatus);
           SET @emailbody = REPLACE(@emailbody, '{{comments}}', @comment_body);
           SET @emailbody = REPLACE(@emailbody, '{{form}}', @formname);
           SET @emailbody = REPLACE(@emailbody, '{{createdon}}', @createdon);         
          
           -- {{link}}
           SET @url = get_config('System','URL');
	       IF RIGHT(TRIM(@url),1) <> '/' THEN
	          SET @url = CONCAT(TRIM(@url),'/');
	       END IF;
	       
           -- {{header/email logo}}
           SET @logo = get_config('System','print_logo'); 
	       IF TRIM(@logo) <> '' THEN
	          SET @logo = CONCAT(@url,@logo);
	       ELSE
	          SET @logo = CONCAT(@url,get_config('System','logo'));
	       END IF;
	         
           SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='movement_admin' LIMIT 1);
           SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
           SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
           SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
           SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
           SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
                      
           -- [3] insert to table
           INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
           SELECT @emailto, @emailsubject, @emailbody;
        
       END IF; -- @emailsubject <> '' THEN
       
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_email_hr_approved` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_email_hr_approved` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_email_hr_approved`(IN movementid INT(11),IN mvstatus VARCHAR(50))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    DECLARE movement_id INT;
    DECLARE email VARCHAR(128);
    DECLARE approver VARCHAR(32);
    DECLARE classid INT;
    DECLARE ownerid INT;
    
    DECLARE approvers CURSOR FOR
       SELECT pma.`id`, pma.`user_id`, u.`email`, up.`firstname`, pma.`movement_id`, pmac.`user_id` ownid
       FROM `ww_partners_movement_approver` pma
       INNER JOIN `users` u ON u.user_id=pma.user_id
       INNER JOIN `users_profile` up ON up.user_id=pma.user_id
       INNER JOIN `ww_partners_movement` pm ON pm.movement_id = pma.movement_id
       INNER JOIN `ww_partners_movement_action` pmac ON pm.movement_id = pmac.movement_id
       WHERE pma.`deleted`=0 AND pma.`movement_status_id`=3 AND pma.`movement_id`=movementid AND IFNULL(u.`email`,'')<>'' GROUP BY `pma`.`user_id`;
    
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    
    OPEN approvers;
    
    REPEAT
       FETCH approvers INTO recordid, userid, email, approver, movement_id, ownerid;
       
       IF NOT done THEN
           SET rec = rec + 1;      
           
           -- [1] retrieve the application
           SET @formid = 0;
           SET @formcode = '';
           SET @formname = '';
           SET @displayname = '';
           SET @createdon = '';
           SET @userid = 0;
       
           SELECT `user_id`, `pm`.`movement_id`, 'MV', 'Movement', `display_name`,
                  DATE_FORMAT(`pm`.`created_on`, '%M-%e %l%p, %W')
           INTO @userid, @movementid, @formcode, @formname, @displayname, @createdon
           FROM `ww_partners_movement` pm
           INNER JOIN `ww_partners_movement_action` pmac ON pm.movement_id = pmac.movement_id
           WHERE pm.`movement_id`=movement_id LIMIT 1;
                     
           -- [3] retrieve the email template
           SET @emailto = email;
           SET @emailsubject = '';
           SET @emailbody = '';
       
           SELECT `subject`,`body` INTO @emailsubject, @emailbody
           FROM `ww_system_template`
           WHERE `code` = 'movement-hr-approved' LIMIT 1;
           
           IF @emailsubject <> '' THEN
              -- [2] replace variables
              SET @emailbody = REPLACE(@emailbody, '{{alias}}', approver);
              SET @emailbody = REPLACE(@emailbody, '{{fullname}}', @displayname);
              SET @emailbody = REPLACE(@emailbody, '{{form}}', @formname);
              SET @emailbody = REPLACE(@emailbody, '{{createdon}}', @createdon);
              SET @emailbody = REPLACE(@emailbody, '{{status}}', mvstatus);
              
              -- {{link}}
              SET @url = get_config('System','URL');
	          IF RIGHT(TRIM(@url),1) <> '/' THEN
	             SET @url = CONCAT(TRIM(@url),'/');
	          END IF;
	   
              -- {{header/email logo}}
              SET @logo = get_config('System','print_logo'); 
	          IF TRIM(@logo) <> '' THEN
	             SET @logo = CONCAT(@url,@logo);
	          ELSE
	             SET @logo = CONCAT(@url,get_config('System','logo'));
	          END IF;
	   	         
              SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='movement_manage' LIMIT 1);
              SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
              SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
              SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
              SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
              SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
               
              -- [3] insert to table
              IF TRIM(@emailbody) <> '' THEN
                 INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
                 SELECT @emailto, @emailsubject, @emailbody;
              END IF;
              
           END IF;
        END IF;
        
    UNTIL done END REPEAT;
    
    CLOSE approvers;
    
	-- sending email to the creator
        SELECT pmac.`user_id`, u.`email`, pms.`status`, 
              `pm`.`movement_id`, 'MV', 'Movement', `firstname`,DATE_FORMAT(`pm`.`created_on`, '%M-%e %l%p, %W')
        INTO @userid, @email, @movementstatus, @movementid, @formcode, @formname, @displayname, @createdon
        FROM `ww_partners_movement` pm
        JOIN `ww_partners_movement_action` pmac ON pmac.`movement_id` = pm.`movement_id`
        JOIN `users` u ON u.`user_id` = pmac.`user_id`
        JOIN `users_profile` up ON up.`user_id` = pmac.`user_id`
        LEFT JOIN `ww_partners_movement_status` pms ON pms.`status_id` = pm.`status_id` AND pms.`deleted` = 0
        WHERE `pm`.`movement_id`=movementid LIMIT 1;
        
	-- [3] retrieve the email template
	SET @emailto = @email;
	SET @emailsubject = '';
	SET @emailbody = '';
	SELECT `subject`,`body` INTO @emailsubject, @emailbody
	FROM `ww_system_template`
	WHERE `code` = 'movement-hr-approved' LIMIT 1;
	
	IF @emailsubject <> '' AND @emailto <> '' THEN
	   -- [2] replace variables
	   SET @emailbody = REPLACE(@emailbody, '{{alias}}', @displayname);
	   SET @emailbody = REPLACE(@emailbody, '{{status}}', mvstatus);
	   SET @emailbody = REPLACE(@emailbody, '{{form}}', @formname);
	   SET @emailbody = REPLACE(@emailbody, '{{fullname}}', @displayname);
	      
	   -- {{link}}
	   SET @url = get_config('System','URL');
	       IF RIGHT(TRIM(@url),1) <> '/' THEN
		  SET @url = CONCAT(TRIM(@url),'/');
	       END IF;
	       
	   -- {{header/email logo}}
	   SET @logo = get_config('System','print_logo'); 
	       IF TRIM(@logo) <> '' THEN
		  SET @logo = CONCAT(@url,@logo);
	       ELSE
		  SET @logo = CONCAT(@url,get_config('System','logo'));
	       END IF;
		 
	   SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='movement' LIMIT 1);
	   SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
	   SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
	   SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
	   SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
	   SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
		      
	   -- [3] insert to table
	   INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
	   SELECT @emailto, @emailsubject, @emailbody;
	END IF; -- @emailsubject <> '' THEN
           
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_email_status` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_email_status` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_email_status`(IN movementid INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE approver VARCHAR(32);
    DECLARE comments TEXT;
    DECLARE approvers CURSOR FOR
       SELECT up.`firstname`, pma.`comment`
       FROM `ww_partners_movement_approver` pma
       JOIN `users_profile` up ON up.user_id=pma.user_id
       WHERE 
             pma.`deleted` = 0 AND 
             pma.`movement_status_id` IN (4,6,7,8) AND 
             pma.`movement_id` = movementid;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    SET @comment_body = '';
    
    OPEN approvers;
    REPEAT
       FETCH approvers INTO approver, comments;
       IF NOT done THEN
           SET rec = rec + 1;
           SET @comment_body = CONCAT(@comment_body,'<strong>',approver,':</strong><br>',IFNULL(comments,'-'),'<br>');
        END IF;
    UNTIL done END REPEAT;
    CLOSE approvers;
    
    
    IF rec > 0 THEN
    
       -- [1] retrieve the application
       SET @userid = 0;
       SET @email = '';
       SET @movementstatus = '';
       SET @movementid = 0;
       SET @formcode = '';
       SET @formname = '';
       SET @displayname = '';
       SET @createdon = '';
       
       SELECT pmac.`user_id`, u.`email`, pms.`status`, 
              `pm`.`movement_id`, 'MV', 'Movement', `firstname`,DATE_FORMAT(`pm`.`created_on`, '%M-%e %l%p, %W')
       INTO @userid, @email, @movementstatus, @movementid, @formcode, @formname, @displayname, @createdon
       FROM `ww_partners_movement` pm
       JOIN `ww_partners_movement_action` pmac ON pmac.`movement_id` = pm.`movement_id`
       JOIN `users` u ON u.`user_id` = pmac.`user_id`
       JOIN `users_profile` up ON up.`user_id` = pmac.`user_id`
       LEFT JOIN `ww_partners_movement_status` pms ON pms.`status_id` = pm.`status_id` AND pms.`deleted` = 0
       WHERE `pm`.`movement_id`=movementid LIMIT 1;
       
       -- [3] retrieve the email template
       SET @emailto = @email;
       SET @emailsubject = '';
       SET @emailbody = '';
       
       SELECT `subject`,`body` INTO @emailsubject, @emailbody
       FROM `ww_system_template`
       WHERE `code` = 'movement-status' LIMIT 1;
       
       
       IF @emailsubject <> '' AND @emailto <> '' THEN
           -- [2] replace variables
           SET @emailbody = REPLACE(@emailbody, '{{alias}}', @displayname);
           SET @emailbody = REPLACE(@emailbody, '{{status}}', @movementstatus);
           SET @emailbody = REPLACE(@emailbody, '{{comments}}', @comment_body);
           SET @emailbody = REPLACE(@emailbody, '{{form}}', @formname);
              
           -- link
           SET @url = get_config('System','URL');
	       IF RIGHT(TRIM(@url),1) <> '/' THEN
	          SET @url = CONCAT(TRIM(@url),'/');
	       END IF;
	       
           -- {{header/email logo}}
           SET @logo = get_config('System','print_logo'); 
	       IF TRIM(@logo) <> '' THEN
	          SET @logo = CONCAT(@url,@logo);
	       ELSE
	          SET @logo = CONCAT(@url,get_config('System','logo'));
	       END IF;
	         
           SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='movement' LIMIT 1);
           SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
           SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
           SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
           SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
           SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
                      
           -- [3] insert to table
           INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
           SELECT @emailto, @emailsubject, @emailbody;
        
       END IF; -- @emailsubject <> '' THEN
       
    END IF; -- rec > 0 THEN
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_get_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_get_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_get_approvers`(IN formcode VARCHAR(16), IN userid INT(11))
BEGIN
          
    -- 
    -- [0] Override from USER
    -- 
    SET @rec = 0;
    SET @class = '';
    SET @users = '';
    
    SELECT c.`class_code`, b.`user_id`, COUNT(a.`id`) INTO @class, @users, @rec
    FROM `ww_approver_class_user` a
    JOIN `users_profile` b ON b.user_id = a.`user_id`
    JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
    WHERE a.`deleted`=0 AND b.`user_id`=userid AND c.`class_code`=formcode
          AND a.department_id = b.department_id AND a.company_id = b.company_id AND a.user_id = b.user_id;
    
    IF @rec > 0 THEN
       SELECT  `approver_id`, `condition`, `sequence`, c.lastname, c.firstname, `position`
       FROM `ww_approver_class_user` a
       JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
       JOIN `users_profile` c ON a.`approver_id`=c.`user_id` 
       LEFT JOIN `ww_users_position` d ON c.`position_id`=d.`position_id` 
       JOIN `users_profile` e ON e.position_id = a.`position_id` AND e.`user_id`=userid
       WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`user_id`=@users AND
             a.department_id = e.department_id AND a.company_id = e.company_id AND a.user_id = e.user_id;
    ELSE    
       
       -- 
       -- [1] Override from POSITION
       -- 
       SET @rec = 0;
       SET @class = '';
       SET @positions = '';
    
       SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`) INTO @class, @positions, @rec
       FROM `ww_approver_class_position` a
       JOIN `users_profile` b ON b.position_id = a.`position_id`
       JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
       WHERE a.`deleted`=0 AND b.`user_id`=userid AND  c.`class_code`=formcode AND 
             a.department_id = b.department_id AND a.company_id = b.company_id;
       
       IF @rec > 0 THEN
          SELECT  `approver_id`, `condition`, `sequence`, c.lastname, c.firstname, `position`
          FROM `ww_approver_class_position` a
          JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
          JOIN `users_profile` c ON a.`approver_id`=c.`user_id` 
          LEFT JOIN `ww_users_position` d ON c.`position_id`=d.`position_id` 
          JOIN `users_profile` e ON e.position_id = a.`position_id` AND e.`user_id`=userid
          WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`position_id`=@positions AND 
                a.department_id = e.department_id AND a.company_id = e.company_id;
       ELSE     
	    
          -- 
          -- [2] Override from DEPARTMENT
          -- 
          SET @rec = 0;
          SET @class = '';
          SET @department = '';
          
          SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`) INTO @class, @department, @rec
          FROM `ww_approver_class_department` a
          JOIN `users_profile` b ON b.department_id = a.`department_id`
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
	  WHERE a.`deleted`=0 AND b.`user_id`=userid AND  c.`class_code`=formcode AND 
	        a.company_id = b.company_id;
  
          IF @rec > 0 THEN
	     SELECT  `approver_id`, `condition`, `sequence`, c.lastname, c.firstname, `position`
	     FROM `ww_approver_class_department` a
	     JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
	     JOIN `users_profile` c ON a.`approver_id`=c.`user_id` 
	     LEFT JOIN `ww_users_position` d ON c.`position_id`=d.`position_id` 
	     JOIN `users_profile` e ON e.department_id = a.`department_id` AND e.`user_id`=userid
	     WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`department_id`=@department AND a.company_id = e.company_id;
          ELSE
             
	     -- 
	     -- [3] Override from COMPANY
	     -- 
	     SET @rec = 0;
	     SET @class = '';
	     SET @company = '';
               
	     SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`) INTO @class, @company, @rec
	     FROM `ww_approver_class_company` a
	     JOIN `users_profile` b ON b.company_id = a.`company_id`
	     JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
	     WHERE b.`user_id`=userid AND  c.`class_code`=formcode AND a.`deleted`=0;
  
	    IF @rec > 0 THEN
	       SELECT  `approver_id`, `condition`, `sequence`, c.lastname, c.firstname, `position`
	       FROM `ww_approver_class_company` a
	       JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
	       JOIN `users_profile` c ON a.`approver_id`=c.`user_id` 
	       LEFT JOIN `ww_users_position` d ON c.`position_id`=d.`position_id` 
	       JOIN `users_profile` e ON e.company_id = a.`company_id` AND e.`user_id`=userid
	       WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`company_id`=@company;
	    END IF; -- IF COMPANY
            
         END IF; -- IF DEPARTMENT
         
      END IF; -- IF POSITION  
      
   END IF; -- IF USER  
   
   END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_populate_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_populate_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_populate_approvers`(IN movementid INT(11), IN userid INT(11))
BEGIN
	  -- 
          -- [0] Override from USER
          -- 
          
          SET @rec = 0;
          SET @class = '';
          
	  SELECT c.`class_code`, COUNT(a.`id`) INTO @class, @rec
          FROM `ww_approver_class_user` a
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE a.`user_id`=userid AND c.`class_code`='MV' AND a.deleted = 0;
          
          IF @rec > 0 THEN
             INSERT INTO `ww_partners_movement_approver`
             (`movement_id`, `user_id`, `condition`, `sequence`, `movement_status_id`)
             SELECT movementid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,1))
             FROM `ww_approver_class_user` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`approver_id`<>userid
             AND a.user_id = userid
             GROUP BY 2
             ON DUPLICATE KEY UPDATE `deleted`=0;             
          ELSE           
          
          -- 
          -- [1] Override from POSITION
          -- 
          
          SET @rec = 0;
          SET @class = '';
          SET @positions = '';
          
          SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`) INTO @class, @positions, @rec
          FROM `ww_approver_class_position` a
          JOIN `users_profile` b ON b.position_id = a.`position_id` AND b.`company_id`=a.`company_id` AND b.department_id=a.department_id
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE b.`user_id`=userid AND c.`class_code`= 'IR';
          
          IF @rec > 0 THEN
             INSERT INTO `ww_partners_movement_approver`
             (`movement_id`, `user_id`, `condition`, `sequence`, `movement_status_id`)
             SELECT movementid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,1))
             FROM `ww_approver_class_position` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             JOIN `users_profile` u ON u.company_id=a.company_id AND u.department_id=a.department_id AND u.user_id=userid
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`position_id`=@positions AND a.`approver_id`<>userid
             GROUP BY 2
             ON DUPLICATE KEY UPDATE `deleted`=0;             
          ELSE     
                    
             -- [2] Override from DEPARTMENT
             -- 
             SET @rec = 0;
             SET @class = '';
             SET @department = '';
          
             SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`) INTO @class, @department, @rec
             FROM `ww_approver_class_department` a
             JOIN `users_profile` b ON b.department_id = a.`department_id` AND b.`company_id`=a.`company_id`
             JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
	     WHERE b.`user_id`=userid AND c.`class_code`= 'IR'
             AND a.`approver_id`<>userid;
          
             IF @rec > 0 THEN
                INSERT INTO `ww_partners_movement_approver`
                (`movement_id`, `user_id`, `condition`, `sequence`, `movement_status_id`)
                SELECT movementid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,1))
                FROM `ww_approver_class_department` a
                JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
                WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`department_id`=@department AND a.`approver_id`<>userid
                GROUP BY 2
                ON DUPLICATE KEY UPDATE `movement_status_id`=VALUES(`movement_status_id`), `sequence`=VALUES(`sequence`), `deleted`=0;             
             ELSE
                --   
                -- [3] Override from COMPANY
                -- 
                SET @rec = 0;
                SET @class = '';
                SET @company = '';
          
                SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`) INTO @class, @company, @rec
                FROM `ww_approver_class_company` a
                JOIN `users_profile` b ON b.company_id = a.`company_id`
                JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
	        WHERE b.`user_id`=userid AND c.`class_code`= 'IR'
                AND a.`approver_id`<>userid;
          
                IF @rec > 0 THEN
                   INSERT INTO `ww_partners_movement_approver`
                   (`movement_id`, `user_id`, `condition`, `sequence`, `movement_status_id`)
                   SELECT movementid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,1))
                   FROM `ww_approver_class_company` a
                   JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                   WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`company_id`=@company AND a.`approver_id`<>userid
                   GROUP BY 2
                   ON DUPLICATE KEY UPDATE `deleted`=0;             
                END IF; -- IF COMPANY
             
             END IF; -- IF DEPARTMENT
          END IF;   
          END IF; -- IF POSITION  
           
          IF @rec > 0 THEN
	     -- email approver/s application content
	     CALL sp_partners_movement_email(movementid);
          END IF;                   
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_update_allowance` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_update_allowance` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_update_allowance`(IN actionid INT(11), IN userid INT(11), IN typecode VARCHAR(128))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
        
    DECLARE transaction_id INT(11) DEFAULT 0;
    DECLARE from_allowance VARCHAR(250);
    DECLARE to_allowance VARCHAR(250);
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE forms CURSOR FOR      
	SELECT maaa.transaction_id, 
	       maaa.from_allowance, maaa.to_allowance
	FROM ww_partners_movement_action_additional_allowance maaa 
	WHERE maaa.action_id = actionid;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	    
    -- START TRANSACTION;
	
    OPEN forms;
    
    REPEAT
       FETCH forms INTO transaction_id, from_allowance, to_allowance;
       
	IF NOT done THEN
	    SELECT recurring_id  INTO @recuring_id
	    FROM `ww_payroll_entry_recurring` er WHERE er.`transaction_id`=transaction_id  AND er.`deleted`=0 ORDER BY created_on DESC LIMIT 1;
	    
	    SELECT COUNT(ere.`recurring_id`) INTO @rec
	    FROM `ww_payroll_entry_recurring_employee` ere
	    LEFT JOIN `ww_payroll_entry_recurring` er ON ere.recurring_id = er.recurring_id
	    WHERE ere.`deleted`=0 AND ere.`employee_id`=userid AND er.`transaction_id`=transaction_id;
	
	    IF @rec = 0 THEN
		INSERT INTO `ww_payroll_entry_recurring_employee` (`recurring_id`,`employee_id`,`quantity`,`amount`) 
		VALUES (@recuring_id, userid, AES_ENCRYPT( 1, encryption_key() ), AES_ENCRYPT( to_allowance, encryption_key()));
		
		INSERT INTO `logtable_movement` (`action_id`,`recurring_id`,`employee_id`,`quantity`,`amount`) VALUES (actionid,@recuring_id, userid, AES_ENCRYPT( 1, encryption_key() ), AES_ENCRYPT( to_allowance, encryption_key()));
	    ELSE
		UPDATE `ww_payroll_entry_recurring_employee`
		SET quantity = AES_ENCRYPT( 1, encryption_key() ), amount = AES_ENCRYPT( to_allowance, encryption_key() )
		WHERE employee_id = userid AND recurring_id = @recuring_id;	    
	    END IF;
	END IF;
		
	UNTIL done END REPEAT;
	    
	CLOSE forms;
	    
	-- COMMIT;
		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_update_compensation` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_update_compensation` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_update_compensation`(IN actionid INT(11), IN userid INT(11), IN typecode VARCHAR(128))
BEGIN
    DECLARE tosalary INT(11) DEFAULT 0;
	
	SELECT to_salary INTO tosalary 
	FROM ww_partners_movement_action_compensation 
	WHERE action_id = actionid;
	    
	UPDATE ww_payroll_partners
	SET salary = AES_ENCRYPT( tosalary, encryption_key() )
	WHERE user_id = userid;
	    	   
       
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_update_extension` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_update_extension` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_update_extension`(IN actionid INT(11), IN userid INT(11), IN typecode VARCHAR(128))
BEGIN
    DECLARE partnerid INT(11) DEFAULT 0;
    DECLARE enddate DATE;
    DECLARE keyid INT(11) DEFAULT 0;
    DECLARE keylabel VARCHAR(250);
	    
    SELECT partner_id INTO partnerid 
    FROM ww_users_profile 
    WHERE user_id = userid;
	    
    SELECT DATE_FORMAT(end_date, "%M %d, %Y") INTO enddate 
    FROM ww_partners_movement_action_extension 
    WHERE action_id = actionid;
	    
    SELECT key_id, key_label INTO keyid, keylabel 
    FROM ww_partners_key 
    WHERE `key_code` = 'last_probationary';
	    
    DELETE FROM ww_partners_personal 
    WHERE `key` = 'last_probationary' 
    AND partner_id = partnerid;	   
	    
    INSERT INTO ww_partners_personal (partner_id, key_id, `key`, sequence, key_name, key_value, created_on, created_by)
    VALUES (partnerid, keyid, 'last_probationary', 1, keylabel, enddate, NOW(), 1);	   
		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_update_moving` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_update_moving` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_update_moving`(IN actionid INT(11), IN userid INT(11), IN typecode VARCHAR(128))
BEGIN
    DECLARE blocked TINYINT(1) DEFAULT 0;
    DECLARE enddate DATE;
    DECLARE fromstatus_id TINYINT(1);
    DECLARE fromstatus_name VARCHAR(32);
    DECLARE tostatus_id TINYINT(1);
    DECLARE tostatus_name VARCHAR(32);
    DECLARE movementid INT(11);
	
    SELECT blacklisted, end_date, movement_id INTO blocked, enddate, movementid
    FROM ww_partners_movement_action_moving 
    WHERE action_id = actionid;
	    
    UPDATE ww_partners
    SET resigned_date = enddate, blacklisted = blocked
    WHERE user_id = userid;
    
    SELECT status_id, `status` INTO fromstatus_id, fromstatus_name
    FROM ww_partners 
    WHERE user_id = userid;
	 
    CASE typecode	    
       WHEN 'RESIGN' THEN	    
          UPDATE ww_partners SET status_id = 8 WHERE user_id = userid;
       WHEN 'RETIRE' THEN	    
          UPDATE ww_partners SET status_id = 9 WHERE user_id = userid;
       WHEN 'ENDCNTRCT' THEN	    
          UPDATE ww_partners SET status_id = 10 WHERE user_id = userid;
       WHEN 'TERMINATE' THEN	    
          UPDATE ww_partners SET status_id = 11 WHERE user_id = userid;
    else begin end;
    END CASE;
	    
    UPDATE ww_users
    SET active = 0
    WHERE user_id = userid;
    
    SELECT status_id, `status` INTO tostatus_id, tostatus_name
    FROM ww_partners 
    WHERE user_id = userid;
    
    INSERT INTO ww_partners_movement_action_transfer (action_id, movement_id, field_id, field_name, from_id, to_id, from_name, to_name)
    VALUES (actionid, movementid, 9, 'employment_status', fromstatus_id, tostatus_id, fromstatus_name, tostatus_name);
    
    UPDATE ww_recruitment rec, ww_users_profile uprof
    SET rec.blacklisted = blocked
    WHERE uprof.user_id = userid AND rec.recruit_id = uprof.recruit_id;
       
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_update_partners_personal` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_update_partners_personal` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_update_partners_personal`(IN actionid INT(11), IN userid INT(11), IN columnname VARCHAR(128), IN toname VARCHAR(128))
BEGIN
    DECLARE partnerid INT(11) DEFAULT 0;
    DECLARE keyid INT(11) DEFAULT 0;
    DECLARE keylabel VARCHAR(250);
    
    SELECT partner_id INTO partnerid 
    FROM ww_users_profile 
    WHERE user_id = userid;
    
    SELECT key_id, key_label INTO keyid, keylabel 
    FROM ww_partners_key 
    WHERE `key_code` = columnname;
	    
    DELETE FROM ww_partners_personal 
    WHERE `key` = columnname AND partner_id = partnerid;
    	   
    INSERT INTO ww_partners_personal (partner_id, key_id, `key`, sequence, key_name, key_value, created_on, created_by)
    VALUES (partnerid, keyid, columnname, 1, keylabel, toname, NOW(), 1);	   
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_movement_update_tranfer` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_movement_update_tranfer` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_movement_update_tranfer`(IN actionid INT(11), IN userid INT(11), IN typecode VARCHAR(128))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
        
    DECLARE columnname VARCHAR(250);
    DECLARE tablename VARCHAR(250);
    DECLARE columnid VARCHAR(250);
    DECLARE toid INT;
    DECLARE toname VARCHAR(250);
    DECLARE partnerid INT(11) DEFAULT 0;
    DECLARE keyid INT(11) DEFAULT 0;
    DECLARE keylabel VARCHAR(250);
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE forms CURSOR FOR      
	SELECT pmf.field_name AS column_name, 
	       IF(pmf.table_name IS NULL, 'ww_partners_personal', pmf.table_name) AS table_name,
	       case
		  when pmf.field_name = 'employment_status' then 'status_id'
		  WHEN pmf.field_name = 'job_level' THEN 'job_grade_id'
		  else CONCAT(pmf.field_name,'_id')
	       end as column_id,
	       -- IF(pmf.field_name='employment_status', 'status_id', CONCAT(pmf.field_name,'_id')) AS column_id,  
	       pmat.to_id, pmat.to_name
	FROM ww_partners_movement_action_transfer pmat 
	LEFT JOIN ww_partners_movement_fields pmf ON pmat.field_id = pmf.field_id
	WHERE pmat.action_id = actionid;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	    
    -- START TRANSACTION;
	
    OPEN forms;
    
    REPEAT
       FETCH forms INTO columnname, tablename, columnid, toid, toname;
       
       IF NOT done THEN
	       IF tablename = 'ww_partners_personal' THEN
              CALL sp_partners_movement_update_partners_personal(actionid, userid, columnname, toname);	    
	       ELSE 
		      CASE 
		      WHEN columnname IN ('department', 'division', 'location', 'position', 'reports_to') THEN	   
		           SET @SQL = CONCAT('UPDATE ww_users_profile SET ', columnid, ' = ', toid, ' WHERE user_id = ',userid);
		           PREPARE stmt FROM @SQL;
		           EXECUTE stmt;
		           DEALLOCATE PREPARE stmt;
		      WHEN columnname IN ('role') THEN
		           SET @SQL = CONCAT('UPDATE ww_users SET ', columnid, ' = ', toid, ' WHERE user_id = ',userid);
		           PREPARE stmt FROM @SQL;
		           EXECUTE stmt;
		           DEALLOCATE PREPARE stmt;
		      WHEN columnname IN ('employment_status', 'employment_type', 'job_level') THEN
		           SET @SQL = CONCAT('UPDATE ww_partners SET ', columnid, ' = ', toid, ' WHERE user_id = ',userid);
		           PREPARE stmt FROM @SQL;
		           EXECUTE stmt;
		           DEALLOCATE PREPARE stmt;
		      else begin end;
		      END CASE;
	       END IF;
	    END IF;
	       
	UNTIL done END REPEAT;
	    
	CLOSE forms;
	    
	-- COMMIT;
		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_personal_change_pending_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_personal_change_pending_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_personal_change_pending_approvers`(IN partner_ids VARCHAR(256), IN class_id INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    DECLARE partnerid INT;
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE personalRequests CURSOR FOR
       SELECT  tr.`personal_id`, tr.`partner_id` FROM `ww_partners_personal_request` tr WHERE `deleted`=0
       AND FIND_IN_SET(partner_id, partner_ids) AND `status` IN (2);
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
    -- START TRANSACTION;
        
    OPEN personalRequests;
    
    REPEAT
       FETCH personalRequests INTO recordid, partnerid;
              
          SELECT user_id INTO userid
           FROM `ww_users_profile` 
           WHERE partner_id = partnerid
           ;
          
       IF NOT done THEN
	   DELETE from ww_partners_personal_approver WHERE personal_request_id = recordid;
           CALL `sp_partners_personal_populate_approvers`(recordid, userid);
           UPDATE ww_partners_personal_request SET `status` = 2 WHERE personal_id = recordid;      
	   SET rec = rec + 1;
	   
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE personalRequests;
    
    -- COMMIT;
    
    SELECT rec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_personal_populate_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_personal_populate_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_personal_populate_approvers`(IN personalrequestid INT(11), IN userid INT(11))
BEGIN
          -- 
          -- [1] Override from POSITION
          -- 
          SET @rec = 0;
          SET @class = '';
          SET @positions = '';
          
          SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`) INTO @class, @positions, @rec
          FROM `ww_approver_class_position` a
          JOIN `users_profile` b ON b.position_id = a.`position_id` AND b.`company_id`=a.`company_id`
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE b.`user_id`=userid AND c.`class_code`= '201REQ' AND a.`approver_id`<>userid;
          
          IF @rec > 0 THEN
             INSERT INTO `ww_partners_personal_approver`
             (`personal_request_id`, `user_id`, `condition`, `sequence`, `personal_request_status_id`)
             SELECT personalrequestid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,3))
             FROM `ww_approver_class_position` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
             JOIN `users_profile` e ON e.position_id = a.`position_id` AND e.`user_id`=userid
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`position_id`=@positions AND a.`approver_id`<>userid
             AND a.department_id = e.department_id AND a.company_id = e.company_id
             GROUP BY 2
             ON DUPLICATE KEY UPDATE `deleted`=0;             
          ELSE     
                    
             -- [2] Override from DEPARTMENT
             -- 
             SET @rec = 0;
             SET @class = '';
             SET @department = '';
          
             SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`) INTO @class, @department, @rec
             FROM `ww_approver_class_department` a
             JOIN `users_profile` b ON b.department_id = a.`department_id` AND b.`company_id`=a.`company_id`
             JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
             WHERE b.`user_id`=userid AND c.`class_code`= '201REQ' AND a.`approver_id`<>userid;
          
             IF @rec > 0 THEN
                INSERT INTO `ww_partners_personal_approver`
                (`personal_request_id`, `user_id`, `condition`, `sequence`, `personal_request_status_id`)
                SELECT personalrequestid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,3))
                FROM `ww_approver_class_department` a
                JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
		JOIN `users_profile` e ON e.department_id = a.`department_id` AND e.`user_id`=userid
                WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`department_id`=@department AND a.`approver_id`<>userid
                AND a.company_id = e.company_id 
                GROUP BY 2
                ON DUPLICATE KEY UPDATE `personal_request_status_id`=VALUES(`personal_request_status_id`), `sequence`=VALUES(`sequence`), `deleted`=0;             
             ELSE
                --   
                -- [3] Override from COMPANY
                -- 
                SET @rec = 0;
                SET @class = '';
                SET @company = '';
          
                SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`) INTO @class, @company, @rec
                FROM `ww_approver_class_company` a
                JOIN `users_profile` b ON b.company_id = a.`company_id`
                JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
                JOIN `time_forms` d ON d.`user_id` = b.`user_id`
                WHERE b.`user_id`=userid AND c.`class_code`= '201REQ' AND a.`approver_id`<>userid;
          
                IF @rec > 0 THEN
                   INSERT INTO `ww_partners_personal_approver`
                   (`personal_request_id`, `user_id`, `condition`, `sequence`, `personal_request_status_id`)
                   SELECT personalrequestid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,3))
                   FROM `ww_approver_class_company` a
                   JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                   WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`company_id`=@company AND a.`approver_id`<>userid
                   GROUP BY 2
                   ON DUPLICATE KEY UPDATE `deleted`=0;             
                END IF; -- IF COMPANY
             
             END IF; -- IF DEPARTMENT
             
          END IF; -- IF POSITION          
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_personal_process` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_personal_process` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_personal_process`()
BEGIN
    /* Script to remove declared dependent which falls on more than 21 years old*/
    
    UPDATE ww_users u, ww_partners p, ww_partners_personal_history pph, ww_partners_personal_history pph2, ww_partners_personal_history pph3 
    
    SET pph.`key_value` = '0'
    
    WHERE u.`active` = 1 AND p.`user_id` = u.`user_id` AND
          pph.`key_value` = 1 AND 
          pph3.`key_value` IN ('son','daughter') AND 
          getage( STR_TO_DATE(pph2.`key_value`, '%M %d, %Y') ) > 21 AND
          pph.`key` = 'family-dependent' AND pph.`partner_id` = p.`partner_id` AND
          pph2.`key` = 'family-birthdate' AND pph2.`partner_id` = p.`partner_id` AND pph2.`sequence` = pph.`sequence` AND
          pph3.`key` = 'family-relationship' AND pph3.`partner_id` = p.`partner_id` AND pph3.`sequence` = pph.`sequence`
    ;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_sms_bday` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_sms_bday` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_sms_bday`()
BEGIN
    
    INSERT INTO `ww_system_sms_queue` (`to`,`subject`,`body`)
    SELECT REPLACE(REPLACE(TRIM(pp.`key_value`),'-',''),'+',''),
       IF(IFNULL(up.`nickname`,'')='',up.`firstname`,up.`nickname`),
       REPLACE(
       REPLACE(st.`body`, '{{alias}}', IF(TRIM(IFNULL(up.`nickname`,''))='',up.`firstname`,up.`nickname`)),
          '{{application_title}}', c.`value`)
    
    FROM `users_profile` up 
    JOIN `users` u ON u.user_id=up.user_id AND u.active=1
    JOIN `ww_system_template` st ON st.`code`='SMS-BDAY-REMINDER'
    JOIN `ww_partners_personal` pp ON pp.`key`='mobile' AND pp.`partner_id`=up.`partner_id`
    LEFT JOIN `ww_config` c ON c.`key`='application_title' AND c.deleted=0
    WHERE 
       nextbday(up.`birth_date`)=CURDATE() AND
       REPLACE(TRIM(pp.`key_value`),'-','')<>'' AND pp.`sequence`=1;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_sms_reminder` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_sms_reminder` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_sms_reminder`(IN userid INT(11))
BEGIN
    
    INSERT INTO `ww_system_sms_queue` (`to`,`subject`,`body`)
    SELECT REPLACE(REPLACE(TRIM(pp.`key_value`),'-',''),'+',''),
       IF(IFNULL(up.`nickname`,'')='',up.`firstname`,up.`nickname`),
       REPLACE(
       REPLACE(st.`body`, '{{alias}}', IF(TRIM(IFNULL(up.`nickname`,''))='',up.`firstname`,up.`nickname`)),
          '{{application_title}}', c.`value`)
    
    FROM `users_profile` up 
    JOIN `users` u ON u.user_id=up.user_id AND u.active=1
    JOIN `ww_system_template` st ON st.`code`='SMS-WELCOME'
    JOIN `ww_partners_personal` pp ON pp.`key`='mobile' AND pp.`partner_id`=up.`partner_id`
    LEFT JOIN `ww_config` c ON c.`key`='application_title' AND c.deleted=0
    WHERE 
       up.`user_id`=userid AND
       REPLACE(TRIM(pp.`key_value`),'-','')<>'' AND pp.`sequence`=1 AND
       pp.`created_on` >= '2014-11-24';
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_partners_subordinates` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_partners_subordinates` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_partners_subordinates`(IN immediateid INT(11), IN role INT(11))
BEGIN
    
    SELECT 
       `up`.`user_id`, 
       `p`.`id_number`, 
       CONCAT(`up`.`lastname`, ', ', `up`.`firstname`) `display_name`, 
       `p`.`shift_id`, 
       `ts`.`shift`,
       `p`.`calendar_id`, 
       `tsw`.`calendar`           
	
    FROM ww_users_profile up
    JOIN ww_partners p ON p.`user_id` = up.`user_id` 
    LEFT JOIN ww_time_shift ts ON ts.`shift_id` = p.`shift_id`
    LEFT JOIN ww_time_shift_weekly tsw ON tsw.`calendar_id` = p.`calendar_id`
    
    WHERE 
       IF(role IN (2,6), 1, up.`reports_to_id`=immediateid OR 
                            up.`project_hr_id`=immediateid OR 
                            FIND_IN_SET(immediateid, up.`coordinator_id`) ) AND 
       p.status_id < 8
    ORDER BY display_name;
    
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_bir_diminimis` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_bir_diminimis` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_bir_diminimis`( IN nUserID INT(11), IN nYear INT(11), IN nType INT(1) )
BEGIN
	SET @nLastPay = 0;
	-- previous employer 
	SET @sPrevEmployer = '';
	SET @sPrevTin = '';
	SET @sPrevAddress = '';
	SET @sPrevZipCode = '';
	SET @nPrevTax = 0.00;
	-- Dependent 
	-- to create function on how to get the dependet
	-- to create function / trigger when dependent child reach 21
	SET @sDepName1 = '';
	SET @dtBirthDay1 = '0000-00-00';
	SET @sDepName2 = '';
	SET @dtBirthDay2 = '0000-00-00';
	SET @sDepName3 = '';
	SET @dtBirthDay3 = '0000-00-00';
	SET @sDepName4 = '';
	SET @dtBirthDay4 = '0000-00-00';
	SET @nMinwageFlag = 0;
	SET @nMinwageMonth = 0.00;
	IF nType = 1 THEN
		SET @nLastPay = 1;
	END IF;	
	
	UPDATE `ww_payroll_bir` set
            `min_deminimis` = (IFNULL(get_bir_is_deminimis( nYear, nUserID ),0))
            WHERE user_id = nUserID;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_bir_manual_insert` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_bir_manual_insert` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_bir_manual_insert`(
	IN nYear INT(11),
	IN nCompID INT(11)
	)
BEGIN
	DECLARE birDone  TINYINT(1) DEFAULT 0;
	DECLARE nUser INT(11);
	
	DECLARE dataUser CURSOR FOR 
		SELECT DISTINCT employee_id, nYear, nCompID 
		FROM ww_payroll_closed_transaction 
		WHERE `deleted` = 0 AND YEAR( `payroll_date` ) = nYear AND company_id = nCompID;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET birDone = 1;
	-- select overtime;
	
	OPEN dataUser;
	myBirLoop: LOOP
		FETCH dataUser INTO nUser, nYear, nCompID ;
		
		IF birDone THEN
		    CLOSE dataUser;
		    LEAVE myBirLoop;
		END IF;
		CALL `sp_payroll_bir_record`( nUser, nYear, 0 );
		SET @nUser = nUser;
		SET @birDone = birDone;
		
	END LOOP;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_bir_record` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_bir_record` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_bir_record`( IN nUserID INT(11), IN nYear INT(11), IN nType INT(1) )
BEGIN
	SET @nLastPay = 0;
	-- previous employer 
	SET @sPrevEmployer = '';
	SET @sPrevTin = '';
	SET @sPrevAddress = '';
	SET @sPrevZipCode = '';
	SET @nPrevTax = 0.00;
	-- Dependent 
	-- to create function on how to get the dependet
	-- to create function / trigger when dependent child reach 21
	SET @sDepName1 = '';
	SET @dtBirthDay1 = '0000-00-00';
	SET @sDepName2 = '';
	SET @dtBirthDay2 = '0000-00-00';
	SET @sDepName3 = '';
	SET @dtBirthDay3 = '0000-00-00';
	SET @sDepName4 = '';
	SET @dtBirthDay4 = '0000-00-00';
	SET @nMinwageFlag = 0;
	SET @nMinwageMonth = 0.00;
	IF nType = 1 THEN
		SET @nLastPay = 1;
	END IF;	
	
	-- remove record if exist
	DELETE FROM ww_payroll_bir WHERE user_id = nUserID AND pay_year = nYear;
	-- insert record
	INSERT INTO `ww_payroll_bir`
            (`user_id`, `id_number`, `lastname`, `firstname`, `suffix`, `middlename`, `tin`, `birth_date`, `address`,
		`pay_year`, `company_id`, `employed_date`, `resigned_date`, `civil_status_id`, `depend`, `exempt`, `exempt_code`,
             `prev_employer`, `prev_tin`, `prev_address`, `prev_zip`, `prev_wtax`,
             `dep_name1`, `dep_bday1`, `dep_name2`, `dep_bday2`, `dep_name3`, `dep_bday3`, `dep_name4`, `dep_bday4`,
             `min_basic`, `min_holpay`, `min_overtime`, `min_ndiff`, `min_deminimis`, `min_hazardpay`, 
             `govt_contri`, `bonus_nontax`, `bonus_tax`, `benefit`, `allow`,
             `tax_basic`,`representation`, `transportation`, `cost_living`, `fixed_housing`,`tempo_allowance`,`service_allowance`,
	     `commission`, `profit_sharing`, `fees`, `tax_hazardpay`, `tax_overtime`, 
	     `gross_compensation`, `total_non_tax`, `total_taxable`, `net_taxable`, `wtax`, `taxdue`,
             `minwageflag`, `minwage_amt`, `minwage_day`, `minwage_month`, `total_year_days`,`if_lastpay`, `deleted`)
	-- get records of employee
	SELECT 
	u.`user_id`, p.`id_number`, up.`lastname`, up.`firstname`, up.`suffix`, up.`middlename`, pp.`tin`, up.`birth_date`, get_address(u.user_id),
	nYear, u.`company_id`, p.`effectivity_date`, p.`resigned_date`, get_civil_status(u.`user_id`), 
	t.`dependent`, t.`amount`, CONCAT( IF(get_civil_status(u.`user_id`) = 1,'S','M') , t.`dependent` ),
	@sPrevEmployer, @sPrevTin, @sPrevAddress, @sPrevZipCode, @nPrevTax,
	@sDepName1, @dtBirthday1, @sDepName2, @dtBirthday2, @sDepName3, @dtBirthday3, @sDepName4, @dtBirthday4,
	IFNULL(get_bir_min_basic( nYear, nUserID ),0), 
	IFNULL(get_bir_min_holidaypay( nYear, nUserID ),0), 
	IFNULL(get_bir_min_overtime( nYear, nUserID ),0), 
	IFNULL(get_bir_min_ndiff( nYear, nUserID ),0),	 
	IFNULL(get_bir_is_deminimis( nYear, nUserID ),0), 
	IFNULL(get_bir_min_hazardpay( nYear, nUserID ),0), 
	IFNULL(get_bir_govt_contri( nYear, nUserID ),0), 
	IFNULL(get_bir_bonus_nt( nYear, nUserID ),0), 
	IFNULL(get_bir_bonus_tax( nYear, nUserID ),0), 
	IFNULL(get_bir_benefit( nYear, nUserID ),0), 
	IFNULL(get_bir_allow( nYear, nUserID ),0), 
	IFNULL(get_bir_tax_basic( nYear, nUserID ),0), 	
	IFNULL(get_bir_is_representation( nYear, nUserID ),0), 
	IFNULL(get_bir_is_transportation( nYear, nUserID ),0), 
	IFNULL(get_bir_is_cost_living( nYear, nUserID ),0), 
	IFNULL(get_bir_is_fixed_housing( nYear, nUserID ),0), 
	ifnull(get_bir_is_tempo_allowance( nYear, nUserID ),0),
	IFNULL(get_bir_is_service_allowance( nYear, nUserID ),0),
	IFNULL(get_bir_is_commission( nYear, nUserID ),0), 
	IFNULL(get_bir_is_profit_sharing( nYear, nUserID ),0), 
	IFNULL(get_bir_is_fees( nYear, nUserID ),0), 
	IFNULL(get_bir_is_hazardpay( nYear, nUserID ),0), 
	IFNULL(get_bir_overtime( nYear, nUserID ),0), 
	IFNULL(get_bir_gross_compensation( nYear, nUserID ),0),
	IFNULL(get_bir_total_non_tax( nYear, nUserID ),0), 
	IFNULL(get_bir_total_taxable( nYear, nUserID ),0), 	
	IFNULL(get_bir_net_taxable( nYear, nUserID, t.`amount` ),0), 	
	IFNULL(get_wtax( nYear, nUserID ),0), 
	IFNULL(get_taxdue( nYear, nUserID, t.`amount` ),0), 
	is_minimum_wage_earner(nUserID), 
	IF(pp.`location_id` IS NULL OR pp.`location_id` = 0, get_config('Payroll','minwage_amount'), get_minwage(pp.`location_id`)),
	ROUND( ( CASE payroll_rate_type_id 
		WHEN 2 THEN ( AES_DECRYPT( `p`.`salary`, encryption_key() ) / ( `total_year_days` / 12 ) )
		WHEN 6 THEN ( AES_DECRYPT( `p`.`salary`, encryption_key()) )
		END ), 2 ),
	0.00, 
	pp.`total_year_days`,
	@nLastPay, 0
	FROM ww_users u
	INNER JOIN ww_users_profile up ON u.user_id = up.user_id
	INNER JOIN ww_partners p ON p.`user_id` = u.`user_id`
	INNER JOIN ww_payroll_partners pp ON pp.`user_id` = u.`user_id`
	LEFT JOIN ww_taxcode t ON pp.`taxcode_id` = t.`taxcode_id`
	WHERE u.user_id = nUserID;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_bonus_insert` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_bonus_insert` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_bonus_insert`(
	in puserid int(11),
	in periodid int(11),
	in paydate date,
	in processing_type_id int(11),
	in tran_id int(11),
	in tran_class_id int(11),
	in tran_code varchar(32),
	in qty decimal(12,2),
	in amount decimal(12,2),
	in tran_type_id int(11),
	in rec_id int(11),
	in ins_from varchar(32)
    
    )
BEGIN
	INSERT INTO `ww_payroll_current_transaction`
	    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
	     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
	     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
	     `created_by`, `deleted`)
	SELECT periodid, processing_type_id, paydate, user_id, tran_id, tran_class_id,
	     tran_code, AES_ENCRYPT(qty, encryption_key()), 
	     AES_ENCRYPT( amount, encryption_key()) ,
	     AES_ENCRYPT( amount, encryption_key()), 
	     tran_type_id, 0,ins_from,rec_id,0,'',NOW(),0,0
	FROM ww_payroll_partners 
	WHERE user_id = puserid;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_closed_loan` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_closed_loan` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_closed_loan`(
	IN periodid INT(11),
	IN puserid INT(11)	
    )
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE emp_id INT(11);
	DECLARE ploan_id INT(11);
	DECLARE	paydate DATE;
	DECLARE pay_mode INT(11);
	DECLARE run_bal DECIMAL(12,2);
	DECLARE sys_amort DECIMAL(12,2);
	DECLARE user_amort DECIMAL(12,2);
	DECLARE ln_status_id INT(11);
	DECLARE tot_amt_pd DECIMAL(12,2);
	DECLARE no_pay_pd INT(11);
	DECLARE no_pay_rem INT(11);
	DECLARE loan CURSOR FOR
		SELECT pl.`user_id`, pl.`partner_loan_id`, pct.`payroll_date`, pl.`payment_mode_id`,
			ROUND(AES_DECRYPT(pl.`running_balance`, encryption_key ()),2),
			ROUND(AES_DECRYPT(pl.`system_amortization`, encryption_key ()),2),
			ROUND(AES_DECRYPT(pl.`user_amortization`, encryption_key ()),2),
			pl.`loan_status_id`, ROUND(AES_DECRYPT( pl.`total_amount_paid`, encryption_key ()),2),
			pl.`no_payments_paid`, pl.`no_payments_remaining`
		FROM ww_payroll_current_transaction pct
		INNER JOIN ww_payroll_partners_loan pl ON pct.`employee_id` = pl.user_id AND pl.`partner_loan_id` = pct.`record_id`
		INNER JOIN ww_payroll_transaction_class ptc ON ptc.`transaction_class_id` = pct.`transaction_class_id`
		WHERE ptc.`transaction_class_code` IN ('LOAN_AMORTIZATION')
			AND pct.`deleted` = 0 AND pl.`deleted` = 0
			AND pct.`period_id` = periodid AND pct.`employee_id` = puserid
			AND AES_DECRYPT( pl.`running_balance` , encryption_key() ) > 0 AND pl.`loan_status_id` = 2;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	
	OPEN loan;
	myLoop: LOOP
		FETCH loan INTO emp_id, ploan_id, paydate, pay_mode, run_bal, sys_amort, user_amort, ln_status_id, tot_amt_pd, no_pay_pd, no_pay_rem;
		
		IF done THEN
		    CLOSE loan;
		    LEAVE myLoop;
		END IF;
		-- get arrears
		SET @arrears = 0;
		SELECT SUM( AES_DECRYPT(pct.amount, encryption_key ()) ) INTO @arrears 
		FROM ww_payroll_current_transaction pct 
		INNER JOIN ww_payroll_transaction_class ptc ON pct.transaction_class_id = ptc.transaction_class_id 
		WHERE pct.`record_id` = ploan_id AND pct.`employee_id` = emp_id 
			  AND ptc.`transaction_class_code` IN ('LOAN_AMORTIZATION','LOAN_INTEREST') 
			  AND pct.`on_hold` = 1 AND pct.`deleted` = 0 ;
		
		IF @arrears IS NULL THEN
			SET @arrears = 0;
		END IF;
		-- get amortization
		SET @amor = 0;
		SELECT SUM( AES_DECRYPT(pct.amount, encryption_key ()) ) INTO @amor 
		FROM ww_payroll_current_transaction pct 
		INNER JOIN ww_payroll_transaction_class ptc ON pct.transaction_class_id = ptc.transaction_class_id 
		WHERE pct.`record_id` = ploan_id AND pct.`employee_id` = emp_id 
			  AND ptc.`transaction_class_code` IN ('LOAN_AMORTIZATION','LOAN_INTEREST') 
			  AND pct.`on_hold` = 0 AND pct.`deleted` = 0 ;
		
		IF @amor IS NULL THEN
			SET @amor = 0;
		END IF;
		
		IF @amor > 0 THEN
			BEGIN
				SET run_bal = run_bal - @amor;
				IF run_bal < sys_amort THEN
					SET sys_amort = run_bal;
				END IF;
				IF run_bal < user_amort THEN
					SET user_amort = run_bal;
				END IF;
				
				SET tot_amt_pd = tot_amt_pd + @amor;
				SET no_pay_pd = no_pay_pd + 1;
			END;
		END IF;
		
		IF pay_mode = 3 THEN
			SET pay_mode = 2;
		END IF;
		IF pay_mode = 4 THEN
			SET pay_mode = 1;
		END IF;
		
		IF run_bal <= 0.001 THEN
			SET ln_status_id = 4;
		END IF;
		
		IF pay_mode = 3 OR pay_mode = 2 THEN
			BEGIN
				IF @amor != 0 THEN
					SET no_pay_rem = ROUND(run_bal / user_amort);
				END IF;
				IF no_pay_rem * user_amort < run_bal THEN
					SET no_pay_rem = no_pay_rem + 1;
				END IF;
			END;
		END IF;
		
		IF pay_mode = 4 OR pay_mode = 1 THEN
			BEGIN
				IF @amor != 0 THEN
					SET no_pay_rem = ROUND(run_bal / sys_amort);
				END IF;
				IF no_pay_rem * sys_amort < run_bal THEN
					SET no_pay_rem = no_pay_rem + 1;
				END IF;
			END;
		END IF;
		
		UPDATE ww_payroll_partners_loan SET 
			`running_balance` = AES_ENCRYPT( ROUND( run_bal, 2) , encryption_key() ),
			`system_amortization` = AES_ENCRYPT( ROUND( sys_amort, 2) , encryption_key() ),
			`user_amortization` = AES_ENCRYPT( ROUND( user_amort, 2) , encryption_key() ),
			`total_arrears` = AES_ENCRYPT( ROUND( @arrears, 2) , encryption_key() ),
			`total_amount_paid` = AES_ENCRYPT( ROUND( tot_amt_pd, 2) , encryption_key() ),
			`last_payment_date` = paydate,
			`loan_status_id` = ln_status_id,
			`payment_mode_id` = pay_mode,
			`no_payments_paid` = no_pay_pd,
			`no_payments_remaining` = no_pay_rem
		WHERE partner_loan_id  = ploan_id AND `user_id` = emp_id;
		
		CALL sp_payroll_loan_payments(emp_id, ploan_id);
	END LOOP;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_closed_period` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_closed_period` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_closed_period`(
	IN periodid INT(11)
    )
BEGIN
	DECLARE closed_period_done TINYINT(11) DEFAULT 0;
	DECLARE emp_id INT(11);
	DECLARE per_id INT(11);
	DECLARE paydate DATE;
	DECLARE employee CURSOR FOR
		SELECT DISTINCT `period_id`, `employee_id`, `payroll_date`
		FROM `ww_payroll_current_transaction` 
		WHERE `deleted` = 0 AND `on_hold` = 0 AND `period_id` = periodid;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET closed_period_done = 1;
	OPEN employee;
	
	myLoop: LOOP
		FETCH employee INTO per_id, emp_id, paydate;
		
		IF closed_period_done THEN
		    SELECT COUNT(*) INTO @cls_cnt FROM ww_payroll_current_transaction WHERE deleted = 0 AND period_id = per_id AND on_hold = 0;
		    IF @cls_cnt = 0 THEN
			UPDATE `ww_payroll_period` SET `period_status_id` = 3 WHERE `payroll_period_id` = per_id;
			UPDATE `ww_payroll_leave_conversion_period` SET `status` = 3 WHERE `payroll_date` = paydate AND `status` = 2 AND deleted = 0;
		    END IF;
		    CLOSE employee;
		    LEAVE myLoop;
		END IF;
		-- transfer and update loans
		CALL sp_payroll_closed_loan(per_id, emp_id);
		
		-- employee summary
		-- check if has record on payroll_closed_summary
		SET @count = 0;
		SELECT COUNT(*) INTO @count FROM `ww_payroll_closed_summary` WHERE `user_id` = emp_id AND `year` = YEAR(paydate) AND `deleted` = 0;
		IF @count = 0 THEN
			-- insert record on payroll_closed_summary
			CALL sp_payroll_closed_summary_insert( emp_id, paydate);
		END IF;
		
		BEGIN
			DECLARE s_done TINYINT(1) DEFAULT 0;
			DECLARE tran_code VARCHAR(32);
			DECLARE summary CURSOR FOR
				SELECT `summary_code` FROM `ww_payroll_closed_summary`
				WHERE `user_id` = emp_id AND `year` = YEAR(paydate)
					AND deleted = 0;
			DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET s_done = 1;
			OPEN summary;
			
			mySummary: LOOP
				FETCH summary INTO tran_code;
				
				IF s_done THEN
					CLOSE summary;
					LEAVE mySummary;
				END IF;
				SET @amt = 0;
				CALL sp_payroll_closed_summary_amt( emp_id, paydate, tran_code, @result );
				SET @amt = @result;
				
				IF @amt IS NOT NULL THEN
					-- update payroll_closed_summary
					CALL sp_payroll_closed_summary_update( emp_id, paydate, tran_code, @amt );
				END IF;
				
			END LOOP;
		END;
		
		-- transfer transaction
		CALL sp_payroll_closed_transaction(per_id, emp_id);
		-- remove transaction
		DELETE FROM ww_payroll_current_transaction
		WHERE `deleted` = 0 AND `on_hold` = 0 AND `employee_id` = emp_id AND `period_id` = per_id;
		
		UPDATE ww_payroll_partners SET `remain` = `remain` - 1 WHERE user_id = emp_id;
		
		-- Insert Data to Payroll BIR
		-- CALL `sp_payroll_bir_record`( emp_id, YEAR(paydate), 0 );
		
	END LOOP;
	
	BEGIN
		DECLARE closed_bir_done TINYINT(11) DEFAULT 0;
		DECLARE bir_emp_id INT(11);
		DECLARE bir_per_id INT(11);
		DECLARE bir_paydate DATE;
		DECLARE bir_employee CURSOR FOR
			SELECT DISTINCT `period_id`, `employee_id`, `payroll_date`
			FROM `ww_payroll_closed_transaction` WHERE `deleted` = 0 AND `period_id` = periodid;
		DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET closed_bir_done = 1;
		OPEN bir_employee;
		mybirLoop: LOOP
			FETCH bir_employee INTO bir_per_id, bir_emp_id, bir_paydate;
	
			IF closed_bir_done THEN
				CLOSE bir_employee;
				LEAVE mybirLoop;
			END IF;
			-- Insert Data to Payroll BIR
			CALL `sp_payroll_bir_record`( bir_emp_id, YEAR(bir_paydate), 0 );
		END LOOP;
	END;
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_closed_summary_amt` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_closed_summary_amt` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_closed_summary_amt`(
	in puserid int(11),
	in paydate date,
	in tran_code varchar(32),
	out nAmount decimal(12,2)
    )
BEGIN
	    set @tran = tran_code;
		SELECT 
		  CASE @tran 
		    WHEN 'TAXABLE_INCOME' THEN SUM( AES_DECRYPT(amount, encryption_key ()) * (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'DEDUCTION_LATE' THEN - 1 
			  WHEN 'DEDUCTION_UNDERTIME' THEN - 1 
			  WHEN 'ABSENCES' THEN - 1 
			  WHEN 'TAXABLE_DEDUCTION' THEN - 1 
			  ELSE 1 
			END
		      )
		    ) 
		    WHEN 'SALARY' THEN SUM( AES_DECRYPT(amount, encryption_key ()) * (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'SALARY' THEN 1 ELSE - 1 
			END
		      )
		    ) 
		    ELSE SUM(
		      AES_DECRYPT(amount, encryption_key ())
		    ) 
		  END
		into nAmount
		FROM ww_payroll_current_transaction pct 
		LEFT JOIN ww_payroll_transaction_class ptc ON pct.transaction_class_id = ptc.transaction_class_id 
		WHERE pct.employee_id = puserid and pct.payroll_date = paydate
		  AND (
		    CASE @tran 
		      WHEN 'TAXABLE_INCOME' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'SALARY' THEN 1 WHEN 'OVERTIME' THEN 1 WHEN 'BONUS_TAXABLE' THEN 1 
			  WHEN 'ALLOWANCE_BATCH' THEN 1 WHEN 'ALLOWANCE_RECURRING' THEN 1 WHEN 'LEAVES' THEN 1 
			  WHEN 'ABSENCES' THEN 1 WHEN 'DEDUCTION_LATE' THEN 1 WHEN 'DEDUCTION_UNDERTIME' THEN 1 
			  WHEN 'TAXABLE_DEDUCTION' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'BONUS' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'BONUS' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'BONUS_TAXABLE' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'BONUS_TAXABLE' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'ADDITIONAL_EXCLUSION' THEN (
			CASE
			  ptc.government_mandated 
			  WHEN 1 THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'SALARY' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'SALARY' THEN 1 WHEN 'ABSENCES' THEN 1 WHEN 'DEDUCTION_LATE' THEN 1 
			  WHEN 'DEDUCTION_UNDERTIME' THEN 1 ELSE 0 
			END
		      ) 
		      
		      WHEN 'ALLOW_NSTD' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'ALLOWANCE_BATCH' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'BENEFIT_STD' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'BENEFIT_RECURRING' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'BENEFIT_NSTD' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'BENEFIT_BATCH' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'DEDUCTION_STD' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'DEDUCTION_RECURRING' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'DEDUCTION_NSTD' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'DEDUCTION_BATCH' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'OVERTIME' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'OVERTIME' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'DEMMINIMIS' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'DE_MINIMIS_BENEFIT_RECURRING' THEN 1 when 'DE_MINIMIS_BENEFIT_BATCH' then 1 ELSE 0 
			END
		      ) 
		      WHEN 'LEAVES' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'LEAVES' THEN 1 ELSE 0 
			END
		      ) 
		      ELSE (
			CASE
			  @tran 
			  WHEN ptc.transaction_class_code THEN 1 ELSE 0 
			END
		      ) 
		    END
		  ) = 1 ;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_closed_summary_insert` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_closed_summary_insert` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_closed_summary_insert`(
	in puserid INT(11),
	in paydate date
    )
BEGIN
	
	set @comp_id = '';
	set @dept_id = '';
	SELECT ifnull(p.`company_id`, u.company_id), u.`department_id`
	into @comp_id, @dept_id
	FROM ww_users_profile u	
	INNER join ww_payroll_partners p on p.user_id = u.user_id
	where u.`user_id` = puserid;
	
	insert into ww_payroll_closed_summary(
		`user_id`, `company_id`, `department_id`, `type`, `year`, `summary_id`, `summary_code`, `created_on`,
		`january`, `february`, `march`, `april`, `may`, `june`, `july`, `august`, `september`, `october`,
		`november`, `december`, `ytd`) 
	select puserid, @comp_id, @dept_id, 'C', year(paydate), `summary_id`, `summary_code`, now(),
		aes_encrypt( 0.00, encryption_key()),AES_ENCRYPT( 0.00, encryption_key()),AES_ENCRYPT( 0.00, encryption_key()),
		AES_ENCRYPT( 0.00, encryption_key()),AES_ENCRYPT( 0.00, encryption_key()),AES_ENCRYPT( 0.00, encryption_key()),
		AES_ENCRYPT( 0.00, encryption_key()),AES_ENCRYPT( 0.00, encryption_key()),AES_ENCRYPT( 0.00, encryption_key()),
		AES_ENCRYPT( 0.00, encryption_key()),AES_ENCRYPT( 0.00, encryption_key()),AES_ENCRYPT( 0.00, encryption_key()),AES_ENCRYPT( 0.00, encryption_key())
	from ww_payroll_closed_summary_id
	order by summary_id;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_closed_summary_update` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_closed_summary_update` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_closed_summary_update`(
	in puserid int(11),
	in paydate date,
	in tran_code varchar(32),
	in amount decimal(12,2)
    )
BEGIN
	
	set @nMonth = 0;
	set @nYear = 0;
	set @nMonth = month( paydate );
	set @nYear = year( paydate );
	If @nMonth = 1 then
		update ww_payroll_closed_summary set 
			ytd = aes_encrypt( aes_decrypt( ytd, encryption_key() ) + amount, encryption_key() ), 
			january = AES_ENCRYPT( AES_DECRYPT( january, encryption_key() ) + amount, encryption_key() )
		where user_id = puserid and summary_code = tran_code and type = 'C' and `year` = @nYear;
	ELSEIF @nMonth = 2 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) + amount, encryption_key() ), 
			february = AES_ENCRYPT( AES_DECRYPT( february, encryption_key() ) + amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 3 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) + amount, encryption_key() ), 
			march = AES_ENCRYPT( AES_DECRYPT( march, encryption_key() ) + amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 4 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) + amount, encryption_key() ), 
			april= AES_ENCRYPT( AES_DECRYPT( april, encryption_key() ) + amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 5 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) + amount, encryption_key() ), 
			may = AES_ENCRYPT( AES_DECRYPT( may, encryption_key() ) + amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 6 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) + amount, encryption_key() ), 
			june = AES_ENCRYPT( AES_DECRYPT( june, encryption_key() ) + amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 7 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) + amount, encryption_key() ), 
			july = AES_ENCRYPT( AES_DECRYPT( july, encryption_key() ) + amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 8 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) + amount, encryption_key() ), 
			august = AES_ENCRYPT( AES_DECRYPT( august, encryption_key() ) + amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 9 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) + amount, encryption_key() ), 
			september = AES_ENCRYPT( AES_DECRYPT( september, encryption_key() ) + amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 10 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) + amount, encryption_key() ), 
			october = AES_ENCRYPT( AES_DECRYPT( october, encryption_key() ) + amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 11 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) + amount, encryption_key() ), 
			november = AES_ENCRYPT( AES_DECRYPT( november, encryption_key() ) + amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 12 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) + amount, encryption_key() ), 
			december = AES_ENCRYPT( AES_DECRYPT( december, encryption_key() ) + amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	end if;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_closed_summary_update_correction` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_closed_summary_update_correction` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_closed_summary_update_correction`(
	in puserid int(11),
	in paydate date,
	in tran_code varchar(32),
	in amount decimal(12,2)
    )
BEGIN
	
	set @nMonth = 0;
	set @nYear = 0;
	set @nMonth = month( paydate );
	set @nYear = year( paydate );
	If @nMonth = 1 then
		update ww_payroll_closed_summary set 
			ytd = aes_encrypt( aes_decrypt( ytd, encryption_key() ) - amount, encryption_key() ), 
			january = AES_ENCRYPT( AES_DECRYPT( january, encryption_key() ) - amount, encryption_key() )
		where user_id = puserid and summary_code = tran_code and type = 'C' and `year` = @nYear;
	ELSEIF @nMonth = 2 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) - amount, encryption_key() ), 
			february = AES_ENCRYPT( AES_DECRYPT( february, encryption_key() ) - amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 3 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) - amount, encryption_key() ), 
			march = AES_ENCRYPT( AES_DECRYPT( march, encryption_key() ) - amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 4 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) - amount, encryption_key() ), 
			april= AES_ENCRYPT( AES_DECRYPT( april, encryption_key() ) - amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 5 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) - amount, encryption_key() ), 
			may = AES_ENCRYPT( AES_DECRYPT( may, encryption_key() ) - amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 6 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) - amount, encryption_key() ), 
			june = AES_ENCRYPT( AES_DECRYPT( june, encryption_key() ) - amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 7 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) - amount, encryption_key() ), 
			july = AES_ENCRYPT( AES_DECRYPT( july, encryption_key() ) - amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 8 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) - amount, encryption_key() ), 
			august = AES_ENCRYPT( AES_DECRYPT( august, encryption_key() ) - amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 9 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) - amount, encryption_key() ), 
			september = AES_ENCRYPT( AES_DECRYPT( september, encryption_key() ) - amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 10 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) - amount, encryption_key() ), 
			october = AES_ENCRYPT( AES_DECRYPT( october, encryption_key() ) - amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 11 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) - amount, encryption_key() ), 
			november = AES_ENCRYPT( AES_DECRYPT( november, encryption_key() ) - amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	ELSEIF @nMonth = 12 THEN
		UPDATE ww_payroll_closed_summary SET 
			ytd = AES_ENCRYPT( AES_DECRYPT( ytd, encryption_key() ) - amount, encryption_key() ), 
			december = AES_ENCRYPT( AES_DECRYPT( december, encryption_key() ) - amount, encryption_key() )
		WHERE user_id = puserid AND summary_code = tran_code AND TYPE = 'C' AND `year` = @nYear;
	end if;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_closed_transaction` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_closed_transaction` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_closed_transaction`( 
	IN periodid INT(11),
	IN puserid INT(11)
    )
BEGIN
	-- transfer current transaction to closed transaction table
	INSERT INTO `ww_payroll_closed_transaction`
            (`period_id`, `processing_type_id`, `payroll_date`, `company_id`, `employee_id`, `transaction_id`,`transaction_class_id`,
             `transaction_code`, `quantity`, `unit_rate`, `amount`, `transaction_type_id`,
             `inserted_from_id`, `record_from`, `record_id`, `on_hold`, `remarks`, 
             branch_id, group_id, department_id, section_id, division_id, position_id, location_id, payment_type_id, minwageflag,
             `created_by`, `created_on`, `modified_by`, `modified_on`)
        SELECT `period_id`, `processing_type_id`, `payroll_date`, `company_id`, `employee_id`, `transaction_id`,`transaction_class_id`,
             `transaction_code`, `quantity`, `unit_rate`, `amount`, `transaction_type_id`,
             `inserted_from_id`, `record_from`, `record_id`, `on_hold`, `remarks`, 
             branch_id, group_id, department_id, section_id, division_id, position_id, location_id, payment_type_id, minwageflag,
             `created_by`, `created_on`, `modified_by`, `modified_on`
	FROM `ww_payroll_current_transaction`
	WHERE `deleted` = 0 AND `on_hold` = 0 AND `period_id` = periodid AND `employee_id` = puserid;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_employee_info` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_employee_info` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_employee_info`(
	IN puserid INT(11),
	OUT nStatus INT(11), 
	OUT nEmp_type_id INT(11), 
	OUT dtEff DATE,
	OUT dtRes DATE,
	OUT nShift INT(11),
	OUT nTaxcode INT(11), 
	OUT nPayrate INT(11), 
	OUT nPaysched INT(11), 
	OUT nTotal_year_days DECIMAL(5,2), 
	OUT nSalary DECIMAL(12,2),
	OUT nMin_takehome DECIMAL(12,2), 
	OUT sBank_acct VARCHAR(32), 
	OUT nPayLocation INT(11), 
	OUT sSSS_no VARCHAR(16), 
	OUT nSSS_mode INT(11), 
	OUT sSSS_week VARCHAR(32),
	OUT nSSS_amount DECIMAL(12,2), 
	OUT sHDMF_no VARCHAR(16), 
	OUT nHDMF_mode INT(11), 
	OUT sHDMF_week VARCHAR(32),
	OUT nHDMF_amount DECIMAL(12,2), 
	OUT sPHIC_no VARCHAR(16), 
	OUT nPHIC_mode INT(11), 
	OUT sPHIC_week VARCHAR(32),
	OUT nPHIC_amount DECIMAL(12,2), 
	OUT sEcola_week VARCHAR(32),
	OUT sTIN VARCHAR(32),
	OUT nTax_mode INT(11),
	OUT nTax_amount DECIMAL(12,2),
	OUT sTax_week VARCHAR(32),
	OUT nSensitivity INT(11),
	OUT nDivisor INT(11),
	OUT nCompany INT(11),
	OUT nGroup INT(11),
	OUT nDivision INT(11),
	OUT nDepartment INT(11),
	OUT nSection INT(11),
	OUT nPosition INT(11),
	OUT nProject INT(11),
	OUT nReports_to INT(11),
	OUT nJobtitle INT(11),
	OUT nLocation INT(11),
	OUT nRemain INT(11),
	OUT nAttendanceBase TINYINT(1),
	OUT nHold TINYINT(1),
	OUT nPaymentType TINYINT(1)
    )
BEGIN
	SELECT 
		b.`status_id`, b.`employment_type_id`, b.`effectivity_date`, b.`resigned_date`, b.`shift_id`,
		a.`taxcode_id`, a.`payroll_rate_type_id`, a.`payroll_schedule_id`, a.`total_year_days`, 
		AES_DECRYPT(a.`salary`, encryption_key()),
		AES_DECRYPT(a.`minimum_takehome`, encryption_key()), a.`bank_account`, a.`location_id`, 
		a.`sss_no`, a.`sss_mode`, a.`sss_week`, AES_DECRYPT(a.`sss_amount`, encryption_key()), 
		a.`hdmf_no`, a.`hdmf_mode`, a.`hdmf_week`, AES_DECRYPT(a.`hdmf_amount`, encryption_key()),
		a.`phic_no`, a.`phic_mode`, a.`phic_week`, AES_DECRYPT(a.`phic_amount`, encryption_key()),
		a.`ecola_week`, a.`tin`, a.`tax_mode`, AES_DECRYPT(a.`tax_amount`, encryption_key()), a.`tax_week`, a.`sensitivity`, d.`divisor`,
		a.`company_id`, c.`group_id`, c.`division_id`, c.`department_id`, s.`section_id`,c.`position_id`, c.project_id,
		c.`reports_to_id`, c.`job_title_id`, c.`location_id`, a.`remain`, a.`attendance_base`, a.`on_hold`, a.payment_type_id
	INTO
		nStatus, nEmp_type_id, dtEff, dtRes, nShift, nTaxcode, nPayrate, nPaysched,
		nTotal_year_days, nSalary, nMin_takehome, sBank_acct, nPayLocation,
		sSSS_no, nSSS_mode, sSSS_week, nSSS_amount,
		sHDMF_no, nHDMF_mode, sHDMF_week, nHDMF_amount,
		sPHIC_no, nPHIC_mode, sPHIC_week, nPHIC_amount,
		sEcola_week, sTIN, nTax_mode, nTax_amount, sTax_week, nSensitivity, nDivisor,
		nCompany, nGroup, nDivision, nDepartment, nSection, nPosition, nProject, 
		nReports_to, nJobtitle, nLocation, nRemain, nAttendanceBase, nHold, nPaymentType
	FROM ww_payroll_partners a
	INNER JOIN ww_partners b ON a.`user_id` = b.`user_id`
	INNER JOIN ww_users_profile c ON c.`user_id` = a.`user_id`
	LEFT JOIN ww_payroll_schedule_rate_divisor d ON a.`payroll_schedule_id` = d.`payroll_schedule_id` 
		AND a.`payroll_rate_type_id` = d.`payroll_rate_type_id`
	LEFT JOIN ww_users_section s ON get_partners_personal(a.user_id,'section') = s.`section`
	WHERE a.`user_id` = puserid ;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_final_pay` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_final_pay` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_final_pay`(
	IN periodid int(11),
	IN puserid int(11)
    )
BEGIN
	/*
	step 1: Compute remaining Attendance
	step 2: Allowances / Tenure
	step 3: Bonuses
	step 4: Annualized Tax
	step 5: Loans / other deductions
	1. Computation of Tenure ( if Applicable )
	2. Computation of Bonus
	       Bonus = ( Salary / 12 ) * No. of Months
	3. Loans Condition
	   - If last pay Running Balance to be deduct
	    ex: Stanford Salary Loan
		 Running Balance = 8,000.00
		 * 8,000.00 will be deduction on the last pay to settle the loan
         */
        
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
	    -- ERROR
	  ROLLBACK;
	END;
	START TRANSACTION;
	-- employee info
	SET @sSSS_week = '';
	SET @nStatus = '';
	SET @nEmp_type_id = '';
	SET @dtEff = '';
	SET @dtRes = '';
	SET @nShift = '';
	SET @nTaxcode = '';
	SET @nPayrate = '';
	SET @nPaysched = '';
	SET @nTotal_year_days = '';
	SET @nSalary = '';
	SET @nMin_takehome = '';
	SET @sBank_acct = '';
	SET @nPayLocation = '';
	SET @sSSS_no = '';
	SET @nSSS_mode = '';
	SET @sSSS_week = '';
	SET @nSSS_amount = '';
	SET @sHDMF_no = '';
	SET @nHDMF_mode = '';
	SET @sHDMF_week = '';
	SET @nHDMF_amount = '';
	SET @sPHIC_no = '';
	SET @nPHIC_mode = '';
	SET @sPHIC_week = '';
	SET @nPHIC_amount = '';
	SET @sEcola_week = '';
	SET @sTIN = '';
	SET @nTax_mode = '';
	SET @sTax_week = '';
	SET @nSensitivity = '';
	SET @nDivisor = '';
	SET @nCompany = '';
	SET @nGroup = '';
	SET @nDivision = '';
	SET @nDepartment = '';
	SET @nPosition = '';
	SET @nReports_to = '';
	SET @nJobtitle = '';
	SET @nLocation = '';
	SET @nRemain = '';
	SET @nAttendanceBase = '';
	SET @nHold = '';
	-- period info
	SET @period_status_id = 0;
	SET @payroll_date = '';
	SET @date_from = '';
	SET @date_to = '';
	SET @date_closing = '';
	SET @sweek = '';
	SET @payroll_schedule_id = 0;
	SET @period_processing_type_id = 0;
	set @basic_allowances = 0;
	set @include_13th_month_pay = 0;
	SET @apply_to_id = 0;
	set @nTax_amount = 0;
    -- employee info
	CALL `sp_payroll_employee_info`(puserid, 
		@nStatus, @nEmp_type_id, @dtEff, @dtRes, @nShift, 
		@nTaxcode, @nPayrate, @nPaysched, @nTotal_year_days, @nSalary, 
		@nMin_takehome, @sBank_acct, @nPayLocation, @sSSS_no, @nSSS_mode, 
		@sSSS_week, @nSSS_amount, @sHDMF_no, @nHDMF_mode, @sHDMF_week, 
		@nHDMF_amount, @sPHIC_no, @nPHIC_mode, @sPHIC_week, @nPHIC_amount, 
		@sEcola_week, @sTIN, @nTax_mode, @nTax_amount, @sTax_week, @nSensitivity, @nDivisor, 
		@nCompany, @nGroup, @nDivision, @nDepartment, @nSection, @nPosition, @nProject, @nReports_to,
		@nJobtitle, @nLocation, @nRemain, @nAttendanceBase, @nHold, @nPaymentType);
		
	-- period info
	SELECT `period_status_id`, `payroll_date`, `date_from`, `date_to`, `date_closing`, `week`, 
		`payroll_schedule_id`, `period_processing_type_id`, `include_basic_and_allowances`, `include_13th_month_pay`, `apply_to_id`
	INTO @period_status_id, @payroll_date, @date_from, @date_to, @date_closing, @sweek, 
		@payroll_schedule_id, @period_processing_type_id, @basic_allowances, @include_13th_month_pay, @apply_to_id
	FROM ww_payroll_period WHERE payroll_period_id = periodid AND deleted = 0;
	
	-- select @period_status_id, @payroll_date, @date_from, @date_to, @date_closing, @sweek;
	IF @period_status_id != 3 THEN
		DELETE FROM ww_payroll_current_transaction WHERE `employee_id` = puserid AND `period_id` = periodid;
	END IF;
	
	-- get hourly rate
	set @nHourlyRate = 0;
	IF @nPayrate = 2 THEN
		SET @DailySalary = 0;
		SET @DailySalary = @nSalary / ( @nTotal_year_days / 12 );
		set @nHourlyRate = round( @DailySalary / 8 , 2);
	-- weekly
	ELSEIF @nPayrate = 6 THEN
		SET @DailySalary = 0;	
		SET @DailySalary = @nSalary;
		SET @nHourlyRate = ROUND( @DailySalary / 8 , 2);
	END IF;
	
	if @basic_allowances != 0 then
		-- compute last period
		call sp_payroll_final_pay_last_period( puserid, @nCompany, @nHourlyRate, @dtRes, periodid, @payroll_date, @period_processing_type_id);
		-- compute recurring
		-- CALL sp_payroll_get_recurring(puserid, periodid, @sweek, @payroll_date, @period_processing_type_id);
	end if;	
	-- compute overtime
	 
	CALL sp_payroll_final_pay_overtime( puserid, @dtRes, @payroll_date, periodid, @period_processing_type_id );
		
	-- compute late approve overtime
	CALL sp_payroll_final_pay_overtime_lf( puserid, @dtRes, @payroll_date, periodid, @period_processing_type_id );	
	
	-- compute late, undertime and absences
	CALL `sp_payroll_get_absences`( puserid, @payroll_date, periodid, @period_processing_type_id );
	CALL `sp_payroll_get_lates`( puserid, @payroll_date, periodid, @period_processing_type_id );
	CALL `sp_payroll_get_undertime`( puserid, @payroll_date, periodid, @period_processing_type_id );
	
		-- latefile = 1
	CALL `sp_payroll_get_absences_adj`( puserid, @payroll_date, periodid, @period_processing_type_id );
	CALL `sp_payroll_get_lates_adj`( puserid, @payroll_date, periodid, @period_processing_type_id );
	CALL `sp_payroll_get_undertime_adj`( puserid, @payroll_date, periodid, @period_processing_type_id );
						
	-- compute loan amortization
	CALL sp_payroll_get_loan_amortization( puserid, periodid, @payroll_date, @period_processing_type_id, @sweek );
	
	-- compute loan interest
	CALL sp_payroll_get_loan_interest( puserid, periodid, @payroll_date, @period_processing_type_id, @sweek );
	-- compute batch entry
	CALL sp_payroll_get_batch(puserid, periodid, @payroll_date, @period_processing_type_id);
			
	-- compute bonus
	IF @include_13th_month_pay != 0 THEN
		CALL sp_payroll_final_pay_bonus(puserid, periodid, @dtRes, @payroll_date, @period_processing_type_id);
	end if;
	
	-- force convert SL/VL and SIL
	-- IF @nStatus != 2 and @nStatus != 12 THEN
	IF @nStatus != 2 THEN
		-- if final pay does not execute it is one of the possible error due to there was multiple leave balance record with in a year. check if error occured
		CALL sp_payroll_final_pay_leave_conversion(puserid, periodid, @nCompany, @payroll_date, @dtRes, @DailySalary, @nEmp_type_id, @period_processing_type_id);
	end if;
	
	SET @Not_MinWage = 0;
	SET @min_wage_amt = 0;
	SET @ecola_amt = 0;
	SELECT `min_wage_amt`, `ecola_amt` 
	INTO @min_wage_amt, @ecola_amt
	FROM ww_users_location WHERE `location_id` = @nPayLocation AND `deleted` = 0;
	IF @min_wage_amt >= @DailySalary THEN
		-- CALL sp_payroll_get_ecola(puserid, periodid, @payroll_date, @ecola_amt, @period_processing_type_id);
		SET @Not_MinWage = 1;
	END IF;
	-- compute/update amount = base_on_earning
	SET @cur_tran_id = 0;
	SELECT `id` INTO @cur_tran_id
	FROM ww_payroll_current_transaction WHERE AES_DECRYPT( `amount`, encryption_key() ) = 'base_on_earning' 
		AND `employee_id` = puserid AND `payroll_date` = @payroll_date AND `deleted` = 0;
	IF @cur_tran_id > 0 THEN
		SET @result = 0.00;
		CALL sp_payroll_get_transaction(puserid,periodid,'1,5',1,1,1,0,@result);
		UPDATE ww_payroll_current_transaction SET `unit_rate` = AES_ENCRYPT( @result, encryption_key() ), `amount` = AES_ENCRYPT( @result, encryption_key() )
			WHERE `id` = @cur_tran_id;
	END IF;
	
	-- compute wtax
	-- Based on Tax Table
	IF @Not_MinWage = 0 THEN
		-- Annualized		
		 CALL sp_payroll_get_tax_annualize( puserid, periodid, @payroll_date, @dtRes, @period_processing_type_id, @payroll_schedule_id, @nTaxcode, @nRemain );
	END IF;
	-- compute netpay
	CALL sp_payroll_get_netpay( periodid, puserid, @payroll_date, @period_processing_type_id ) ;
	-- update payroll details
	UPDATE ww_payroll_current_transaction a, ww_users_profile b SET 
		a.company_id = @nCompany,
		a.branch_id = b.branch_id,
		a.group_id = @nGroup,
		a.department_id = @nDepartment,
		a.section_id = @nSection,
		a.division_id = @nDivision,
		a.position_id = @nPosition,
		a.location_id = @nLocation,
		a.payment_type_id = @nPaymentType,
		a.minwageflag = @Not_MinWage
	WHERE a.employee_id = puserid AND a.employee_id = b.user_id AND a.period_id = periodid AND a.payroll_date = @payroll_date;
		
	UPDATE ww_payroll_period SET `period_status_id` = 2 WHERE payroll_period_id = periodid ;
	COMMIT;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_final_pay_backup` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_final_pay_backup` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_final_pay_backup`(
	IN periodid int(11),
	IN userid int(11)
    )
BEGIN
	/*
	step 1: Compute remaining Attendance
	step 2: Allowances / Tenure
	step 3: Bonuses
	step 4: Annualized Tax
	step 5: Loans / other deductions
	1. Computation of Tenure ( if Applicable )
	2. Computation of Bonus
	       Bonus = ( Salary / 12 ) * No. of Months
	3. Loans Condition
	   - If last pay Running Balance to be deduct
	    ex: Stanford Salary Loan
		 Running Balance = 8,000.00
		 * 8,000.00 will be deduction on the last pay to settle the loan
         */
        
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
	    -- ERROR
	  ROLLBACK;
	END;
	START TRANSACTION;
	-- employee info
	SET @sSSS_week = '';
	SET @nStatus = '';
	SET @nEmp_type_id = '';
	SET @dtEff = '';
	SET @dtRes = '';
	SET @nShift = '';
	SET @nTaxcode = '';
	SET @nPayrate = '';
	SET @nPaysched = '';
	SET @nTotal_year_days = '';
	SET @nSalary = '';
	SET @nMin_takehome = '';
	SET @sBank_acct = '';
	SET @nPayLocation = '';
	SET @sSSS_no = '';
	SET @nSSS_mode = '';
	SET @sSSS_week = '';
	SET @nSSS_amount = '';
	SET @sHDMF_no = '';
	SET @nHDMF_mode = '';
	SET @sHDMF_week = '';
	SET @nHDMF_amount = '';
	SET @sPHIC_no = '';
	SET @nPHIC_mode = '';
	SET @sPHIC_week = '';
	SET @nPHIC_amount = '';
	SET @sEcola_week = '';
	SET @sTIN = '';
	SET @nTax_mode = '';
	SET @sTax_week = '';
	SET @nSensitivity = '';
	SET @nDivisor = '';
	SET @nCompany = '';
	SET @nGroup = '';
	SET @nDivision = '';
	SET @nDepartment = '';
	SET @nPosition = '';
	SET @nReports_to = '';
	SET @nJobtitle = '';
	SET @nLocation = '';
	SET @nRemain = '';
	SET @nAttendanceBase = '';
	SET @nHold = '';
	-- period info
	SET @period_status_id = 0;
	SET @payroll_date = '';
	SET @date_from = '';
	SET @date_to = '';
	SET @date_closing = '';
	SET @sweek = '';
	SET @payroll_schedule_id = 0;
	SET @period_processing_type_id = 0;
	SET @apply_to_id = 0;
	
    -- employee info
	CALL `sp_payroll_employee_info`(puserid, 
		@nStatus, @nEmp_type_id, @dtEff, @dtRes, @nShift, 
		@nTaxcode, @nPayrate, @nPaysched, @nTotal_year_days, @nSalary, 
		@nMin_takehome, @sBank_acct, @nPayLocation, @sSSS_no, @nSSS_mode, 
		@sSSS_week, @nSSS_amount, @sHDMF_no, @nHDMF_mode, @sHDMF_week, 
		@nHDMF_amount, @sPHIC_no, @nPHIC_mode, @sPHIC_week, @nPHIC_amount, 
		@sEcola_week, @sTIN, @nTax_mode, @sTax_week, @nSensitivity, @nDivisor, 
		@nCompany, @nGroup, @nDivision, @nDepartment, @nPosition, @nReports_to,
		@nJobtitle, @nLocation, @nRemain, @nAttendanceBase, @nHold);
		
    -- period info
	SELECT `period_status_id`, `payroll_date`, `date_from`, `date_to`, `date_closing`, `week`, 
		`payroll_schedule_id`, `period_processing_type_id`, `apply_to_id`
	INTO @period_status_id, @payroll_date, @date_from, @date_to, @date_closing, @sweek, 
		@payroll_schedule_id, @period_processing_type_id, @apply_to_id
	FROM ww_payroll_period WHERE payroll_period_id = periodid AND deleted = 0;
	
	IF @period_status_id != 3 THEN
		DELETE FROM ww_payroll_current_transaction WHERE `employee_id` = puserid AND `period_id` = periodid;
	END IF;
	
	-- compute overtime
	CALL sp_payroll_get_overtime( puserid, @payroll_date, periodid, @period_processing_type_id );
	
	-- compute late approve overtime
	CALL sp_payroll_get_overtime_lf( puserid, @payroll_date, periodid, @period_processing_type_id );	
	
	-- compute loan amortization
	CALL sp_payroll_get_loan_amortization( puserid, periodid, @payroll_date, @period_processing_type_id, @sweek );
	
	-- compute loan interest
	CALL sp_payroll_get_loan_interest( puserid, periodid, @payroll_date, @period_processing_type_id, @sweek );
	
	-- compute recurring
	CALL sp_payroll_get_recurring(puserid, periodid, @sweek, @payroll_date, @period_processing_type_id);
	
	-- compute batch entry
	CALL sp_payroll_get_batch(puserid, periodid, @payroll_date, @period_processing_type_id);
	
	-- compute bonus
	CALL sp_payroll_get_bonus(puserid, periodid, @payroll_date, @nSalary, @period_processing_type_id);
	
	SET @Not_MinWage = 0;
	SET @min_wage_amt = 0;
	SET @ecola_amt = 0;
	
	SELECT `min_wage_amt`, `ecola_amt` 
	INTO @min_wage_amt, @ecola_amt
	FROM ww_payroll_location WHERE `payroll_location_id` = @nPayLocation AND `deleted` = 0;
	
	IF @min_wage_amt >= @DailySalary THEN
		CALL sp_payroll_get_ecola(puserid, periodid, @payroll_date, @ecola_amt, @period_processing_type_id);
		SET @Not_MinWage = 1;
	END IF;
	-- compute/update amount = base_on_earning
	SET @cur_tran_id = 0;
	SELECT `id` INTO @cur_tran_id
	FROM ww_payroll_current_transaction WHERE AES_DECRYPT( `amount`, encryption_key() ) = 'base_on_earning' 
		AND `employee_id` = puserid AND `payroll_date` = @payroll_date AND `deleted` = 0;
	IF @cur_tran_id > 0 THEN
		SET @result = 0.00;
		CALL sp_payroll_get_transaction(puserid,periodid,'1,5',1,1,1,0,@result);
		UPDATE ww_payroll_current_transaction SET `unit_rate` = AES_ENCRYPT( @result, encryption_key() ), `amount` = AES_ENCRYPT( @result, encryption_key() )
			WHERE `id` = @cur_tran_id;
	END IF;
	
	-- compute wtax
	-- Based on Tax Table
	IF @Not_MinWage = 0 THEN
		IF @nTax_mode = 1 THEN
			CALL sp_payroll_get_tax_table( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTaxcode );
		-- Annualized
		ELSEIF @nTax_mode = 2 THEN
			 CALL sp_payroll_get_tax_annualize( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTaxcode, @nRemain );
		END IF;
		/*
		-- Manual
		elseif @nTax_mode = 3 THEN	
		
		-- Cummulative
		elseif @nTax_mode = 4 THEN
		
		else
		
		end if;
		*/
	END IF;
	-- compute netpay
	CALL sp_payroll_get_netpay( periodid, puserid, @payroll_date, @period_processing_type_id ) ;
	
	UPDATE ww_payroll_period SET `period_status_id` = 2 WHERE payroll_period_id = periodid ;
	COMMIT;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_final_pay_bonus` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_final_pay_bonus` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_final_pay_bonus`( 
	IN puserid INT(11),
	IN periodid INT(11),
	in dtResigned date,
	IN paydate DATE,
	IN processing_type_id INT(11) 
    )
BEGIN
	SET @NTax_bonus = 0.00;
	SET @nNonTax = 0.00;
	SET @max_rule = 0;
	-- get ytd bonus
	SET @ytd_bonus = 0;
	SELECT sum(AES_DECRYPT( ytd, encryption_key() )) INTO @ytd_bonus
	FROM ww_payroll_closed_summary WHERE user_id = puserid AND `type` = 'C' AND deleted = 0 AND summary_code = 'BONUS';
	
	-- get current bonus
	SET @current_bonus = 0;
	SELECT sum(AES_DECRYPT( amount, encryption_key() )) INTO @current_bonus
	FROM ww_payroll_current_transaction pct
	LEFT JOIN ww_payroll_transaction_class ptc ON pct.`transaction_class_id` = ptc.`transaction_class_id`
	WHERE pct.employee_id = puserid AND pct.payroll_date = paydate 
		AND pct.deleted = 0 AND pct.on_hold = 0 AND ptc.`transaction_class_code` = 'BONUS';
	
	-- sum ytd and current
	SET @ytd_bonus = @ytd_bonus + @current_bonus;	
	
	-- get prorated bonus
	SET @nBonus = 0;
	SET @Tax_Bonus = 0;
	CALL sp_payroll_get_bonus_prorated( puserid, dtResigned, @nBonus);
	IF (@nBonus > 0) THEN
		IF @max_rule = 1 THEN
			IF @ytd_bonus >= get_max_bonus() THEN
				SET @Tax_Bonus = @nBonus;
				SET @NTax_Bonus = 0;
			ELSEIF @ytd_bonus + @nBonus > get_max_bonus() THEN
				SET @NTax_bonus = get_max_bonus() - @ytd_bonus ;
				SET @Tax_Bonus = @nBonus - @NTax_bonus;
				SET @ytd_bonus = @ytd_bonus + @NTax_bonus;
			ELSE
				SET @NTax_bonus = @nBonus;
				SET @Tax_Bonus = 0;
				SET @ytd_bonus = @ytd_bonus + @NTax_bonus;
			END IF;
		ELSE
			SET @Tax_bonus = 0;
			SET @NTax_Bonus = @nBonus;
		END IF;
		
		
		SET @qty = 1.00;
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SET @bonus_id = 0;
		
		IF @Tax_Bonus != 0 THEN
			SELECT `transaction_code`, `transaction_id` , `transaction_type_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE transaction_code =  '13TH MONTH PAY NT';
			
			CALL sp_payroll_bonus_insert( puserid, periodid, paydate, processing_type_id, @tran_id, @tran_class_id, @tran_code, @qty, @Tax_Bonus, @tran_type_id, @bonus_id, 'Bonus Taxable' );
		END IF;
		IF @NTax_Bonus != 0 THEN 
			SELECT `transaction_code`, `transaction_id` , `transaction_type_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE transaction_code =  '13THMNT_NT';
			
			CALL sp_payroll_bonus_insert( puserid, periodid, paydate, processing_type_id, @tran_id, @tran_class_id, @tran_code, @qty, @NTax_Bonus, @tran_type_id, @bonus_id, 'Bonus Non-Taxable' );
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_final_pay_last_period` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_final_pay_last_period` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_final_pay_last_period`(
	IN puserid INT(11),
	IN nCompany INT(11),
	IN nHourlyRate DECIMAL(12,2),
	IN dtResigned DATE,
	IN periodid INT(11),
	IN dtPay DATE,
	IN processing_type_id INT(11)   
    )
BEGIN
	-- INSERT INTO `logtable` (`log`) VALUES (CONCAT(dtResigned,' ',nHourlyRate,' ',nCompany));
	-- get total hours render
	SET @nSalary = 0;
	SET @nQuantity = 0;
	SELECT ROUND(( SUM(hrs_actual) * nHourlyRate ),2), sum(hrs_actual) INTO @nSalary, @nQuantity
	FROM ww_time_record_summary s
	LEFT JOIN ww_payroll_period pp ON s.payroll_date = pp.payroll_date
	LEFT JOIN ww_time_period t ON pp.payroll_date = t.payroll_date
	WHERE t.deleted = 0 AND s.deleted = 0 AND
		dtResigned BETWEEN t.date_from AND t.date_to AND
		s.user_id = puserid AND
		t.company_id = nCompany and
		pp.payroll_period_id = periodid;
	
	IF @nSalary > 0 THEN
		CALL sp_payroll_insert('SALARY', puserid, periodid, processing_type_id, dtPay, @nQuantity, nHourlyRate, @nSalary, 1, '',0,'Final Pay' );	
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_final_pay_leave_conversion` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_final_pay_leave_conversion` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_final_pay_leave_conversion`(
	IN nUserID INT(11),
	IN nPeriodID INT(11),
	IN nCompID INT(11),	
	IN dtPay DATE,
	IN dtRes DATE,
	IN nDailySalary DECIMAL(12,2),
	IN nEmpTypeID INT(11),
	IN nProcTypeID INT(11)
    )
BEGIN
	SET @nontax_leave_id = 0;
	SET @taxable_leave_id = 0;
	SET @convertible = 0;
	SET @nontax = 0;
	SET @taxable = 0;
	set @carryover = 0;
	SET @forfeited = 0;
	SET @balance = 0;
	SET @year = '';
	SET @form_id = 0;
	SET @form_code = '';
	
	SELECT 224, 225,tfb.`form_code`, 
		tfb.`previous` + tfb.`current` - ( tfb.`used` + tfb.`used_insert` + tfb.`forfeited`),
		YEAR(dtRes), tfb.form_id
	INTO @nontax_leave_id, @taxable_leave_id,@form_code, @balance,
		@year, @form_id
	FROM ww_time_form_balance tfb
	WHERE tfb.`deleted` = 0
		AND tfb.`year` = YEAR(dtRes)
		AND tfb.user_id = nUserID
		and (tfb.form_code = 'LIP' OR tfb.form_code = 'SIL');
	
	IF @balance > 0 THEN
		-- INSERT TRANSACTION 
		-- TAXABLE
		IF @balance > 0 THEN
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SET @tran_type_id = 0;
			SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE transaction_id = @nontax_leave_id;
			
			INSERT INTO `ww_payroll_current_transaction`
				    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
				     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
				     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
				     `created_by`, `deleted`)
			SELECT nPeriodID, nProcTypeID, dtPay, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT( @balance, encryption_key() ), 
			     AES_ENCRYPT( ROUND( nDailySalary, 2 ), encryption_key() ) ,
			     AES_ENCRYPT( ROUND( (@balance * nDailySalary), 2 ), encryption_key() ),
			     @tran_type_id, 0,'leave_conversion',0,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = nUserID;
		END IF;
		UPDATE ww_time_form_balance SET paid_unit = @balance WHERE user_id = nUserID AND form_id = @form_id AND `year` = @year;
	END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_final_pay_overtime` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_final_pay_overtime` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_final_pay_overtime`(
	IN puserid INT(11),
	in dtResigned Date,
	IN paydate DATE,	
	IN periodid INT(11),
	IN processing_type_id INT(11)
	)
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE tran_code VARCHAR(32);
	DECLARE tran_id INT(11);
	DECLARE tran_class_id INT(11);
	DECLARE ot_rate DECIMAL(5,2);
	DECLARE qty DECIMAL(5,2);
	DECLARE ot_rate_amount DECIMAL(5,2);
	DECLARE employment_type VARCHAR(32);
	DECLARE tran_type_id INT(11);
	DECLARE rec_id INT(11);
	
	DECLARE overtime CURSOR FOR 
		SELECT p.`transaction_id`, t.`transaction_class_id`, p.`transaction_code`, r.`overtime_rate`, ra.`overtime_amount`, IF(up.employment_type_id = 5,'supervisor','') AS employee_type, SUM( p.`quantity` ), t.`transaction_type_id`,p.`record_id`
		FROM ww_time_record_process p
		LEFT JOIN ww_users_profile u ON p.`user_id` = u.`user_id`
		LEFT JOIN ww_partners up ON u.`user_id` = up.`user_id`
		LEFT JOIN ww_payroll_partners pp ON pp.`user_id` = u.`user_id`
		LEFT JOIN ww_payroll_overtime_rates r ON p.`transaction_code` = r.`overtime_code` AND u.`company_id` = r.`company_id` AND r.deleted = 0
		LEFT JOIN ww_payroll_overtime_rates_amount ra ON p.`transaction_code` = ra.`overtime_code` AND ra.deleted = 0 AND u.`company_id` = ra.`company_id` AND pp.`location_id` = ra.`overtime_location_id`
		LEFT JOIN ww_payroll_transaction t ON p.`transaction_id` = t.`transaction_id`
		LEFT JOIN ww_time_period tp ON tp.period_id = p.time_period_id
		WHERE r.`deleted` = 0 AND p.`deleted` = 0 AND p.`latefile` = 0 AND tp.`deleted` = 0
			AND p.`user_id` = puserid AND p.`payroll_date` = paydate AND dtResigned BETWEEN tp.`date_from` AND tp.`date_to`
		GROUP BY p.`transaction_code`;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	-- select overtime;
	
	OPEN overtime;
	REPEAT
		FETCH overtime INTO tran_id, tran_class_id, tran_code, ot_rate, ot_rate_amount, employment_type, qty, tran_type_id, rec_id ;
		
		IF NOT done THEN
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, tran_id, tran_class_id,
			     tran_code, AES_ENCRYPT( qty, encryption_key() ), 
			     CASE
				WHEN payroll_rate_type_id = 2 AND employment_type != 'supervisor' THEN AES_ENCRYPT( ROUND( ( ( (AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) / 8 ) * ot_rate ),2), encryption_key() ) 
				WHEN payroll_rate_type_id = 2 AND employment_type = 'supervisor' THEN AES_ENCRYPT( ROUND(ot_rate_amount,2), encryption_key() ) 
				WHEN payroll_rate_type_id = 6 THEN AES_ENCRYPT( ROUND( ( (AES_DECRYPT(`salary`, encryption_key()) / 8 ) * ot_rate ),2), encryption_key() ) 
				ELSE 0 
			     END,
			     CASE
				WHEN payroll_rate_type_id = 2 AND employment_type != 'supervisor' THEN AES_ENCRYPT( ROUND( ( qty * ( ( ( ( AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) ) / 8 ) * ot_rate ) ), 2 ), encryption_key() )
				WHEN payroll_rate_type_id = 2 AND employment_type = 'supervisor' THEN AES_ENCRYPT( ROUND((qty * ot_rate_amount),2), encryption_key() ) 
				WHEN payroll_rate_type_id = 6 THEN AES_ENCRYPT( ROUND( ( qty * ( (AES_DECRYPT(`salary`, encryption_key()) / 8 ) * ot_rate ) ),2), encryption_key() ) 
				ELSE 0
			     END,
			     tran_type_id, 0,'ww_time_record_process',rec_id,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
	UNTIL done END REPEAT;
    
	CLOSE overtime;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_final_pay_overtime_lf` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_final_pay_overtime_lf` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_final_pay_overtime_lf`(
	IN puserid INT(11),
	IN dtResigned DATE,
	iN paydate DATE,
	IN periodid INT(11),
	IN processing_type_id INT(11)
	)
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE tran_code VARCHAR(32);
	DECLARE ot_rate DECIMAL(3,2);
	DECLARE qty DECIMAL(3,2);
	DECLARE ot_rate_amount DECIMAL(5,2);
	DECLARE employment_type VARCHAR(32);	
	DECLARE tran_type_id INT(11);
	DECLARE rec_id INT(11);
	
	DECLARE overtime CURSOR FOR 
		SELECT p.`transaction_code`, r.`overtime_rate`, ra.`overtime_amount`, IF(up.employment_type_id = 5,'supervisor','') AS employee_type, SUM(p.`quantity`), t.`transaction_type_id`,p.`record_id`
		FROM ww_time_record_process p
		LEFT JOIN ww_users_profile u ON p.`user_id` = u.`user_id`
		LEFT JOIN ww_partners up ON u.`user_id` = up.`user_id`
		LEFT JOIN ww_payroll_partners pp ON pp.`user_id` = u.`user_id`	
		LEFT JOIN ww_payroll_overtime_rates r ON p.`transaction_code` = CONCAT(r.`overtime_code`,'_ADJ') AND u.`company_id` = r.`company_id` AND r.deleted = 0	
		LEFT JOIN ww_payroll_overtime_rates_amount ra ON p.`transaction_code` = ra.`overtime_code` AND ra.deleted = 0 AND u.`company_id` = ra.`company_id` AND pp.`location_id` = ra.`overtime_location_id`
		LEFT JOIN ww_payroll_transaction t ON p.`transaction_id` = t.`transaction_id`
		LEFT JOIN ww_time_period tp ON tp.period_id = p.time_period_id
		WHERE r.`deleted` = 0 AND p.`deleted` = 0 AND tp.deleted = 0
			AND p.`payroll_date` = paydate 
			AND dtResigned BETWEEN tp.`date_from` AND tp.`date_to`
			AND p.`latefile` = 1 AND p.`user_id` = puserid
		GROUP BY p.`transaction_code`;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	-- select overtime;
	
	OPEN overtime;
	REPEAT
		FETCH overtime INTO tran_code, ot_rate, ot_rate_amount, employment_type, qty, tran_type_id, rec_id ;
		
		IF NOT done THEN
			
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SELECT `transaction_code`, `transaction_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_class_id
			FROM ww_payroll_transaction WHERE transaction_code = CONCAT(tran_code,'_LF');
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT( qty, encryption_key() ), 
			     CASE
				WHEN payroll_rate_type_id = 2 AND employment_type != 'supervisor' THEN AES_ENCRYPT( ROUND( ( ( (AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) / 8 ) * ot_rate ),2), encryption_key() ) 
				WHEN payroll_rate_type_id = 2 AND employment_type = 'supervisor' THEN AES_ENCRYPT( ROUND(ot_rate_amount,2), encryption_key() ) 
				WHEN payroll_rate_type_id = 6 THEN AES_ENCRYPT( ROUND( ( (AES_DECRYPT(`salary`, encryption_key()) / 8 ) * ot_rate ),2), encryption_key() ) 
				ELSE 0 
			     END,
			     CASE
				WHEN payroll_rate_type_id = 2 AND employment_type != 'supervisor' THEN AES_ENCRYPT( ROUND( ( qty * ( ( ( ( AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) ) / 8 ) * ot_rate ) ), 2 ), encryption_key() )
				WHEN payroll_rate_type_id = 2 AND employment_type = 'supervisor' THEN AES_ENCRYPT( ROUND((qty * ot_rate_amount),2), encryption_key() ) 
				WHEN payroll_rate_type_id = 6 THEN AES_ENCRYPT( ROUND( ( qty * ( (AES_DECRYPT(`salary`, encryption_key()) / 8 ) * ot_rate ) ),2), encryption_key() ) 
				ELSE 0
			     END,
			     tran_type_id, 0,'ww_time_record_process',rec_id,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
	UNTIL done END REPEAT;
    
	CLOSE overtime;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_absences` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_absences` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_absences`( 
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11) 
	)
BEGIN
	SET @absent = 0;
	
	SELECT  SUM(`quantity`) INTO @absent
	FROM ww_time_record_process
	WHERE `user_id` = puserid AND payroll_date = paydate
		AND `transaction_code` = 'ABSENCES' AND latefile = 0 AND deleted = 0
	GROUP BY user_id, payroll_date, transaction_id;
	
	IF @absent > 0 THEN 
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT `transaction_code`, `transaction_id` , `transaction_type_id`, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'ABSENCES';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT(@absent, encryption_key()), 
		     AES_ENCRYPT( ROUND( (AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8, 2), encryption_key()) ,
		     AES_ENCRYPT( ROUND( ( @absent * ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) /8 ) ),2), encryption_key()), 
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_absences_adj` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_absences_adj` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_absences_adj`( 
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11) 
	)
BEGIN
	SET @absent = 0;
	
	SELECT  SUM(`quantity`) INTO @absent
	FROM ww_time_record_process
	WHERE `user_id` = puserid AND payroll_date = paydate
		AND `transaction_code` = 'ABSENCES_ADJ' AND latefile = 1 AND deleted = 0
	GROUP BY user_id, payroll_date, transaction_id;
	
	IF @absent != 0 THEN 
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'ABSENCES_ADJ';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT(@absent, encryption_key()), 
		     AES_ENCRYPT( ROUND( (AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ,2), encryption_key()) ,
		     AES_ENCRYPT( ROUND( ( @absent * ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ) ),2), encryption_key()), 
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_absences_lf` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_absences_lf` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_absences_lf`( 
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11) 
	)
BEGIN
	SET @absent = 0;
	
	SELECT  SUM(`quantity`) INTO @absent
	FROM ww_time_record_process
	WHERE `user_id` = puserid AND payroll_date = paydate
		AND `transaction_code` = 'ABSENCES' AND latefile = 1 AND deleted = 0
	GROUP BY user_id, payroll_date, transaction_id;
	
	IF @absent > 0 THEN 
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = CONCAT('ABSENCES','_LF');
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT(@absent, encryption_key()), 
		     AES_ENCRYPT( ROUND( (AES_DECRYPT(salary, encryption_key()) / ( 313 /12 ) ),2), encryption_key()) ,
		     AES_ENCRYPT( ROUND( ( @absent * ( AES_DECRYPT(salary, encryption_key()) / ( 313 /12 ) ) ),2), encryption_key()), 
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_batch` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_batch` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_batch`(
		IN puserid INT(11), 
		IN periodid INT(11), 
		IN paydate DATE,
		IN processing_type_id INT(11)
	)
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE rec_id INT(11);
	DECLARE amount DECIMAL(12,2);
	DECLARE quantity DECIMAL(12,2);
	DECLARE unit_rate DECIMAL(12,2);
	DECLARE tran_id INT(11);
	DECLARE tran_class_id INT(11);
	DECLARE tran_type_id INT(11);
	DECLARE tran_code VARCHAR(32);
	
	DECLARE batch CURSOR FOR
		SELECT b.`batch_entry_id`, aes_decrypt(e.`amount`,encryption_key()),aes_decrypt(e.`quantity`,encryption_key())
			, aes_decrypt(e.`unit_rate`,encryption_key()), b.`transaction_id`
			, t.`transaction_class_id`, t.`transaction_type_id`, t.`transaction_code`
		FROM ww_payroll_entry_batch b
		LEFT JOIN ww_payroll_entry_batch_employee e ON b.`batch_entry_id` = e.`batch_entry_id`
		LEFT JOIN ww_payroll_transaction t ON t.`transaction_id` = b.`transaction_id`
		WHERE b.`deleted` = 0 AND e.deleted = 0 AND e.`employee_id` = puserid 
			AND b.payroll_date = paydate;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	
	OPEN batch;
	REPEAT
		FETCH batch INTO rec_id, amount, quantity, unit_rate, tran_id, tran_class_id, tran_type_id, tran_code;
		
		-- INSERT INTO `logtablecheck` (`log`) VALUES (puseridconcat(puserid,' - ',tran_id));
		
		IF NOT done THEN
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, tran_id, tran_class_id,
			     tran_code, AES_ENCRYPT( quantity, encryption_key() ), 
			     AES_ENCRYPT( ROUND( unit_rate, 2 ), encryption_key() ) ,
			     AES_ENCRYPT( ROUND( (quantity * unit_rate), 2 ), encryption_key() ),
			     tran_type_id, 0,'batch_entry',rec_id,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
			
		END IF;
			
	UNTIL done END REPEAT;
    
	CLOSE batch;
	-- 
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_bonus` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_bonus` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_bonus`(
	IN puserid INT(11),
	IN periodid INT(11),
	IN paydate DATE,
	IN sal_amount DECIMAL(12,2),
	IN processing_type_id INT(11) 
    )
BEGIN
	SET @NTax_bonus = 0.00;
	SET @nNonTax = 0.00;
	SET @max_rule = 0;
	-- get ytd bonus
	SET @ytd_bonus = 0;
	SELECT AES_DECRYPT( ytd, encryption_key() ) INTO @ytd_bonus
	FROM ww_payroll_closed_summary WHERE user_id = puserid AND `type` = 'C' AND deleted = 0 AND summary_code = 'BONUS' AND `year` = YEAR(paydate);
	
	-- get current bonus
	SET @current_bonus = 0;
	SELECT AES_DECRYPT( amount, encryption_key() ) INTO @current_bonus
	FROM ww_payroll_current_transaction pct
	LEFT JOIN ww_payroll_transaction_class ptc ON pct.`transaction_class_id` = ptc.`transaction_class_id`
	WHERE pct.employee_id = puserid AND pct.payroll_date = paydate 
		AND pct.deleted = 0 AND pct.on_hold = 0 AND ptc.`transaction_class_code` = 'BONUS';
	
	-- sum ytd and current
	SET @ytd_bonus = @ytd_bonus + @current_bonus;	
	
	SET @bonus_id = 0;
	SET @bonus_tran_id = 0;
	SET @bonus_tax_tran_id = 0;
	SET @dtFrom = '0000-00-00';
	SET @dtTo = '0000-00-00';
	SET @pDate = '0000-00-00';
	SET @tran_method_id = 0;
	SET @period = 0;
	SET @amount = 0.00;
	SET @max_rule = 0;
	SET @dtStart = '0000-00-00';
	SET @dtEnd = '0000-00-00';
	SET @current_bonus = 0.00;
	SET @salary = 0;
	-- get bonus setup
	SELECT b.`bonus_id`, b.`bonus_transaction_id`,b.`taxable_bonus_transaction_id`, b.`date_from`, b.`date_to`, b.`payroll_date`, 
		b.`transaction_method_id`, b.`period`, AES_DECRYPT( e.`amount`, encryption_key() ), b.`apply_maxbonus_rule`
	INTO @bonus_id, @bonus_tran_id, @bonus_tax_tran_id, @dtFrom, @dtTo, @pDate, @tran_method_id, @period, @amount, @max_rule
	FROM ww_payroll_bonus b
	INNER JOIN ww_payroll_bonus_employee e ON b.`bonus_id` = e.`bonus_id`
	WHERE e.`employee_id` = puserid AND b.`payroll_date` = paydate;
	
	-- Earnings (%)
	IF @tran_method_id = 1 THEN
		SET @current_bonus
	-- Period Salary (%)
	ELSEIF @tran_method_id = 2 THEN
		CALL sp_payroll_get_bonus_period( puserid, @salary, @eff_date, @res_date);
		SET @current_bonus = ( @salary * @amount ) / 100 ;
	-- Fixed
	ELSEIF @tran_method_id = 3 THEN
		SET @current_bonus = @amount;
	-- Period Salary and Attendance (%)
	ELSEIF @tran_method_id = 4 THEN
		CALL sp_payroll_get_bonus_period( puserid, @salary, @eff_date, @res_date);
		IF @eff_date > @dtFrom THEN
			SET @dtStart = @eff_date;
		ELSE
			SET @dtStart = @dtFrom;
		END IF;
		
		IF @res_date < @dtTo THEN
			SET @dtEnd = @res_date;
		ELSE
			SET @dtEnd = @dtTo;
		END IF;
		
		SET @nDiv = get_bonus_divisor(@dtStart, @dtEnd);
		
		IF @nDiv > 12 THEN
			SET @nDiv = 12;
		END IF;
		SET @closed_attnd_ded = 0;
		
		SELECT IFNULL( ROUND( SUM( AES_DECRYPT( amount, encryption_key() ) ), 2 ), 0.00)
		INTO @closed_attnd_ded
		FROM ww_payroll_closed_transaction
		WHERE transaction_code IN ('ABSSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')
			AND employee_id = puserid AND payroll_date BETWEEN @dtFrom AND @dtTo AND deleted = 0;
		
		SET @current_attnd_ded = 0;
		SELECT IFNULL( ROUND( SUM( AES_DECRYPT( amount, encryption_key() ) ), 2 ), 0.00)
		INTO @current_attnd_ded
		FROM ww_payroll_current_transaction
		WHERE transaction_code IN ('ABSSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')
			AND employee_id = puserid AND payroll_date BETWEEN @dtFrom AND @dtTo AND deleted = 0 AND on_hold = 0;
		SET @tot_attnd_ded = 0;
		SET @tot_attnd_ded = @current_attnd_ded + @closed_attnd_ded;
		SET @current_bonus = ( ( ( @salary * @nDiv ) - @tot_attnd_ded ) * ( @amount / 100 ) ) / 12;
		
	-- Actual Salary (%)
	ELSEIF @tran_method_id = 5 THEN
		-- Other income less deduction
		SET @nOthIncome = 0;		
		SET @nOthIncome = get_bonus_other_income(@dtFrom, @dtTo, puserid);
		SET @current_bonus = ( ( @nOthIncome / @period ) * ( @amount / 100 ) ) / 12;
	-- 13th month pay without deduction for abcenses
	ELSEIF @tran_method_id = 6 THEN
		SET @nDeduct = 0;
		
		CALL sp_payroll_get_bonus_period( puserid, @salary, @eff_date, @res_date);
		
		IF @eff_date < @dtFrom THEN
			SET @dtStart = @dtFrom;
		ELSE
			SET @dtStart = @eff_date;
			
			IF DAY(@eff_date) > 1 THEN
				SET @nDeduct = 1;
			END IF;			
		END IF;
		
		IF @res_date < @dtTo AND @res_date != '0000-00-00' THEN
			SET @dtEnd = @res_date;
		ELSE
			SET @dtEnd = @dtTo;
		END IF;
		
		SET @nDiv = get_bonus_divisor(@dtStart, @dtEnd) - @nDeduct;
		
		IF @nDiv > 12 THEN
			SET @nDiv = 12;
		END IF;
		
		SET @current_bonus = ((@salary / 12) * @nDiv);
			
	END IF;
	SET @max_rule = 1;
	IF @max_rule = 1 THEN
		IF @ytd_bonus >= get_max_bonus() THEN
			SET @Tax_Bonus = @current_bonus;
			SET @NTax_Bonus = 0;
		ELSEIF @ytd_bonus + @current_bonus > get_max_bonus() THEN
			SET @NTax_bonus = get_max_bonus() - @ytd_bonus ;
			SET @Tax_Bonus = @current_bonus - @NTax_bonus;
			SET @ytd_bonus = @ytd_bonus + @NTax_bonus;
		ELSE
			SET @NTax_bonus = @current_bonus;
			SET @Tax_Bonus = 0;
			SET @ytd_bonus = @ytd_bonus + @NTax_bonus;
		END IF;
	ELSE
		SET @Tax_bonus = 0;
		SET @NTax_Bonus = @current_bonus;
	END IF;
	
	IF paydate = @pDate THEN
		SET @qty = 1.00;
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		
		IF @Tax_Bonus != 0 THEN
			SELECT `transaction_code`, `transaction_id` , `transaction_type_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE transaction_id =  @bonus_tax_tran_id;
			
			CALL sp_payroll_bonus_insert( puserid, periodid, paydate, processing_type_id, @tran_id, @tran_class_id, @tran_code, @qty, @Tax_Bonus, @tran_type_id, @bonus_id, 'Bonus Taxable' );
			UPDATE ww_payroll_period SET `bonus_tag` = 1 WHERE payroll_period_id = periodid ;
		END IF;
		IF @NTax_Bonus != 0 THEN 
			SELECT `transaction_code`, `transaction_id` , `transaction_type_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE transaction_id =  @bonus_tran_id;
			
			CALL sp_payroll_bonus_insert( puserid, periodid, paydate, processing_type_id, @tran_id, @tran_class_id, @tran_code, @qty, @NTax_Bonus, @tran_type_id, @bonus_id, 'Bonus Non-Taxable' );
			UPDATE ww_payroll_period SET `bonus_tag` = 1 WHERE payroll_period_id = periodid ;
		END IF;
	END IF;
	
	-- SELECT @Tax_Bonus;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_bonus_period` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_bonus_period` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_bonus_period`(
	IN puserid INT(11),
	OUT salary DECIMAL(12,2),
	OUT eff_date DATE,
	OUT resigned_date DATE
    )
BEGIN
	SELECT CASE a.`payroll_schedule_id` 
		WHEN 4 THEN IFNULL( AES_DECRYPT( a.`salary`, encryption_key() ), 0.00)
		WHEN 5 THEN IFNULL( AES_DECRYPT( a.`salary`, encryption_key() ), 0.00) * 2
		WHEN 6 THEN IFNULL( AES_DECRYPT( a.`salary`, encryption_key() ), 0.00) * ( a.`total_year_days` / 12 )
		ELSE IFNULL( AES_DECRYPT( a.`salary`, encryption_key() ), 0.00) END, 
		b.`effectivity_date`, b.`resigned_date`
	INTO salary, eff_date, resigned_date
	FROM ww_payroll_partners a, ww_partners b
	WHERE a.`user_id` = b.`user_id`
		AND a.`user_id` = puserid;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_bonus_prorated` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_bonus_prorated` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_bonus_prorated`( 
	IN nUserID int(11), 
	IN dtResigned date, 
	out nBonus decimal(18,2))
BEGIN
	SET @nBonusClosed = 0;
	SET @nBonusCurrent = 0;
	
	select ROUND( IFNULL(SUM(AES_DECRYPT(amount, encryption_key()) ) ,0),2) / 12 into @nBonusClosed
	from ww_payroll_closed_transaction 
	WHERE deleted = 0 AND transaction_code = 'SALARY'
	-- where deleted = 0 and transaction_code in ('SALARY','MPCCMPC','RICEALLOW','LAUNDRYALLOW','MEDICINEALLOW')
		AND employee_id = nUserID
		and year(payroll_date) = year(dtResigned);
	SELECT ROUND( IFNULL(SUM(AES_DECRYPT(amount, encryption_key()) ) ,0),2) / 12 INTO @nBonusCurrent
	FROM ww_payroll_current_transaction 
	WHERE deleted = 0 AND transaction_code = 'SALARY'
	-- WHERE deleted = 0 AND transaction_code in ('SALARY','MPCCMPC','RICEALLOW','LAUNDRYALLOW','MEDICINEALLOW')
		AND employee_id = nUserID
		AND YEAR(payroll_date) = YEAR(dtResigned);
		
	set nBonus = @nBonusClosed + @nBonusCurrent;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_ecola` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_ecola` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_ecola`(
	in puserid int(11), 
	in periodid int(11), 
	in paydate date, 
	in cola_amt decimal(12,2),
	in processing_type_id int(11)
    )
BEGIN
	SET @tran_code = '';
	SET @tran_id = 0;
	SET @tran_class_id = 0;
	SET @tran_type_id = 0;
	SELECT `transaction_code`, `transaction_id` , `transaction_type_id`, `transaction_class_id`
	INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
	FROM ww_payroll_transaction WHERE transaction_code = 'ECOLA';
	
	INSERT INTO `ww_payroll_current_transaction`
	    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
	     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
	     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
	     `created_by`, `deleted`)
	SELECT periodid, processing_type_id, paydate, t.`user_id`, @tran_id, @tran_class_id,
	     @tran_code, AES_ENCRYPT(SUM(t.`hrs_actual`), encryption_key()), 
	     AES_ENCRYPT( cola_amt, encryption_key() ) ,
	     AES_ENCRYPT( round ( ( ( SUM(t.`hrs_actual`) / 8 ) * cola_amt),2 ), encryption_key() ) ,
	     @tran_type_id, 0,'ECOLA',0,0,'',NOW(),0,0
	FROM ww_payroll_partners p, ww_time_record_summary t
	WHERE p.`user_id` = t.`user_id` AND 
		p.`user_id` = puserid AND
		t.`payroll_date` = paydate
	GROUP BY t.`user_id`, t.`payroll_date`;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_hdmf_contribution` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_hdmf_contribution` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_hdmf_contribution`(
	IN periodid INT(11), 
	IN paydate DATE,
	IN pay_sched_id INT(11),
	IN processing_type_id INT(11) ,
	IN nweek INT(1),
	IN puserid INT(11),
	IN salary DECIMAL(12,2),
	IN hdmf_mode INT(11),
	IN hdmf_amount decimal(12,2),
	IN hdmf_week VARCHAR(11)
	)
BEGIN
	SET @employee_id = 0;
	SET @cnt_week = '';
	SET @salary = 0.00;
	
	SET @eeshare = 0.00;
	SET @ershare = 0.00;
	
	SET @prev_eeshare = 0.00;
	SET @prev_ershare = 0.00;
	
	SET @prev_salary = 0.00;
	SET @earnings = 0.00;
	SET @bracket = 0.00;
		
	-- get assing salary or basic rate
	SELECT `user_id`, LENGTH(REPLACE(`hdmf_week`,',','')) INTO @employee_id, @cnt_week
	FROM ww_payroll_partners
	WHERE `user_id` = puserid AND FIND_IN_SET(nweek,`hdmf_week`) AND `payroll_schedule_id` = pay_sched_id;
	
	IF @employee_id > 0 THEN
		-- check previous payment
		SELECT MAX(CASE WHEN (`c`.`transaction_code` = 'HDMF_EMP') THEN ROUND(AES_DECRYPT(`c`.`amount`,`encryption_key`()),2) END) AS `prev_eeshare`,MAX(CASE WHEN (`c`.`transaction_code` = 'HDMF_COM') THEN ROUND(AES_DECRYPT(`c`.`amount`,`encryption_key`()),2) END) AS `prev_ershare` INTO @prev_eeshare, @prev_ershare
		FROM ww_payroll_closed_transaction c
		WHERE c.`employee_id` = @employee_id AND (MONTH(c.`payroll_date`) = MONTH(paydate) AND YEAR(c.`payroll_date`) = YEAR(MONTH(paydate)))
			AND c.`transaction_code` IN ('HDMF_EMP','HDMF_COM');			
					
		/*SELECT SUM(`employee`), SUM(`company`) INTO @prev_eeshare, @prev_ershare
		FROM ww_payroll_partners_contribution c
		LEFT JOIN ww_payroll_transaction t ON c.`transaction_id` = t.`transaction_id`
		WHERE c.`user_id` = @employee_id AND MONTH(c.`payroll_date`) = MONTH(paydate) 
			AND t.`transaction_code` = 'HDMF_EMP';*/
		
		IF @cnt_week > 1 THEN
		    IF hdmf_mode = 1 THEN
			    -- previous salary
			    SELECT ROUND(SUM(AES_DECRYPT(`amount`, encryption_key())),2) INTO @prev_salary 
			    FROM ww_payroll_closed_transaction WHERE (MONTH(`payroll_date`) = MONTH(paydate) AND YEAR(`payroll_date`) = YEAR(paydate))
				AND `transaction_code` = 'SALARY' AND `deleted` = 0 AND `employee_id` = @employee_id;
				
		    ELSEIF hdmf_mode = 5 THEN
			    -- previous actual earning
			    SET @result = 0;
			    SET @prev_actual_earning = 0.00;
			    CALL sp_payroll_get_transaction(@employee_id,periodid,'1,5',1,0,0,3,@result);
			    SET @prev_actual_earning = @result;				
	            END IF;
	              
		END IF;
		
		-- monthly
		IF pay_sched_id = 4 THEN
		    
		    
		    if hdmf_mode = 3 then
			-- manual
			set @eeshare = hdmf_amount;
		    else 
			-- default / actual
			SET @eeshare = 100.00; 
		    end if;
		    SET @ershare = 100.00;
			
		-- semi-monthly
		ELSEIF pay_sched_id = 5 THEN
		    
		    -- default
		    IF hdmf_mode = 1 THEN
			
			SET @eeshare = 100 / @cnt_week;
			SET @ershare = @eeshare;
			
			IF @prev_salary > 0 THEN
				SET @eeshare = 100.00 - IFNULL(@prev_eeshare,0.00);
				SET @ershare = 100.00 - IFNULL(@prev_ershare,0.00);
				
			END IF;
			
		    -- actual
		    ELSEIF hdmf_mode = 5 THEN
			
			-- get actual earning
			SET @result = 0;
			CALL sp_payroll_get_transaction(@employee_id,periodid,'1,2,5',1,1,1,0,@result);
			SET @earnings = @result;
			
			SET @bracket = @earnings * 0.02;
			
			IF @bracket >= 100 THEN
				SET @eeshare = 100.00;
				SET @ershare = 100.00;
			ELSE
				SET @eeshare = @bracket;
				SET @ershare = @bracket;
				
			END IF;
			
			IF (@prev_eeshare + @eeshare) >= 100 THEN
				SET @eeshare = 0;
				SET @ershare = 0;
			ELSE
				SET @eeshare = 100.00 - IFNULL(@prev_eeshare,0.00);
				SET @ershare = 100.00 - IFNULL(@prev_ershare,0.00);
			END IF;
		    elseif hdmf_mode = 3 then
			set @eeshare = hdmf_amount / @cnt_week;	
			SET @ershare = 100.00;
		    ELSE
			SET @eeshare = 0;
			SET @ershare = 0;
		    END IF;
		    
		-- weekly
		ELSEIF pay_sched_id = 6 THEN
		    
		    -- default
		    IF hdmf_mode = 1 THEN
			IF @cnt_week > 4 THEN
				SET @cnt_week = 4;
			END IF;
			
			SET @eeshare = 100.00 / @cnt_week;
			SET @ershare = @eeshare;
			
		    -- actual
		    ELSEIF hdmf_mode = 5 THEN
			
			-- get actual earning
			SET @result = 0;
			CALL sp_payroll_get_transaction(@employee_id,periodid,'1,2,5',1,1,1,0,@result);
			SET @earnings = @result;
			
			SET @bracket = @earnings * 0.02;
			
			IF @bracket >= 100 THEN
				SET @eeshare = 100.00;
				SET @ershare = 100.00;
			ELSE
				SET @eeshare = @bracket;
				SET @ershare = @bracket;
				
			END IF;
			
			IF (@prev_eeshare + @eeshare) >= 100 THEN
				IF @prev_eeshare < 100 THEN
					SET @eeshare = 100.00 - @prev_eeshare;
					SET @ershare = 100.00 - @prev_ershare;
				ELSE
					SET @eeshare = 0;
					SET @ershare = 0;
				END IF;
			ELSE
				SET @eeshare = @eeshare;
				SET @ershare = @ershare;
			END IF;
		    ELSEIF hdmf_mode = 3 THEN
			SET @eeshare = hdmf_amount / @cnt_week;	
			SET @ershare = 100.00;
		    ELSE
			SET @eeshare = 0;
			SET @ershare = 0;
			
		    END IF;
		    
		END IF;
		
		if @eeshare > 0 then
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SET @tran_type_id = 0;
			SELECT `transaction_code`, `transaction_id`, `transaction_type_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE `transaction_code` = 'HDMF_EMP';
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
			     AES_ENCRYPT( @eeshare, encryption_key()) ,
			     AES_ENCRYPT( @eeshare, encryption_key()), 
			     @tran_type_id, 0,'',0,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		end if;
	
		IF @ershare > 0 THEN
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SET @tran_type_id = 0;
			SELECT `transaction_code`, `transaction_id`, `transaction_type_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE `transaction_code` = 'HDMF_COM';
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
			     AES_ENCRYPT( round(@ershare,2), encryption_key()) ,
			     AES_ENCRYPT( round(@ershare,2), encryption_key()), 
			     @tran_type_id, 0,'',0,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
		
	END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_lates` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_lates` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_lates`( 
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11) 
	)
BEGIN
	SET @late = 0;
	
	SELECT  SUM(`quantity`) INTO @late
	FROM ww_time_record_process
	WHERE `user_id` = puserid AND payroll_date = paydate
		AND `transaction_code` = 'DEDUCTION_LATE' AND latefile = 0 AND deleted = 0
	GROUP BY user_id, payroll_date, transaction_id;
	
	IF @late > 0 THEN 
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'DEDUCTION_LATE';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT( @late, encryption_key()) , 
		     AES_ENCRYPT( ROUND( ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ),2), encryption_key() ),
		     AES_ENCRYPT( ROUND( ( @late * ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ) ), 2), encryption_key() ),
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_lates_adj` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_lates_adj` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_lates_adj`( 
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11) 
	)
BEGIN
	SET @late = 0;
	
	SELECT  SUM(`quantity`) INTO @late
	FROM ww_time_record_process
	WHERE `user_id` = puserid AND payroll_date = paydate
		AND `transaction_code` = 'DEDUCTION_LATE_ADJ' AND latefile = 1 AND deleted = 0
	GROUP BY user_id, payroll_date, transaction_id;
	
	IF @late != 0 THEN 
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'DEDUCTION_LATE_ADJ';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT( @late, encryption_key()) , 
		     AES_ENCRYPT( ROUND( ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ),2), encryption_key() ),
		     AES_ENCRYPT( ROUND( ( @late * ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ) ), 2), encryption_key() ),
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_lates_lf` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_lates_lf` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_lates_lf`( 
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11) 
	)
BEGIN
	SET @late = 0;
	
	SELECT  SUM(`quantity`) INTO @late
	FROM ww_time_record_process
	WHERE `user_id` = puserid AND payroll_date = paydate
		AND `transaction_code` = 'DEDUCTION_LATE' AND latefile = 1 AND deleted = 0
	GROUP BY user_id, payroll_date, transaction_id;
	
	IF @late > 0 THEN 
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = CONCAT('DEDUCTION_LATE','_LF');
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT( @late, encryption_key()) , 
		     AES_ENCRYPT( ROUND( ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ),2), encryption_key() ),
		     AES_ENCRYPT( ROUND( ( @late * ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ) ), 2), encryption_key() ),
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_leave_adj` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_leave_adj` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_leave_adj`(
	IN puserid INT(11),
	IN paydate DATE,
	IN periodid INT(11),
	IN processing_type_id INT(11)
	)
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE tran_code VARCHAR(32);
	DECLARE qty DECIMAL(5,2);
	DECLARE tran_type_id INT(11);
	DECLARE rec_id INT(11);
	
	DECLARE leave_adj CURSOR FOR 
		SELECT p.`transaction_code`, SUM(p.`quantity`), t.`transaction_type_id`,p.`record_id`
		FROM ww_time_record_process p
		LEFT JOIN ww_users_profile u ON p.`user_id` = u.`user_id`
		LEFT JOIN ww_payroll_transaction t ON p.`transaction_id` = t.`transaction_id`
		LEFT JOIN ww_time_form f ON CONCAT(f.`form_code`,'_ADJ') = p.`transaction_code`
		WHERE f.`is_leave` = 1 AND p.`deleted` = 0 AND p.`payroll_date` = paydate AND p.`latefile` = 1 AND p.`user_id` = puserid
		GROUP BY p.`transaction_code`;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	-- select overtime;
	
	OPEN leave_adj;
	REPEAT
		FETCH leave_adj INTO tran_code, qty, tran_type_id, rec_id ;
		
		IF NOT done THEN
			
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SELECT `transaction_code`, `transaction_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_class_id
			FROM ww_payroll_transaction WHERE transaction_code = tran_code;
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT( qty, encryption_key() ), 
			     AES_ENCRYPT( ROUND( ( (AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) / 8 ) ,2), encryption_key() ) ,
			     AES_ENCRYPT( ROUND( qty * ( ( ( ( AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) ) / 8 ) ), 2 ), encryption_key() ),
			     tran_type_id, 0,'ww_time_record_process',rec_id,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
	UNTIL done END REPEAT;
    
	CLOSE leave_adj;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_leave_adjustment` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_leave_adjustment` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_leave_adjustment`(
	IN puserid INT(11),
	IN paydate DATE,
	IN periodid INT(11),
	IN processing_type_id INT(11)
	)
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE tran_code VARCHAR(32);
	DECLARE tran_id INT(11);
	DECLARE tran_class_id INT(11);
	DECLARE qty DECIMAL(3,2);
	DECLARE tran_type_id INT(11);
	DECLARE rec_id INT(11);
	
	DECLARE emp_leave CURSOR FOR 
		SELECT p.`transaction_id`, t.`transaction_class_id`, p.`transaction_code`, p.`quantity`, t.`transaction_type_id`,p.`record_id`
		FROM ww_time_record_process p
		LEFT JOIN ww_users_profile u ON p.`user_id` = u.`user_id`
		LEFT JOIN ww_payroll_transaction t ON p.`transaction_id` = t.`transaction_id`
		LEFT JOIN ww_payroll_transaction_class c ON c.`transaction_class_id` = t.`transaction_class_id`
		WHERE p.`deleted` = 0 AND p.`payroll_date` = paydate AND p.`latefile` = 0 AND p.`user_id` = puserid
			AND c.`transaction_class_code` = 'LEAVES' AND t.`transaction_code` NOT IN ('LWOP_LF','LWOP');
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	-- select overtime;
	
	OPEN emp_leave;
	myLoop: LOOP
		FETCH emp_leave INTO tran_id, tran_class_id, tran_code, qty, tran_type_id, rec_id ;
		
		
			
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, tran_id, tran_class_id,
		     tran_code, AES_ENCRYPT( qty, encryption_key() ), 
		     AES_ENCRYPT( ROUND( ( (AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) / 8 ),2), encryption_key() ) ,
		     AES_ENCRYPT(  ROUND( ( qty * ( ( ( AES_DECRYPT(`salary`, encryption_key ()) / (total_year_days / 12) ) ) / 8 ) ), 2 ), encryption_key () ),
		     tran_type_id, 0,'ww_time_record_process',rec_id,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	
	END LOOP;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_loan_amortization` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_loan_amortization` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_loan_amortization`(
	in puserid int(11),
	in periodid int(11),
	in paydate date,
	IN processing_type_id INT(11),
	in nweek int(11)
    )
BEGIN
	
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE amort_tran_id INT(11);
	DECLARE payment_mode INT(11);
	DECLARE sys_amort DECIMAL(12,2);
	DECLARE user_amort DECIMAL(12,2);
	DECLARE rec_id INT(11);
	declare status_id int(11);
	
	DECLARE loan CURSOR FOR 
		SELECT 
			l.`partner_loan_id`, l.`payment_mode_id`, 
			AES_DECRYPT( l.`system_amortization`, encryption_key() ),
			AES_DECRYPT( l.`user_amortization`, encryption_key() ),
			pl.`amortization_transid`, l.`loan_status_id`
		FROM ww_payroll_partners_loan l
		INNER JOIN ww_payroll_loan pl ON l.`loan_id` = pl.`loan_id`
		WHERE l.`loan_status_id` IN ( 1, 2 ) AND l.`deleted` = 0 
			AND l.`user_id` = puserid AND l.`start_date` <= paydate AND FIND_IN_SET( nweek,l.`week`);
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	
	OPEN loan;
	REPEAT
		FETCH loan INTO rec_id, payment_mode, sys_amort, user_amort, amort_tran_id, status_id;
		
		IF NOT done THEN
			-- insert transaction of user and user to always system
			if payment_mode in (2,3) then
				
				SET @tran_code = '';
				SET @tran_id = 0;
				SET @tran_class_id = 0;
				SET @tran_type_id = 0;
				SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
				INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
				FROM ww_payroll_transaction WHERE transaction_id = amort_tran_id;
				
				INSERT INTO `ww_payroll_current_transaction`
				    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
				     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
				     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
				     `created_by`, `deleted`)
				SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
				     @tran_code, AES_ENCRYPT( 1.00, encryption_key() ), 
				     AES_ENCRYPT( user_amort, encryption_key() ) ,
				     AES_ENCRYPT( user_amort, encryption_key() ),
				     @tran_type_id, 0,'employee_loan',rec_id,0,'',NOW(),0,0
				FROM ww_payroll_partners 
				WHERE user_id = puserid;
			-- insert transaction system or system to always user
			elseif payment_mode in (1,4) then
			
				SET @tran_code = '';
				SET @tran_id = 0;
				SET @tran_class_id = 0;
				SET @tran_type_id = 0;
				SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
				INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
				FROM ww_payroll_transaction WHERE transaction_id = amort_tran_id;
				
				INSERT INTO `ww_payroll_current_transaction`
				    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
				     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
				     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
				     `created_by`, `deleted`)
				SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
				     @tran_code, AES_ENCRYPT( 1.00, encryption_key() ), 
				     AES_ENCRYPT( sys_amort, encryption_key() ) ,
				     AES_ENCRYPT( sys_amort, encryption_key() ),
				     @tran_type_id, 0,'employee_loan',rec_id,0,'',NOW(),0,0
				FROM ww_payroll_partners 
				WHERE user_id = puserid;
				
			end if;
			
		END IF;
		
		if payment_mode = 3 then
			-- user to always system
			update ww_payroll_partners_loan set `payment_mode_id` = 1 where `partner_loan_id` = rec_id;
		elseif payment_mode = 4 then
			-- system to always user
			UPDATE ww_payroll_partners_loan SET `payment_mode_id` = 2 WHERE `partner_loan_id` = rec_id;
		end if;
		
		if status_id = 1 then
			-- set status to active if entered
			UPDATE ww_payroll_partners_loan SET `loan_status_id` = 2 WHERE `partner_loan_id` = rec_id;
		end if;
		
	UNTIL done END REPEAT;
    
	CLOSE loan;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_loan_interest` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_loan_interest` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_loan_interest`(
	IN puserid INT(11),
	IN periodid INT(11),
	IN paydate DATE,
	IN processing_type_id INT(11),
	IN nweek INT(11)
    )
BEGIN
		
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE interest_tran_id INT(11);
	DECLARE payment_mode INT(11);
	DECLARE sys_amort DECIMAL(12,2);
	DECLARE user_amort DECIMAL(12,2);
	DECLARE rec_id INT(11);
	DECLARE status_id INT(11);
	
	DECLARE loan CURSOR FOR 
		SELECT 
			l.`partner_loan_id`, l.`payment_mode_id`, 
			AES_DECRYPT( l.`system_interest`, encryption_key() ),
			AES_DECRYPT( l.`user_interest`, encryption_key() ),
			pl.`interest_transid`, l.`loan_status_id`
		FROM ww_payroll_partners_loan l
		INNER JOIN ww_payroll_loan pl ON l.`loan_id` = pl.`loan_id`
		WHERE l.`loan_status_id` IN ( 1, 2 ) AND l.`deleted` = 0 
			AND l.`user_id` = puserid AND l.`start_date` <= paydate AND find_in_set( nweek,l.`week`);
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	
	OPEN loan;
	REPEAT
		FETCH loan INTO rec_id, payment_mode, sys_amort, user_amort, interest_tran_id, status_id;
		
		IF NOT done THEN
			-- insert transaction of user and user to always system
			IF payment_mode IN (2,3) THEN
				if user_amort > 0 then
					SET @tran_code = '';
					SET @tran_id = 0;
					SET @tran_class_id = 0;
					SET @tran_type_id = 0;
					SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
					INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
					FROM ww_payroll_transaction WHERE transaction_id = interest_tran_id;
					
					INSERT INTO `ww_payroll_current_transaction`
					    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
					     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
					     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
					     `created_by`, `deleted`)
					SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
					     @tran_code, AES_ENCRYPT( 1.00, encryption_key() ), 
					     AES_ENCRYPT( user_amort, encryption_key() ) ,
					     AES_ENCRYPT( user_amort, encryption_key() ),
					     @tran_type_id, 0,'ww_time_record_process',rec_id,0,'',NOW(),0,0
					FROM ww_payroll_partners 
					WHERE user_id = puserid;
				end if;
			-- insert transaction system or system to always user
			ELSEIF payment_mode IN (1,4) THEN
				if sys_amort > 0 then
					SET @tran_code = '';
					SET @tran_id = 0;
					SET @tran_class_id = 0;
					SET @tran_type_id = 0;
					SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
					INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
					FROM ww_payroll_transaction WHERE transaction_id = interest_tran_id;
					
					INSERT INTO `ww_payroll_current_transaction`
					    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
					     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
					     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
					     `created_by`, `deleted`)
					SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
					     @tran_code, AES_ENCRYPT( 1.00, encryption_key() ), 
					     AES_ENCRYPT( sys_amort, encryption_key() ) ,
					     AES_ENCRYPT( sys_amort, encryption_key() ),
					     @tran_type_id, 0,'ww_time_record_process',rec_id,0,'',NOW(),0,0
					FROM ww_payroll_partners 
					WHERE user_id = puserid;
				end if;
			END IF;
			
		END IF;
		
		IF payment_mode = 3 THEN
			-- user to always system
			UPDATE ww_payroll_partners_loan SET `payment_mode_id` = 1 WHERE `partner_loan_id` = rec_id;
		ELSEIF payment_mode = 4 THEN
			-- system to always user
			UPDATE ww_payroll_partners_loan SET `payment_mode_id` = 2 WHERE `partner_loan_id` = rec_id;
		END IF;
		
		IF status_id = 1 THEN
			-- set status to active if entered
			UPDATE ww_payroll_partners_loan SET `loan_status_id` = 2 WHERE `partner_loan_id` = rec_id;
		END IF;
		
	UNTIL done END REPEAT;
    
	CLOSE loan;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_lwop` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_lwop` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_lwop`( 
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11),
	in dailyRate DECIMAL(12,2)
	)
BEGIN
	
	SET @lwop = 0;
	
	SELECT  SUM(`quantity`) INTO @lwop
	FROM ww_time_record_process
	WHERE `user_id` = puserid AND payroll_date = paydate 
		AND `transaction_code` = 'LWOP' AND latefile = 0 AND deleted = 0
	GROUP BY user_id, payroll_date, transaction_id;
	
	IF @lwop > 0 THEN 
		
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'LWOP';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT( @lwop, encryption_key() ),
		     AES_ENCRYPT( ROUND( ( dailyRate / 8 ) ,2), encryption_key() ) ,
		     AES_ENCRYPT( ROUND( ( @lwop * ( dailyRate / 8 ) ) ,2), encryption_key() ),
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_lwop_adj` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_lwop_adj` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_lwop_adj`( 
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11) 
	)
BEGIN
	SET @lwop = 0;
	
	SELECT  SUM(`quantity`) INTO @lwop
	FROM ww_time_record_process
	WHERE `user_id` = puserid AND payroll_date = paydate 
		AND `transaction_code` = 'LWOP_ADJ' AND latefile = 1 AND deleted = 0
	GROUP BY user_id, payroll_date, transaction_id;
	
	IF @lwop != 0 THEN 
		
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'LWOP_ADJ';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT( @lwop, encryption_key() ),
		     AES_ENCRYPT( ROUND( (AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ,2), encryption_key() ) ,
		     AES_ENCRYPT( ROUND( ( @lwop * ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ) ),2) , encryption_key() ),
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_lwop_lf` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_lwop_lf` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_lwop_lf`( 
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11) 
	)
BEGIN
	SET @lwop = 0;
	
	SELECT  SUM(`quantity`) INTO @lwop
	FROM ww_time_record_process
	WHERE `user_id` = puserid AND payroll_date = paydate 
		AND `transaction_code` = 'LWOP' AND latefile = 1 AND deleted = 0
	GROUP BY user_id, payroll_date, transaction_id;
	
	IF @lwop > 0 THEN 
		
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = CONCAT('LWOP','_LF');
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT( @lwop, encryption_key() ),
		     AES_ENCRYPT( ROUND( (AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ),2), encryption_key() ) ,
		     AES_ENCRYPT( ROUND( ( @lwop * ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) ),2) , encryption_key() ),
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_nd` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_nd` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_nd`( 
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11) 
	)
BEGIN
	SET @nd = 0;
	
	SELECT  SUM(`quantity`) INTO @nd
	FROM ww_time_record_process
	WHERE `user_id` = puserid AND payroll_date = paydate
		AND `transaction_code` = 'REGND' AND latefile = 0 AND deleted = 0
	GROUP BY user_id, payroll_date, transaction_id;
	
	IF @nd > 0 THEN 
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'REGND';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT( @nd, encryption_key()) , 
		     AES_ENCRYPT( ROUND( ( ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ) * .1 ),2), encryption_key() ),
		     AES_ENCRYPT( ROUND( ( @nd * ( ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ) ) * .1 ), 2), encryption_key() ),
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_netpay` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_netpay` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_netpay`( 
	IN periodid INT(11), 
	IN puserid INT(11),
	IN paydate date,
	IN processing_type_id INT(11)
	)
BEGIN
	/* to do */
	-- modify on hold
	
	SET @netpay = 0.00;
	
	SELECT ROUND( SUM( IF( 
		ptt.`operation` = '-',
		AES_DECRYPT(pct.`amount`, encryption_key ()) * - 1,
		AES_DECRYPT(pct.`amount`, encryption_key ())
		) ), 2 ) 
	INTO @netpay
	FROM ww_payroll_current_transaction pct 
	INNER JOIN ww_payroll_transaction pt ON pt.`transaction_id` = pct.`transaction_id` 
	INNER JOIN ww_payroll_transaction_type ptt ON pct.`transaction_type_id` = ptt.`transaction_type_id` 
	INNER JOIN ww_payroll_transaction_class pc ON pc.`transaction_class_id` = pt.`transaction_class_id`
	WHERE pct.`employee_id` = puserid AND pct.`period_id` = periodid AND pct.`deleted` = 0 AND pct.`on_hold` = 0 and
	      pt.transaction_id NOT IN ( 
			SELECT pt.transaction_id
			FROM ww_payroll_transaction pt
			INNER JOIN ww_payroll_transaction_class pc ON pt.`transaction_class_id` = pc.`transaction_class_id`
			INNER JOIN ww_payroll_transaction_type tt ON tt.`transaction_type_id` = pt.`transaction_type_id`
			-- WHERE pc.`transaction_class_code` = 'LEAVES' AND pt.transaction_code NOT LIKE '%_ADJ'  AND operation = '+' );
			WHERE pc.`transaction_class_code` = 'LEAVES' AND (pt.transaction_code NOT LIKE '%_ADJ' AND pt.transaction_code NOT IN ('SLVLTAX','VLSLNT')) AND operation = '+' );
	
	SET @tran_code = '';
	SET @tran_id = 0;
	SET @tran_class_id = 0;
	SET @tran_type_id = 0;
	
	SELECT `transaction_code`, `transaction_id`, `transaction_type_id`, `transaction_class_id`
	INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
	FROM ww_payroll_transaction WHERE `transaction_code` = 'NETPAY';
	
	IF @netpay > 0 THEN
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
		     AES_ENCRYPT( @netpay, encryption_key()) ,
		     AES_ENCRYPT( @netpay, encryption_key()), 
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	end if;	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_overtime` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_overtime` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_overtime`(
	IN puserid INT(11),
	IN paydate DATE,
	IN periodid INT(11),
	IN processing_type_id INT(11)
	)
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE tran_code VARCHAR(32);
	DECLARE tran_id INT(11);
	DECLARE tran_class_id INT(11);
	DECLARE ot_rate DECIMAL(5,2);
	DECLARE qty DECIMAL(5,2);
	DECLARE ot_rate_amount DECIMAL(5,2);
	Declare employment_type varchar(32);
	DECLARE tran_type_id INT(11);
	DECLARE rec_id INT(11);
	
	DECLARE overtime CURSOR FOR 
		SELECT p.`transaction_id`, t.`transaction_class_id`, p.`transaction_code`, r.`overtime_rate`, ra.`overtime_amount`, IF(up.employment_type_id = 5,'supervisor','') AS employee_type, suM( p.`quantity` ), t.`transaction_type_id`,p.`record_id`
		FROM ww_time_record_process p
		LEFT JOIN ww_users_profile u ON p.`user_id` = u.`user_id`
		LEFT JOIN ww_partners up ON u.`user_id` = up.`user_id`
		LEFT JOIN ww_payroll_partners pp ON pp.`user_id` = u.`user_id`
		LEFT JOIN ww_payroll_overtime_rates r ON p.`transaction_code` = r.`overtime_code` AND u.`company_id` = r.`company_id` AND r.deleted = 0
		LEFT JOIN ww_payroll_overtime_rates_amount ra ON p.`transaction_code` = ra.`overtime_code` and ra.deleted = 0 AND u.`company_id` = ra.`company_id` AND pp.`location_id` = ra.`overtime_location_id`
		LEFT JOIN ww_payroll_transaction t ON p.`transaction_id` = t.`transaction_id`
		WHERE r.`deleted` = 0 AND p.`deleted` = 0 AND p.`payroll_date` = paydate AND p.`latefile` = 0 AND p.`transaction_code` != 'REGND' AND p.`user_id` = puserid
		GROUP BY p.`transaction_code`;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	-- select overtime;
	
	OPEN overtime;
	REPEAT
		FETCH overtime INTO tran_id, tran_class_id, tran_code, ot_rate, ot_rate_amount, employment_type, qty, tran_type_id, rec_id ;
		
		IF NOT done THEN
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, tran_id, tran_class_id,
			     tran_code, AES_ENCRYPT( qty, encryption_key() ), 
			     case
				when payroll_rate_type_id = 2 and employment_type != 'supervisor' then AES_ENCRYPT( ROUND( ( ( (AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) / 8 ) * ot_rate ),2), encryption_key() ) 
				WHEN payroll_rate_type_id = 2 AND employment_type = 'supervisor' THEN AES_ENCRYPT( ROUND(ot_rate_amount,2), encryption_key() ) 
				when payroll_rate_type_id = 6 then AES_ENCRYPT( ROUND( ( (AES_DECRYPT(`salary`, encryption_key()) / 8 ) * ot_rate ),2), encryption_key() ) 
				else 0 
			     end,
			     CASE
				WHEN payroll_rate_type_id = 2 AND employment_type != 'supervisor' THEN AES_ENCRYPT( ROUND( ( qty * ( ( ( ( AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) ) / 8 ) * ot_rate ) ), 2 ), encryption_key() )
				WHEN payroll_rate_type_id = 2 AND employment_type = 'supervisor' THEN AES_ENCRYPT( ROUND((qty * ot_rate_amount),2), encryption_key() ) 
				when payroll_rate_type_id = 6 then AES_ENCRYPT( ROUND( ( qty * ( (AES_DECRYPT(`salary`, encryption_key()) / 8 ) * ot_rate ) ),2), encryption_key() ) 
				ELSE 0
			     END,
			     tran_type_id, 0,'ww_time_record_process',rec_id,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
	UNTIL done END REPEAT;
    
	CLOSE overtime;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_overtime_adj` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_overtime_adj` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_overtime_adj`(
	IN puserid INT(11),
	IN paydate DATE,
	IN periodid INT(11),
	IN processing_type_id INT(11)
	)
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE tran_code VARCHAR(32);
	DECLARE ot_rate DECIMAL(5,2);
	DECLARE qty DECIMAL(5,2);
	DECLARE ot_rate_amount DECIMAL(5,2);
	DECLARE employment_type VARCHAR(32);
	DECLARE tran_type_id INT(11);
	DECLARE rec_id INT(11);
	
	DECLARE overtime CURSOR FOR 
		SELECT p.`transaction_code`, r.`overtime_rate`, ra.`overtime_amount`, IF(up.employment_type_id = 5,'supervisor','') AS employee_type, SUM(p.`quantity`), t.`transaction_type_id`,p.`record_id`
		FROM ww_time_record_process p
		LEFT JOIN ww_users_profile u ON p.`user_id` = u.`user_id`
		LEFT JOIN ww_partners up ON u.`user_id` = up.`user_id`
		LEFT JOIN ww_payroll_partners pp ON pp.`user_id` = u.`user_id`		
		LEFT JOIN ww_payroll_overtime_rates r ON p.`transaction_code` = CONCAT(r.`overtime_code`,'_ADJ') AND u.`company_id` = r.`company_id` AND r.deleted = 0
		LEFT JOIN ww_payroll_overtime_rates_amount ra ON p.`transaction_code` = ra.`overtime_code` AND ra.deleted = 0 AND u.`company_id` = ra.`company_id` AND pp.`location_id` = ra.`overtime_location_id`
		LEFT JOIN ww_payroll_transaction t ON p.`transaction_id` = t.`transaction_id`
		WHERE r.`deleted` = 0 AND p.`deleted` = 0 AND p.`payroll_date` = paydate AND p.`transaction_code` != 'REGND' AND p.`latefile` = 1 AND p.`user_id` = puserid
		GROUP BY p.`transaction_code`;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	-- select overtime;
	
	OPEN overtime;
	REPEAT
		FETCH overtime INTO tran_code, ot_rate, ot_rate_amount, employment_type, qty, tran_type_id, rec_id ;
		
		IF NOT done THEN
			
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SELECT `transaction_code`, `transaction_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_class_id
			FROM ww_payroll_transaction WHERE transaction_code = tran_code;
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT( qty, encryption_key() ),
			     CASE
				WHEN payroll_rate_type_id = 2 AND employment_type != 'supervisor' THEN AES_ENCRYPT( ROUND( ( ( (AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) / 8 ) * ot_rate ),2), encryption_key() ) 
				WHEN payroll_rate_type_id = 2 AND employment_type = 'supervisor' THEN AES_ENCRYPT( ROUND(ot_rate_amount,2), encryption_key() ) 
				WHEN payroll_rate_type_id = 6 THEN AES_ENCRYPT( ROUND( ( (AES_DECRYPT(`salary`, encryption_key()) / 8 ) * ot_rate ),2), encryption_key() ) 
				ELSE 0 
			     END,
			     CASE
				WHEN payroll_rate_type_id = 2 AND employment_type != 'supervisor' THEN AES_ENCRYPT( ROUND( ( qty * ( ( ( ( AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) ) / 8 ) * ot_rate ) ), 2 ), encryption_key() )
				WHEN payroll_rate_type_id = 2 AND employment_type = 'supervisor' THEN AES_ENCRYPT( ROUND((qty * ot_rate_amount),2), encryption_key() ) 
				WHEN payroll_rate_type_id = 6 THEN AES_ENCRYPT( ROUND( ( qty * ( (AES_DECRYPT(`salary`, encryption_key()) / 8 ) * ot_rate ) ),2), encryption_key() ) 
				ELSE 0
			     END,			      
			     tran_type_id, 0,'ww_time_record_process',rec_id,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
	UNTIL done END REPEAT;
    
	CLOSE overtime;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_overtime_lf` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_overtime_lf` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_overtime_lf`(
	IN puserid INT(11),
	IN paydate DATE,
	IN periodid INT(11),
	IN processing_type_id INT(11)
	)
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE tran_code VARCHAR(32);
	DECLARE ot_rate DECIMAL(3,2);
	DECLARE qty DECIMAL(3,2);
	DECLARE ot_rate_amount DECIMAL(5,2);
	DECLARE employment_type VARCHAR(32);	
	DECLARE tran_type_id INT(11);
	DECLARE rec_id INT(11);
	
	DECLARE overtime CURSOR FOR 
		SELECT p.`transaction_code`, r.`overtime_rate`, ra.`overtime_amount`, IF(up.employment_type_id = 5,'supervisor','') AS employee_type, sum(p.`quantity`), t.`transaction_type_id`,p.`record_id`
		FROM ww_time_record_process p
		LEFT JOIN ww_users_profile u ON p.`user_id` = u.`user_id`
		LEFT JOIN ww_partners up ON u.`user_id` = up.`user_id`
		LEFT JOIN ww_payroll_partners pp ON pp.`user_id` = u.`user_id`	
		LEFT JOIN ww_payroll_overtime_rates r ON p.`transaction_code` = CONCAT(r.`overtime_code`,'_ADJ') AND u.`company_id` = r.`company_id` AND r.deleted = 0	
		LEFT JOIN ww_payroll_overtime_rates_amount ra ON p.`transaction_code` = ra.`overtime_code` AND ra.deleted = 0 AND u.`company_id` = ra.`company_id` AND pp.`location_id` = ra.`overtime_location_id`
		LEFT JOIN ww_payroll_transaction t ON p.`transaction_id` = t.`transaction_id`
		WHERE r.`deleted` = 0 AND p.`deleted` = 0 AND p.`payroll_date` = paydate AND p.`latefile` = 1 AND p.`user_id` = puserid
		GROUP BY p.`transaction_code`;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	-- select overtime;
	
	OPEN overtime;
	REPEAT
		FETCH overtime INTO tran_code, ot_rate, ot_rate_amount, employment_type, qty, tran_type_id, rec_id ;
		
		IF NOT done THEN
			
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SELECT `transaction_code`, `transaction_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_class_id
			FROM ww_payroll_transaction WHERE transaction_code = CONCAT(tran_code,'_LF');
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT( qty, encryption_key() ), 
			     CASE
				WHEN payroll_rate_type_id = 2 AND employment_type != 'supervisor' THEN AES_ENCRYPT( ROUND( ( ( (AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) / 8 ) * ot_rate ),2), encryption_key() ) 
				WHEN payroll_rate_type_id = 2 AND employment_type = 'supervisor' THEN AES_ENCRYPT( ROUND(ot_rate_amount,2), encryption_key() ) 
				WHEN payroll_rate_type_id = 6 THEN AES_ENCRYPT( ROUND( ( (AES_DECRYPT(`salary`, encryption_key()) / 8 ) * ot_rate ),2), encryption_key() ) 
				ELSE 0 
			     END,
			     CASE
				WHEN payroll_rate_type_id = 2 AND employment_type != 'supervisor' THEN AES_ENCRYPT( ROUND( ( qty * ( ( ( ( AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) ) / 8 ) * ot_rate ) ), 2 ), encryption_key() )
				WHEN payroll_rate_type_id = 2 AND employment_type = 'supervisor' THEN AES_ENCRYPT( ROUND((qty * ot_rate_amount),2), encryption_key() ) 
				WHEN payroll_rate_type_id = 6 THEN AES_ENCRYPT( ROUND( ( qty * ( (AES_DECRYPT(`salary`, encryption_key()) / 8 ) * ot_rate ) ),2), encryption_key() ) 
				ELSE 0
			     END,
			     tran_type_id, 0,'ww_time_record_process',rec_id,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
	UNTIL done END REPEAT;
    
	CLOSE overtime;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_phic_contribution` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_phic_contribution` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_phic_contribution`(
	IN periodid INT(11), 
	IN paydate DATE,
	IN pay_sched_id INT(11),
	IN processing_type_id INT(11),
	IN nweek INT(1),
	IN puserid INT(11),
	IN salary DECIMAL(12,2),
	IN phic_mode INT(11),
	IN phic_week VARCHAR(11)
	)
BEGIN
	SET @employee_id = 0;
	SET @cnt_week = '';
	SET @salary = 0.00;
	
	SET @eeshare = 0.00;
	SET @ershare = 0.00;
	
	SET @prev_eeshare = 0.00;
	SET @prev_ershare = 0.00;
	
	SET @prev_salary = 0.00;
	
	SET @earnings = 0.00;
	SET @bracket = 0.00;
	
	-- get assing salary or basic rate
	SELECT `user_id`, LENGTH(REPLACE(`phic_week`,',','')) INTO @employee_id, @cnt_week
	FROM ww_payroll_partners
	WHERE `user_id` = puserid AND FIND_IN_SET(nweek,`phic_week`) AND `payroll_schedule_id` = pay_sched_id;
	
	IF @employee_id > 0 THEN
		-- check previous payment
		SELECT MAX(CASE WHEN (`c`.`transaction_code` = 'PHIC_EMP') THEN ROUND(AES_DECRYPT(`c`.`amount`,`encryption_key`()),2) END) AS `prev_eeshare`,MAX(CASE WHEN (`c`.`transaction_code` = 'PHIC_COM') THEN ROUND(AES_DECRYPT(`c`.`amount`,`encryption_key`()),2) END) AS `prev_ershare` INTO @prev_eeshare, @prev_ershare
		FROM ww_payroll_closed_transaction c
		WHERE c.`employee_id` = @employee_id AND MONTH(c.`payroll_date`) = MONTH(paydate)
			AND c.`transaction_code` IN ('PHIC_EMP','PHIC_COM');
					
		/*SELECT SUM(`employee`), SUM(`company`) INTO @prev_eeshare, @prev_ershare
		FROM ww_payroll_partners_contribution c
		LEFT JOIN ww_payroll_transaction t ON c.`transaction_id` = t.`transaction_id`
		WHERE c.`user_id` = @employee_id AND MONTH(c.`payroll_date`) = MONTH(paydate) 
			AND t.`transaction_code` = 'PHIC_EMP';*/
		
		IF @cnt_week > 1 THEN
		    IF phic_mode = 1 THEN
			    -- previous salary
			    SELECT ROUND(SUM(AES_DECRYPT(`amount`, encryption_key())),2) INTO @prev_salary 
			    FROM ww_payroll_closed_transaction WHERE MONTH(`payroll_date`) = MONTH(@paydate) 
				AND `transaction_code` = 'SALARY' AND `deleted` = 0 AND `employee_id` = @employee_id;
				
		    ELSEIF phic_mode = 5 THEN
			    -- previous actual earning
			    set @result = 0.00;
			    SET @prev_actual_earning = 0.00;
			    CALL sp_payroll_get_transaction(@employee_id,periodid,'1,5',1,0,0,3,@result);
			    SET @prev_actual_earning = @result;
			    
	            END IF;
	              
		END IF;
		
		-- monthly
		IF pay_sched_id = 4 THEN
		    
		    -- default
		    IF phic_mode = 1 THEN
			-- get bracket
			-- SELECT `eeshare`, `ershare` INTO @eeshare, @ershare
			select IF(`eeshare` < 100,ROUND((salary * (`eeshare` / 2) / 100),2),`eeshare`), IF(`ershare` < 100,ROUND((salary * (`ershare` / 2) / 100),2),`ershare`) INTO @eeshare, @ershare
			FROM ww_payroll_phic_table 
			WHERE salary BETWEEN `from` AND `to`;
		
		    -- actual	
		    ELSEIF phic_mode = 5 THEN
		    
			-- get actual earning
			SET @result = 0.00;
			CALL sp_payroll_get_transaction(@employee_id,periodid,'1,5',1,1,1,0,@result);
			SET @earnings = @result;
			-- get bracket
			-- SELECT `eeshare`, `ershare` INTO @eeshare, @ershare
			SELECT IF(`eeshare` < 100,ROUND((@earnings * (`eeshare` / 2) / 100),2),`eeshare`), IF(`ershare` < 100,ROUND((@earnings * (`ershare` / 2) / 100),2),`ershare`) INTO @eeshare, @ershare
			FROM ww_payroll_phic_table 
			WHERE @earnings BETWEEN `from` AND `to`;
			
		    ELSE
			SET @eeshare = 0.00; 
			SET @ershare = 0.00;
		    
		    END IF;
		    
		-- semi-monthly
		ELSEIF pay_sched_id = 5 THEN
		    
		    -- default
		    IF phic_mode = 1 THEN
			IF @payrate = 6 THEN 
				SET @salary = ( salary * (@total_year_days/12 ) ) /@cnt_week;
			ELSE 
				SET @salary = salary/@cnt_week;
			END IF;
						
			-- get total salary if has previous payment
			SET @bracket =  @salary + IFNULL(@prev_salary,0.00);
			-- get bracket
			
			-- SELECT `eeshare`, `ershare` INTO @eeshare, @ershare
			SELECT IF(`eeshare` < 100,ROUND((@bracket * (`eeshare` / 2) / 100),2),`eeshare`), IF(`ershare` < 100,ROUND((@bracket * (`ershare` / 2) / 100),2),`ershare`) INTO @eeshare, @ershare
			FROM ww_payroll_phic_table 
			WHERE @bracket BETWEEN `from` AND `to`;
			
			IF @prev_salary > 0 THEN
				SET @eeshare = @eeshare - IFNULL(@prev_eeshare,0.00);
				SET @ershare = @ershare - IFNULL(@prev_ershare,0.00);
				
			END IF;
			
		    -- actual
		    ELSEIF phic_mode = 5 THEN
			
			-- get actual earning
			SET @result = 0.00;
			CALL sp_payroll_get_transaction(@employee_id,periodid,'1,5',1,1,1,0,@result);
			SET @earnings = @result;
			
			-- get total earnings if has previous payment
			SET @bracket = @earnings + IFNULL(@prev_actual_earning,0.00);
			 
			-- get bracket
			-- SELECT `eeshare`, `ershare` INTO @eeshare, @ershare
			SELECT IF(`eeshare` < 100,ROUND((@bracket * (`eeshare` / 2) / 100),2),`eeshare`), IF(`ershare` < 100,ROUND((@bracket * (`ershare` / 2) / 100),2),`ershare`) INTO @eeshare, @ershare
			FROM ww_payroll_phic_table 
			WHERE @bracket BETWEEN `from` AND `to`;
			
			IF @prev_actual_earning > 0 THEN
				SET @eeshare = @eeshare - IFNULL(@prev_eeshare,0.00);
				SET @ershare = @ershare - IFNULL(@prev_ershare,0.00);
			END IF;
			
		    ELSE
			SET @eeshare = 0.00; 
			SET @ershare = 0.00;
		    END IF;
		    
		-- weekly
		ELSEIF pay_sched_id = 6 THEN
		    
		    -- default
		    IF phic_mode = 1 THEN
		    
			SET @salary = salary/@cnt_week;
			-- get total salary if has previous payment
			SET @bracket =  @salary + IFNULL(@prev_salary,0.00);
			-- get bracket
			-- SELECT `eeshare`, `ershare` INTO @eeshare, @ershare
			SELECT IF(`eeshare` < 100,ROUND((@bracket * (`eeshare` / 2) / 100),2),`eeshare`), IF(`ershare` < 100,ROUND((@bracket * (`ershare` / 2) / 100),2),`ershare`) INTO @eeshare, @ershare
			FROM ww_payroll_phic_table 
			WHERE @bracket BETWEEN `from` AND `to`;
			
			IF @prev_salary > 0 THEN
				SET @eeshare = @eeshare - IFNULL(@prev_eeshare,0.00);
				SET @ershare = @ershare - IFNULL(@prev_ershare,0.00);
				
			END IF;
		    
		    -- actual
		    ELSEIF phic_mode = 5 THEN
		    
			-- get actual earning
			SET @result = 0.00;
			CALL sp_payroll_get_transaction(@employee_id,periodid,'1,5',1,1,1,0,@result);
			SET @earnings = @result;
			
			-- get total earnings if has previous payment
			SET @bracket = @earnings + IFNULL(@prev_actual_earning,0.00);
			
			-- get bracket
			-- SELECT `eeshare`, `ershare` INTO @eeshare, @ershare
			SELECT IF(`eeshare` < 100,ROUND((@bracket * (`eeshare` / 2) / 100),2),`eeshare`), IF(`ershare` < 100,ROUND((@bracket * (`ershare` / 2) / 100),2),`ershare`) INTO @eeshare, @ershare
			FROM ww_payroll_phic_table 
			WHERE @bracket BETWEEN `from` AND `to`;
			
			IF @prev_actual_earning > 0 THEN
				SET @eeshare = @eeshare - IFNULL(@prev_eeshare,0.00);
				SET @ershare = @ershare - IFNULL(@prev_ershare,0.00);
			END IF;
			
		    ELSE
			SET @eeshare = 0.00; 
			SET @ershare = 0.00;
		    END IF;
		    
		END IF;
		
		IF @eeshare > 0 THEN
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SET @tran_type_id = 0;
			SELECT `transaction_code`, `transaction_id`, `transaction_type_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE `transaction_code` = 'PHIC_EMP';
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
			     AES_ENCRYPT( @eeshare, encryption_key()) ,
			     AES_ENCRYPT( @eeshare, encryption_key()), 
			     @tran_type_id, 0,'',0,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
		
		IF @ershare > 0 THEN
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SET @tran_type_id = 0;
			SELECT `transaction_code`, `transaction_id`, `transaction_type_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE `transaction_code` = 'PHIC_COM';
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
			     AES_ENCRYPT( @ershare, encryption_key()) ,
			     AES_ENCRYPT( @ershare, encryption_key()), 
			     @tran_type_id, 0,'',0,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
		
	END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_recurring` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_recurring` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_recurring`(
		in puserid int(11), 
		in periodid int(11), 
		in sweek varchar(5), 
		in paydate date,
		in processing_type_id int(11)
	)
BEGIN
	
	DECLARE done TINYINT(1) DEFAULT 0;
	declare rec_id int(11);
	declare amount decimal(12,2);
	declare quantity decimal(12,2);
	declare tran_id int(11);
	DECLARE tran_class_id INT(11);
	declare tran_type_id int(11);
	declare tran_method int(11); 
	declare tran_code varchar(32);
	declare salary decimal(12,2);
	declare year_days decimal(5,2);
	declare divisor decimal(5,2);
	declare comp_id int(11);
	
	declare recurring cursor for
		
		SELECT  r.`recurring_id`, aes_decrypt( e.`amount`, encryption_key() ), 
			aes_decrypt( e.`quantity`, encryption_key() ), r.`transaction_id`, 
			t.`transaction_class_id`, t.`transaction_type_id`, r.`transaction_method_id`, 
			t.`transaction_code`,AES_DECRYPT( p.`salary`, encryption_key() ),
			p.`total_year_days`, d.`divisor`, p.company_id
		FROM
		  ww_payroll_entry_recurring r 
		  LEFT JOIN ww_payroll_entry_recurring_employee e 
		    ON r.`recurring_id` = e.`recurring_id` 
		  LEFT JOIN ww_payroll_transaction t 
		    ON t.`transaction_id` = r.`transaction_id` 
		  LEFT JOIN ww_payroll_partners p 
		    ON p.`user_id` = e.`employee_id` 
		  LEFT JOIN ww_payroll_schedule_rate_divisor d
		    ON p.`payroll_schedule_id` = d.`payroll_schedule_id` AND p.`payroll_rate_type_id` = d.`payroll_rate_type_id`
		where r.`deleted` = 0 and e.deleted = 0 and e.`employee_id` = puserid 
			and paydate between r.`date_from` and r.`date_to`
			and find_in_set( sweek, r.`week` ); 
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	OPEN recurring;
	REPEAT
		FETCH recurring INTO rec_id, amount, quantity, tran_id, tran_class_id, tran_type_id, tran_method, tran_code, salary, year_days, divisor, comp_id;
		
		if not done then
			SET @amount = 0.00;
			SET @remarks = '';
			-- Earnings (%)
			if tran_method = 1 then
				set @amount = 'base_on_earnings';
			-- Period Salary (%)
			elseif tran_method = 2 then
				set @amount = round( ( salary / divisor ) * ( amount / 100 ),2 );
			-- Fixed
			elseif tran_method = 3 then
				SET @amount = amount;
			-- Period Salary and Attendance (%)
			elseif tran_method = 4 then
				SET @absent = 0.00;
				SET @absent_adj = 0.00;
				
				SELECT SUM(`ww_time_record_process`.`quantity`) / 8 INTO @absent FROM ww_time_record_process
				WHERE `user_id` = puserid AND `payroll_date` = paydate AND transaction_code IN ('ABSENCES','LWOP');
				-- SET @amount = amount * @hrs;
				SET @amount = amount - ((amount / (year_days / 12 )) * IFNULL(@absent,0));
				
				SELECT SUM(`ww_time_record_process`.`quantity`) / 8 INTO @absent_adj FROM ww_time_record_process
				WHERE `user_id` = puserid AND `payroll_date` = paydate AND transaction_code IN ('ABSENCES_ADJ','LWOP_ADJ');
				SET @amount = @amount - ((amount / (year_days / 12 )) * IFNULL(@absent_adj,0));
			-- Actual Salary (%)
			elseif tran_method = 5 then
				SET @amount = ROUND( ( salary * ( amount / 100 ) ),2 );
			-- ADDITIONAL For BAYLEAF SERVICE CHARGE
			ELSEIF tran_method = 6 then
				set @nDays = 0.00;
				SET @nLess = 0;
				set @nValue = 0;
				SET @nPrevTimeID = 0;
				SET @nCurTimeID = 0;
				set @dtPrevPayDate = '';
				set @dtStart = '';
				set @dtEnd = '';
				
				-- Get Previous Period
				select period_id, date_from, date_to into @nCurTimeID, @dtStart, @dtEnd 
				FROM ww_time_period where company_id = comp_id and payroll_date = paydate;
				set @nPrevTimeID = `time_get_previous_period`(@nCurTimeID);
				if @nPrevTimeID > 0 then
					-- SET START DATE
					select payroll_date, date_from into @dtPrevPayDate, @dtStart 
					FROM ww_time_period WHERE period_id = @nPrevTimeID;
				end if;
				-- Get Number of Days
				SELECT `value` into @nValue FROM ww_config WHERE `key` = 'service_charge_days';
				SELECT ROUND(SUM(absent) + SUM(IFNULL(lwop/hrs_rendered,0)) + SUM(IFNULL(late/hrs_rendered,0)) + SUM(IFNULL(undertime/hrs_rendered,0)),2)
				into @nLess
				FROM ww_time_record_summary 
				where payroll_date in (@dtPrevPayDate, paydate) AND user_id = puserid and deleted = 0 
					and `date` between @dtStart and @dtEnd ;
					
				set @nDays = ifnull(@nValue,0) - ifnull(@nLess,0);
				SET @amount = ROUND( ( ( amount * @nDays) / 2 ),2 );
				set @remarks = 'service_charge';
			-- daily rate
			ELSEIF tran_method = 7 THEN
				SET @day_work = 0.00;
				
				SELECT SUM(`ww_time_record_summary`.`hrs_actual`) / 8 INTO @day_work FROM ww_time_record_summary
				WHERE `user_id` = puserid AND `payroll_date` = paydate AND day_type in ('REGULAR');
				-- SET @amount = amount * @hrs;
				SET @amount = amount * IFNULL(@day_work,0);				
			end if;
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, `user_id`, tran_id, tran_class_id,
			     tran_code, AES_ENCRYPT( quantity, encryption_key() ), 
			     AES_ENCRYPT( round( @amount, 2 ), encryption_key() ) ,
			     AES_ENCRYPT( round( @amount, 2 ), encryption_key() ),
			     tran_type_id, 0,'recurring',rec_id,0,@remarks,NOW(),0,0
			FROM ww_payroll_partners 
			WHERE `user_id` = puserid;
			
		end if;
			
	UNTIL done END REPEAT;
    
	CLOSE recurring;
	-- 
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_salary_monthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_salary_monthly` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_salary_monthly`(
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11)
	)
BEGIN
	INSERT INTO `ww_payroll_current_transaction`
	    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
	     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
	     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
	     `created_by`, `deleted`)
	SELECT periodid, processing_type_id, paydate, user_id, 1, 1,
	     'SALARY', AES_ENCRYPT(1.00, encryption_key()), 
	     AES_ENCRYPT( 
		round(
		(AES_DECRYPT(salary, encryption_key()) / ( 
			CASE `payroll_schedule_id` WHEN 4 THEN 1 WHEN 5 THEN 2 WHEN 6 THEN 4 ELSE 2 END)
		),2), encryption_key()
	     ) ,
	     AES_ENCRYPT( 
		round(
		(AES_DECRYPT(salary, encryption_key()) / ( 
			CASE `payroll_schedule_id` WHEN 4 THEN 1 WHEN 5 THEN 2 WHEN 6 THEN 4 ELSE 2 END)
		),2), encryption_key()
	     ) ,
	     1, 0,'',0,0,'',NOW(),0,0
	FROM ww_payroll_partners 
	WHERE user_id = puserid;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_salary_weekly` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_salary_weekly` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_salary_weekly`(
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11)
	)
BEGIN
	SET @tran_code = '';
	SET @tran_id = 0;
	SET @tran_class_id = 0;
	SET @tran_type_id = 0;
	SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
	INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
	FROM ww_payroll_transaction WHERE transaction_code = 'SALARY';
	
	INSERT INTO `ww_payroll_current_transaction`
	    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
	     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
	     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
	     `created_by`, `deleted`)
	SELECT periodid, processing_type_id, paydate, puserid, @tran_id, @tran_class_id,
	       @tran_code, AES_ENCRYPT(SUM(t.`hrs_actual`), encryption_key()), 
	       AES_ENCRYPT( ( AES_DECRYPT(`salary`, encryption_key()) / 8 ), encryption_key() ) ,
	       AES_ENCRYPT( SUM(t.`hrs_actual`) * ( AES_DECRYPT(`salary`, encryption_key()) / 8 ), encryption_key() ) ,
	       @tran_type_id, 0,'',0,0,'',NOW(),0,0
	FROM ww_payroll_partners p, ww_time_record_summary t
	WHERE p.`user_id` = t.`user_id` AND 
	      p.`user_id` = puserid AND
	      t.`payroll_date` = paydate
	GROUP BY t.`user_id`, t.`payroll_date`;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_sss_contribution` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_sss_contribution` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_sss_contribution`(
	IN periodid INT(11), 
	IN paydate DATE,
	IN pay_sched_id INT(11),
	IN processing_type_id INT(11) ,
	IN nweek INT(1),
	IN puserid INT(11),
	IN salary DECIMAL(12,2),
	IN sss_mode INT(11),
	IN sss_week VARCHAR(11)
	)
BEGIN
	SET @employee_id = 0;
	SET @cnt_week = '';
	SET @salary = 0.00;
	
	SET @eeshare = 0.00;
	SET @ershare = 0.00;
	SET @ec = 0.00;
	
	SET @prev_eeshare = 0.00;
	SET @prev_ershare = 0.00;
	SET @prev_ec = 0.00;
	SET @prev_salary = 0.00;
	
	SET @earnings = 0.00;
	SET @bracket = 0.00;
	SET @cola = 0.00;
	SET @total_year_days = 0;
	SET @payrate = 0;
	SELECT `user_id`, LENGTH(REPLACE(`sss_week`,',','')), total_year_days, payroll_rate_type_id INTO @employee_id, @cnt_week, @total_year_days, @payrate 
	FROM ww_payroll_partners
	WHERE `user_id` = puserid AND FIND_IN_SET(nweek,`sss_week`) 
	AND `payroll_schedule_id` = pay_sched_id;
	
	IF @employee_id > 0 THEN
		
		-- set cola 
		SET @cola = get_cola(@employee_id, paydate);
		-- check previous payment
		SELECT MAX(CASE WHEN (`c`.`transaction_code` = 'SSS_EMP') THEN ROUND(AES_DECRYPT(`c`.`amount`,`encryption_key`()),2) END) AS `prev_eeshare`,MAX(CASE WHEN (`c`.`transaction_code` = 'SSS_COM') THEN ROUND(AES_DECRYPT(`c`.`amount`,`encryption_key`()),2) END) AS `prev_ershare`,MAX(CASE WHEN (`c`.`transaction_code` = 'SSS_ECC') THEN ROUND(AES_DECRYPT(`c`.`amount`,`encryption_key`()),2) END) AS `prev_ec` INTO @prev_eeshare, @prev_ershare, @prev_ec
		FROM ww_payroll_closed_transaction c
		WHERE c.`employee_id` = @employee_id AND (MONTH(c.`payroll_date`) = MONTH(paydate) AND YEAR(c.`payroll_date`) = YEAR(paydate))
			AND c.`transaction_code` IN ('SSS_EMP','SSS_COM','SSS_ECC');
					
		/*SELECT SUM(c.`employee`), SUM(c.`company`), SUM(c.`ec`) INTO @prev_eeshare, @prev_ershare, @prev_ec
		FROM ww_payroll_partners_contribution c
		LEFT JOIN ww_payroll_transaction t ON c.`transaction_id` = t.`transaction_id`
		WHERE c.`user_id` = @employee_id AND MONTH(c.`payroll_date`) = MONTH(paydate) 
			AND t.`transaction_code` = 'SSS_EMP';*/
		
		IF @cnt_week > 1 THEN
		    IF sss_mode = 1 THEN
			    -- previous salary
			    SELECT ROUND(SUM(AES_DECRYPT(`amount`, encryption_key())),2) INTO @prev_salary 
			    FROM ww_payroll_closed_transaction 
			    WHERE (MONTH(`payroll_date`) = MONTH(paydate) AND YEAR(`payroll_date`) = YEAR(paydate)) 
				AND `transaction_code` = 'SALARY' AND deleted = 0 AND `employee_id` = @employee_id;
				
		    ELSEIF sss_mode = 5 THEN
			    -- previous actual earning
			    SET @result = 0.00;
			    SET @prev_actual_earning = 0.00;
			    CALL sp_payroll_get_transaction(@employee_id,periodid,'1,5',1,0,0,3,@result);
			    SET @prev_actual_earning = @result;
			    
	            END IF;
	              
		END IF;
		
		-- monthly
		IF pay_sched_id = 4 THEN
		    -- default
		    IF sss_mode = 1 THEN
			
			-- with cola
			IF @cola > 0 THEN
				SET salary = salary + @cola;
			END IF;
			
			-- get bracket
			SELECT `eeshare`, `ershare`, `ec` INTO @eeshare, @ershare, @ec
			FROM ww_payroll_sss_table 
			WHERE salary BETWEEN `from` AND `to`;
		
		    -- actual	
		    ELSEIF sss_mode = 5 THEN
			-- get actual earning
			SET @result = 0.00;
			CALL sp_payroll_get_transaction(@employee_id,periodid,'1,2,5,6',1,1,1,0,@result);
			SET @earnings = @result;
			
			-- get bracket
			SELECT `eeshare`, `ershare`, `ec` INTO @eeshare, @ershare, @ec
			FROM ww_payroll_sss_table 
			WHERE @earnings BETWEEN `from` AND `to`;
			
		    ELSE
			SET @eeshare = 0.00; 
			SET @ershare = 0.00;
			SET @ec = 0.00;
			
		    END IF;
		-- semi-monthly
		ELSEIF pay_sched_id = 5 THEN
		    
		    -- default
		    IF sss_mode = 1 THEN
			IF @payrate = 6 THEN 
				SET @salary = ( salary * (@total_year_days/12 ) ) /@cnt_week;
			ELSE 
				SET @salary = salary/@cnt_week;
			END IF;
			-- get total salary if has previous payment
			SET @bracket =  @salary + IFNULL(@prev_salary,0.00);
			-- with cola
			IF @cola > 0 THEN
				SET @bracket = @bracket + @cola;
			END IF;
			-- get bracket 
			SELECT `eeshare`, `ershare`, `ec` INTO @eeshare, @ershare, @ec
			FROM ww_payroll_sss_table 
			WHERE @bracket BETWEEN `from` AND `to`;
			
			IF @prev_salary > 0 THEN
				SET @eeshare = @eeshare - IFNULL(@prev_eeshare,0.00);
				SET @ershare = @ershare - IFNULL(@prev_ershare,0.00);
				SET @ec = @ec - IFNULL(@prev_ec,0.00);
			END IF;
			
		    -- actual
		    ELSEIF sss_mode = 5 THEN
			
			-- get actual earning
			SET @result = 0.00;
			CALL sp_payroll_get_transaction(@employee_id,periodid,'1,2,5,6',1,1,1,0,@result);
			SET @earnings = @result;
			
			-- get total earnings if has previous payment
			SET @bracket = @earnings + IFNULL(@prev_actual_earning,0.00);
									
			-- get bracket
			SELECT `eeshare`, `ershare`, `ec` INTO @eeshare, @ershare, @ec
			FROM ww_payroll_sss_table 
			WHERE @bracket BETWEEN `from` AND `to`;
			
			IF @prev_actual_earning > 0 THEN
				SET @eeshare = @eeshare - IFNULL(@prev_eeshare,0.00);
				SET @ershare = @ershare - IFNULL(@prev_ershare,0.00);
				SET @ec = @ec - IFNULL(@prev_ec,0.00);
			END IF;
			
		    ELSE
			SET @eeshare = 0.00; 
			SET @ershare = 0.00;
			SET @ec = 0.00;
			
		    END IF;
		    
		-- weekly
		ELSEIF pay_sched_id = 6 THEN
		    
		    -- default
		    IF sss_mode = 1 THEN
			
			SET @salary = ( salary * (@total_year_days/12 ) ) /@cnt_week;
			-- get total salary if has previous payment
			SET @bracket =  @salary + IFNULL(@prev_salary,0.00);
			
			-- with cola
			IF @cola > 0 THEN
				SET @bracket = @bracket + @cola;
			END IF;
			
			-- get bracket
			SELECT `eeshare`, `ershare`, `ec` INTO @eeshare, @ershare, @ec
			FROM ww_payroll_sss_table 
			WHERE @bracket BETWEEN `from` AND `to`;
			
			IF @prev_salary > 0 THEN
				SET @eeshare = @eeshare - IFNULL(@prev_eeshare,0.00);
				SET @ershare = @ershare - IFNULL(@prev_ershare,0.00);
				SET @ec = @ec - IFNULL(@prev_ec,0.00);
			END IF;
		    
		    -- actual
		    ELSEIF sss_mode = 5 THEN
		    
			-- get actual earning
			SET @result = 0.00;
			CALL sp_payroll_get_transaction(@employee_id,periodid,'1,2,5,6',1,1,1,0,@result);
			SET @earnings = @result;
			
			-- get total earnings if has previous payment
			SET @bracket = @earnings + IFNULL(@prev_actual_earning,0.00);
			
			-- get bracket
			SELECT `eeshare`, `ershare`, `ec` INTO @eeshare, @ershare, @ec
			FROM ww_payroll_sss_table 
			WHERE @bracket BETWEEN `from` AND `to`;
			
			IF @prev_actual_earning > 0 THEN
				SET @eeshare = @eeshare - IFNULL(@prev_eeshare,0.00);
				SET @ershare = @ershare - IFNULL(@prev_ershare,0.00);
				SET @ec = @ec - IFNULL(@prev_ec,0.00);
			END IF;
			
		    ELSE
			SET @eeshare = 0.00; 
			SET @ershare = 0.00;
			SET @ec = 0.00;
			
		    END IF;
		    
		END IF;
		
		IF @eeshare > 0 THEN
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SET @tran_type_id = 0;
			SELECT `transaction_code`, `transaction_id`, `transaction_type_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE `transaction_code` = 'SSS_EMP';
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
			     AES_ENCRYPT( @eeshare, encryption_key()) ,
			     AES_ENCRYPT( @eeshare, encryption_key()), 
			     @tran_type_id, 0,'',0,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
		
		IF @ershare > 0 THEN
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SET @tran_type_id = 0;
			SELECT `transaction_code`, `transaction_id`, `transaction_type_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE `transaction_code` = 'SSS_COM';
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
			     AES_ENCRYPT( @ershare, encryption_key()) ,
			     AES_ENCRYPT( @ershare, encryption_key()), 
			     @tran_type_id, 0,'',0,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
		
		IF @ec > 0 THEN
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SET @tran_type_id = 0;
			SELECT `transaction_code`, `transaction_id`, `transaction_type_id`, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE `transaction_code` = 'SSS_ECC';
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
			     AES_ENCRYPT( @ec, encryption_key()) ,
			     AES_ENCRYPT( @ec, encryption_key()), 
			     @tran_type_id, 0,'',0,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
		
		
	
	END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_taxable_transaction` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_taxable_transaction` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_taxable_transaction`(
	IN puserid INT(11),
	in paydate date,
	OUT current_exclusion DECIMAL(12,2),
	OUT current_salary DECIMAL(12,2),
	OUT current_allow DECIMAL(12,2),
	OUT current_bonus_tax DECIMAL(12,2)
    )
BEGIN
	set @current_exclusion = 0.00;
	set @current_salary = 0.00;
	set @current_allow = 0.00;
	set @current_bonus_tax = 0.00;
	
	SELECT 
		SUM( ( CASE WHEN ptc.`government_mandated` = 1 or pct.transaction_code = 'VLSLNT' THEN 1 ELSE 0 END ) * AES_DECRYPT(pct.`amount`, encryption_key()) ),
		SUM( ( CASE WHEN ptc.`transaction_class_code` = 'SALARY' THEN 1 ELSE 0 END ) * AES_DECRYPT(pct.`amount`, encryption_key()) ),
		SUM( ( CASE WHEN ptc.`transaction_class_code` IN ('ALLOWANCE_BATCH', 'ALLOWANCE_RECURRING','E-COLA')THEN 1 ELSE 0 END ) * AES_DECRYPT(pct.`amount`, encryption_key()) ),
		SUM( ( CASE WHEN ptc.`transaction_class_code` = 'BONUS_TAXABLE' THEN 1 ELSE 0 END ) * AES_DECRYPT(pct.`amount`, encryption_key()) )
	into @current_exclusion, @current_salary, @current_allow, @current_bonus_tax
	FROM ww_payroll_current_transaction pct, ww_payroll_transaction_class ptc
	WHERE pct.`transaction_class_id` = ptc.`transaction_class_id`
		and pct.`employee_id` = puserid
		and pct.`payroll_date` = paydate;
		
	SET current_exclusion = @current_exclusion;
	SET current_salary = @current_salary;
	SET current_allow = @current_allow;
	SET current_bonus_tax = @current_bonus_tax;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_tax_annualize` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_tax_annualize` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_tax_annualize`(
	IN puserid INT(11),
	IN periodid INT(11),
	IN paydate DATE,
	IN dtRes DATE,
	IN processing_type_id INT(11),
	IN pay_sched_id INT(11),
	IN nTaxcode INT(11),
	IN remain INT(11)
    )
BEGIN
	SET @ytdGross = 0.00;
	SET @ytdExclusion = 0.00;
	SET @ytdTax = 0.00;
	SET @curExclusion = 0.00;
	SET @curSalary = 0.00;
	SET @curAllow = 0.00;
	SET @curBonusTax = 0.00;
	SET @projExclusion = 0.00;
	SET @nTax  = 0.00;
	IF remain = '' OR remain IS NULL OR remain <= 0 THEN
		SET remain = 1;
	END IF;
	
	set @year = year(paydate);
	if dtRes <> '' then
		SET @year = YEAR(dtRes);
	end if;
	
	-- get ytd total
	CALL sp_payroll_get_ytd_total( puserid, @year, @ytdGross, @ytdExclusion, @ytdTax );
	-- get current taxable transaction
	CALL sp_payroll_get_taxable_transaction( puserid, paydate, @curExclusion, @curSalary, @curAllow, @curBonusTax );
	-- get total exemptions
	SET @exempt = 0;
	SELECT amount INTO @exempt FROM ww_taxcode WHERE `taxcode_id` = nTaxcode;
	
	-- INSERT INTO `logtable` (`log`) VALUES (CONCAT(' user id',puserid,' ytdtax - ',@ytdTax));
	
	-- INSERT INTO `logtable` (`log`) VALUES (CONCAT(' user id',puserid,'ytdgross - ',@ytdGross,' ytdexclusion - ',@ytdExclusion,' ytdtax - ',@ytdTax,' cursalary - ',@curSalary,' curallowance - ',@curAllow,' curbonuxtax - ',@curBonusTax,' curexclusion - ',@curExclusion,' exempt - ',@exempt));
	
	SET @nAnnTax = 0;
	SET @nBasis = IFNULL(@ytdGross,0) + IFNULL(@curSalary,0) + IFNULL(@curAllow,0) + IFNULL(@curBonusTax,0) - IFNULL(@ytdExclusion,0) - IFNULL(@curExclusion,0) - IFNULL(@exempt,0);
	
	-- INSERT INTO `logtable` (`log`) VALUES (CONCAT('Basis - ',@nBasis,' user id',puserid));
	
	IF @nBasis > 0 THEN
		SELECT ROUND(((@nBasis - salary_from)*(rate/100))+amount,2) INTO @nAnnTax
		FROM ww_payroll_annual_tax 
		WHERE @nBasis > salary_from
		ORDER BY salary_from DESC
		LIMIT 1;
	END IF;
	
	-- INSERT INTO `logtable` (`log`) VALUES (CONCAT('aannual tax - ',@nAnnTax,' ytd tax - ',@ytdTax));
	
	IF remain = 1 THEN
		SET @nTax = @nAnnTax - IFNULL(@ytdTax,0);
	END IF;
	
	-- INSERT INTO `logtable` (`log`) VALUES (CONCAT('ntax - ',@nTax));
	
	IF @nTax > 0 OR ( @nTax !=0 AND remain = 1 ) THEN
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'WHTAX';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
		     AES_ENCRYPT( Round(@nTax,2), encryption_key()),
		     AES_ENCRYPT( ROUND(@nTax,2), encryption_key()), 
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_tax_bonus` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_tax_bonus` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_tax_bonus`(
	IN puserid INT(11),
	IN periodid INT(11),
	IN paydate DATE,
	IN processing_type_id INT(11)
	)
BEGIN
	SET @bonus_taxable = 0.00;
	
	SELECT 
		SUM( (CASE WHEN `transaction_code` = 'BONUS_TAXABLE' THEN 1 ELSE 0 END) * IFNULL(AES_DECRYPT(`amount`, encryption_key() ), 0.00) )
	into @bonus_taxable
	FROM ww_payroll_current_transaction
	where `payroll_date` = paydate and `employee_id` = puserid and deleted = 0;
	
	set @wtax = 0.00;
	if @bonus_taxable > 0 then
		set @wtax = @bonus_taxable * .32;
	end if;
	
	IF @wtax > 0 THEN
	
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'WHTAX';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
		     AES_ENCRYPT( @wtax, encryption_key()),
		     AES_ENCRYPT( @wtax, encryption_key()), 
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	
	END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_tax_bonus_rf` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_tax_bonus_rf` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_tax_bonus_rf`(
	IN puserid INT(11),
	IN periodid INT(11),
	IN paydate DATE,
	IN processing_type_id INT(11),
	IN pay_sched_id int(11),
	in nTaxcode INT(11),
	IN amount DECIMAL(12,2)
	)
BEGIN
	SET @exclusion = 0.00;
	set @salary = 0.00;
	set @oth_income = 0.00;
	set @earnings = 0.00;
	
	SELECT 
		SUM(( CASE `transaction_type_id` WHEN 5 THEN 1 ELSE 0 END ) * IFNULL(AES_DECRYPT(`amount`, encryption_key() ), 0.00) ),
		SUM(( CASE `transaction_code` WHEN 'SALARY' THEN 1 ELSE 0 END ) * IFNULL(AES_DECRYPT(`amount`, encryption_key() ), 0.00) ),
		SUM( (CASE WHEN `transaction_code` != 'SALARY' AND `transaction_type_id` IN (1,6) THEN 1 ELSE 0 END) * IFNULL(AES_DECRYPT(`amount`, encryption_key() ), 0.00) )
	into @exclusion, @salary, @oth_income
	FROM ww_payroll_current_transaction
	where `payroll_date` = paydate and `employee_id` = puserid and deleted = 0;
	
	set @earnings = amount;
	
	set @wtax = 0.00;
	if @earnings > 0 then
		set @wtax = payroll_get_wtax( pay_sched_id, nTaxcode, @earnings );
	end if;
	
	IF @wtax > 0 THEN
	
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'WHTAX';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
		     AES_ENCRYPT( @wtax, encryption_key()),
		     AES_ENCRYPT( @wtax, encryption_key()), 
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	
	END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_tax_bonus_sup` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_tax_bonus_sup` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_tax_bonus_sup`(
	IN puserid INT(11),
	IN periodid INT(11),
	IN paydate DATE,
	IN processing_type_id INT(11)
	)
BEGIN
	SET @bonus_taxable = 0.00;
	
	SELECT 
		SUM( (CASE WHEN `transaction_code` = 'BONUS_TAXABLE' THEN 1 ELSE 0 END) * IFNULL(AES_DECRYPT(`amount`, encryption_key() ), 0.00) )
	into @bonus_taxable
	FROM ww_payroll_current_transaction
	where `payroll_date` = paydate and `employee_id` = puserid and deleted = 0;
	
	set @wtax = 0.00;
	if @bonus_taxable > 0 then
		set @wtax = @bonus_taxable * .30;
	end if;
	
	IF @wtax > 0 THEN
	
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'WHTAX';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
		     AES_ENCRYPT( @wtax, encryption_key()),
		     AES_ENCRYPT( @wtax, encryption_key()), 
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	
	END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_tax_manual` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_tax_manual` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_tax_manual`(
	IN puserid INT(11),
	IN periodid INT(11),
	IN paydate DATE,
	IN processing_type_id INT(11),
	IN pay_sched_id int(11),
	in amount decimal(12,2)
	)
BEGIN
	IF amount > 0 THEN
	
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'WHTAX';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
		     AES_ENCRYPT( amount, encryption_key()),
		     AES_ENCRYPT( amount, encryption_key()), 
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	
	END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_tax_table` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_tax_table` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_tax_table`(
	IN puserid INT(11),
	IN periodid INT(11),
	IN paydate DATE,
	IN processing_type_id INT(11),
	IN pay_sched_id int(11),
	in nTaxcode INT(11)
	)
BEGIN
	SET @exclusion = 0.00;
	set @salary = 0.00;
	set @oth_income = 0.00;
	set @earnings = 0.00;
	
	SELECT 
		SUM(( CASE `transaction_type_id` WHEN 5 THEN 1 ELSE 0 END ) * IFNULL(AES_DECRYPT(`amount`, encryption_key() ), 0.00) ),
		SUM(( CASE `transaction_code` WHEN 'SALARY' THEN 1 ELSE 0 END ) * IFNULL(AES_DECRYPT(`amount`, encryption_key() ), 0.00) ),
		SUM( (CASE WHEN `transaction_code` != 'SALARY' AND `transaction_type_id` IN (1,6) THEN 1 ELSE 0 END) * IFNULL(AES_DECRYPT(`amount`, encryption_key() ), 0.00) )
	into @exclusion, @salary, @oth_income
	FROM ww_payroll_current_transaction
	where `payroll_date` = paydate and `employee_id` = puserid and deleted = 0;
	
	set @earnings = @salary + @oth_income - @exclusion;
	
	set @wtax = 0.00;
	if @earnings > 0 then
		set @wtax = payroll_get_wtax( pay_sched_id, nTaxcode, @earnings );
	end if;
	
	IF @wtax > 0 THEN
	
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'WHTAX';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
		     AES_ENCRYPT( @wtax, encryption_key()),
		     AES_ENCRYPT( @wtax, encryption_key()), 
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	
	END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_transaction` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_transaction` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_transaction`(
	IN puserid int(11),
	in periodid int(11),
	in tran_type_id varchar(10),
	in exclude_govt_contribution tinyint(1),
	in current tinyint(1),
	in this_period_only tinyint(1),
	in scope tinyint(1),
	out result varchar(1000)
	)
BEGIN
	declare paydate date;
	declare proc_type_id int;
	declare tran_id int;
	declare quantity decimal(10,2);
	DECLARE unit_rate DECIMAL(10,2);
	DECLARE amount DECIMAL(10,2);
	DECLARE transaction_type_id int;
	DECLARE on_hold int;
	DECLARE deleted int;
	DECLARE operation varchar(1);
	
	set @result = 0.00;
	set @payroll_date = '';
	set @period_processing_type_id = '';
	set @tbl = '';
	set @proc_type_id = '';
	set @scope = '';
	set @exclude_govt_contribution = '';
	set @this_period = '';
	
	-- get period
	select payroll_date, period_processing_type_id into @payroll_date, @period_processing_type_id
	from ww_payroll_period where payroll_period_id = periodid;
	
	IF current = 1 then
		set @tbl = 'ww_payroll_current_transaction a ';
		set @proc_type_id = CONCAT(' AND d.period_processing_type_id = ',@period_processing_type_id,' AND a.on_hold = 0 ');
	else 
		set @tbl = 'ww_payroll_closed_transaction a ';
		
		if scope = 1 then
			set @scope = CONCAT(" AND MONTH(a.payroll_date) = MONTH('",@payroll_date,"') ");
		elseif scope = 2 then
			SET @scope = CONCAT(" AND MONTH(a.payroll_date) = YEAR('",@payroll_date,"') ");
		elseif scope = 3 then
			SET @scope = CONCAT(" AND MONTH(a.payroll_date) = MONTH('",@payroll_date,"') AND YEAR(a.payroll_date) = YEAR('",@payroll_date,"') ");
		else
			set @scope = '';
		end if;
	end if;
	
	IF exclude_govt_contribution = 1 then
		set @exclude_govt_contribution = ' AND e.government_mandated != 1 ';
	end if;
	
	if this_period_only = 1 then
		set @this_period = concat(' AND a.period_id = ',periodid);
	end if;
	
	SET @buffer = CONCAT_WS('',
        'SELECT ROUND(SUM(CASE operation WHEN "+" THEN AES_DECRYPT(amount, encryption_key()) 
		WHEN "-" THEN AES_DECRYPT(amount, encryption_key()) * -1 ELSE "" END),2) INTO @result
        FROM ', @tbl,
        'LEFT JOIN ww_payroll_transaction b on b.transaction_code = a.transaction_code
        LEFT JOIN ww_payroll_transaction_type c on c.transaction_type_id = b.transaction_type_id
	LEFT JOIN ww_payroll_period d on a.period_id = d.payroll_period_id
	LEFT JOIN ww_payroll_transaction_class e on e.transaction_class_id = b.transaction_class_id
        WHERE a.deleted = 0 AND b.deleted = 0 AND a.employee_id = ',puserid,
        ' AND a.transaction_type_id IN (',tran_type_id,') ',@exclude_govt_contribution, @proc_type_id, @scope, @this_period
	);
	
	PREPARE stmt FROM @buffer;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	SET result = @result;
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_undertime` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_undertime` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_undertime`( 
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11) 
	)
BEGIN
	SET @under = 0;
	
	/* 2017-05-23 */
	/* Removal of undertime for Managers
	SELECT  SUM(`quantity`) INTO @under
	FROM ww_time_record_process
	WHERE `user_id` = puserid AND payroll_date = paydate 
		AND `transaction_code` = 'DEDUCTION_UNDERTIME' AND latefile = 0 AND deleted = 0
	GROUP BY user_id, payroll_date, transaction_id; */
	SELECT SUM(
		CASE WHEN p.`employment_type_id` = 4 THEN -- For Managers
			IF(trp.`quantity` >= (trs.`hrs_rendered` / 2), (trs.`hrs_rendered` / 2), 0)
		ELSE trp.`quantity` END)
	INTO @under
	FROM ww_time_record_process trp
	JOIN ww_partners p ON p.user_id = trp.user_id
	JOIN ww_time_record_summary trs ON trs.user_id = p.user_id AND trs.`date` = trp.`date` AND trp.`payroll_date` = trs.`payroll_date`
	WHERE trp.`user_id` = puserid AND trp.payroll_date = paydate 
		AND `transaction_code` = 'DEDUCTION_UNDERTIME' AND latefile = 0 AND trp.deleted = 0
	GROUP BY trp.user_id, trp.payroll_date, transaction_id;
	
	IF @under > 0 THEN 
		
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'DEDUCTION_UNDERTIME';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT( @under, encryption_key() ), 
		     AES_ENCRYPT( ROUND( ( (AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ),2), encryption_key() ) ,
		     AES_ENCRYPT( ROUND( ( @under * ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) ) / 8 ),2), encryption_key() ),
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_undertime_adj` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_undertime_adj` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_undertime_adj`( 
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11) 
	)
BEGIN
	SET @under = 0;
	
	SELECT  SUM(`quantity`) INTO @under
	FROM ww_time_record_process
	WHERE `user_id` = puserid AND payroll_date = paydate 
		AND `transaction_code` = 'DEDUCTION_UNDERTIME_ADJ' AND latefile = 1 AND deleted = 0
	GROUP BY user_id, payroll_date, transaction_id;
	
	IF @under != 0 THEN 
		
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = 'DEDUCTION_UNDERTIME_ADJ';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT( @under, encryption_key() ), 
		     AES_ENCRYPT( ROUND( ( (AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ),2), encryption_key() ) ,
		     AES_ENCRYPT( ROUND( ( @under * ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) ) / 8 ),2), encryption_key() ),
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_undertime_lf` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_undertime_lf` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_undertime_lf`( 
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11) 
	)
BEGIN
	SET @under = 0;
	
	SELECT  SUM(`quantity`) INTO @under
	FROM ww_time_record_process
	WHERE `user_id` = puserid AND payroll_date = paydate 
		AND `transaction_code` = 'DEDUCTION_UNDERTIME' AND latefile = 1 AND deleted = 0
	GROUP BY user_id, payroll_date, transaction_id;
	
	IF @under > 0 THEN 
		
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_class_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
		INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
		FROM ww_payroll_transaction WHERE transaction_code = CONCAT('DEDUCTION_UNDERTIME','_LF');
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, employee_id, @tran_id, @tran_class_id,
		     @tran_code, AES_ENCRYPT( @under, encryption_key() ), 
		     AES_ENCRYPT( ROUND( ( (AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) / 8 ),2), encryption_key() ) ,
		     AES_ENCRYPT( ROUND( ( @under * ( ( AES_DECRYPT(salary, encryption_key()) / ( total_year_days /12 ) ) ) / 8 ),2), encryption_key() ),
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE employee_id = puserid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_wtax_tbl` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_wtax_tbl` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_wtax_tbl`(
	IN puserid INT(11),
	IN periodid INT(11),
	IN paydate DATE,
	IN processing_type_id INT(11),
	IN pay_sched_id int(11),
	in nTaxcode INT(11)
	)
BEGIN
	SET @exclusion = 0.00;
	set @salary = 0.00;
	set @oth_income = 0.00;
	set @earnings = 0.00;
	
	SELECT 
		SUM(( CASE `transaction_type_id` WHEN 5 THEN 1 ELSE 0 END ) * IFNULL(AES_DECRYPT(`amount`, encryption_key() ), 0.00) ),
		SUM(( CASE `transaction_code` WHEN 'SALARY' THEN 1 ELSE 0 END ) * IFNULL(AES_DECRYPT(`amount`, encryption_key() ), 0.00) ),
		SUM( (CASE WHEN `transaction_code` != 'SALARY' AND `transaction_type_id` = 1 THEN 1 ELSE 0 END) * IFNULL(AES_DECRYPT(`amount`, encryption_key() ), 0.00) )
	into @exclusion, @salary, @oth_income
	FROM ww_payroll_current_transaction
	where `payroll_date` = paydate and `employee_id` = puserid and deleted = 0;
	
	set @earnings = @salary + @oth_income - @exclusion;
	
	set @wtax = 0.00;
	if @earnings > 0 then
		set @wtax = payroll_get_wtax( pay_sched_id, nTaxcode, @earnings );
	end if;
	
	IF @wtax > 0 THEN
	
		SET @tran_code = '';
		SET @tran_id = 0;
		SET @tran_type_id = 0;
		SELECT transaction_code, transaction_id , transaction_type_id
		INTO @tran_code, @tran_id, @tran_type_id
		FROM ww_payroll_transaction WHERE transaction_code = 'WHTAX';
		
		INSERT INTO `ww_payroll_current_transaction`
		    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`,
		     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
		     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		     `created_by`, `deleted`)
		SELECT periodid, processing_type_id, paydate, user_id, @tran_id, 
		     @tran_code, AES_ENCRYPT(1.00, encryption_key()), 
		     AES_ENCRYPT( @wtax, encryption_key()),
		     AES_ENCRYPT( @wtax, encryption_key()), 
		     @tran_type_id, 0,'',0,0,'',NOW(),0,0
		FROM ww_payroll_partners 
		WHERE user_id = puserid;
	
	END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_get_ytd_total` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_get_ytd_total` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_get_ytd_total`(
	in puserid int(11),
	IN nYear INT(11),
	out ytdGross decimal(12,2),
	out ytdExclusion Decimal(12,2),
	out ytdTax decimal(12,2)
    )
BEGIN
	set @payYear = '';
	set @ytdGross = 0.00;
	set @ytdExclusion = 0.00;
	set @ytdTax = 0.00;
	
	select `year` into @payYear from ww_payroll_closed_summary
	where `user_id` = puserid and `type` = 'C' and `year` = nYear and `summary_code` = 'TAXABLE_INCOME';
	
	select 
		sum( ( case when `summary_code` = 'TAXABLE_INCOME' then 1 else 0 end ) * aes_decrypt( `ytd`, encryption_key() ) )
		+ SUM( ( CASE WHEN `summary_code` = 'DEMMINIMIS' THEN 1 ELSE 0 END ) * AES_DECRYPT( `ytd`, encryption_key() ) )
		+ SUM( ( CASE WHEN `summary_code` = 'PREV_GROSS' THEN 1 ELSE 0 END ) * AES_DECRYPT( `ytd`, encryption_key() ) ), -- ytd gross
		sum( ( case when `summary_code` = 'ADDITIONAL_EXCLUSION' then 1 else 0 end ) * AES_DECRYPT( `ytd`, encryption_key() ) ), -- ytd exclusion
		SUM( ( CASE WHEN `summary_code` = 'WHTAX' THEN 1 ELSE 0 END ) * AES_DECRYPT( `ytd`, encryption_key() ) )
		+ SUM( ( CASE WHEN `summary_code` = 'PREV_WHTAX' THEN 1 ELSE 0 END ) * AES_DECRYPT( `ytd`, encryption_key() ) )-- ytd tax
	into @ytdGross, @ytdExclusion, @ytdTax
	from ww_payroll_closed_summary
	where `user_id` = puserid and `type` in ('C', 'P') and `year` = @payYear;
	
	set ytdGross = @ytdGross;
	set ytdExclusion = @ytdExclusion;
	set ytdTax = @ytdTax;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_insert` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_insert` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_insert`(
	IN sTransaction VARCHAR(180),
	IN nUserID INT(11),
	IN periodid INT(11),
	IN processing_type_id INT(11),
	IN dtPay DATE,
	IN nQuantity DECIMAL(12,2),
	IN nUnitRate DECIMAL(12,2),
	IN nAmount DECIMAL(12,2), 
	IN nInsertedFrom INT(11),
	IN sRecordFrom VARCHAR(60),
	IN nRecordID INT(11),
	IN sRemarks VARCHAR(180)
	
    )
BEGIN
	
	SET @tran_code = '';
	SET @tran_id = 0;
	SET @tran_class_id = 0;
	SET @tran_type_id = 0;
	SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
	INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
	FROM ww_payroll_transaction WHERE transaction_code = sTransaction AND deleted = 0;
	
	INSERT INTO `ww_payroll_current_transaction`(
		`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,
		`transaction_id`, `transaction_class_id`, `transaction_code`, `transaction_type_id`,
		`quantity`,`unit_rate`,`amount`,
		`inserted_from_id`, `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
		`created_by`, `deleted`)
	SELECT periodid, processing_type_id, dtPay, user_id, 
		@tran_id, @tran_class_id, @tran_code, @tran_type_id,
		AES_ENCRYPT( nQuantity, encryption_key() ), 
		AES_ENCRYPT( nUnitRate, encryption_key() ),
		AES_ENCRYPT( nAmount, encryption_key() ),
		nInsertedFrom, sRecordFrom, nRecordID,0, sRemarks,NOW(),
		0,0
	FROM ww_payroll_partners 
	WHERE user_id = nUserID;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_leave_conversion` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_leave_conversion` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_leave_conversion`(
	IN nUserID INT(11),
	IN nPeriodID INT(11),
	IN nCompID INT(11),	
	IN dtPay DATE,
	IN nDailySalary DECIMAL(12,2),
	IN nEmpTypeID INT(11),
	IN nStatusID INT(11),
	IN nProcTypeID INT(11),
	IN nNoDaysYear DECIMAL(12,2)
    )
BEGIN
	SET @nontax_leave_id = 0;
	SET @taxable_leave_id = 0;
	SET @convertible = 0;
	SET @nontax = 0;
	SET @taxable = 0;
	set @carryover = 0;
	SET @forfeited = 0;
	SET @balance = 0;
	SET @year = '';
	SET @form_id = 0;
	SET @form_code = '';
	
	/*
	SET @cnt = 0;
	SELECT COUNT(`id`) INTO @cnt FROM ww_payroll_leave_conversion 
	WHERE company_id = nCompID AND employment_type_id = nEmpTypeID AND deleted = 0;
	
	if @cnt > 0 then
		SELECT 224, 225,tfb.`form_code`, 
			lvc.`convertible`, lvc.nontax, lvc.taxable, lvc.`carry_over`, lvc.`forfeited`,
			tfb.`previous` + tfb.`current` - ( tfb.`used` + tfb.`used_insert`),
			YEAR(dtPay), lvc.form_id
		INTO @nontax_leave_id, @taxable_leave_id,@form_code, 
			@convertible, @nontax, @taxable, @carryover, @forfeited, @balance,
			@year, @form_id
		FROM ww_payroll_leave_conversion lvc
		LEFT JOIN ww_time_form_balance tfb ON lvc.form_id = tfb.`form_id`
		WHERE lvc.`deleted` = 0
			AND tfb.`year` = YEAR(dtPay)
			AND lvc.`company_id` = nCompID
			AND tfb.user_id = nUserID;	
	else
		SELECT 224, 225,tfb.`form_code`, 
			lvc.`convertible`, lvc.nontax, lvc.taxable, lvc.`carry_over`, lvc.`forfeited`,
			tfb.`previous` + tfb.`current` - ( tfb.`used` + tfb.`used_insert`),
			YEAR(dtPay), lvc.form_id
		INTO @nontax_leave_id, @taxable_leave_id,@form_code, 
			@convertible, @nontax, @taxable, @carryover, @forfeited, @balance,
			@year, @form_id
		FROM ww_payroll_leave_conversion lvc
		LEFT JOIN ww_time_form_balance tfb ON lvc.form_id = tfb.`form_id`
		WHERE lvc.`deleted` = 0
			AND tfb.`year` = YEAR(dtPay)
			AND lvc.`company_id` = nCompID
			AND lvc.`employment_type_id` = nEmpTypeID
			AND tfb.user_id = nUserID;
	end if;
	*/
        
	SELECT 224, 225,tfb.`form_code`, 
		lvc.`convertible`, lvc.nontax, lvc.taxable, lvc.`carry_over`, lvc.`forfeited`,
		tfb.`previous` + tfb.`current` - ( tfb.`forfeited` + tfb.`used` + tfb.`used_insert`),
		YEAR(dtPay), lvc.form_id
	INTO @nontax_leave_id, @taxable_leave_id,@form_code, 
		@convertible, @nontax, @taxable, @carryover, @forfeited, @balance,
		@year, @form_id
	FROM ww_payroll_leave_conversion lvc
	LEFT JOIN ww_time_form_balance tfb ON lvc.form_id = tfb.`form_id`
	WHERE lvc.`deleted` = 0
		AND tfb.`year` = YEAR(dtPay)
		AND lvc.`company_id` = nCompID
		AND FIND_IN_SET(nEmpTypeID,`lvc`.`employment_type_id`)
		AND tfb.user_id = nUserID;
	
	IF @balance > 0 THEN
		IF (nStatusID != 2 AND nStatusID != 5) OR (nCompID = 5 AND nStatusID = 2) THEN -- if not probationary
			SET @unit = 0;
			SET @nNonTax = 0;
			SET @nTaxable = 0;
			set @nToCarryOver = 0;
			set @nRemaining = 0;
			-- set number of unit to convert
			IF @balance > @convertible THEN 
				SET @unit = @convertible;
				set @nRemaining = @balance - @convertible;
				SET @nToCarryOver = @nRemaining;
				/*if @nRemaining > @carryover then
					set @nToCarryOver = @carryover;
				else
					set @nToCarryOver = @nRemaining;
				end if;*/
			ELSE 
				SET @unit = @balance;
			END IF;
			-- set number of nontax and taxable
			IF @unit > @nontax THEN
				SET @nNonTax = @nontax;
				SET @nTaxable = @unit - @nontax;
			ELSE
				SET @nNonTax = @unit;
				SET @nTaxable = 0;
			END IF;
			-- for executive and manager additional deminimis
			set @deminimis = 0;
			set @deminimis_amount = 0;
			if nEmpTypeID = 4 or nEmpTypeID = 9 then
				SELECT  sum(AES_DECRYPT( e.`amount`, encryption_key() ))
				into @deminimis
				FROM
				  ww_payroll_entry_recurring r 
				  LEFT JOIN ww_payroll_entry_recurring_employee e 
				    ON r.`recurring_id` = e.`recurring_id` 
				  LEFT JOIN ww_payroll_transaction t 
				    ON t.`transaction_id` = r.`transaction_id` 
				  LEFT JOIN ww_payroll_partners p 
				    ON p.`user_id` = e.`employee_id` 
				  LEFT JOIN ww_payroll_schedule_rate_divisor d
				    ON p.`payroll_schedule_id` = d.`payroll_schedule_id` AND p.`payroll_rate_type_id` = d.`payroll_rate_type_id`
				WHERE r.`deleted` = 0 AND e.deleted = 0 AND e.`employee_id` = nUserID 
					AND dtPay BETWEEN r.`date_from` AND r.`date_to` and t.transaction_id in (231,232,249); 
					
				SET @deminimis_amount = @deminimis / (nNoDaysYear / 12 );
			end if;
			
			-- INSERT TRANSACTION 
			-- NON TAX
			IF @nNonTax > 0 THEN
				SET @tran_code = '';
				SET @tran_id = 0;
				SET @tran_class_id = 0;
				SET @tran_type_id = 0;
				SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
				INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
				FROM ww_payroll_transaction WHERE transaction_id = @nontax_leave_id;
				
				INSERT INTO `ww_payroll_current_transaction`
					    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
					     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
					     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
					     `created_by`, `deleted`)
				SELECT nPeriodID, nProcTypeID, dtPay, user_id, @tran_id, @tran_class_id,
				     @tran_code, AES_ENCRYPT( @nNonTax, encryption_key() ), 
				     AES_ENCRYPT( ROUND( nDailySalary, 2 ) + @deminimis_amount, encryption_key() ) ,
				     AES_ENCRYPT( ROUND( (@nNonTax * (nDailySalary + @deminimis_amount)), 2 ), encryption_key() ),
				     @tran_type_id, 0,'leave_conversion',0,0,'',NOW(),0,0
				FROM ww_payroll_partners 
				WHERE user_id = nUserID;
			END IF;
			-- TAXABLE
			IF @nTaxable > 0 THEN
				SET @tran_code = '';
				SET @tran_id = 0;
				SET @tran_class_id = 0;
				SET @tran_type_id = 0;
				SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
				INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
				FROM ww_payroll_transaction WHERE transaction_id = @taxable_leave_id;
				
				INSERT INTO `ww_payroll_current_transaction`
					    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
					     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
					     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
					     `created_by`, `deleted`)
				SELECT nPeriodID, nProcTypeID, dtPay, user_id, @tran_id, @tran_class_id,
				     @tran_code, AES_ENCRYPT( @nTaxable, encryption_key() ), 
				     AES_ENCRYPT( ROUND( nDailySalary, 2 ) + @deminimis_amount, encryption_key() ) ,
				     AES_ENCRYPT( ROUND( (@nTaxable * (nDailySalary + @deminimis_amount)), 2 ), encryption_key() ),
				     @tran_type_id, 0,'leave_conversion',0,0,'',NOW(),0,0
				FROM ww_payroll_partners 
				WHERE user_id = nUserID;
			END IF;
			
			UPDATE ww_time_form_balance SET paid_unit = @unit WHERE user_id = nUserID AND form_id = @form_id AND `year` = @year;
			
			if @nToCarryOver > 0 then
			       SELECT COUNT(id) INTO @rec
			       FROM `ww_time_form_balance`
			       WHERE deleted=0 AND user_id=nUserID AND form_id = @form_id AND `year` = YEAR(dtPay)+1;				
				
				if @rec = 0 then
					INSERT INTO `ww_time_form_balance`
					(`year`, `user_id`, `form_id`, `form_code`, `previous`, `period_from`, `period_to`, `period_extension`)
					SELECT YEAR(dtPay)+1, nUserID, @form_id, @form_code, @nToCarryOver, MAKEDATE(YEAR(dtPay)+1,1), LAST_DAY(MAKEDATE(YEAR(dtPay)+1,365)), LAST_DAY(MAKEDATE(YEAR(dtPay)+2,90))
					ON DUPLICATE KEY UPDATE modified_on = NOW();							
				else
					UPDATE `ww_time_form_balance` SET previous = @nToCarryOver WHERE deleted=0 AND user_id=nUserID AND form_id = @form_id AND `year` = YEAR(dtPay)+1;
				end if;
			end if;
		else
		        SELECT COUNT(id) INTO @rec
		        FROM `ww_time_form_balance`
		        WHERE deleted=0 AND user_id=nUserID AND form_id = @form_id AND `year` = YEAR(dtPay)+1;						
		        
		        IF @rec = 0 THEN
				INSERT INTO `ww_time_form_balance`
				(`year`, `user_id`, `form_id`, `form_code`, `previous`, `period_from`, `period_to`, `period_extension`)
				SELECT YEAR(dtPay)+1, nUserID, @form_id, @form_code, @balance, MAKEDATE(YEAR(dtPay)+1,1), LAST_DAY(MAKEDATE(YEAR(dtPay)+1,365)), LAST_DAY(MAKEDATE(YEAR(dtPay)+2,90))
				ON DUPLICATE KEY UPDATE modified_on = NOW();			
			else
				UPDATE `ww_time_form_balance` SET previous = @balance WHERE deleted=0 AND user_id=nUserID AND form_id = @form_id AND `year` = YEAR(dtPay)+1;
			end if;
		END IF;
	END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_leave_conversion_org` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_leave_conversion_org` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_leave_conversion_org`(
	IN nUserID INT(11),
	IN nPeriodID INT(11),
	IN nCompID INT(11),	
	IN dtPay DATE,
	IN nDailySalary DECIMAL(12,2),
	IN nEmpTypeID INT(11),
	IN nProcTypeID INT(11)
    )
BEGIN
	SET @nontax_leave_id = 0;
	SET @taxable_leave_id = 0;
	SET @convertible = 0;
	SET @nontax = 0;
	SET @taxable = 0;
	SET @forfeited = 0;
	SET @balance = 0;
	SET @year = '';
	SET @form_id = 0;
	
	SELECT lvp.`leave_conversion_period_id`, lvp.nontax_leave_id, lvp.taxable_leave_id, 
		lvc.`convertible`, lvc.nontax, lvc.taxable, lvc.`forfeited`,
		tfb.`previous` + tfb.`current` - ( tfb.`used` + tfb.`used_insert`),
		lvp.`year`, lvp.form_id
	INTO @leave_conversion_period_id, @nontax_leave_id, @taxable_leave_id, 
		@convertible, @nontax, @taxable, @forfeited, @balance,
		@year, @form_id
	FROM ww_payroll_leave_conversion_period lvp
	LEFT JOIN ww_payroll_leave_conversion_period_apply_to lva ON lvp.`leave_conversion_period_id` = lva.`leave_conversion_id`
	LEFT JOIN ww_payroll_leave_conversion lvc ON lvp.form_id = lvc.`form_id`
	LEFT JOIN ww_time_form_balance tfb ON lvp.form_id = tfb.`form_id` AND lvp.`year` = tfb.`year`
	WHERE lvp.`deleted` = 0 AND lva.`deleted` = 0 AND lvc.`deleted` = 0
		AND lvp.`payroll_date` = dtPay
		AND lvc.`company_id` = nCompID
		AND tfb.user_id = nUserID;
	
	IF @balance > 0 THEN
		SET @unit = 0;
		SET @nNonTax = 0;
		SET @nTaxable = 0;
		-- set number of unit to convert
		IF @balance > @convertible THEN 
			SET @unit = @convertible;
		ELSE 
			SET @unit = @balance;
		END IF;
		-- set number of nontax and taxable
		IF @unit > @nontax THEN
			SET @nNonTax = @nontax;
			SET @nTaxable = @unit - @nontax;
		ELSE
			SET @nNonTax = @unit;
			SET @nTaxable = 0;
		END IF;
		
		-- INSERT TRANSACTION 
		-- NON TAX
		IF @nNonTax > 0 THEN
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SET @tran_type_id = 0;
			SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE transaction_id = @nontax_leave_id;
			
			INSERT INTO `ww_payroll_current_transaction`
				    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
				     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
				     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
				     `created_by`, `deleted`)
			SELECT nPeriodID, nProcTypeID, dtPay, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT( @nNonTax, encryption_key() ), 
			     AES_ENCRYPT( ROUND( nDailySalary, 2 ), encryption_key() ) ,
			     AES_ENCRYPT( ROUND( (@nNonTax * nDailySalary), 2 ), encryption_key() ),
			     @tran_type_id, 0,'leave_conversion',0,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = nUserID;
		END IF;
		-- TAXABLE
		IF @nTaxable > 0 THEN
			SET @tran_code = '';
			SET @tran_id = 0;
			SET @tran_class_id = 0;
			SET @tran_type_id = 0;
			SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
			INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
			FROM ww_payroll_transaction WHERE transaction_id = @taxable_leave_id;
			
			INSERT INTO `ww_payroll_current_transaction`
				    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
				     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
				     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
				     `created_by`, `deleted`)
			SELECT nPeriodID, nProcTypeID, dtPay, user_id, @tran_id, @tran_class_id,
			     @tran_code, AES_ENCRYPT( @nTaxable, encryption_key() ), 
			     AES_ENCRYPT( ROUND( nDailySalary, 2 ), encryption_key() ) ,
			     AES_ENCRYPT( ROUND( (@nTaxable * nDailySalary), 2 ), encryption_key() ),
			     @tran_type_id, 0,'leave_conversion',0,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = nUserID;
		END IF;
		UPDATE ww_time_form_balance SET paid_unit = @unit WHERE user_id = nUserID AND form_id = @form_id AND `year` = @year;
		UPDATE ww_payroll_leave_conversion_period SET `status` = 2 WHERE payroll_date = dtPay AND `year` = @year AND leave_conversion_period_id = @leave_conversion_period_id;
	END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_loan_payments` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_loan_payments` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_loan_payments`(
	IN puserid INT(11),
	IN rec_id INT(11)
    )
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE pl_loan_id INT(11);
	DECLARE pay_date DATE;
	DECLARE tran_class VARCHAR(32);
	DECLARE amt DECIMAL(12,2);
	DECLARE on_hold INT(11);
	DECLARE loan_pay CURSOR FOR
		SELECT pct.`record_id`, payroll_date, ptc.`transaction_class_code`, 
			AES_DECRYPT( pct.amount, encryption_key()), pct.`on_hold`
		FROM ww_payroll_current_transaction  pct
		INNER JOIN ww_payroll_transaction_class ptc ON pct.`transaction_class_id` = ptc.`transaction_class_id`
		WHERE pct.`deleted` = 0 AND ptc.`transaction_class_code` IN ('LOAN_AMORTIZATION','LOAN_INTEREST') 
			AND pct.`record_id` = rec_id AND pct.`employee_id` = puserid;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	OPEN loan_pay;
	
	myLoop: LOOP
		FETCH loan_pay INTO pl_loan_id, pay_date, tran_class, amt, on_hold;
		
		IF done THEN
		    CLOSE loan_pay;
		    LEAVE myLoop;
		END IF;
		
		SET @nType = 0;
		IF tran_class = 'LOAN_AMORTIZATION' THEN 
			SET @nType = 1;
		END IF;
		IF tran_class = 'LOAN_INTEREST' THEN 
			SET @nType = 2;
		END IF;
		SET @paid = '0';
		SET @dt_paid = '0000-00-00';
		IF on_hold = 0 THEN
			SET @paid = 1;
			SET @dt_paid = pay_date;
		ELSE
			SET @paid = 0;
		END IF;
		
		INSERT INTO ww_payroll_partners_loan_payment(`partner_loan_id`, `payroll_date`, `type`, `amount`, `paid`,`date_paid`)
		VALUES (pl_loan_id, pay_date, @nType, AES_ENCRYPT(amt, encryption_key()), @paid, @dt_paid);
	END LOOP;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_overtime` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_overtime` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_overtime`(
	IN puserid INT(11),
	IN paydate DATE,
	IN periodid INT(11),
	IN processing_type_id INT(11)
	)
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE tran_code VARCHAR(32);
	DECLARE tran_id INT(11);
	DECLARE ot_rate DECIMAL(3,2);
	DECLARE qty DECIMAL(3,2);
	DECLARE tran_type_id INT(11);
	DECLARE rec_id INT(11);
	
	DECLARE overtime CURSOR FOR 
		SELECT p.`transaction_id`, p.`transaction_code`, r.`overtime_rate`, p.`quantity`, t.`transaction_type_id`,p.`record_id`
		FROM ww_time_record_process p
		LEFT JOIN ww_users_profile u ON p.`user_id` = u.`user_id`
		LEFT JOIN ww_payroll_overtime_rates r ON p.`transaction_code` = r.`overtime_code` AND u.`company_id` = r.`company_id`
		LEFT JOIN ww_payroll_transaction t ON p.`transaction_id` = t.`transaction_id`
		WHERE r.`deleted` = 0 AND p.`deleted` = 0 AND p.`payroll_date` = paydate AND p.`latefile` = 0 AND p.`user_id` = puserid;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	-- select overtime;
	
	OPEN overtime;
	REPEAT
		FETCH overtime INTO tran_id, tran_code, ot_rate, qty, tran_type_id, rec_id ;
		
		IF NOT done THEN
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, tran_id, 
			     tran_code, AES_ENCRYPT( qty, encryption_key() ), 
			     AES_ENCRYPT( ROUND( ( ( (AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) / 8 ) * ot_rate ),2), encryption_key() ) ,
			     AES_ENCRYPT( ROUND( ( qty * ( ( ( ( AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) ) / 8 ) * ot_rate ) ), 2 ), encryption_key() ),
			     tran_type_id, 0,'ww_time_record_process',rec_id,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
	UNTIL done END REPEAT;
    
	CLOSE overtime;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_overtime_lf` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_overtime_lf` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_overtime_lf`(
	IN puserid INT(11),
	IN paydate DATE,
	IN periodid INT(11),
	IN processing_type_id INT(11)
	)
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE tran_code VARCHAR(32);
	DECLARE ot_rate DECIMAL(3,2);
	DECLARE qty DECIMAL(3,2);
	DECLARE tran_type_id INT(11);
	DECLARE rec_id INT(11);
	
	DECLARE overtime CURSOR FOR 
		SELECT p.`transaction_code`, r.`overtime_rate`, p.`quantity`, t.`transaction_type_id`,p.`record_id`
		FROM ww_time_record_process p
		LEFT JOIN ww_users_profile u ON p.`user_id` = u.`user_id`
		LEFT JOIN ww_payroll_overtime_rates r ON p.`transaction_code` = r.`overtime_code` AND u.`company_id` = r.`company_id`
		LEFT JOIN ww_payroll_transaction t ON p.`transaction_id` = t.`transaction_id`
		WHERE r.`deleted` = 0 AND p.`deleted` = 0 AND p.`payroll_date` = paydate AND p.`latefile` = 1 AND p.`user_id` = puserid;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	-- select overtime;
	
	OPEN overtime;
	REPEAT
		FETCH overtime INTO tran_code, ot_rate, qty, tran_type_id, rec_id ;
		
		IF NOT done THEN
			
			SET @tran_code = '';
			SET @tran_id = 0;
			SELECT transaction_code, transaction_id
			INTO @tran_code, @tran_id
			FROM ww_payroll_transaction WHERE transaction_code = CONCAT(tran_code,'_LF');
			
			INSERT INTO `ww_payroll_current_transaction`
			    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`,
			     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
			     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
			     `created_by`, `deleted`)
			SELECT periodid, processing_type_id, paydate, user_id, @tran_id, 
			     @tran_code, AES_ENCRYPT( qty, encryption_key() ), 
			     AES_ENCRYPT( ROUND( ( ( (AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) / 8 ) * ot_rate ),2), encryption_key() ) ,
			     AES_ENCRYPT( ROUND( ( qty * ( ( ( ( AES_DECRYPT(`salary`, encryption_key()) / ( total_year_days /12 ) ) ) / 8 ) * ot_rate ) ), 2 ), encryption_key() ),
			     tran_type_id, 0,'ww_time_record_process',rec_id,0,'',NOW(),0,0
			FROM ww_payroll_partners 
			WHERE user_id = puserid;
		END IF;
	UNTIL done END REPEAT;
    
	CLOSE overtime;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_period` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_period` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_period`( IN periodid INT(11), IN sensID VARCHAR(30) )
BEGIN
	DECLARE payroll_period_done TINYINT(11) DEFAULT 0;
	DECLARE rec INT(11) DEFAULT 0;
	
	DECLARE nproc_type_id INT(11) DEFAULT 0;
	DECLARE capply_to_id INT(11) DEFAULT '';
	DECLARE npay_sched_id INT(11) DEFAULT 0;
	DECLARE dpaydate DATE;
	DECLARE ddtFrom DATE;
	DECLARE ddtTo DATE;
	DECLARE capply_to VARCHAR(16) DEFAULT '';
	DECLARE napply_id INT(11) DEFAULT 0;
	
	DECLARE payroll_period CURSOR FOR
	SELECT p.`period_processing_type_id`, p.`apply_to_id`, p.`payroll_schedule_id`, p.`payroll_date`, p.`date_from`, p.`date_to`,
	       a.`apply_to`, a.`id`
	FROM ww_payroll_period p, ww_payroll_period_apply_to a
	WHERE a.`payroll_period_id` = p.`payroll_period_id` AND p.`payroll_period_id` = periodid;
	 
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET payroll_period_done = 1;
	
	
	OPEN payroll_period;
	
	REPEAT
		FETCH payroll_period INTO nproc_type_id, capply_to_id, npay_sched_id, dpaydate, ddtFrom, ddtTo, capply_to, napply_id;
	
		IF NOT payroll_period_done THEN
			SET rec = rec + 1;
			SET @proc_type_id = nproc_type_id;
			SET @apply_to_id  = capply_to_id;
			SET @pay_sched_id = npay_sched_id;
			SET @paydate      = dpaydate;
			SET @dtFrom       = ddtFrom;
			SET @dtTo         = ddtTo;
			SET @apply_to     = capply_to;
			SET @apply_id     = napply_id;
			
			IF @proc_type_id = 1 THEN
				BEGIN
					DECLARE ppdone TINYINT(1) DEFAULT 0;
					DECLARE emp_id INT(11);
					DECLARE onhold INT(11);
					DECLARE employee CURSOR FOR
						SELECT DISTINCT a.`user_id`, a.`on_hold`
						FROM ww_payroll_partners a
						INNER JOIN ww_users b ON a.`user_id` = b.`user_id`
						INNER JOIN ww_partners c ON a.`user_id` = c.`user_id`
						INNER JOIN ww_users_profile d ON d.`user_id` = a.`user_id`
						LEFT JOIN ww_time_record_summary e ON a.`user_id` = e.`user_id`
						LEFT JOIN ww_time_period f ON f.`company_id` = d.`company_id` -- AND IF(a.`non_swipe`=1, 1, f.`payroll_date` = e.`payroll_date`)
						WHERE a.`deleted` = 0 AND a.`payroll_schedule_id` = @pay_sched_id 
						AND b.`deleted` = 0 -- AND b.`active` = 1 
						AND IF(sensID != '',FIND_IN_SET(a.sensitivity,sensID), 1 )
						AND c.`effectivity_date` <= f.`date_to` 
						AND ( IFNULL(c.`resigned_date`,'0000-00-00') = '0000-00-00' OR ( c.`resigned_date` NOT BETWEEN @dtFrom AND @dtTo AND c.resigned_date > @dtFrom ) )
						AND f.`payroll_date` = @paydate AND f.`deleted` = 0 -- AND a.`on_hold` = 0 
						AND IF(@apply_to_id  = 1, d.`user_id` IN (@apply_to),
							IF(@apply_to_id = 2, a.`company_id` IN (@apply_to),
								IF(@apply_to_id = 3, d.`division_id` IN (@apply_to),
									IF(@apply_to_id = 4, d.`department_id` IN (@apply_to),
										IF(@apply_to_id = 5, d.`branch_id` IN (@apply_to),0)
										)
									)
								)
							);
					DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET ppdone = 1;
					
					OPEN employee;
					REPEAT
						FETCH employee INTO emp_id, onhold;
							DELETE FROM ww_payroll_current_transaction WHERE `employee_id` = emp_id AND `period_id` = periodid;
							IF onhold = 0 and emp_id > 0 THEN
								-- get time period
								-- SET @nCompanyID = 0;
								-- SET @nPeriodID = 0;
								-- SELECT company_id INTO @nCompanyID FROM ww_users_profile WHERE user_id = emp_id;
								-- SELECT period_id INTO @nPeriodID FROM ww_time_period WHERE company_id = @nCompanyID AND payroll_date = @paydate AND deleted = 0 LIMIT 1;
								-- process remaining attendance
								-- CALL `sp_time_period_process_latefile`( @nPeriodID, emp_id );	
															
								CALL sp_payroll_period_process(periodid, emp_id);								
							END IF;
							SET emp_id = 0;
						UNTIL ppdone END REPEAT;
				
					CLOSE employee;
				END;
			ELSEIF @proc_type_id = 2 THEN
				BEGIN
					DECLARE ppdone TINYINT(1) DEFAULT 0;
					DECLARE emp_id INT(11);
					DECLARE onhold INT(11);
					DECLARE employee CURSOR FOR
						SELECT DISTINCT a.`user_id`, a.`on_hold`
						FROM ww_payroll_partners a
						INNER JOIN ww_users b ON a.`user_id` = b.`user_id`
						INNER JOIN ww_partners c ON a.`user_id` = c.`user_id`
						INNER JOIN ww_users_profile d ON d.`user_id` = a.`user_id`
						-- LEFT JOIN ww_time_record_summary e ON a.`user_id` = e.`user_id`
						-- LEFT JOIN ww_time_period f ON e.`payroll_date` = f.`payroll_date` AND f.`company_id` = d.`company_id`
						WHERE a.`deleted` = 0 AND a.`payroll_schedule_id` = @pay_sched_id 
						AND b.`deleted` = 0 -- AND b.`active` = 1 
						AND IF(sensID != '',FIND_IN_SET(a.sensitivity,sensID), 1 )
						-- AND c.`effectivity_date` <= f.`date_to` 
						AND ( IFNULL(c.`resigned_date`,'0000-00-00') = '0000-00-00' OR ( c.`resigned_date` NOT BETWEEN @dtFrom AND @dtTo AND c.resigned_date > @dtFrom ) )
						-- AND f.`payroll_date` = @paydate AND f.`deleted` = 0 -- AND a.`on_hold` = 0 
						AND IF(@apply_to_id  = 1, d.`user_id` IN (@apply_to),
							IF(@apply_to_id = 2, a.`company_id` IN (@apply_to),
								IF(@apply_to_id = 3, d.`division_id` IN (@apply_to),
									IF(@apply_to_id = 4, d.`department_id` IN (@apply_to),
										IF(@apply_to_id = 5, d.`branch_id` IN (@apply_to),0)
										)
									)
								)
							);						
					DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET ppdone = 1;
					
					OPEN employee;
					REPEAT
						FETCH employee INTO emp_id, onhold;
							DELETE FROM ww_payroll_current_transaction WHERE `employee_id` = emp_id AND `period_id` = periodid;
							IF onhold = 0 THEN
								CALL sp_payroll_period_special_process(periodid, emp_id);
							END IF;
							SET emp_id = 0;
						UNTIL ppdone END REPEAT;
				
					CLOSE employee;
				END;				
			ELSEIF  @proc_type_id = 3 THEN
				BEGIN
					DECLARE ppdone TINYINT(1) DEFAULT 0;
					DECLARE emp_id INT(11);
					DECLARE res_date DATE;
					DECLARE employee CURSOR FOR
						SELECT DISTINCT a.`user_id`, c.resigned_date
						FROM ww_payroll_partners a
						INNER JOIN ww_users b ON a.`user_id` = b.`user_id`
						INNER JOIN ww_partners c ON a.`user_id` = c.`user_id`
						INNER JOIN ww_users_profile d ON d.`user_id` = a.`user_id`
						WHERE a.`deleted` = 0 AND a.`payroll_schedule_id` = @pay_sched_id 
						AND b.`deleted` = 0 AND c.`effectivity_date` <= @dtTo 
						AND IF(sensID != '',FIND_IN_SET(a.sensitivity,sensID), 1 )
						AND c.`resigned_date` <= @dtTo 
						AND IF(@apply_to_id  = 1, d.`user_id` IN (@apply_to),
							IF(@apply_to_id = 2, a.`company_id` IN (@apply_to),
								IF(@apply_to_id = 3, d.`division_id` IN (@apply_to),
									IF(@apply_to_id = 4, d.`department_id` IN (@apply_to),
										IF(@apply_to_id = 5, d.`branch_id` IN (@apply_to),0)
										)
									)
								)
							);
					DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET ppdone = 1;
					
					OPEN employee;
					myLoop: LOOP
						FETCH employee INTO emp_id, res_date;
						
						IF ppdone THEN
						    CLOSE employee;
						    LEAVE myLoop;
						END IF;
						
						-- for Final Pay / Last Pay
						-- set tax computation to Annualized
						UPDATE ww_payroll_partners SET tax_mode = 2, remain = 1 WHERE user_id = emp_id;
						DELETE FROM ww_payroll_current_transaction WHERE `employee_id` = emp_id AND `period_id` = periodid;
						
						-- get time period
						SET @nCompanyID = 0;
						SET @nPeriodID = 0;
						SELECT company_id INTO @nCompanyID FROM ww_users_profile WHERE user_id = emp_id;
						SELECT period_id INTO @nPeriodID FROM ww_time_period WHERE company_id = @nCompanyID AND payroll_date = @paydate AND deleted = 0 LIMIT 1;
						
						-- original record of time period
						SET @dtTo = '0000-00-00';
						SET @dtCutOff = '0000-00-00';
						
						-- SELECT date_to, cutoff INTO @dtTo, @dtCutOff FROM ww_time_period WHERE period_id = @nPeriodID;
						-- update covered period and cutoff
						-- UPDATE ww_time_period SET date_to = res_date, cutoff = DATE_ADD( res_date, INTERVAL 1 DAY ) WHERE period_id = @nPeriodID;
						
						-- process remaining attendance
						IF @nPeriodID > 0 THEN
							CALL `sp_time_period_process_latefile`( @nPeriodID, emp_id );
							INSERT INTO ww_system_messages (msg_code)
							VALUES (CONCAT(@nPeriodID,', ',emp_id));
							
							CALL sp_time_period_process( @nPeriodID, emp_id );
							INSERT INTO ww_system_messages (msg_code)
							VALUES (CONCAT('timeperiodprocess',@nPeriodID,', ',emp_id));
						end if;
						
						-- return to original period
						-- UPDATE ww_time_period SET date_to = @dtTo , cutoff = @dtCutOff WHERE period_id = @nPeriodID;
						-- final pay processing
						CALL sp_payroll_final_pay(periodid, emp_id);
						SET emp_id = 0;
					END LOOP;
				END;
			ELSEIF @proc_type_id = 4 THEN
				BEGIN
					DECLARE ppdone TINYINT(1) DEFAULT 0;
					DECLARE emp_id INT(11);
					DECLARE onhold INT(11);
					DECLARE employee CURSOR FOR
						SELECT DISTINCT a.`user_id`, a.`on_hold`
						FROM ww_payroll_partners a
						INNER JOIN ww_users b ON a.`user_id` = b.`user_id`
						INNER JOIN ww_partners c ON a.`user_id` = c.`user_id`
						INNER JOIN ww_users_profile d ON d.`user_id` = a.`user_id`
						-- LEFT JOIN ww_time_record_summary e ON a.`user_id` = e.`user_id`
						-- LEFT JOIN ww_time_period f ON e.`payroll_date` = f.`payroll_date` AND f.`company_id` = d.`company_id`
						WHERE a.`deleted` = 0 AND a.`payroll_schedule_id` = @pay_sched_id 
						AND b.`deleted` = 0 -- AND b.`active` = 1 
						AND IF(sensID != '',FIND_IN_SET(a.sensitivity,sensID), 1 )
						-- AND c.`effectivity_date` <= f.`date_to` 
						AND ( IFNULL(c.`resigned_date`,'0000-00-00') = '0000-00-00' OR ( c.`resigned_date` NOT BETWEEN @dtFrom AND @dtTo AND c.resigned_date > @dtFrom ) )
						-- AND f.`payroll_date` = @paydate AND f.`deleted` = 0 -- AND a.`on_hold` = 0 
						AND IF(@apply_to_id  = 1, d.`user_id` IN (@apply_to),
							IF(@apply_to_id = 2, a.`company_id` IN (@apply_to),
								IF(@apply_to_id = 3, d.`division_id` IN (@apply_to),
									IF(@apply_to_id = 4, d.`department_id` IN (@apply_to),
										IF(@apply_to_id = 5, d.`branch_id` IN (@apply_to),0)
										)
									)
								)
							);
					DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET ppdone = 1;
					
					OPEN employee;
					REPEAT
						FETCH employee INTO emp_id, onhold;
							DELETE FROM ww_payroll_current_transaction WHERE `employee_id` = emp_id AND `period_id` = periodid;
							IF onhold = 0 THEN
								CALL sp_payroll_period_process_leave_conversion(periodid, emp_id);
							END IF;
							SET emp_id = 0;
						UNTIL ppdone END REPEAT;
				
					CLOSE employee;
				END;				
			END IF;
			
			-- update period log
			UPDATE ww_payroll_period_apply_to SET last_processed = NOW() WHERE `id` = @apply_id LIMIT 1;
			UPDATE ww_payroll_period SET last_processed = NOW() WHERE payroll_period_id = periodid LIMIT 1;
			
		END IF;
        
	UNTIL payroll_period_done END REPEAT;
	
	CLOSE payroll_period;		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_period_process` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_period_process` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_period_process`(IN periodid INT(11), IN puserid INT(11))
BEGIN
	
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
	    -- ERROR
	    ROLLBACK;
	END;
    
	START TRANSACTION;
	
	-- employee info
	SET @sSSS_week = '';
	SET @nStatus = '';
	SET @nEmp_type_id = '';
	SET @dtEff = '';
	SET @dtRes = '';
	SET @nShift = '';
	SET @nTaxcode = '';
	SET @nPayrate = '';
	SET @nPaysched = '';
	SET @nTotal_year_days = '';
	SET @nSalary = '';
	SET @nMin_takehome = '';
	SET @sBank_acct = '';
	SET @nPayLocation = '';
	SET @sSSS_no = '';
	SET @nSSS_mode = '';
	SET @sSSS_week = '';
	SET @nSSS_amount = '';
	SET @sHDMF_no = '';
	SET @nHDMF_mode = '';
	SET @sHDMF_week = '';
	SET @nHDMF_amount = '';
	SET @sPHIC_no = '';
	SET @nPHIC_mode = '';
	SET @sPHIC_week = '';
	SET @nPHIC_amount = '';
	SET @sEcola_week = '';
	SET @sTIN = '';
	SET @nTax_mode = '';
	SET @nTax_amount = '';
	SET @sTax_week = '';
	SET @nSensitivity = '';
	SET @nDivisor = '';
	SET @nCompany = '';
	SET @nGroup = '';
	SET @nDivision = '';
	SET @nDepartment = '';
	SET @nSection = '';
	SET @nPosition = '';
	SET @nProject = '';
	SET @nReports_to = '';
	SET @nJobtitle = '';
	SET @nLocation = '';
	SET @nRemain = '';
	SET @nAttendanceBase = '';
	SET @nHold = '';
	SET @nPaymentType = '';	
	-- period info
	SET @period_status_id = 0;
	SET @payroll_date = '';
	SET @date_from = '';
	SET @date_to = '';
	SET @date_closing = '';
	SET @sweek = '';
	SET @payroll_schedule_id = 0;
	SET @period_processing_type_id = 0;
	SET @apply_to_id = 0;
	
	
	
	-- period info
	SELECT `period_status_id`, `payroll_date`, `date_from`, `date_to`, `date_closing`, `week`, 
		`payroll_schedule_id`, `period_processing_type_id`, `apply_to_id`
	INTO @period_status_id, @payroll_date, @date_from, @date_to, @date_closing, @sweek, 
		@payroll_schedule_id, @period_processing_type_id, @apply_to_id
	FROM ww_payroll_period WHERE payroll_period_id = periodid AND deleted = 0;
	
	-- get employee info	
	CALL `sp_payroll_employee_info`(puserid, 
		@nStatus, @nEmp_type_id, @dtEff, @dtRes, @nShift, 
		@nTaxcode, @nPayrate, @nPaysched, @nTotal_year_days, @nSalary, 
		@nMin_takehome, @sBank_acct, @nPayLocation, @sSSS_no, @nSSS_mode, 
		@sSSS_week, @nSSS_amount, @sHDMF_no, @nHDMF_mode, @sHDMF_week, 
		@nHDMF_amount, @sPHIC_no, @nPHIC_mode, @sPHIC_week, @nPHIC_amount, 
		@sEcola_week, @sTIN, @nTax_mode, @nTax_amount, @sTax_week, @nSensitivity, @nDivisor, 
		@nCompany, @nGroup, @nDivision, @nDepartment, @nSection, @nPosition, @nProject, @nReports_to,
		@nJobtitle, @nLocation, @nRemain, @nAttendanceBase, @nHold, @nPaymentType);
	
	-- check if has open transaction
	SET @id = 0;
	SELECT COUNT(`id`) INTO @id FROM ww_payroll_current_transaction 
	WHERE employee_id = puserid AND payroll_date < @payroll_date AND deleted = 0;
	
	-- INSERT INTO `logtable` (`log`) VALUES (puserid);
	
	IF @id > 0 THEN
		-- this will raised error There's still an open transaction kindly closed it first
		BEGIN
		-- ERROR
			/*
			SIGNAL SQLSTATE VALUE '99999'
			SET MESSAGE_TEXT = "There's still an open transaction kindly closed it first.";
			select MESSAGE_TEXT;*/
			DECLARE my_error CONDITION FOR SQLSTATE '22012';
			-- SIGNAL my_error;
		ROLLBACK;
		END;
		
	END IF;
	
	-- check if has unclosed deduction
	
	-- remaining period
	
	-- check if last payroll then set tax computation to Annualize
	
	-- remove ww_payroll_current_transaction with the same periodid (reprocessing)
	IF @period_status_id != 3 THEN
		DELETE FROM ww_payroll_current_transaction WHERE `employee_id` = puserid AND `period_id` = periodid;
	END IF;
	-- compute SALARY
	
	-- monthly
	IF @nPayrate = 2 THEN
		SET @PeriodSalary = 0;
		CALL sp_payroll_get_salary_monthly(puserid, @payroll_date, periodid, @period_processing_type_id );
		SET @PeriodSalary = @nSalary / @nDivisor;
		SET @DailySalary = @nSalary / ( @nTotal_year_days / 12 );
	END IF;
	-- weekly
	
	IF @nPayrate = 6 THEN
		SET @DailySalary = 0;		
		-- insert salary 
		CALL sp_payroll_get_salary_weekly(puserid, @payroll_date, periodid, @period_processing_type_id );
		SET @DailySalary = @nSalary;
	END IF;
		
	IF @nAttendanceBase = 1 THEN		
		IF @nPayrate != 6 THEN
			CALL `sp_payroll_get_absences`( puserid, @payroll_date, periodid, @period_processing_type_id );
			CALL `sp_payroll_get_lates`( puserid, @payroll_date, periodid, @period_processing_type_id );
			CALL `sp_payroll_get_undertime`( puserid, @payroll_date, periodid, @period_processing_type_id );
			
			-- latefile = 1
			CALL `sp_payroll_get_absences_adj`( puserid, @payroll_date, periodid, @period_processing_type_id );
			CALL `sp_payroll_get_lates_adj`( puserid, @payroll_date, periodid, @period_processing_type_id );
			CALL `sp_payroll_get_undertime_adj`( puserid, @payroll_date, periodid, @period_processing_type_id );
			-- compute attendance deduction
			CALL `sp_payroll_get_lwop`( puserid, @payroll_date, periodid, @period_processing_type_id, @DailySalary);
			-- CALL `sp_payroll_get_lwop_adj`( puserid, @payroll_date, periodid, @period_processing_type_id );			
		END IF;
	END IF;
	
		
	IF @nAttendanceBase = 1 THEN 
		-- compute overtime
		CALL sp_payroll_get_overtime( puserid, @payroll_date, periodid, @period_processing_type_id );
		
		-- compute late approve overtime
		CALL sp_payroll_get_overtime_adj( puserid, @payroll_date, periodid, @period_processing_type_id );	
		
		-- compute leave Adjustment
		CALL sp_payroll_get_leave_adj( puserid, @payroll_date, periodid, @period_processing_type_id );	
		
	END IF;
	
	-- compute regular nd
	CALL `sp_payroll_get_nd`( puserid, @payroll_date, periodid, @period_processing_type_id );
	
	-- compute loan amortization
	CALL sp_payroll_get_loan_amortization( puserid, periodid, @payroll_date, @period_processing_type_id, @sweek );
	
	-- compute loan interest
	CALL sp_payroll_get_loan_interest( puserid, periodid, @payroll_date, @period_processing_type_id, @sweek );
	
	-- compute recurring
	CALL sp_payroll_get_recurring(puserid, periodid, @sweek, @payroll_date, @period_processing_type_id);
	
	-- compute batch entry
	CALL sp_payroll_get_batch(puserid, periodid, @payroll_date, @period_processing_type_id);
	
	-- compute leave conversion
	-- CALL sp_payroll_leave_conversion(puserid, periodid, @nCompany, @payroll_date, @DailySalary, @nEmp_type_id, @period_processing_type_id);
	
	-- compute bonus
	CALL sp_payroll_get_bonus(puserid, periodid, @payroll_date, @nSalary, @period_processing_type_id);
	-- compute ecola
	-- call sp_payroll_get_ecola();
	SET @Not_MinWage = 0;
	SET @min_wage_amt = 0;
	SET @ecola_amt = 0;
	
	SELECT `min_wage_amt`, `ecola_amt` 
	INTO @min_wage_amt, @ecola_amt
	FROM ww_users_location WHERE `location_id` = @nPayLocation AND `deleted` = 0;
	
	IF @min_wage_amt >= @DailySalary THEN
		-- CALL sp_payroll_get_ecola(puserid, periodid, @payroll_date, @ecola_amt, @period_processing_type_id);
		SET @Not_MinWage = 1;
	END IF;
	-- compute/update amount = base_on_earning
	SET @cur_tran_id = 0;
	SELECT `id` INTO @cur_tran_id
	FROM ww_payroll_current_transaction WHERE AES_DECRYPT( `amount`, encryption_key() ) = 'base_on_earning' 
		AND `employee_id` = puserid AND `payroll_date` = @payroll_date AND `deleted` = 0;
	IF @cur_tran_id > 0 THEN
		SET @result = 0.00;
		CALL sp_payroll_get_transaction(puserid,periodid,'1,5',1,1,1,0,@result);
		UPDATE ww_payroll_current_transaction SET `unit_rate` = AES_ENCRYPT( @result, encryption_key() ), `amount` = AES_ENCRYPT( @result, encryption_key() )
			WHERE `id` = @cur_tran_id;
	END IF;
	
	-- compute contributions
	CALL sp_payroll_get_sss_contribution( periodid, @payroll_date, @payroll_schedule_id, @period_processing_type_id, @sweek, puserid, @nSalary, @nSSS_mode, @sSSS_week );
	CALL sp_payroll_get_phic_contribution( periodid, @payroll_date, @payroll_schedule_id, @period_processing_type_id, @sweek, puserid, @nSalary, @nPHIC_mode, @sPHIC_week );
	CALL sp_payroll_get_hdmf_contribution( periodid, @payroll_date, @payroll_schedule_id, @period_processing_type_id, @sweek, puserid, @nSalary, @nHDMF_mode, @nHDMF_amount, @sHDMF_week );
	
	-- compute wtax
	-- Based on Tax Table
	IF @Not_MinWage = 0 THEN
		
		IF @nTax_mode = 1 THEN
			CALL sp_payroll_get_tax_table( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTaxcode );
		-- Annualized
		ELSEIF @nTax_mode = 2 THEN
			CALL sp_payroll_get_tax_annualize( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTaxcode, @nRemain );
		
		-- Manual
		ELSEIF @nTax_mode = 3 THEN	
			IF @nTax_amount > 0 THEN
				CALL sp_payroll_get_tax_manual( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTax_amount );
			END IF;
		END IF;
		/*
		-- Cummulative
		elseif @nTax_mode = 4 THEN
		
		else
		
		end if;
		*/
	END IF;
	
	-- compute netpay
	CALL sp_payroll_get_netpay( periodid, puserid, @payroll_date, @period_processing_type_id ) ;
	
	-- update payroll details
	UPDATE ww_payroll_current_transaction a, ww_users_profile b SET 
		a.company_id = @nCompany,
		a.branch_id = b.branch_id,
		a.group_id = @nGroup,
		a.department_id = @nDepartment,
		a.section_id = @nSection,
		a.division_id = @nDivision,
		a.position_id = @nPosition,
		a.location_id = @nLocation,
		a.payment_type_id = @nPaymentType,
		a.minwageflag = @Not_MinWage
	WHERE a.employee_id = puserid AND a.employee_id = b.user_id AND a.period_id = periodid AND a.payroll_date = @payroll_date;
	
	UPDATE ww_payroll_period SET `period_status_id` = 2 WHERE payroll_period_id = periodid ;
	COMMIT;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_period_process_leave_conversion` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_period_process_leave_conversion` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_period_process_leave_conversion`(IN periodid INT(11), IN puserid INT(11))
BEGIN
	
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
	    -- ERROR
	    ROLLBACK;
	END;
    
	START TRANSACTION;
	
	-- employee info
	SET @sSSS_week = '';
	SET @nStatus = '';
	SET @nEmp_type_id = '';
	SET @dtEff = '';
	SET @dtRes = '';
	SET @nShift = '';
	SET @nTaxcode = '';
	SET @nPayrate = '';
	SET @nPaysched = '';
	SET @nTotal_year_days = '';
	SET @nSalary = '';
	SET @nMin_takehome = '';
	SET @sBank_acct = '';
	SET @nPayLocation = '';
	SET @sSSS_no = '';
	SET @nSSS_mode = '';
	SET @sSSS_week = '';
	SET @nSSS_amount = '';
	SET @sHDMF_no = '';
	SET @nHDMF_mode = '';
	SET @sHDMF_week = '';
	SET @nHDMF_amount = '';
	SET @sPHIC_no = '';
	SET @nPHIC_mode = '';
	SET @sPHIC_week = '';
	SET @nPHIC_amount = '';
	SET @sEcola_week = '';
	SET @sTIN = '';
	SET @nTax_mode = '';
	SET @nTax_amount = '';
	SET @sTax_week = '';
	SET @nSensitivity = '';
	SET @nDivisor = '';
	SET @nCompany = '';
	SET @nGroup = '';
	SET @nDivision = '';
	SET @nDepartment = '';
	SET @nSection = '';
	SET @nPosition = '';
	SET @nProject = '';
	SET @nReports_to = '';
	SET @nJobtitle = '';
	SET @nLocation = '';
	SET @nRemain = '';
	SET @nAttendanceBase = '';
	SET @nHold = '';
	SET @nPaymentType = '';	
	-- period info
	SET @period_status_id = 0;
	SET @payroll_date = '';
	SET @date_from = '';
	SET @date_to = '';
	SET @date_closing = '';
	SET @sweek = '';
	SET @payroll_schedule_id = 0;
	SET @period_processing_type_id = 0;
	SET @apply_to_id = 0;
	
	
	
	-- period info
	SELECT `period_status_id`, `payroll_date`, `date_from`, `date_to`, `date_closing`, `week`, 
		`payroll_schedule_id`, `period_processing_type_id`, `apply_to_id`
	INTO @period_status_id, @payroll_date, @date_from, @date_to, @date_closing, @sweek, 
		@payroll_schedule_id, @period_processing_type_id, @apply_to_id
	FROM ww_payroll_period WHERE payroll_period_id = periodid AND deleted = 0;
	
	-- get employee info	
	CALL `sp_payroll_employee_info`(puserid, 
		@nStatus, @nEmp_type_id, @dtEff, @dtRes, @nShift, 
		@nTaxcode, @nPayrate, @nPaysched, @nTotal_year_days, @nSalary, 
		@nMin_takehome, @sBank_acct, @nPayLocation, @sSSS_no, @nSSS_mode, 
		@sSSS_week, @nSSS_amount, @sHDMF_no, @nHDMF_mode, @sHDMF_week, 
		@nHDMF_amount, @sPHIC_no, @nPHIC_mode, @sPHIC_week, @nPHIC_amount, 
		@sEcola_week, @sTIN, @nTax_mode, @nTax_amount, @sTax_week, @nSensitivity, @nDivisor, 
		@nCompany, @nGroup, @nDivision, @nDepartment, @nSection, @nPosition, @nProject, @nReports_to,
		@nJobtitle, @nLocation, @nRemain, @nAttendanceBase, @nHold, @nPaymentType);
	
	-- check if has open transaction
	SET @id = 0;
	SELECT COUNT(`id`) INTO @id FROM ww_payroll_current_transaction 
	WHERE employee_id = puserid AND payroll_date < @payroll_date AND deleted = 0;
	
	IF @id > 0 THEN
		-- this will raised error There's still an open transaction kindly closed it first
		BEGIN
		-- ERROR
			/*
			SIGNAL SQLSTATE VALUE '99999'
			SET MESSAGE_TEXT = "There's still an open transaction kindly closed it first.";
			select MESSAGE_TEXT;*/
			DECLARE my_error CONDITION FOR SQLSTATE '22012';
			-- SIGNAL my_error;
		ROLLBACK;
		END;
		
	END IF;
	
	-- check if has unclosed deduction
	
	-- remaining period
	
	-- check if last payroll then set tax computation to Annualize
	
	-- remove ww_payroll_current_transaction with the same periodid (reprocessing)
	IF @period_status_id != 3 THEN
		DELETE FROM ww_payroll_current_transaction WHERE `employee_id` = puserid AND `period_id` = periodid;
	END IF;
	-- compute SALARY
	
	-- monthly
	IF @nPayrate = 2 THEN
		SET @PeriodSalary = 0;
		-- CALL sp_payroll_get_salary_monthly(puserid, @payroll_date, periodid, @period_processing_type_id );
		SET @PeriodSalary = @nSalary / @nDivisor;
		SET @DailySalary = @nSalary / ( @nTotal_year_days / 12 );
	END IF;
	-- weekly
	
	IF @nPayrate = 6 THEN
		SET @DailySalary = 0;		
		-- insert salary 
		-- CALL sp_payroll_get_salary_weekly(puserid, @payroll_date, periodid, @period_processing_type_id );
		SET @DailySalary = @nSalary;
	END IF;
	
	-- compute recurring
	-- CALL sp_payroll_get_recurring(puserid, periodid, @sweek, @payroll_date, @period_processing_type_id);
	
	-- compute batch entry
	CALL sp_payroll_get_batch(puserid, periodid, @payroll_date, @period_processing_type_id);
	
	-- compute leave conversion
	CALL sp_payroll_leave_conversion(puserid, periodid, @nCompany, @payroll_date, @DailySalary, @nEmp_type_id, @nStatus, @period_processing_type_id, @nTotal_year_days);
	
	SET @Tax_Bonus = 0;	
	-- compute bonus
	CALL sp_payroll_get_bonus(puserid, periodid, @payroll_date, @nSalary, @period_processing_type_id);
	
	-- SELECT @Tax_Bonus;
	
	if @Tax_Bonus > 0 and @nEmp_type_id IN (1,2,3,4,9,10,16,17) then
		set @nTax_mode = 5; -- for bonus taxable		
	elseIF @Tax_Bonus > 0 AND @nEmp_type_id IN (5,6,18) THEN
		SET @nTax_mode = 5; -- for bonus taxable				
	end if;
	-- compute ecola
	-- call sp_payroll_get_ecola();
	SET @Not_MinWage = 0;
	SET @min_wage_amt = 0;
	SET @ecola_amt = 0;
	
	SELECT `min_wage_amt`, `ecola_amt` 
	INTO @min_wage_amt, @ecola_amt
	FROM ww_users_location WHERE `location_id` = @nPayLocation AND `deleted` = 0;
	
	IF @min_wage_amt >= @DailySalary THEN
		-- CALL sp_payroll_get_ecola(puserid, periodid, @payroll_date, @ecola_amt, @period_processing_type_id);
		SET @Not_MinWage = 1;
	END IF;
	-- compute/update amount = base_on_earning
	SET @cur_tran_id = 0;
	SELECT `id` INTO @cur_tran_id
	FROM ww_payroll_current_transaction WHERE AES_DECRYPT( `amount`, encryption_key() ) = 'base_on_earning' 
		AND `employee_id` = puserid AND `payroll_date` = @payroll_date AND `deleted` = 0;
	IF @cur_tran_id > 0 THEN
		SET @result = 0.00;
		CALL sp_payroll_get_transaction(puserid,periodid,'1,5',1,1,1,0,@result);
		UPDATE ww_payroll_current_transaction SET `unit_rate` = AES_ENCRYPT( @result, encryption_key() ), `amount` = AES_ENCRYPT( @result, encryption_key() )
			WHERE `id` = @cur_tran_id;
	END IF;
	
	IF @Not_MinWage = 0 THEN
		
		IF @nTax_mode = 1 THEN
			CALL sp_payroll_get_tax_table( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTaxcode );
		-- Annualized
		ELSEIF @nTax_mode = 2 THEN
			CALL sp_payroll_get_tax_annualize( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTaxcode, @nRemain );
		
		-- Manual
		ELSEIF @nTax_mode = 3 THEN	
			IF @nTax_amount > 0 THEN
				CALL sp_payroll_get_tax_manual( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTax_amount );
			END IF;
		ELSEIF @nTax_mode = 5 THEN
			CALL sp_payroll_get_tax_bonus( puserid, periodid, @payroll_date, @period_processing_type_id );
		ELSEIF @nTax_mode = 6 THEN	
			CALL sp_payroll_get_tax_bonus_rf( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTaxcode, @Tax_Bonus );
		END IF;
	END IF;
		
	-- compute netpay
	CALL sp_payroll_get_netpay( periodid, puserid, @payroll_date, @period_processing_type_id ) ;
	-- update payroll details
	UPDATE ww_payroll_current_transaction a, ww_users_profile b SET 
		a.company_id = @nCompany,
		a.branch_id = b.branch_id,
		a.group_id = @nGroup,
		a.department_id = @nDepartment,
		a.section_id = @nSection,
		a.division_id = @nDivision,
		a.position_id = @nPosition,
		a.location_id = @nLocation,
		a.payment_type_id = @nPaymentType,
		a.minwageflag = @Not_MinWage
	WHERE a.employee_id = puserid AND a.employee_id = b.user_id AND a.period_id = periodid AND a.payroll_date = @payroll_date;
	
	UPDATE ww_payroll_period SET `period_status_id` = 2 WHERE payroll_period_id = periodid ;
	COMMIT;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_period_special_process` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_period_special_process` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_period_special_process`(IN periodid INT(11), IN puserid INT(11))
BEGIN
	
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
	    -- ERROR
	    ROLLBACK;
	END;
    
	START TRANSACTION;
	
	-- employee info
	SET @sSSS_week = '';
	SET @nStatus = '';
	SET @nEmp_type_id = '';
	SET @dtEff = '';
	SET @dtRes = '';
	SET @nShift = '';
	SET @nTaxcode = '';
	SET @nPayrate = '';
	SET @nPaysched = '';
	SET @nTotal_year_days = '';
	SET @nSalary = '';
	SET @nMin_takehome = '';
	SET @sBank_acct = '';
	SET @nPayLocation = '';
	SET @sSSS_no = '';
	SET @nSSS_mode = '';
	SET @sSSS_week = '';
	SET @nSSS_amount = '';
	SET @sHDMF_no = '';
	SET @nHDMF_mode = '';
	SET @sHDMF_week = '';
	SET @nHDMF_amount = '';
	SET @sPHIC_no = '';
	SET @nPHIC_mode = '';
	SET @sPHIC_week = '';
	SET @nPHIC_amount = '';
	SET @sEcola_week = '';
	SET @sTIN = '';
	SET @nTax_mode = '';
	SET @nTax_amount = '';
	SET @sTax_week = '';
	SET @nSensitivity = '';
	SET @nDivisor = '';
	SET @nCompany = '';
	SET @nGroup = '';
	SET @nDivision = '';
	SET @nDepartment = '';
	SET @nSection = '';
	SET @nPosition = '';
	SET @nProject = '';
	SET @nReports_to = '';
	SET @nJobtitle = '';
	SET @nLocation = '';
	SET @nRemain = '';
	SET @nAttendanceBase = '';
	SET @nHold = '';
	SET @nPaymentType = '';	
	-- period info
	SET @period_status_id = 0;
	SET @payroll_date = '';
	SET @date_from = '';
	SET @date_to = '';
	SET @date_closing = '';
	SET @sweek = '';
	SET @payroll_schedule_id = 0;
	SET @period_processing_type_id = 0;
	SET @apply_to_id = 0;
	
	
	
	-- period info
	SELECT `period_status_id`, `payroll_date`, `date_from`, `date_to`, `date_closing`, `week`, 
		`payroll_schedule_id`, `period_processing_type_id`, `apply_to_id`
	INTO @period_status_id, @payroll_date, @date_from, @date_to, @date_closing, @sweek, 
		@payroll_schedule_id, @period_processing_type_id, @apply_to_id
	FROM ww_payroll_period WHERE payroll_period_id = periodid AND deleted = 0;
	
	-- get employee info	
	CALL `sp_payroll_employee_info`(puserid, 
		@nStatus, @nEmp_type_id, @dtEff, @dtRes, @nShift, 
		@nTaxcode, @nPayrate, @nPaysched, @nTotal_year_days, @nSalary, 
		@nMin_takehome, @sBank_acct, @nPayLocation, @sSSS_no, @nSSS_mode, 
		@sSSS_week, @nSSS_amount, @sHDMF_no, @nHDMF_mode, @sHDMF_week, 
		@nHDMF_amount, @sPHIC_no, @nPHIC_mode, @sPHIC_week, @nPHIC_amount, 
		@sEcola_week, @sTIN, @nTax_mode, @nTax_amount, @sTax_week, @nSensitivity, @nDivisor, 
		@nCompany, @nGroup, @nDivision, @nDepartment, @nSection, @nPosition, @nProject, @nReports_to,
		@nJobtitle, @nLocation, @nRemain, @nAttendanceBase, @nHold, @nPaymentType);
	
	-- check if has open transaction
	SET @id = 0;
	SELECT COUNT(`id`) INTO @id FROM ww_payroll_current_transaction 
	WHERE employee_id = puserid AND payroll_date < @payroll_date AND deleted = 0;
	
	IF @id > 0 THEN
		-- this will raised error There's still an open transaction kindly closed it first
		BEGIN
		-- ERROR
			/*
			SIGNAL SQLSTATE VALUE '99999'
			SET MESSAGE_TEXT = "There's still an open transaction kindly closed it first.";
			select MESSAGE_TEXT;*/
			DECLARE my_error CONDITION FOR SQLSTATE '22012';
			-- SIGNAL my_error;
		ROLLBACK;
		END;
		
	END IF;
	
	-- check if has unclosed deduction
	
	-- remaining period
	
	-- check if last payroll then set tax computation to Annualize
	
	-- remove ww_payroll_current_transaction with the same periodid (reprocessing)
	IF @period_status_id != 3 THEN
		DELETE FROM ww_payroll_current_transaction WHERE `employee_id` = puserid AND `period_id` = periodid;
	END IF;
	-- compute SALARY
	
	-- monthly
	IF @nPayrate = 2 THEN
		SET @PeriodSalary = 0;
		-- CALL sp_payroll_get_salary_monthly(puserid, @payroll_date, periodid, @period_processing_type_id );
		SET @PeriodSalary = @nSalary / @nDivisor;
		SET @DailySalary = @nSalary / ( @nTotal_year_days / 12 );
	END IF;
	-- weekly
	
	IF @nPayrate = 6 THEN
		SET @DailySalary = 0;		
		-- insert salary 
		-- CALL sp_payroll_get_salary_weekly(puserid, @payroll_date, periodid, @period_processing_type_id );
		SET @DailySalary = @nSalary;
	END IF;
	
	-- compute recurring
	-- CALL sp_payroll_get_recurring(puserid, periodid, @sweek, @payroll_date, @period_processing_type_id);
	
	-- compute batch entry
	CALL sp_payroll_get_batch(puserid, periodid, @payroll_date, @period_processing_type_id);
	
	-- compute leave conversion
	-- CALL sp_payroll_leave_conversion(puserid, periodid, @nCompany, @payroll_date, @DailySalary, @nEmp_type_id, @period_processing_type_id);
	SET @Tax_Bonus = 0;	
	-- compute bonus
	CALL sp_payroll_get_bonus(puserid, periodid, @payroll_date, @nSalary, @period_processing_type_id);
	
	-- SELECT @Tax_Bonus;
	
	if @nTax_mode != 3 then
		if @Tax_Bonus > 0 and @nEmp_type_id IN (1,2,3,4,9,10,16,17) then
			set @nTax_mode = 5; -- for bonus taxable		
		elseIF @Tax_Bonus > 0 AND @nEmp_type_id IN (5,6,18) THEN
			SET @nTax_mode = 7; -- for bonus taxable				
		end if;
	end if;
	-- compute ecola
	-- call sp_payroll_get_ecola();
	SET @Not_MinWage = 0;
	SET @min_wage_amt = 0;
	SET @ecola_amt = 0;
	
	SELECT `min_wage_amt`, `ecola_amt` 
	INTO @min_wage_amt, @ecola_amt
	FROM ww_users_location WHERE `location_id` = @nPayLocation AND `deleted` = 0;
	
	IF @min_wage_amt >= @DailySalary THEN
		-- CALL sp_payroll_get_ecola(puserid, periodid, @payroll_date, @ecola_amt, @period_processing_type_id);
		SET @Not_MinWage = 1;
	END IF;
	-- compute/update amount = base_on_earning
	SET @cur_tran_id = 0;
	SELECT `id` INTO @cur_tran_id
	FROM ww_payroll_current_transaction WHERE AES_DECRYPT( `amount`, encryption_key() ) = 'base_on_earning' 
		AND `employee_id` = puserid AND `payroll_date` = @payroll_date AND `deleted` = 0;
	IF @cur_tran_id > 0 THEN
		SET @result = 0.00;
		CALL sp_payroll_get_transaction(puserid,periodid,'1,5',1,1,1,0,@result);
		UPDATE ww_payroll_current_transaction SET `unit_rate` = AES_ENCRYPT( @result, encryption_key() ), `amount` = AES_ENCRYPT( @result, encryption_key() )
			WHERE `id` = @cur_tran_id;
	END IF;
	
	/*SELECT amount INTO @nTax_amount
	FROM whtax_adjustment WHERE `user_id` = puserid;
	
	IF @nTax_amount > 0 THEN
		CALL sp_payroll_get_tax_manual( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTax_amount );
	END IF;*/
	IF @Not_MinWage = 0 THEN
		
		IF @nTax_mode = 1 THEN
			CALL sp_payroll_get_tax_table( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTaxcode );
		-- Annualized
		ELSEIF @nTax_mode = 2 THEN
			CALL sp_payroll_get_tax_annualize( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTaxcode, @nRemain );
		
		-- Manual
		ELSEIF @nTax_mode = 3 THEN	
			IF @nTax_amount > 0 THEN
				CALL sp_payroll_get_tax_manual( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTax_amount );
			END IF;
		ELSEIF @nTax_mode = 5 THEN
			CALL sp_payroll_get_tax_bonus( puserid, periodid, @payroll_date, @period_processing_type_id );
		ELSEIF @nTax_mode = 6 THEN	
			CALL sp_payroll_get_tax_bonus_rf( puserid, periodid, @payroll_date, @period_processing_type_id, @payroll_schedule_id, @nTaxcode, @Tax_Bonus );
		ELSEIF @nTax_mode = 7 THEN
			CALL sp_payroll_get_tax_bonus_sup( puserid, periodid, @payroll_date, @period_processing_type_id );			
		END IF;
		/*
		-- Cummulative
		elseif @nTax_mode = 4 THEN
		
		else
		
		end if;
		*/
	END IF;
		
	-- compute netpay
	CALL sp_payroll_get_netpay( periodid, puserid, @payroll_date, @period_processing_type_id ) ;
	-- update payroll details
	UPDATE ww_payroll_current_transaction a, ww_users_profile b SET 
		a.company_id = @nCompany,
		a.branch_id = b.branch_id,
		a.group_id = @nGroup,
		a.department_id = @nDepartment,
		a.section_id = @nSection,
		a.division_id = @nDivision,
		a.position_id = @nPosition,
		a.location_id = @nLocation,
		a.payment_type_id = @nPaymentType,
		a.minwageflag = @Not_MinWage
	WHERE a.employee_id = puserid AND a.employee_id = b.user_id AND a.period_id = periodid AND a.payroll_date = @payroll_date;
	
	UPDATE ww_payroll_period SET `period_status_id` = 2 WHERE payroll_period_id = periodid ;
	COMMIT;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_recompute_all_employee_netpay` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_recompute_all_employee_netpay` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_recompute_all_employee_netpay`(
		IN puserid INT(11),
		IN periodid INT(11),
		in netpay decimal(12,2),
		IN net_rec_id INT(11)
	)
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE deduction DECIMAL(12,2);
	DECLARE rec_id INT(11);
	DECLARE trans CURSOR FOR
		SELECT AES_DECRYPT( pct.`amount`, encryption_key() ), `id`
		FROM ww_payroll_current_transaction pct
		INNER JOIN ww_payroll_transaction pt ON pct.`transaction_id` = pt.`transaction_id` 
			AND pt.`transaction_type_id` IN (3,4,5) AND pt.`transaction_code` != 'WHTAX'
		INNER JOIN ww_payroll_transaction_class ptc ON ptc.`transaction_class_id` = pt.`transaction_class_id`
			AND ptc.`government_mandated` = 0 
		WHERE pct.`employee_id` = puserid and pct.`period_id` = periodid
		ORDER BY pt.transaction_type_id ASC, priority_id DESC;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	OPEN trans;
	myLoop: LOOP
		FETCH trans INTO deduction, rec_id;
		select concat(deduction, 'x', rec_id);
		IF netpay > 0 THEN
		    select netpay;
		    UPDATE ww_payroll_current_transaction SET 
			`unit_rate` = AES_ENCRYPT( ROUND( netpay, 2 ), encryption_key() ), 
			`amount` = AES_ENCRYPT( ROUND( netpay, 2 ), encryption_key() )
		    WHERE id = net_rec_id;
		    CLOSE trans;
		    LEAVE myLoop;
		END IF;
		IF done THEN
		    CLOSE trans;
		    LEAVE myLoop;
		END IF;
		SET netpay = netpay + deduction;
		UPDATE ww_payroll_current_transaction SET 
			`on_hold` = 1
		WHERE id = rec_id;
		
	END LOOP;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_recompute_all_netpay` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_recompute_all_netpay` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_recompute_all_netpay`()
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	declare emp_id int(11);
	declare per_id int(11);
	declare netpay decimal(12,2);
	DECLARE rec_id INT(11);
	
	declare emp cursor for
		SELECT employee_id, period_id, AES_DECRYPT(`amount`, encryption_key() ), `id` FROM ww_payroll_current_transaction
		WHERE deleted = 0 AND transaction_code = 'NETPAY' 
			AND AES_DECRYPT(`amount`, encryption_key() ) < 0;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	open emp;
	myLoop: LOOP
		FETCH emp INTO emp_id, per_id, netpay, rec_id;
		SELECT CONCAT(emp_id, 'c', per_id, 'n', netpay);
		IF done THEN
		    CLOSE emp;
		    LEAVE myLoop;
		END IF;
		call sp_payroll_recompute_all_employee_netpay( emp_id, per_id, netpay, rec_id);
		
	END LOOP;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_recompute_netpay` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_recompute_netpay` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_recompute_netpay`(
		IN puserid INT(11),
		IN periodid INT(11)
	)
BEGIN
	set @netpay = 0.00;
	
	SELECT ROUND( SUM( IF( 
		ptt.`operation` = '-',
		AES_DECRYPT(pct.`amount`, encryption_key ()) * - 1,
		AES_DECRYPT(pct.`amount`, encryption_key ())
		) ), 2 ) 
	into @netpay
	FROM ww_payroll_current_transaction pct 
	INNER JOIN ww_payroll_transaction pt ON pt.`transaction_id` = pct.`transaction_id` 
	INNER JOIN ww_payroll_transaction_type ptt ON pct.`transaction_type_id` = ptt.`transaction_type_id` 
	INNER JOIN ww_payroll_transaction_class pc ON pc.`transaction_class_id` = pt.`transaction_class_id`
	WHERE pct.`employee_id` = 32 AND pct.`period_id` = 1 AND pct.`deleted` = 0 AND pct.`on_hold` = 0 AND
	      pt.transaction_id NOT IN ( 
			SELECT pt.transaction_id
			FROM ww_payroll_transaction pt
			INNER JOIN ww_payroll_transaction_class pc ON pt.`transaction_class_id` = pc.`transaction_class_id`
			INNER JOIN ww_payroll_transaction_type tt ON tt.`transaction_type_id` = pt.`transaction_type_id`
			WHERE pc.`transaction_class_code` = 'LEAVES' AND operation = '+' );
	
	UPDATE ww_payroll_current_transaction SET 
		`unit_rate` = AES_ENCRYPT( ROUND( @netpay, 2 ), encryption_key() ), 
		`amount` = AES_ENCRYPT( ROUND( @netpay, 2 ), encryption_key() )
	WHERE `employee_id` = puserid and `period_id` = periodid and `transaction_code` = 'NETPAY';
		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_regen_closed_bir` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_regen_closed_bir` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_regen_closed_bir`(
	
    )
BEGIN
	BEGIN
		DECLARE closed_bir_done TINYINT(11) DEFAULT 0;
		DECLARE bir_emp_id INT(11);
		DECLARE bir_per_id INT(11);
		DECLARE bir_paydate DATE;
		DECLARE bir_employee CURSOR FOR
			SELECT `period_id`, `employee_id`, `payroll_date`
			FROM `ww_payroll_closed_transaction` WHERE `deleted` = 0 and payroll_date like '%2018%' group by employee_id;
		DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET closed_bir_done = 1;
		OPEN bir_employee;
		mybirLoop: LOOP
			FETCH bir_employee INTO bir_per_id, bir_emp_id, bir_paydate;
	
			IF closed_bir_done THEN
				CLOSE bir_employee;
				LEAVE mybirLoop;
			END IF;
			-- Insert Data to Payroll BIR
			CALL `sp_payroll_bir_record`( bir_emp_id, YEAR(bir_paydate), 0 );
		END LOOP;
	END;
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_regen_closed_summary` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_regen_closed_summary` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_regen_closed_summary`(
	
    )
BEGIN
	DECLARE closed_period_done TINYINT(11) DEFAULT 0;
	DECLARE emp_id INT(11);
	DECLARE per_id INT(11);
	DECLARE paydate DATE;
	DECLARE employee CURSOR FOR
		SELECT DISTINCT `period_id`, `employee_id`, `payroll_date`
		FROM `ww_payroll_closed_transaction` 
		WHERE `deleted` = 0 AND payroll_date LIKE '%2018%' AND `on_hold` = 0;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET closed_period_done = 1;
	OPEN employee;
	
	myLoop: LOOP
		FETCH employee INTO per_id, emp_id, paydate;
		
		IF closed_period_done THEN
		    CLOSE employee;
		    LEAVE myLoop;
		END IF;
		-- employee summary
		-- check if has record on payroll_closed_summary
		SET @count = 0;
		SELECT COUNT(*) INTO @count FROM `ww_payroll_closed_summary` WHERE `user_id` = emp_id AND `year` = YEAR(paydate) AND `deleted` = 0;
		IF @count = 0 THEN
			-- insert record on payroll_closed_summary
			CALL sp_payroll_closed_summary_insert( emp_id, paydate);
		END IF;
		
		BEGIN
			DECLARE s_done TINYINT(1) DEFAULT 0;
			DECLARE tran_code VARCHAR(32);
			DECLARE summary CURSOR FOR
				SELECT `summary_code` FROM `ww_payroll_closed_summary`
				WHERE `user_id` = emp_id AND `year` = YEAR(paydate)
					AND deleted = 0;
			DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET s_done = 1;
			OPEN summary;
			
			mySummary: LOOP
				FETCH summary INTO tran_code;
				
				IF s_done THEN
					CLOSE summary;
					LEAVE mySummary;
				END IF;
				SET @amt = 0;
				CALL sp_payroll_regen_closed_summary_amt( emp_id, paydate, tran_code, @result );
				SET @amt = @result;
				
				IF @amt IS NOT NULL THEN
					-- update payroll_closed_summary
					CALL sp_payroll_closed_summary_update( emp_id, paydate, tran_code, @amt );
				END IF;
				
			END LOOP;
		END;
		
		-- Insert Data to Payroll BIR
		-- CALL `sp_payroll_bir_record`( emp_id, YEAR(paydate), 0 );
		
	END LOOP;
	
	BEGIN
		DECLARE closed_bir_done TINYINT(11) DEFAULT 0;
		DECLARE bir_emp_id INT(11);
		DECLARE bir_per_id INT(11);
		DECLARE bir_paydate DATE;
		DECLARE bir_employee CURSOR FOR
			SELECT `period_id`, `employee_id`, `payroll_date`
			FROM `ww_payroll_closed_transaction` WHERE `deleted` = 0 group by employee_id;
		DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET closed_bir_done = 1;
		OPEN bir_employee;
		mybirLoop: LOOP
			FETCH bir_employee INTO bir_per_id, bir_emp_id, bir_paydate;
	
			IF closed_bir_done THEN
				CLOSE bir_employee;
				LEAVE mybirLoop;
			END IF;
			-- Insert Data to Payroll BIR
			CALL `sp_payroll_bir_record`( bir_emp_id, YEAR(bir_paydate), 0 );
		END LOOP;
	END;
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_regen_closed_summary_amt` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_regen_closed_summary_amt` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_regen_closed_summary_amt`(
	in puserid int(11),
	in paydate date,
	in tran_code varchar(32),
	out nAmount decimal(12,2)
    )
BEGIN
	    set @tran = tran_code;
		SELECT 
		  CASE @tran 
		    WHEN 'TAXABLE_INCOME' THEN SUM( AES_DECRYPT(amount, encryption_key ()) * (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'DEDUCTION_LATE' THEN - 1 
			  WHEN 'DEDUCTION_UNDERTIME' THEN - 1 
			  WHEN 'ABSENCES' THEN - 1 
			  WHEN 'TAXABLE_DEDUCTION' THEN - 1 
			  ELSE 1 
			END
		      )
		    ) 
		    WHEN 'SALARY' THEN SUM( AES_DECRYPT(amount, encryption_key ()) * (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'SALARY' THEN 1 ELSE - 1 
			END
		      )
		    ) 
		    ELSE SUM(
		      AES_DECRYPT(amount, encryption_key ())
		    ) 
		  END
		into nAmount
		FROM ww_payroll_closed_transaction pct 
		LEFT JOIN ww_payroll_transaction_class ptc ON pct.transaction_class_id = ptc.transaction_class_id 
		WHERE pct.employee_id = puserid and pct.payroll_date = paydate
		  AND (
		    CASE @tran 
		      WHEN 'TAXABLE_INCOME' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'SALARY' THEN 1 WHEN 'OVERTIME' THEN 1 WHEN 'BONUS_TAXABLE' THEN 1 
			  WHEN 'ALLOWANCE_BATCH' THEN 1 WHEN 'ALLOWANCE_RECURRING' THEN 1 WHEN 'LEAVES' THEN 1 
			  WHEN 'ABSENCES' THEN 1 WHEN 'DEDUCTION_LATE' THEN 1 WHEN 'DEDUCTION_UNDERTIME' THEN 1 
			  WHEN 'TAXABLE_DEDUCTION' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'BONUS' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'BONUS' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'BONUS_TAXABLE' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'BONUS_TAXABLE' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'ADDITIONAL_EXCLUSION' THEN (
			CASE
			  ptc.government_mandated 
			  WHEN 1 THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'SALARY' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'SALARY' THEN 1 WHEN 'ABSENCES' THEN 1 WHEN 'DEDUCTION_LATE' THEN 1 
			  WHEN 'DEDUCTION_UNDERTIME' THEN 1 ELSE 0 
			END
		      ) 
		      
		      WHEN 'ALLOW_NSTD' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'ALLOWANCE_BATCH' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'BENEFIT_STD' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'BENEFIT_RECURRING' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'BENEFIT_NSTD' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'BENEFIT_BATCH' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'DEDUCTION_STD' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'DEDUCTION_RECURRING' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'DEDUCTION_NSTD' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'DEDUCTION_BATCH' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'OVERTIME' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'OVERTIME' THEN 1 ELSE 0 
			END
		      ) 
		      WHEN 'DEMMINIMIS' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'DE_MINIMIS_BENEFIT_RECURRING' THEN 1 when 'DE_MINIMIS_BENEFIT_BATCH' then 1 ELSE 0 
			END
		      ) 
		      WHEN 'LEAVES' THEN (
			CASE
			  ptc.transaction_class_code 
			  WHEN 'LEAVES' THEN 1 ELSE 0 
			END
		      ) 
		      ELSE (
			CASE
			  @tran 
			  WHEN ptc.transaction_class_code THEN 1 ELSE 0 
			END
		      ) 
		    END
		  ) = 1 ;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_regen_closed_summary_only` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_regen_closed_summary_only` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_regen_closed_summary_only`(
	
    )
BEGIN
	DECLARE closed_period_done TINYINT(11) DEFAULT 0;
	DECLARE emp_id INT(11);
	DECLARE per_id INT(11);
	DECLARE paydate DATE;
	DECLARE employee CURSOR FOR
		SELECT DISTINCT `period_id`, `employee_id`, `payroll_date`
		FROM `ww_payroll_closed_transaction` 
		WHERE `deleted` = 0 AND `on_hold` = 0 and payroll_date like '%2018%';
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET closed_period_done = 1;
	OPEN employee;
	
	myLoop: LOOP
		FETCH employee INTO per_id, emp_id, paydate;
		
		IF closed_period_done THEN
		    CLOSE employee;
		    LEAVE myLoop;
		END IF;
		-- employee summary
		-- check if has record on payroll_closed_summary
		SET @count = 0;
		SELECT COUNT(*) INTO @count FROM `ww_payroll_closed_summary` WHERE `user_id` = emp_id AND `year` = YEAR(paydate) AND `deleted` = 0;
		IF @count = 0 THEN
			-- insert record on payroll_closed_summary
			CALL sp_payroll_closed_summary_insert( emp_id, paydate);
		END IF;
		
		BEGIN
			DECLARE s_done TINYINT(1) DEFAULT 0;
			DECLARE tran_code VARCHAR(32);
			DECLARE summary CURSOR FOR
				SELECT `summary_code` FROM `ww_payroll_closed_summary`
				WHERE `user_id` = emp_id AND `year` = YEAR(paydate)
					AND deleted = 0;
			DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET s_done = 1;
			OPEN summary;
			
			mySummary: LOOP
				FETCH summary INTO tran_code;
				
				IF s_done THEN
					CLOSE summary;
					LEAVE mySummary;
				END IF;
				SET @amt = 0;
				CALL sp_payroll_regen_closed_summary_amt( emp_id, paydate, tran_code, @result );
				SET @amt = @result;
				
				IF @amt IS NOT NULL THEN
					-- update payroll_closed_summary
					CALL sp_payroll_closed_summary_update( emp_id, paydate, tran_code, @amt );
				END IF;
				
			END LOOP;
		END;
		
	END LOOP;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_salary_monthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_salary_monthly` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_salary_monthly`(
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11)
	)
BEGIN
	INSERT INTO `ww_payroll_current_transaction`
	    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`,
	     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
	     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
	     `created_by`, `deleted`)
	SELECT periodid, processing_type_id, paydate, user_id, 1, 
	     'SALARY', AES_ENCRYPT(1.00, encryption_key()), 
	     AES_ENCRYPT( 
		round(
		(AES_DECRYPT(salary, encryption_key()) / ( 
			CASE `payroll_schedule_id` WHEN 4 THEN 1 WHEN 5 THEN 2 WHEN 6 THEN 4 ELSE 2 END)
		),2), encryption_key()
	     ) ,
	     AES_ENCRYPT( 
		round(
		(AES_DECRYPT(salary, encryption_key()) / ( 
			CASE `payroll_schedule_id` WHEN 4 THEN 1 WHEN 5 THEN 2 WHEN 6 THEN 4 ELSE 2 END)
		),2), encryption_key()
	     ) ,
	     1, 0,'',0,0,'',NOW(),0,0
	FROM ww_payroll_partners 
	WHERE user_id = puserid;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_salary_weekly` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_salary_weekly` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_salary_weekly`(
	IN puserid INT(11), 
	IN paydate DATE, 
	IN periodid INT(11),
	IN processing_type_id INT(11)
	)
BEGIN
	SET @tran_code = '';
	SET @tran_id = 0;
	SET @tran_class_id = 0;
	SET @tran_type_id = 0;
	SELECT transaction_code, transaction_id , transaction_type_id, `transaction_class_id`
	INTO @tran_code, @tran_id, @tran_type_id, @tran_class_id
	FROM ww_payroll_transaction WHERE transaction_code = 'SALARY';
		
	INSERT INTO `ww_payroll_current_transaction`
	    (`period_id`,`processing_type_id`,`payroll_date`,`employee_id`,`transaction_id`, `transaction_class_id`,
	     `transaction_code`,`quantity`,`unit_rate`,`amount`,`transaction_type_id`,`inserted_from_id`,
	     `record_from`, `record_id`, `on_hold`, `remarks`, `created_on`,
	     `created_by`, `deleted`)
	SELECT periodid, processing_type_id, paydate, puserid, @tran_id, @tran_class_id,
	     @tran_code, AES_ENCRYPT(SUM(t.`hrs_actual`), encryption_key()), 
	     AES_ENCRYPT( ( AES_DECRYPT(p.`salary`, encryption_key()) / 8 ), encryption_key() ) ,
	     AES_ENCRYPT( SUM(t.`hrs_actual`) * ( AES_DECRYPT(p.`salary`, encryption_key()) / 8 ), encryption_key() ) ,
	     @tran_type_id, 0,'',0,0,'',NOW(),0,0
	FROM ww_payroll_partners p
	left join ww_time_record_summary t on p.`user_id` = t.`user_id`
	WHERE p.`user_id` = puserid AND
		t.`payroll_date` = paydate
	GROUP BY t.`user_id`, t.`payroll_date`;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_standard_table` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_standard_table` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_standard_table`()
BEGIN
	/* STANDARD == 33 */
	/*Table structure for table `ww_bank` */
	DROP TABLE IF EXISTS `ww_bank`;
	CREATE TABLE `ww_bank` (
	  `bank_id` INT(11) NOT NULL AUTO_INCREMENT,
	  `bank_type` VARCHAR(10) CHARACTER SET latin1 DEFAULT NULL,
	  `bank_code_numeric` VARCHAR(20) CHARACTER SET latin1 NOT NULL,
	  `bank_code_alpha` VARCHAR(30) CHARACTER SET latin1 DEFAULT NULL,
	  `bank` VARCHAR(50) CHARACTER SET latin1 NOT NULL,
	  `account_name` VARCHAR(128) CHARACTER SET latin1 DEFAULT NULL,
	  `account_no` VARCHAR(128) CHARACTER SET latin1 DEFAULT NULL,
	  `batch_no` INT(5) DEFAULT '0',
	  `ceiling_amount` DECIMAL(12,2) DEFAULT '0.00',
	  `branch_code` VARCHAR(20) CHARACTER SET latin1 DEFAULT NULL,
	  `description` TEXT CHARACTER SET latin1,
	  `deleted` INT(1) DEFAULT '0',
	  PRIMARY KEY (`bank_id`)
	) ENGINE=INNODB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_account_type` */
	DROP TABLE IF EXISTS `ww_payroll_account_type`;
	CREATE TABLE `ww_payroll_account_type` (
	  `account_type_id` INT(11) NOT NULL AUTO_INCREMENT,
	  `account_type` VARCHAR(255) CHARACTER SET latin1 NOT NULL,
	  `description` TEXT,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) NOT NULL DEFAULT '0',
	  PRIMARY KEY (`account_type_id`)
	) ENGINE=INNODB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_annual_tax` */
	DROP TABLE IF EXISTS `ww_payroll_annual_tax`;
	CREATE TABLE `ww_payroll_annual_tax` (
	  `annual_tax_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `salary_from` DECIMAL(10,2) NOT NULL,
	  `salary_to` DECIMAL(10,2) NOT NULL,
	  `amount` DECIMAL(10,2) NOT NULL,
	  `rate` DECIMAL(6,2) NOT NULL,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) NOT NULL DEFAULT '0',
	  PRIMARY KEY (`annual_tax_id`)
	) ENGINE=INNODB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_apply_to` */
	DROP TABLE IF EXISTS `ww_payroll_apply_to`;
	CREATE TABLE `ww_payroll_apply_to` (
	  `apply_to_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `apply_to` VARCHAR(64) NOT NULL,
	  `description` TEXT,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`apply_to_id`)
	) ENGINE=INNODB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_closed_summary_id` */
	DROP TABLE IF EXISTS `ww_payroll_closed_summary_id`;
	CREATE TABLE `ww_payroll_closed_summary_id` (
	  `summary_id` INT(11) NOT NULL AUTO_INCREMENT,
	  `summary_code` VARCHAR(32) NOT NULL,
	  `description` TEXT,
	  `deleted` TINYINT(1) NOT NULL DEFAULT '0',
	  PRIMARY KEY (`summary_id`)
	) ENGINE=INNODB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;
	/*Data for the table `ww_payroll_closed_summary_id` */
	
	/*Table structure for table `ww_payroll_inserted_from` */
	DROP TABLE IF EXISTS `ww_payroll_inserted_from`;
	CREATE TABLE `ww_payroll_inserted_from` (
	  `inserted_from_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `inserted_from` VARCHAR(64) CHARACTER SET latin1 NOT NULL,
	  `description` TEXT,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`inserted_from_id`)
	) ENGINE=INNODB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_interest_type` */
	DROP TABLE IF EXISTS `ww_payroll_interest_type`;
	CREATE TABLE `ww_payroll_interest_type` (
	  `interest_type_id` INT(1) NOT NULL AUTO_INCREMENT,
	  `interest_type` VARCHAR(64) CHARACTER SET latin1 NOT NULL,
	  `description` TEXT,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`interest_type_id`)
	) ENGINE=INNODB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_loan_interest_type` */
	DROP TABLE IF EXISTS `ww_payroll_loan_interest_type`;
	CREATE TABLE `ww_payroll_loan_interest_type` (
	  `interest_type_id` INT(11) NOT NULL AUTO_INCREMENT,
	  `interest_type` VARCHAR(255) CHARACTER SET latin1 DEFAULT NULL,
	  `description` TEXT,
	  `deleted` INT(1) DEFAULT '0',
	  PRIMARY KEY (`interest_type_id`)
	) ENGINE=INNODB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_loan_mode` */
	DROP TABLE IF EXISTS `ww_payroll_loan_mode`;
	CREATE TABLE `ww_payroll_loan_mode` (
	  `loan_mode_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `loan_mode` VARCHAR(128) DEFAULT NULL,
	  `description` TEXT,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`loan_mode_id`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_loan_status` */
	DROP TABLE IF EXISTS `ww_payroll_loan_status`;
	CREATE TABLE `ww_payroll_loan_status` (
	  `loan_status_id` INT(1) NOT NULL AUTO_INCREMENT,
	  `loan_status` VARCHAR(32) DEFAULT NULL,
	  `description` TEXT,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`loan_status_id`)
	) ENGINE=INNODB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_loan_type` */
	DROP TABLE IF EXISTS `ww_payroll_loan_type`;
	CREATE TABLE `ww_payroll_loan_type` (
	  `loan_type_id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `loan_type` VARCHAR(128) DEFAULT NULL,
	  `description` TEXT,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`loan_type_id`)
	) ENGINE=INNODB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_overtime` */
	DROP TABLE IF EXISTS `ww_payroll_overtime`;
	CREATE TABLE `ww_payroll_overtime` (
	  `overtime_id` INT(1) NOT NULL DEFAULT '0',
	  `overtime_code` VARCHAR(32) NOT NULL DEFAULT '',
	  `overtime` VARCHAR(64) DEFAULT NULL,
	  `overtime_rate` DECIMAL(5,2) DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0'
	) ENGINE=INNODB DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_overtime_rates` */
	DROP TABLE IF EXISTS `ww_payroll_overtime_rates`;
	CREATE TABLE `ww_payroll_overtime_rates` (
	  `overtime_rate_id` INT(1) NOT NULL AUTO_INCREMENT,
	  `company_id` INT(1) NOT NULL DEFAULT '0',
	  `partner_status_id` INT(1) NOT NULL DEFAULT '0',
	  `overtime_id` INT(11) NOT NULL,
	  `overtime_code` VARCHAR(32) NOT NULL DEFAULT '',
	  `overtime` VARCHAR(64) DEFAULT NULL,
	  `overtime_rate` DECIMAL(5,2) DEFAULT NULL,
	  `sequence` TINYINT(1) DEFAULT NULL,
	  `class` VARCHAR(32) DEFAULT NULL,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_on` INT(11) DEFAULT NULL,
	  `modified_by` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`overtime_rate_id`),
	  UNIQUE KEY `company_partner_overtime` (`company_id`,`partner_status_id`,`overtime_code`),
	  KEY `company_id` (`company_id`),
	  KEY `partner_status_id` (`partner_status_id`),
	  KEY `overtime_code` (`overtime_code`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_payment_mode` */
	DROP TABLE IF EXISTS `ww_payroll_payment_mode`;
	CREATE TABLE `ww_payroll_payment_mode` (
	  `payment_mode_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `payment_mode` VARCHAR(64) CHARACTER SET latin1 NOT NULL,
	  `description` TEXT,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`payment_mode_id`)
	) ENGINE=INNODB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_payment_type` */
	DROP TABLE IF EXISTS `ww_payroll_payment_type`;
	CREATE TABLE `ww_payroll_payment_type` (
	  `payment_type_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `payment_type` VARCHAR(64) DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`payment_type_id`)
	) ENGINE=INNODB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_period_processing_type` */
	DROP TABLE IF EXISTS `ww_payroll_period_processing_type`;
	CREATE TABLE `ww_payroll_period_processing_type` (
	  `period_processing_type_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `period_processing_type` VARCHAR(64) CHARACTER SET latin1 NOT NULL,
	  `description` TEXT,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`period_processing_type_id`)
	) ENGINE=INNODB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_period_status` */
	DROP TABLE IF EXISTS `ww_payroll_period_status`;
	CREATE TABLE `ww_payroll_period_status` (
	  `period_status_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `period_status` VARCHAR(64) NOT NULL,
	  `description` TEXT,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`period_status_id`)
	) ENGINE=INNODB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_phic_table` */
	DROP TABLE IF EXISTS `ww_payroll_phic_table`;
	CREATE TABLE `ww_payroll_phic_table` (
	  `phic_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `from` DECIMAL(10,2) NOT NULL DEFAULT '0.00',
	  `to` DECIMAL(10,2) NOT NULL DEFAULT '0.00',
	  `eeshare` DECIMAL(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employee share',
	  `ershare` DECIMAL(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employer share',
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`phic_id`)
	) ENGINE=INNODB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
	
	/*Table structure for table `ww_payroll_rate_type` */
	DROP TABLE IF EXISTS `ww_payroll_rate_type`;
	CREATE TABLE `ww_payroll_rate_type` (
	  `payroll_rate_type_id` INT(11) NOT NULL AUTO_INCREMENT,
	  `payroll_rate_type` VARCHAR(64) CHARACTER SET latin1 DEFAULT NULL,
	  `description` TEXT,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) NOT NULL DEFAULT '0',
	  PRIMARY KEY (`payroll_rate_type_id`)
	) ENGINE=INNODB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_schedule` */
	DROP TABLE IF EXISTS `ww_payroll_schedule`;
	CREATE TABLE `ww_payroll_schedule` (
	  `payroll_schedule_id` INT(11) NOT NULL AUTO_INCREMENT,
	  `payroll_schedule` VARCHAR(64) CHARACTER SET latin1 DEFAULT NULL,
	  `yearly` INT(1) DEFAULT '0',
	  `monthly` INT(1) DEFAULT '0',
	  `daily` INT(1) DEFAULT '0',
	  `piece_rate` INT(1) DEFAULT '0',
	  `commision` INT(1) DEFAULT '0',
	  `total_period_per_annum` INT(1) DEFAULT '24',
	  `deleted` TINYINT(1) NOT NULL DEFAULT '0',
	  PRIMARY KEY (`payroll_schedule_id`)
	) ENGINE=INNODB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_schedule_rate_divisor` */
	DROP TABLE IF EXISTS `ww_payroll_schedule_rate_divisor`;
	CREATE TABLE `ww_payroll_schedule_rate_divisor` (
	  `payroll_rate_type_id` INT(11) DEFAULT NULL,
	  `payroll_schedule_id` INT(11) DEFAULT NULL,
	  `divisor` FLOAT DEFAULT NULL,
	  `deleted` INT(1) DEFAULT '0'
	) ENGINE=INNODB DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_sss_table` */
	DROP TABLE IF EXISTS `ww_payroll_sss_table`;
	CREATE TABLE `ww_payroll_sss_table` (
	  `sss_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `from` DECIMAL(10,2) NOT NULL DEFAULT '0.00',
	  `to` DECIMAL(10,2) NOT NULL DEFAULT '0.00',
	  `eeshare` DECIMAL(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employee share',
	  `ershare` DECIMAL(6,2) NOT NULL DEFAULT '0.00' COMMENT 'employer share',
	  `ec` DECIMAL(6,2) NOT NULL DEFAULT '0.00',
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`sss_id`)
	) ENGINE=INNODB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_transaction` */
	DROP TABLE IF EXISTS `ww_payroll_transaction`;
	CREATE TABLE `ww_payroll_transaction` (
	  `transaction_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `transaction_code` VARCHAR(32) NOT NULL,
	  `transaction_label` VARCHAR(128) DEFAULT NULL,
	  `transaction_class_id` INT(1) DEFAULT '0',
	  `transaction_type_id` INT(1) DEFAULT '0',
	  `debit_account_id` INT(1) DEFAULT '0',
	  `credit_account_id` INT(1) DEFAULT '0',
	  `per_annum_cap` DECIMAL(15,2) DEFAULT '0.00',
	  `priority_id` TINYINT(1) DEFAULT '3',
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`transaction_id`),
	  KEY `transaction_code` (`transaction_code`),
	  KEY `transaction_class_id` (`transaction_class_id`),
	  KEY `transaction_type_id` (`transaction_type_id`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB AUTO_INCREMENT=199 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_transaction_class` */
	DROP TABLE IF EXISTS `ww_payroll_transaction_class`;
	CREATE TABLE `ww_payroll_transaction_class` (
	  `transaction_class_id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `transaction_class_code` VARCHAR(32) NOT NULL,
	  `transaction_class` VARCHAR(128) NOT NULL,
	  `regular_processing` TINYINT(1) DEFAULT '0',
	  `special_processing` TINYINT(1) DEFAULT '0',
	  `final_pay_processing` TINYINT(1) DEFAULT '0',
	  `is_recurring` TINYINT(1) DEFAULT '0',
	  `is_irregular` TINYINT(1) DEFAULT '0',
	  `is_loan` TINYINT(1) DEFAULT '0',
	  `is_bonus` TINYINT(1) DEFAULT '0',
	  `government_mandated` TINYINT(1) DEFAULT '0',
	  `description` TEXT,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`transaction_class_id`),
	  KEY `transaction_class_code` (`transaction_class_code`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_transaction_method` */
	DROP TABLE IF EXISTS `ww_payroll_transaction_method`;
	CREATE TABLE `ww_payroll_transaction_method` (
	  `payroll_transaction_method_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `payroll_transaction_method` VARCHAR(32) NOT NULL,
	  `sequence` TINYINT(1) DEFAULT '1',
	  `description` TEXT,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`payroll_transaction_method_id`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_transaction_mode` */
	DROP TABLE IF EXISTS `ww_payroll_transaction_mode`;
	CREATE TABLE `ww_payroll_transaction_mode` (
	  `payroll_transaction_mode_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `payroll_transaction_mode` VARCHAR(32) NOT NULL,
	  `description` TEXT,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`payroll_transaction_mode_id`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_transaction_mode_tax` */
	DROP TABLE IF EXISTS `ww_payroll_transaction_mode_tax`;
	CREATE TABLE `ww_payroll_transaction_mode_tax` (
	  `payroll_transaction_mode_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `payroll_transaction_mode` VARCHAR(32) NOT NULL,
	  `description` TEXT,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`payroll_transaction_mode_id`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_transaction_priority` */
	DROP TABLE IF EXISTS `ww_payroll_transaction_priority`;
	CREATE TABLE `ww_payroll_transaction_priority` (
	  `priority_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `priority` VARCHAR(32) NOT NULL,
	  `priority_index` TINYINT(1) DEFAULT '1',
	  `description` TEXT,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`priority_id`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_transaction_type` */
	DROP TABLE IF EXISTS `ww_payroll_transaction_type`;
	CREATE TABLE `ww_payroll_transaction_type` (
	  `transaction_type_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `transaction_type` VARCHAR(32) NOT NULL,
	  `operation` VARCHAR(1) NOT NULL DEFAULT '+',
	  `description` TEXT,
	  `sort_order` TINYINT(1) DEFAULT '1',
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`transaction_type_id`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_week` */
	DROP TABLE IF EXISTS `ww_payroll_week`;
	CREATE TABLE `ww_payroll_week` (
	  `week_id` INT(1) NOT NULL AUTO_INCREMENT,
	  `week` VARCHAR(8) NOT NULL,
	  `description` TEXT,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`week_id`)
	) ENGINE=INNODB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_whtax_table` */
	DROP TABLE IF EXISTS `ww_payroll_whtax_table`;
	CREATE TABLE `ww_payroll_whtax_table` (
	  `whtax_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `payroll_schedule_id` INT(1) NOT NULL,
	  `taxcode_id` INT(1) NOT NULL,
	  `salary_from` DECIMAL(10,2) NOT NULL DEFAULT '0.00',
	  `salary_to` DECIMAL(10,2) NOT NULL DEFAULT '0.00',
	  `fixed_amount` DECIMAL(10,2) NOT NULL DEFAULT '0.00',
	  `excess_percentage` DECIMAL(6,2) NOT NULL DEFAULT '0.00',
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`whtax_id`)
	) ENGINE=INNODB AUTO_INCREMENT=193 DEFAULT CHARSET=utf8 ROW_FORMAT=FIXED;
	
	/*Table structure for table `ww_sensitivity` */
	DROP TABLE IF EXISTS `ww_sensitivity`;
	CREATE TABLE `ww_sensitivity` (
	  `sensitivity_id` INT(11) NOT NULL AUTO_INCREMENT,
	  `sensitivity` VARCHAR(32) DEFAULT NULL,
	  `description` TEXT,
	  `deleted` INT(1) DEFAULT '0',
	  PRIMARY KEY (`sensitivity_id`)
	) ENGINE=INNODB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_taxcode` */
	DROP TABLE IF EXISTS `ww_taxcode`;
	CREATE TABLE `ww_taxcode` (
	  `taxcode_id` INT(11) NOT NULL AUTO_INCREMENT,
	  `taxcode` VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL,
	  `amount` DOUBLE(15,2) NOT NULL,
	  `description` TEXT,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) NOT NULL,
	  PRIMARY KEY (`taxcode_id`)
	) ENGINE=INNODB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
	
	/* OTHER PAYROLL TABLE == 18 */
	
	/*Table structure for table `ww_payroll_account` */
	DROP TABLE IF EXISTS `ww_payroll_account`;
	CREATE TABLE `ww_payroll_account` (
	  `account_id` int(11) NOT NULL AUTO_INCREMENT,
	  `account_code` varchar(32) CHARACTER SET latin1 NOT NULL,
	  `account_name` varchar(255) CHARACTER SET latin1 NOT NULL,
	  `account_type_id` int(11) NOT NULL DEFAULT '2',
	  `description` text,
	  `created_by` int(11) DEFAULT NULL,
	  `created_on` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` int(11) DEFAULT NULL,
	  `modified_on` datetime DEFAULT NULL,
	  `deleted` tinyint(1) NOT NULL DEFAULT '0',
	  PRIMARY KEY (`account_id`),
	  UNIQUE KEY `account_code` (`account_code`),
	  KEY `account_type_id` (`account_type_id`)
	) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_bonus` */
	DROP TABLE IF EXISTS `ww_payroll_bonus`;
	CREATE TABLE `ww_payroll_bonus` (
	  `bonus_id` INT(11) NOT NULL AUTO_INCREMENT,
	  `bonus_transaction_id` INT(11) DEFAULT NULL,
	  `accrual_transaction_id` INT(11) DEFAULT NULL,
	  `adjustment_transaction_id` INT(11) DEFAULT NULL,
	  `taxable_bonus_transaction_id` INT(11) DEFAULT NULL,
	  `taxable_acrrual_transaction_id` INT(11) DEFAULT NULL,
	  `taxable_adjustment_transaction_id` INT(11) DEFAULT NULL,
	  `date_from` DATE DEFAULT NULL,
	  `date_to` DATE DEFAULT NULL,
	  `payroll_date` DATE DEFAULT NULL,
	  `transaction_method_id` INT(11) DEFAULT NULL,
	  `period` INT(11) DEFAULT NULL,
	  `mainamount` DECIMAL(15,2) DEFAULT NULL,
	  `apply_maxbonus_rule` INT(1) DEFAULT '0',
	  `week` VARCHAR(16) DEFAULT NULL,
	  `employee_id` TEXT,
	  `account_id` INT(11) DEFAULT NULL,
	  `description` TEXT,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` INT(1) DEFAULT '0',
	  PRIMARY KEY (`bonus_id`),
	  UNIQUE KEY `payroll_date` (`payroll_date`)
	) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_bonus_accrual` */
	DROP TABLE IF EXISTS `ww_payroll_bonus_accrual`;
	CREATE TABLE `ww_payroll_bonus_accrual` (
	  `accrual_id` INT(11) DEFAULT NULL,
	  `period_id` INT(11) DEFAULT NULL,
	  `bonus_id` INT(11) DEFAULT NULL,
	  `employee_id` INT(11) DEFAULT NULL,
	  `amount` DECIMAL(15,2) DEFAULT NULL,
	  KEY `accrual_id` (`accrual_id`),
	  KEY `period_id` (`period_id`),
	  KEY `employee_id` (`employee_id`),
	  KEY `bonus_id` (`bonus_id`)
	) ENGINE=INNODB DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_bonus_employee` */
	DROP TABLE IF EXISTS `ww_payroll_bonus_employee`;
	CREATE TABLE `ww_payroll_bonus_employee` (
	  `bonus_id` INT(11) DEFAULT NULL,
	  `employee_id` INT(11) DEFAULT NULL,
	  `amount` VARBINARY(255) DEFAULT NULL,
	  KEY `bonus_id` (`bonus_id`),
	  KEY `employee_id` (`employee_id`)
	) ENGINE=INNODB DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_closed_summary` */
	DROP TABLE IF EXISTS `ww_payroll_closed_summary`;
	CREATE TABLE `ww_payroll_closed_summary` (
	  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `user_id` INT(11) NOT NULL,
	  `company_id` INT(11) DEFAULT NULL,
	  `department_id` INT(11) DEFAULT NULL,
	  `type` VARCHAR(1) DEFAULT NULL,
	  `year` INT(1) NOT NULL,
	  `summary_id` INT(1) NOT NULL,
	  `summary_code` VARCHAR(32) NOT NULL,
	  `ytd` VARBINARY(255) DEFAULT NULL,
	  `january` VARBINARY(255) DEFAULT NULL,
	  `february` VARBINARY(255) DEFAULT NULL,
	  `march` VARBINARY(255) DEFAULT NULL,
	  `april` VARBINARY(255) DEFAULT NULL,
	  `may` VARBINARY(255) DEFAULT NULL,
	  `june` VARBINARY(255) DEFAULT NULL,
	  `july` VARBINARY(255) DEFAULT NULL,
	  `august` VARBINARY(255) DEFAULT NULL,
	  `september` VARBINARY(255) DEFAULT NULL,
	  `october` VARBINARY(255) DEFAULT NULL,
	  `november` VARBINARY(255) DEFAULT NULL,
	  `december` VARBINARY(255) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `deleted` INT(1) DEFAULT '0',
	  PRIMARY KEY (`id`)
	) ENGINE=INNODB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_closed_transaction` */
	DROP TABLE IF EXISTS `ww_payroll_closed_transaction`;
	CREATE TABLE `ww_payroll_closed_transaction` (
	  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `period_id` INT(11) DEFAULT NULL,
	  `processing_type_id` INT(1) DEFAULT NULL,
	  `payroll_date` DATE DEFAULT NULL,
	  `employee_id` INT(11) DEFAULT NULL,
	  `transaction_id` INT(1) DEFAULT NULL,
	  `transaction_class_id` INT(11) DEFAULT NULL,
	  `transaction_code` VARCHAR(32) DEFAULT NULL,
	  `quantity` VARBINARY(255) DEFAULT NULL,
	  `unit_rate` VARBINARY(255) DEFAULT NULL,
	  `amount` VARBINARY(255) DEFAULT NULL,
	  `transaction_type_id` INT(1) DEFAULT NULL,
	  `inserted_from_id` INT(1) DEFAULT NULL,
	  `record_from` VARCHAR(64) DEFAULT NULL,
	  `record_id` INT(11) DEFAULT NULL,
	  `on_hold` TINYINT(1) DEFAULT '0',
	  `remarks` TEXT,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`id`),
	  KEY `period_id` (`period_id`),
	  KEY `processing_type_id` (`processing_type_id`),
	  KEY `payroll_date` (`payroll_date`),
	  KEY `transaction_id` (`transaction_id`),
	  KEY `transaction_type_id` (`transaction_type_id`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_current_transaction` */
	DROP TABLE IF EXISTS `ww_payroll_current_transaction`;
	CREATE TABLE `ww_payroll_current_transaction` (
	  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `period_id` INT(11) DEFAULT NULL,
	  `processing_type_id` INT(1) DEFAULT NULL,
	  `payroll_date` DATE DEFAULT NULL,
	  `employee_id` INT(11) DEFAULT NULL,
	  `transaction_id` INT(1) DEFAULT NULL,
	  `transaction_class_id` INT(11) DEFAULT NULL,
	  `transaction_code` VARCHAR(32) DEFAULT NULL,
	  `quantity` VARBINARY(255) DEFAULT NULL,
	  `unit_rate` VARBINARY(255) DEFAULT NULL,
	  `amount` VARBINARY(255) DEFAULT NULL,
	  `transaction_type_id` INT(1) DEFAULT NULL,
	  `inserted_from_id` INT(1) DEFAULT NULL,
	  `record_from` VARCHAR(64) DEFAULT NULL,
	  `record_id` INT(11) DEFAULT NULL,
	  `on_hold` TINYINT(1) DEFAULT '0',
	  `remarks` TEXT,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `created_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `modified_by` INT(11) DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`id`),
	  KEY `period_id` (`period_id`),
	  KEY `processing_type_id` (`processing_type_id`),
	  KEY `payroll_date` (`payroll_date`),
	  KEY `transaction_id` (`transaction_id`),
	  KEY `transaction_type_id` (`transaction_type_id`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB AUTO_INCREMENT=278 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_entry_batch` */
	DROP TABLE IF EXISTS `ww_payroll_entry_batch`;
	CREATE TABLE `ww_payroll_entry_batch` (
	  `batch_entry_id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `payroll_date` DATE NOT NULL,
	  `transaction_id` INT(11) DEFAULT NULL,
	  `document_no` VARCHAR(64) CHARACTER SET latin1 DEFAULT NULL,
	  `unit_rate_main` VARBINARY(255) DEFAULT NULL,
	  `remarks` TEXT CHARACTER SET latin1,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`batch_entry_id`),
	  KEY `payroll_date` (`payroll_date`),
	  KEY `document_no` (`document_no`),
	  KEY `deleted` (`deleted`),
	  KEY `transaction_id` (`transaction_id`)
	) ENGINE=INNODB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_entry_batch_employee` */
	DROP TABLE IF EXISTS `ww_payroll_entry_batch_employee`;
	CREATE TABLE `ww_payroll_entry_batch_employee` (
	  `batch_entry_id` INT(11) NOT NULL,
	  `employee_id` INT(11) NOT NULL,
	  `quantity` VARBINARY(255) DEFAULT NULL,
	  `unit_rate` VARBINARY(255) DEFAULT NULL,
	  `amount` VARBINARY(255) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `deleted` TINYINT(1) DEFAULT '0',
	  KEY `batch_entry_id` (`batch_entry_id`),
	  KEY `employee_id` (`employee_id`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_entry_recurring` */
	DROP TABLE IF EXISTS `ww_payroll_entry_recurring`;
	CREATE TABLE `ww_payroll_entry_recurring` (
	  `recurring_id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `transaction_id` INT(11) NOT NULL,
	  `document_no` VARCHAR(32) CHARACTER SET latin1 DEFAULT NULL,
	  `date_from` DATE DEFAULT NULL,
	  `date_to` DATE DEFAULT NULL,
	  `week` VARCHAR(16) CHARACTER SET latin1 DEFAULT NULL,
	  `amount` VARCHAR(64) CHARACTER SET latin1 NOT NULL,
	  `transaction_type_id` INT(1) NOT NULL,
	  `transaction_method_id` INT(1) NOT NULL,
	  `remarks` VARCHAR(255) CHARACTER SET latin1 DEFAULT NULL,
	  `account_id` INT(11) DEFAULT NULL,
	  `account_code` VARCHAR(32) CHARACTER SET latin1 DEFAULT NULL,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`recurring_id`),
	  KEY `transaction_id` (`transaction_id`),
	  KEY `document_no` (`document_no`),
	  KEY `date_from` (`date_from`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_entry_recurring_employee` */
	DROP TABLE IF EXISTS `ww_payroll_entry_recurring_employee`;
	CREATE TABLE `ww_payroll_entry_recurring_employee` (
	  `recurring_id` INT(11) UNSIGNED NOT NULL,
	  `employee_id` INT(11) NOT NULL,
	  `quantity` VARBINARY(255) DEFAULT NULL,
	  `amount` VARBINARY(255) NOT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `deleted` TINYINT(1) DEFAULT '0',
	  KEY `recurring_id` (`recurring_id`),
	  KEY `employee_id` (`employee_id`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_loan` */
	DROP TABLE IF EXISTS `ww_payroll_loan`;
	CREATE TABLE `ww_payroll_loan` (
	  `loan_id` INT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `loan` VARCHAR(128) NOT NULL,
	  `principal_transid` INT(1) DEFAULT NULL,
	  `amortization_transid` INT(1) DEFAULT NULL,
	  `interest_transid` INT(1) DEFAULT NULL,
	  `loan_type_id` INT(1) DEFAULT NULL,
	  `loan_mode_id` INT(1) DEFAULT NULL,
	  `amount_limit` DECIMAL(9,2) DEFAULT '0.00',
	  `interest` DECIMAL(9,2) DEFAULT '0.00',
	  `interest_type_id` INT(1) DEFAULT NULL,
	  `debit` INT(1) DEFAULT NULL,
	  `credit` INT(1) DEFAULT NULL,
	  `description` TEXT,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_on` INT(11) DEFAULT NULL,
	  `modified_by` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`loan_id`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_location` */
	DROP TABLE IF EXISTS `ww_payroll_location`;
	CREATE TABLE `ww_payroll_location` (
	  `payroll_location_id` INT(11) NOT NULL AUTO_INCREMENT,
	  `payroll_location_code` VARCHAR(32) DEFAULT NULL,
	  `payroll_location_label` VARCHAR(100) DEFAULT NULL,
	  `min_wage_amt` DECIMAL(12,2) DEFAULT '0.00',
	  `ecola_amt` DECIMAL(12,2) DEFAULT '0.00',
	  `description` TEXT,
	  `deleted` TINYINT(1) NOT NULL DEFAULT '0',
	  PRIMARY KEY (`payroll_location_id`),
	  UNIQUE KEY `payroll_location_code` (`payroll_location_code`)
	) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
	/*Table structure for table `ww_payroll_partners_contribution` */
	DROP TABLE IF EXISTS `ww_payroll_partners_contribution`;
	CREATE TABLE `ww_payroll_partners_contribution` (
	  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `period_id` INT(11) NOT NULL,
	  `payroll_date` DATE NOT NULL,
	  `user_id` INT(11) NOT NULL,
	  `transaction_id` INT(11) DEFAULT NULL,
	  `employee` DECIMAL(10,2) DEFAULT '0.00',
	  `company` DECIMAL(10,2) DEFAULT '0.00',
	  `ec` DECIMAL(10,2) DEFAULT '0.00',
	  `msb_id` INT(11) DEFAULT NULL,
	  `created_by` INT(11) DEFAULT NULL,
	  `create_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`id`)
	) ENGINE=INNODB DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_partners_loan` */
	DROP TABLE IF EXISTS `ww_payroll_partners_loan`;
	CREATE TABLE `ww_payroll_partners_loan` (
	  `partner_loan_id` INT(11) NOT NULL AUTO_INCREMENT,
	  `user_id` INT(11) DEFAULT NULL,
	  `loan_id` INT(11) DEFAULT NULL,
	  `loan_status_id` INT(1) DEFAULT NULL,
	  `description` TEXT,
	  `entry_date` DATE DEFAULT NULL,
	  `loan_principal` VARBINARY(255) DEFAULT NULL,
	  `amount` VARBINARY(255) DEFAULT NULL,
	  `interest` VARBINARY(255) DEFAULT NULL,
	  `interest_type_id` INT(1) DEFAULT NULL,
	  `no_payments` INT(1) DEFAULT NULL,
	  `no_payments_paid` INT(1) DEFAULT NULL,
	  `no_payments_remaining` INT(1) DEFAULT NULL,
	  `beginning_balance` VARBINARY(255) DEFAULT NULL,
	  `running_balance` VARBINARY(255) DEFAULT NULL,
	  `release_date` DATE DEFAULT NULL,
	  `payment_mode_id` INT(1) DEFAULT NULL,
	  `start_date` DATE DEFAULT NULL,
	  `releasing_debit_account_id` INT(11) DEFAULT NULL,
	  `releasing_credit_account_id` INT(11) DEFAULT NULL,
	  `system_amortization` VARBINARY(255) DEFAULT NULL,
	  `user_amortization` VARBINARY(255) DEFAULT NULL,
	  `system_interest` VARBINARY(255) DEFAULT NULL,
	  `user_interest` VARBINARY(255) DEFAULT NULL,
	  `total_arrears` VARBINARY(255) DEFAULT NULL,
	  `total_amount_paid` VARBINARY(255) DEFAULT NULL,
	  `last_payment_date` DATE DEFAULT NULL,
	  `amortization_credit_account_id` INT(11) DEFAULT NULL,
	  `interest_credit_account_id` INT(11) DEFAULT NULL,
	  `interest_amortization_credit_account_id` INT(11) DEFAULT NULL,
	  `week` VARCHAR(64) DEFAULT NULL,
	  `previous_employee_loan_id` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `created_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `modified_by` INT(11) DEFAULT NULL,
	  `deleted` INT(1) DEFAULT '0',
	  PRIMARY KEY (`partner_loan_id`)
	) ENGINE=INNODB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_partners_loan_payment` */
	DROP TABLE IF EXISTS `ww_payroll_partners_loan_payment`;
	CREATE TABLE `ww_payroll_partners_loan_payment` (
	  `partner_loan_id` INT(11) NOT NULL,
	  `payroll_date` DATE DEFAULT NULL,
	  `type` VARCHAR(10) DEFAULT NULL,
	  `amount` VARBINARY(255) DEFAULT NULL,
	  `paid` TINYINT(1) DEFAULT '0',
	  `date_paid` DATE DEFAULT NULL
	) ENGINE=INNODB DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_period` */
	DROP TABLE IF EXISTS `ww_payroll_period`;
	CREATE TABLE `ww_payroll_period` (
	  `payroll_period_id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `period_status_id` TINYINT(1) DEFAULT '1',
	  `payroll_date` DATE DEFAULT NULL,
	  `date_from` DATE DEFAULT NULL,
	  `date_to` DATE DEFAULT NULL,
	  `date_closing` DATE DEFAULT NULL,
	  `week` INT(1) DEFAULT NULL,
	  `annualized` TINYINT(1) DEFAULT '0',
	  `payroll_schedule_id` INT(11) DEFAULT NULL,
	  `period_processing_type_id` INT(11) DEFAULT '1',
	  `apply_to_id` INT(11) DEFAULT NULL,
	  `remarks` TEXT,
	  `created_by` INT(11) DEFAULT NULL,
	  `created_on` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	  `modified_by` INT(11) DEFAULT NULL,
	  `modified_on` DATETIME DEFAULT NULL,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`payroll_period_id`),
	  KEY `payroll_date` (`payroll_date`),
	  KEY `date_from` (`date_from`),
	  KEY `date_to` (`date_to`),
	  KEY `period_status_id` (`period_status_id`),
	  KEY `deleted` (`deleted`)
	) ENGINE=INNODB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
	
	/*Table structure for table `ww_payroll_period_apply_to` */
	DROP TABLE IF EXISTS `ww_payroll_period_apply_to`;
	CREATE TABLE `ww_payroll_period_apply_to` (
	  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
	  `payroll_period_id` INT(11) NOT NULL,
	  `apply_to` INT(11) NOT NULL,
	  `created_on` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	  `deleted` TINYINT(1) DEFAULT '0',
	  PRIMARY KEY (`id`)
	) ENGINE=INNODB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
	
	/* TABLES NOT INCLUDED */
	/* ww_payroll_govt_contribution */
	/* ww_payroll_overtimex */
	/* ww_payroll_partners */
	/* ww_payroll_paycode */
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_payroll_update_loan_manual` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_payroll_update_loan_manual` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_payroll_update_loan_manual`(
	IN puserid INT(11),
	IN ploan_id INT(11),
	in amor DECIMAL(12,2)	
    )
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE emp_id INT(11);
	DECLARE ploan_id INT(11);
	DECLARE	paydate DATE;
	DECLARE pay_mode INT(11);
	DECLARE run_bal DECIMAL(12,2);
	DECLARE sys_amort DECIMAL(12,2);
	DECLARE user_amort DECIMAL(12,2);
	DECLARE ln_status_id INT(11);
	DECLARE tot_amt_pd DECIMAL(12,2);
	DECLARE no_pay_pd INT(11);
	DECLARE no_pay_rem INT(11);
	DECLARE loan CURSOR FOR
		SELECT pl.`user_id`, pl.`partner_loan_id`,
			ROUND(AES_DECRYPT(pl.`running_balance`, encryption_key ()),2),
			ROUND(AES_DECRYPT(pl.`system_amortization`, encryption_key ()),2),
			ROUND(AES_DECRYPT(pl.`user_amortization`, encryption_key ()),2),
			pl.`loan_status_id`, ROUND(AES_DECRYPT( pl.`total_amount_paid`, encryption_key ()),2),
			pl.`no_payments_paid`, pl.`no_payments_remaining`
		FROM ww_payroll_partners_loan pl
			WHERE pl.`deleted` = 0
			AND user_id = puserid
			and partner_loan_id = ploan_id
			AND AES_DECRYPT( pl.`running_balance` , encryption_key() ) > 0 AND pl.`loan_status_id` = 2;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	
	OPEN loan;
	myLoop: LOOP
		FETCH loan INTO emp_id, ploan_id, run_bal, sys_amort, user_amort, ln_status_id, tot_amt_pd, no_pay_pd, no_pay_rem;
		
		IF done THEN
		    CLOSE loan;
		    LEAVE myLoop;
		END IF;
		IF amor > 0 THEN
			BEGIN
				SET run_bal = run_bal + amor;
				IF run_bal < sys_amort THEN
					SET sys_amort = run_bal;
				END IF;
				IF run_bal < user_amort THEN
					SET user_amort = run_bal;
				END IF;
				
				SET tot_amt_pd = tot_amt_pd - amor;
				SET no_pay_pd = no_pay_pd - 1;
			END;
		END IF;
		
		IF pay_mode = 3 THEN
			SET pay_mode = 2;
		END IF;
		IF pay_mode = 4 THEN
			SET pay_mode = 1;
		END IF;
		
		IF run_bal <= 0.001 THEN
			SET ln_status_id = 4;
		END IF;
		
		IF pay_mode = 3 OR pay_mode = 2 THEN
			BEGIN
				IF amor != 0 THEN
					SET no_pay_rem = ROUND(run_bal / user_amort);
				END IF;
				IF no_pay_rem * user_amort < run_bal THEN
					SET no_pay_rem = no_pay_rem - 1;
				END IF;
			END;
		END IF;
		
		IF pay_mode = 4 OR pay_mode = 1 THEN
			BEGIN
				IF amor != 0 THEN
					SET no_pay_rem = ROUND(run_bal / sys_amort);
				END IF;
				IF no_pay_rem * sys_amort < run_bal THEN
					SET no_pay_rem = no_pay_rem - 1;
				END IF;
			END;
		END IF;
		
		UPDATE ww_payroll_partners_loan SET 
			`running_balance` = AES_ENCRYPT( ROUND( run_bal, 2) , encryption_key() ),
			`system_amortization` = AES_ENCRYPT( ROUND( sys_amort, 2) , encryption_key() ),
			`user_amortization` = AES_ENCRYPT( ROUND( user_amort, 2) , encryption_key() ),
			`total_arrears` = AES_ENCRYPT( ROUND( @arrears, 2) , encryption_key() ),
			`total_amount_paid` = AES_ENCRYPT( ROUND( tot_amt_pd, 2) , encryption_key() ),
			`last_payment_date` = paydate,
			`loan_status_id` = ln_status_id,
			`payment_mode_id` = pay_mode,
			`no_payments_paid` = no_pay_pd,
			`no_payments_remaining` = no_pay_rem
		WHERE partner_loan_id  = ploan_id AND `user_id` = emp_id;
	END LOOP;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_performance_appraisal_change_pending_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_performance_appraisal_change_pending_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_performance_appraisal_change_pending_approvers`(IN user_ids VARCHAR(256), IN class_id INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    DECLARE appraisalid INT;
    DECLARE approverid INT;
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE forms CURSOR FOR
       SELECT  pap.`appraisal_id`, pap.`user_id`, paa.approver_id 
       FROM ww_performance_appraisal_applicable pap 
	JOIN `ww_performance_appraisal_approver` paa ON pap.appraisal_id = paa.appraisal_id
	AND pap.user_id = paa.user_id
       AND FIND_IN_SET(approver_id, user_ids) AND status_id > 0 AND status_id < 4;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
    -- START TRANSACTION;
        
    OPEN forms;
    
    REPEAT
       FETCH forms INTO appraisalid, userid, approverid;
       
       IF NOT done THEN
	   DELETE from ww_performance_appraisal_approver 
	   WHERE appraisal_id = appraisalid AND user_id = userid;
           CALL `sp_performance_appraisal_populate_approvers`(appraisalid, userid);
           UPDATE ww_performance_planning_applicable 
           SET to_user_id = getFirstApprover(appraisalid, userid)
           WHERE appraisal_id = appraisalid AND user_id = userid;    
	   SET rec = rec + 1;
	   
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE forms;
    
    -- COMMIT;
    
    SELECT rec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_performance_appraisal_get_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_performance_appraisal_get_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_performance_appraisal_get_approvers`(IN appraisalid INT(11), IN userid INT(11))
BEGIN
          -- 
          -- [0] Override from USERS
          -- 
          SET @rec = 0;
          SET @class = '';
                   
          
          SELECT c.`class_code`, COUNT(a.`id`) INTO @class, @rec
          FROM `ww_approver_class_user` a
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE a.`user_id`=userid AND c.`class_code`='PPA' AND a.deleted = 0;
                    
          IF @rec > 0 THEN
             SELECT appraisalid, userid, `approver_id`, `condition`, `sequence`, 0
             FROM `ww_approver_class_user` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`approver_id`<>userid 
             AND a.user_id = userid
             GROUP BY 3;   
          ELSE   
          -- 
          -- [1] Override from POSITION
          -- 
          SET @rec = 0;
          SET @class = '';
          SET @positions = '';
          
          SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`) INTO @class, @positions, @rec
          FROM `ww_approver_class_position` a
          JOIN `users_profile` b ON b.position_id = a.`position_id` AND b.`company_id`=a.`company_id`
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE b.`user_id`=userid AND c.`class_code`='PPA' AND a.deleted = 0;
          
          IF @rec > 0 THEN
             SELECT appraisalid, userid, `approver_id`, `condition`, `sequence`, 0
             FROM `ww_approver_class_position` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
             JOIN `users_profile` e ON e.position_id = a.`position_id` AND e.`user_id`=userid
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`position_id`=@positions AND a.`approver_id`<>userid
             AND a.department_id = e.department_id AND a.company_id = e.company_id
             GROUP BY 3;   
          ELSE     
                    
             -- [2] Override from DEPARTMENT
             -- 
             SET @rec = 0;
             SET @class = '';
             SET @department = '';
          
             SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`) INTO @class, @department, @rec
             FROM `ww_approver_class_department` a
             JOIN `users_profile` b ON b.department_id = a.`department_id` AND b.`company_id`=a.`company_id`
             JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
             WHERE b.`user_id`=userid AND c.`class_code`='PPA' AND a.`approver_id`<>userid AND a.deleted = 0;
          
             IF @rec > 0 THEN
		SELECT appraisalid, userid, `approver_id`, `condition`, `sequence`, 0
                FROM `ww_approver_class_department` a
                JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
		JOIN `users_profile` e ON e.department_id = a.`department_id` AND e.`user_id`=userid
                WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`department_id`=@department AND a.`approver_id`<>userid
                AND a.company_id = e.company_id 
                GROUP BY 3;        
             ELSE
                --   
                -- [3] Override from COMPANY
                -- 
                SET @rec = 0;
                SET @class = '';
                SET @company = '';
          
                SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`) INTO @class, @company, @rec
                FROM `ww_approver_class_company` a
                JOIN `users_profile` b ON b.company_id = a.`company_id`
                JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
                WHERE b.`user_id`=userid AND c.`class_code`='PPA' AND a.deleted = 0;
          
                IF @rec > 0 THEN
		   SELECT appraisalid, userid, `approver_id`, `condition`, `sequence`, 0
                   FROM `ww_approver_class_company` a
                   JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                   WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`company_id`=@company AND a.`approver_id`<>userid
                   GROUP BY 3;
                END IF; -- IF COMPANY
             
             END IF; -- IF DEPARTMENT
             
          END IF; -- IF POSITION        
             
          END IF; -- IF USERS          
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_performance_appraisal_populate_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_performance_appraisal_populate_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_performance_appraisal_populate_approvers`(IN appraisalid INT(11), IN userid INT(11), IN appraiseeid INT(11))
BEGIN
          -- 
          -- [0] Override from USERS
          -- 
          SET @rec = 0;
          SET @class = '';
                    
          SELECT c.`class_code`, COUNT(a.`id`) INTO @class, @rec
          FROM `ww_approver_class_user` a
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE a.`user_id`=userid AND c.`class_code`='PPA' AND a.deleted = 0;
          
          IF @rec > 0 THEN
             INSERT INTO `ww_performance_appraisal_approver`
             (`appraisal_id`, `appraisee_id`, `user_id`, `approver_id`, `condition`, `sequence`, `performance_status_id`)
             SELECT appraisalid, appraiseeid, userid, `approver_id`, `condition`, `sequence`, 0
             FROM `ww_approver_class_user` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`approver_id`<>userid 
             AND a.user_id = userid
             GROUP BY 3
             ON DUPLICATE KEY UPDATE `deleted`=0;                              
          ELSE     
          -- 
          -- [1] Override from POSITION
          -- 
          SET @rec = 0;
          SET @class = '';
          SET @positions = '';
          
          SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`) INTO @class, @positions, @rec
          FROM `ww_approver_class_position` a
          JOIN `users_profile` b ON b.position_id = a.`position_id` AND b.`company_id`=a.`company_id`
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE b.`user_id`=userid AND c.`class_code`='PPA' AND a.deleted = 0;
          
          IF @rec > 0 THEN
             INSERT INTO `ww_performance_appraisal_approver`
             (`appraisal_id`, `appraisee_id`, `user_id`, `approver_id`, `condition`, `sequence`, `performance_status_id`)
             SELECT appraisalid, appraiseeid, userid, `approver_id`, `condition`, `sequence`, 0
             FROM `ww_approver_class_position` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
             JOIN `users_profile` e ON e.position_id = a.`position_id` AND e.`user_id`=userid
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`position_id`=@positions AND a.`approver_id`<>userid
             AND a.department_id = e.department_id AND a.company_id = e.company_id
             GROUP BY 3
             ON DUPLICATE KEY UPDATE `deleted`=0;             
          ELSE     
                    
             -- [2] Override from DEPARTMENT
             -- 
             SET @rec = 0;
             SET @class = '';
             SET @department = '';
          
             SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`) INTO @class, @department, @rec
             FROM `ww_approver_class_department` a
             JOIN `users_profile` b ON b.department_id = a.`department_id` AND b.`company_id`=a.`company_id`
             JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
             WHERE b.`user_id`=userid AND c.`class_code`='PPA' AND a.`approver_id`<>userid AND a.deleted = 0;
          
             IF @rec > 0 THEN
                INSERT INTO `ww_performance_appraisal_approver`
                (`appraisal_id`, `appraisee_id`, `user_id`, `approver_id`, `condition`, `sequence`, `performance_status_id`)
                SELECT appraisalid, appraiseeid, userid, `approver_id`, `condition`, `sequence`, 0
                FROM `ww_approver_class_department` a
                JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
		        JOIN `users_profile` e ON e.department_id = a.`department_id` AND e.`user_id`=userid
                WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`department_id`=@department AND a.`approver_id`<>userid
                AND a.company_id = e.company_id 
                GROUP BY 3
                ON DUPLICATE KEY UPDATE `deleted`=0;             
             ELSE
                --   
                -- [3] Override from COMPANY
                -- 
                SET @rec = 0;
                SET @class = '';
                SET @company = '';
          
                SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`) INTO @class, @company, @rec
                FROM `ww_approver_class_company` a
                JOIN `users_profile` b ON b.company_id = a.`company_id`
                JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
                WHERE b.`user_id`=userid AND c.`class_code`='PPA' AND a.deleted = 0;
          
                IF @rec > 0 THEN
                   INSERT INTO `ww_performance_appraisal_approver`
                   (`appraisal_id`, `appraisee_id`, `user_id`, `approver_id`, `condition`, `sequence`, `performance_status_id`)
                   SELECT appraisalid, appraiseeid, userid, `approver_id`, `condition`, `sequence`, 0
                   FROM `ww_approver_class_company` a
                   JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                   WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`company_id`=@company AND a.`approver_id`<>userid
                   GROUP BY 3
                   ON DUPLICATE KEY UPDATE `deleted`=0;             
                END IF; -- IF COMPANY
             
             END IF; -- IF DEPARTMENT
             
          END IF; -- IF POSITION     
             
          END IF; -- IF USERS              
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_performance_planning_change_pending_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_performance_planning_change_pending_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_performance_planning_change_pending_approvers`(IN user_ids VARCHAR(256), IN class_id INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    DECLARE planningid INT;
    DECLARE approverid INT;
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE forms CURSOR FOR
       SELECT  pap.`planning_id`, pap.`user_id`, paa.approver_id 
       FROM ww_performance_planning_applicable pap 
	   JOIN `ww_performance_planning_approver` paa ON pap.planning_id = paa.planning_id
	      AND pap.user_id = paa.user_id
          AND FIND_IN_SET(approver_id, user_ids) AND (status_id > 0 AND status_id < 4);
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    INSERT INTO `ww_system_messages` (msg_code,msg) VALUES ('PLANNING-APPROVER',CONCAT(user_ids,'-',class_id));
 
    -- START TRANSACTION;
        
    OPEN forms;
    
    REPEAT
       FETCH forms INTO planningid, userid, approverid;
       
       IF NOT done THEN
	      DELETE FROM ww_performance_planning_approver 
	      WHERE planning_id = planningid AND user_id = userid;
          
          CALL `sp_performance_planning_populate_approvers`(planningid, userid);
          
          UPDATE ww_performance_planning_applicable 
          SET to_user_id = getFirstApprover(planningid, userid)
          WHERE planning_id = planningid AND user_id = userid;    
          
	      SET rec = rec + 1;
          INSERT INTO `ww_system_messages` (msg_code,msg) VALUES ('CHANGE-APPROVER',CONCAT(userid,'-',planningid));
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE forms;
    
    -- COMMIT;
    
    SELECT rec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_performance_planning_get_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_performance_planning_get_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_performance_planning_get_approvers`(IN planningid INT(11), IN userid INT(11))
BEGIN
          -- 
          -- [0] Override from USERS
          -- 
          SET @rec = 0;
          SET @class = '';
          
          
          SELECT c.`class_code`, COUNT(a.`id`) INTO @class, @rec
          FROM `ww_approver_class_user` a
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE a.`user_id`=userid AND c.`class_code`='PPA' AND a.deleted = 0;
                    
          IF @rec > 0 THEN
             SELECT planningid, userid, `approver_id`, `condition`, `sequence`, 0
             FROM `ww_approver_class_user` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`approver_id`<>userid 
             AND a.user_id = userid
             GROUP BY 3;   
          ELSE     
          -- 
          -- [1] Override from POSITION
          -- 
          SET @rec = 0;
          SET @class = '';
          SET @positions = '';
          
          SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`) INTO @class, @positions, @rec
          FROM `ww_approver_class_position` a
          JOIN `users_profile` b ON b.position_id = a.`position_id` AND b.`company_id`=a.`company_id`
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE b.`user_id`=userid AND c.`class_code`='PPA' AND a.deleted = 0;
          
          IF @rec > 0 THEN
             SELECT planningid, userid, `approver_id`, `condition`, `sequence`, 0
             FROM `ww_approver_class_position` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
             JOIN `users_profile` e ON e.position_id = a.`position_id` AND e.`user_id`=userid
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`position_id`=@positions AND a.`approver_id`<>userid
             AND a.department_id = e.department_id AND a.company_id = e.company_id
             GROUP BY 3;   
          ELSE     
                    
             -- [2] Override from DEPARTMENT
             -- 
             SET @rec = 0;
             SET @class = '';
             SET @department = '';
          
             SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`) INTO @class, @department, @rec
             FROM `ww_approver_class_department` a
             JOIN `users_profile` b ON b.department_id = a.`department_id` AND b.`company_id`=a.`company_id`
             JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
             WHERE b.`user_id`=userid AND c.`class_code`='PPA' AND a.`approver_id`<>userid AND a.deleted = 0;
          
             IF @rec > 0 THEN
		SELECT planningid, userid, `approver_id`, `condition`, `sequence`, 0
                FROM `ww_approver_class_department` a
                JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
		JOIN `users_profile` e ON e.department_id = a.`department_id` AND e.`user_id`=userid
                WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`department_id`=@department AND a.`approver_id`<>userid
                AND a.company_id = e.company_id 
                GROUP BY 3;        
             ELSE
                --   
                -- [3] Override from COMPANY
                -- 
                SET @rec = 0;
                SET @class = '';
                SET @company = '';
          
                SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`) INTO @class, @company, @rec
                FROM `ww_approver_class_company` a
                JOIN `users_profile` b ON b.company_id = a.`company_id`
                JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
                WHERE b.`user_id`=userid AND c.`class_code`='PPA' AND a.deleted = 0;
          
                IF @rec > 0 THEN
		   SELECT planningid, userid, `approver_id`, `condition`, `sequence`, 0
                   FROM `ww_approver_class_company` a
                   JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                   WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`company_id`=@company AND a.`approver_id`<>userid
                   GROUP BY 3;
                END IF; -- IF COMPANY
             
             END IF; -- IF DEPARTMENT
             
          END IF; -- IF POSITION   
             
          END IF; -- IF USERS          
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_performance_planning_initialize_template` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_performance_planning_initialize_template` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_performance_planning_initialize_template`(IN planningid INT, IN userid INT)
BEGIN
	DELETE FROM ww_performance_planning_applicable_fields WHERE planning_id = planningid AND user_id = userid;
	DELETE FROM ww_performance_planning_applicable_items WHERE planning_id = planningid AND user_id = userid;
	DELETE FROM ww_performance_planning_crowdsource WHERE planning_id = planningid AND user_id = userid;
       
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_performance_planning_populate_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_performance_planning_populate_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_performance_planning_populate_approvers`(IN planningid INT(11), IN userid INT(11), IN appraiseeid INT(11))
BEGIN
          -- 
          -- [0] Override from USERS
          -- 
          SET @rec = 0;
          SET @class = '';
          
          SELECT c.`class_code`, COUNT(a.`id`) INTO @class, @rec
          FROM `ww_approver_class_user` a
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE a.`user_id`=userid AND c.`class_code`='PPA'
          AND a.deleted = 0;
          
          IF @rec > 0 THEN
             INSERT INTO `ww_performance_planning_approver`
             (`planning_id`, `appraisee_id`, `user_id`, `approver_id`, `condition`, `sequence`, `performance_status_id`)
             SELECT planningid, appraiseeid, userid, `approver_id`, `condition`, `sequence`, 0
             FROM `ww_approver_class_user` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`approver_id`<>userid
             AND a.user_id = userid
             GROUP BY 3
             ON DUPLICATE KEY UPDATE `deleted`=0;             
          ELSE     
          -- 
          -- [1] Override from POSITION
          -- 
          SET @rec = 0;
          SET @class = '';
          SET @positions = '';
          
          SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`) INTO @class, @positions, @rec
          FROM `ww_approver_class_position` a
          JOIN `users_profile` b ON b.position_id = a.`position_id` AND b.`company_id`=a.`company_id`
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE b.`user_id`=userid AND c.`class_code`='PPA' AND a.deleted = 0;
          
          IF @rec > 0 THEN
             INSERT INTO `ww_performance_planning_approver`
             (`planning_id`, `appraisee_id`, `user_id`, `approver_id`, `condition`, `sequence`, `performance_status_id`)
             SELECT planningid, appraiseeid, userid, `approver_id`, `condition`, `sequence`, 0
             FROM `ww_approver_class_position` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
             JOIN `users_profile` e ON e.position_id = a.`position_id` AND e.`user_id`=userid
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`position_id`=@positions AND a.`approver_id`<>userid
             AND a.department_id = e.department_id AND a.company_id = e.company_id
             GROUP BY 3
             ON DUPLICATE KEY UPDATE `deleted`=0;             
          ELSE     
                    
             -- [2] Override from DEPARTMENT
             -- 
             SET @rec = 0;
             SET @class = '';
             SET @department = '';
          
             SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`) INTO @class, @department, @rec
             FROM `ww_approver_class_department` a
             JOIN `users_profile` b ON b.department_id = a.`department_id` AND b.`company_id`=a.`company_id`
             JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
             WHERE b.`user_id`=userid AND c.`class_code`='PPA' AND a.`approver_id`<>userid AND a.deleted = 0;
          
             IF @rec > 0 THEN
                INSERT INTO `ww_performance_planning_approver`
		(`planning_id`, `appraisee_id`, `user_id`, `approver_id`, `condition`, `sequence`, `performance_status_id`)
		SELECT planningid, appraiseeid, userid, `approver_id`, `condition`, `sequence`, 0
                FROM `ww_approver_class_department` a
                JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
		JOIN `users_profile` e ON e.department_id = a.`department_id` AND e.`user_id`=userid
                WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`department_id`=@department AND a.`approver_id`<>userid
                AND a.company_id = e.company_id 
                GROUP BY 3
                ON DUPLICATE KEY UPDATE `deleted`=0;             
             ELSE
                --   
                -- [3] Override from COMPANY
                -- 
                SET @rec = 0;
                SET @class = '';
                SET @company = '';
          
                SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`) INTO @class, @company, @rec
                FROM `ww_approver_class_company` a
                JOIN `users_profile` b ON b.company_id = a.`company_id`
                JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
                WHERE b.`user_id`=userid AND c.`class_code`='PPA' AND a.deleted = 0;
          
                IF @rec > 0 THEN
                   INSERT INTO `ww_performance_planning_approver`
		   (`planning_id`, `appraisee_id`, `user_id`, `approver_id`, `condition`, `sequence`, `performance_status_id`)
                   SELECT planningid, appraiseeid, userid, `approver_id`, `condition`, `sequence`, 0
                   FROM `ww_approver_class_company` a
                   JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                   WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`company_id`=@company AND a.`approver_id`<>userid
                   GROUP BY 3
                   ON DUPLICATE KEY UPDATE `deleted`=0;             
                END IF; -- IF COMPANY
             
             END IF; -- IF DEPARTMENT
             
          END IF; -- IF POSITION        
             
          END IF; -- IF USER            
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_play_redeemed` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_play_redeemed` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_play_redeemed`(IN userid INT(11), IN itemid INT(11))
BEGIN
    
    -- [1] Transaction
	INSERT INTO ww_play_partner_redeemed
	(user_id, item_id, points)
	SELECT userid, item_id, points
	FROM ww_play_redeemable 
	WHERE item_id = itemid LIMIT 1;
    
    -- [2] Summary Points
    SET @rec = 0;
    SELECT user_id INTO @rec 
    FROM ww_play_partner_points LIMIT 1;
    
    IF @rec = 0 THEN
       INSERT INTO ww_play_partner_points
       (user_id, used_points, redeemed)
	   SELECT userid, points, 1
	   FROM ww_play_redeemable WHERE item_id = itemid LIMIT 1;
	ELSE
	   UPDATE ww_play_partner_points pp, ww_play_redeemable pr
	   SET pp.used_points = pp.used_points + pr.points,
	       pp.redeemed = pp.redeemed + 1
	   WHERE pp.user_id = @rec AND pr.item_id = itemid;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_recruitment_manpower_plan_approval` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_recruitment_manpower_plan_approval` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_recruitment_manpower_plan_approval`(IN planid INT, IN statusid INT, IN approverid int)
BEGIN
   -- [1]
   UPDATE `ww_recruitment_manpower_plan_approver`
   SET
      `plan_status_id` = statusid
   WHERE 
      `plan_id` = planid AND 
      `approver_id` = approverid AND
      `deleted` = 0
   LIMIT 1;
             
   -- set next approver
   IF statusid = 3 THEN
      SET @seq = (SELECT MAX(sequence) FROM `ww_recruitment_manpower_plan_approver` WHERE `plan_id`=planid AND `plan_status_id`=3 AND `deleted`=0)+1;
      UPDATE `ww_recruitment_manpower_plan_approver`
      SET `plan_status_id` = 2
      WHERE `plan_id` = planid AND `sequence` = @seq AND `deleted`=0 AND `condition` = 'By Level';
   END IF;
  
   -- [2] Update status by sequence to approver
   -- Change the status of the next approver
   -- 20150722 Only work on BY LEVEL
   
   -- 20150722 inlcude EITHER OF and ALL on approval condition
   -- [2.5] Check condition on approver   
   SET @conditions = '';
   
   SELECT `condition` INTO @conditions 
   FROM `ww_recruitment_manpower_plan_approver`
   WHERE 
      `plan_id` = planid AND 
      `approver_id` = approverid AND
      `deleted` = 0
   LIMIT 1;
   
   -- [3] Update status on header
   -- Check if all approver already approved
   IF(@conditions = 'Either Of') THEN
	   UPDATE `ww_recruitment_manpower_plan`
	   SET
	      `manpower_plan_status_id` = statusid,
	      `date_approved` = IF(statusid=3, NOW(), `date_approved`),
	      `date_declined` = IF(statusid=4, `date_declined`, NOW())
	   WHERE 
	      `plan_id` = planid 
	   LIMIT 1;
	   
	   CALL sp_recruitment_manpower_plan_transfer_position(planid);
   ELSE
	   SET @appCount    = 0;
	   SET @appApproved = 0;
	   SET @appDeclined = 0;
	   
	   SELECT COUNT(*), SUM(IF(`plan_status_id`=3,1,0)), SUM(IF(`plan_status_id`=4,1,0)) 
	   INTO @appCount, @appApproved, @appDeclined
	   FROM `ww_recruitment_manpower_plan_approver`
	   WHERE `plan_id`=planid;
	   
	   UPDATE `ww_recruitment_manpower_plan`
	   SET
	      `manpower_plan_status_id` = IF(@appCount=@appApproved, 3, IF(@appCount=@appDeclined, 4, IF(@appDeclined > 0, 4, IF(@appApproved > 0, 2, 2)))),
	      `date_approved` = IF(@appCount=@appApproved, NOW(), `date_approved`),
	      `date_declined` = IF(@appDeclined > 0, NOW(), `date_declined`)
	   WHERE 
	      `plan_id` = planid 
	   LIMIT 1;
	   
	   if @appCount=@appApproved then
		CALL sp_recruitment_manpower_plan_transfer_position(planid);
	   end if;
   END IF;
   SET @code_type = CASE
	WHEN statusid = 3 THEN 'approved'
	WHEN statusid = 4 THEN 'disapproved' 
	ELSE 'approved' 
	END;      
   -- [4] Push email 
   CALL sp_manpower_plan_email(planid,@code_type);
   -- 
   
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_recruitment_manpower_plan_pending_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_recruitment_manpower_plan_pending_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_recruitment_manpower_plan_pending_approvers`(IN user_ids VARCHAR(256), IN class_id INT(11))
BEGIN
    DECLARE done INT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE recruitmentRequests CURSOR FOR
       SELECT  amp.`plan_id`, amp.`user_id` FROM `ww_recruitment_manpower_plan` amp WHERE `deleted`=0
       AND FIND_IN_SET(user_id, user_ids) AND ( `status_id` < 3 AND status_id > 0);
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    -- START TRANSACTION;
    
    OPEN recruitmentRequests;
    
    REPEAT
       FETCH recruitmentRequests INTO recordid, userid;
       IF NOT done THEN
	   DELETE FROM ww_recruitment_manpower_plan_approver WHERE plan_id = recordid;
           -- CALL `sp_mrf_populate_approvers`(recordid, userid);
           CALL `sp_recruitment_manpower_plan_populate_approvers`(recordid, userid);
           UPDATE ww_recruitment_manpower_plan SET `status_id` = 2 WHERE plan_id = recordid;      
	   SET rec = rec + 1;
	   
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE recruitmentRequests;
    
    -- COMMIT;
    
    SELECT rec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_recruitment_manpower_plan_populate_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_recruitment_manpower_plan_populate_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_recruitment_manpower_plan_populate_approvers`(IN planid INT(11), IN userid INT(11))
BEGIN
	-- 
          -- [1] Override from POSITION
          -- 
          SET @rec = 0;
          SET @class = '';
          SET @positions = '';
          SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`) INTO @class, @positions, @rec
          FROM `ww_approver_class_user` a
          JOIN `users_profile` b ON b.position_id = a.`position_id` AND b.`company_id`=a.`company_id`
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE b.`user_id`=userid AND c.`class_code`='AMP';
          
          IF @rec > 0 THEN
             INSERT INTO `ww_recruitment_manpower_plan_approver`
             (`plan_id`, `user_id`, `approver_id`, `display_name`, `condition`, `sequence`, `plan_status_id`)
             SELECT planid, userid, `approver_id`, `alias`, `condition`, `sequence`, 2
             FROM `ww_approver_class_position` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
             JOIN `users_profile` e ON e.position_id = a.`position_id` AND e.`user_id`=userid
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`position_id`=@positions AND a.`approver_id`<>userid
             AND a.department_id = e.department_id AND a.company_id = e.company_id
             GROUP BY 3
             ON DUPLICATE KEY UPDATE `deleted`=0;             
          ELSE     
                    
             -- [2] Override from DEPARTMENT
             -- 
             SET @rec = 0;
             SET @class = '';
             SET @department = '';
          
             SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`) INTO @class, @department, @rec
             FROM `ww_approver_class_department` a
             JOIN `users_profile` b ON b.department_id = a.`department_id` AND b.`company_id`=a.`company_id`
             JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
             WHERE b.`user_id`=userid AND c.`class_code`='AMP' AND a.`approver_id`<>userid;
          
             IF @rec > 0 THEN
                INSERT INTO `ww_recruitment_manpower_plan_approver`
		(`plan_id`, `user_id`, `approver_id`, `display_name`, `condition`, `sequence`, `plan_status_id`)
		SELECT planid, userid, `approver_id`, `alias`, `condition`, `sequence`, 2
                FROM `ww_approver_class_department` a
                JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
		JOIN `users_profile` e ON e.department_id = a.`department_id` AND e.`user_id`=userid
                WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`department_id`=@department AND a.`approver_id`<>userid
                AND a.company_id = e.company_id 
                GROUP BY 3
                ON DUPLICATE KEY UPDATE `deleted`=0;             
             ELSE
                --   
                -- [3] Override from COMPANY
                -- 
                SET @rec = 0;
                SET @class = '';
                SET @company = '';
          
                SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`) INTO @class, @company, @rec
                FROM `ww_approver_class_company` a
                JOIN `users_profile` b ON b.company_id = a.`company_id`
                JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
                WHERE b.`user_id`=userid AND c.`class_code`='AMP';
          
                IF @rec > 0 THEN
                   INSERT INTO `ww_recruitment_manpower_plan_approver`
		   (`plan_id`, `user_id`, `approver_id`, `display_name`, `condition`, `sequence`, `plan_status_id`)
		   SELECT planid, userid, `approver_id`, `alias`, `condition`, `sequence`, 2
                   FROM `ww_approver_class_company` a
                   JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                   WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`company_id`=@company AND a.`approver_id`<>userid
                   GROUP BY 3
                   ON DUPLICATE KEY UPDATE `deleted`=0;             
                END IF; -- IF COMPANY
             
             END IF; -- IF DEPARTMENT
             
          END IF; -- IF POSITION 
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_recruitment_manpower_plan_transfer_position` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_recruitment_manpower_plan_transfer_position` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_recruitment_manpower_plan_transfer_position`(IN planid INT(11))
BEGIN
    
    SET @position = '';
    
    SELECT `position` into @position from `ww_recruitment_manpower_plan_position_new` where plan_id = planid;
    
    INSERT INTO `ww_users_position`
       ( `position` )
       SELECT 
          `position`
       FROM 
             `ww_recruitment_manpower_plan_position_new`
       WHERE 
              plan_id = planid;
    
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_recruitment_request_pending_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_recruitment_request_pending_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_recruitment_request_pending_approvers`(IN user_ids VARCHAR(256), IN class_id INT(11))
BEGIN
    DECLARE done INT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE recruitmentRequests CURSOR FOR
       SELECT  tr.`request_id`, tr.`user_id` FROM `ww_recruitment_request` tr WHERE `deleted`=0
       AND FIND_IN_SET(user_id, user_ids) AND ( `status_id` < 3 AND status_id > 0);
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    -- START TRANSACTION;
    
    OPEN recruitmentRequests;
    
    REPEAT
       FETCH recruitmentRequests INTO recordid, userid;
       IF NOT done THEN
	   DELETE FROM ww_recruitment_request_approver WHERE request_id = recordid;
           -- CALL `sp_mrf_populate_approvers`(recordid, userid);
           CALL `sp_recruitment_request_populate_approvers`(recordid, userid);
           UPDATE ww_recruitment_request SET `status_id` = 2 WHERE request_id = recordid;      
	   SET rec = rec + 1;
	   
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE recruitmentRequests;
    
    -- COMMIT;
    
    SELECT rec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_recruitment_request_populate_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_recruitment_request_populate_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_recruitment_request_populate_approvers`(IN requestid INT(11), IN userid INT(11))
BEGIN
	  -- 
          -- [0] Override from USER
          -- 
          
          SET @rec = 0;
          SET @class = '';
          
	  SELECT c.`class_code`, COUNT(a.`id`) INTO @class, @rec
          FROM `ww_approver_class_user` a
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE a.`user_id`=userid AND c.`class_code`='REC' AND a.deleted = 0;
          
          IF @rec > 0 THEN
             INSERT INTO `ww_recruitment_request_approver`
             (`request_id`, `user_id`, `approver_id`, `condition`, `sequence`, `status_id`)
             SELECT requestid, `userid`, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,1))
             FROM `ww_approver_class_user` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`approver_id`<>userid
             AND a.user_id = userid
             -- GROUP BY 2
             ON DUPLICATE KEY UPDATE `deleted`=0;             
          ELSE  
		  -- 
		  -- [1] Override from POSITION
		  -- 
		  SET @rec = 0;
		  SET @class = '';
		  SET @positions = '';
		  SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`) INTO @class, @positions, @rec
		  FROM `ww_approver_class_position` a
		  JOIN `users_profile` b ON b.position_id = a.`position_id` AND b.`company_id`=a.`company_id`
		  JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
		  WHERE b.`user_id`=userid AND c.`class_code`='REC';
		  
		  IF @rec > 0 THEN
		     INSERT INTO `ww_recruitment_request_approver`
		     (`request_id`, `user_id`, `approver_id`, `condition`, `sequence`, `status_id`)
		     SELECT requestid, userid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,1))
		     FROM `ww_approver_class_position` a
		     JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
		     JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
		     JOIN `users_profile` e ON e.position_id = a.`position_id` AND e.`user_id`=userid
		     WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`position_id`=@positions AND a.`approver_id`<>userid
		     AND a.department_id = e.department_id AND a.company_id = e.company_id
		     GROUP BY 3
		     ON DUPLICATE KEY UPDATE `deleted`=0;             
		  ELSE     
			    
		     -- [2] Override from DEPARTMENT
		     -- 
		     SET @rec = 0;
		     SET @class = '';
		     SET @department = '';
		  
		     SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`) INTO @class, @department, @rec
		     FROM `ww_approver_class_department` a
		     JOIN `users_profile` b ON b.department_id = a.`department_id` AND b.`company_id`=a.`company_id`
		     JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
		     WHERE b.`user_id`=userid AND c.`class_code`='REC' AND a.`approver_id`<>userid;
		  
		     IF @rec > 0 THEN
			INSERT INTO `ww_recruitment_request_approver`
			(`request_id`, `user_id`, `approver_id`, `condition`, `sequence`, `status_id`)
			SELECT requestid, userid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,1))
			FROM `ww_approver_class_department` a
			JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
			JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
			JOIN `users_profile` e ON e.department_id = a.`department_id` AND e.`user_id`=userid
			WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`department_id`=@department AND a.`approver_id`<>userid
			AND a.company_id = e.company_id 
			GROUP BY 3
			ON DUPLICATE KEY UPDATE `deleted`=0;             
		     ELSE
			--   
			-- [3] Override from COMPANY
			-- 
			SET @rec = 0;
			SET @class = '';
			SET @company = '';
		  
			SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`) INTO @class, @company, @rec
			FROM `ww_approver_class_company` a
			JOIN `users_profile` b ON b.company_id = a.`company_id`
			JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
			WHERE b.`user_id`=userid AND c.`class_code`='REC';
		  
			IF @rec > 0 THEN
			   INSERT INTO `ww_recruitment_request_approver`
			   (`request_id`, `user_id`, `approver_id`, `condition`, `sequence`, `status_id`)
			   SELECT requestid, userid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,1))
			   FROM `ww_approver_class_company` a
			   JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
			   WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`company_id`=@company AND a.`approver_id`<>userid
			   GROUP BY 3
			   ON DUPLICATE KEY UPDATE `deleted`=0;             
			END IF; -- IF COMPANY
		     
		     END IF; -- IF DEPARTMENT
             end if;  -- IF POSITION
          END IF; -- IF user 
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_resources_erequest_change_pending_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_resources_erequest_change_pending_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_resources_erequest_change_pending_approvers`(IN user_ids VARCHAR(256), IN class_id INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE erequests CURSOR FOR
       SELECT  tr.`request_id`, tr.`user_id` FROM `ww_resources_request` tr WHERE `deleted`=0
       AND FIND_IN_SET(user_id, user_ids) AND request_status_id IN (2,3,5);
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
    -- START TRANSACTION;
        
    OPEN erequests;
    
    REPEAT
       FETCH erequests INTO recordid, userid;
       
       IF NOT done THEN
	   DELETE FROM ww_resources_request_approver WHERE request_id = recordid;
           CALL `sp_resources_request_populate_approvers`(recordid, userid);
           UPDATE ww_resources_request SET request_status_id = 2 WHERE request_id = recordid;      
	   SET rec = rec + 1;
	   
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE erequests;
    
    -- COMMIT;
    
    SELECT rec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_resources_request_populate_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_resources_request_populate_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_resources_request_populate_approvers`(IN requestid INT(11), IN userid INT(11))
BEGIN
          -- 
          -- [1] Override from POSITION
          -- 
          SET @rec = 0;
          SET @class = '';
          SET @positions = '';
          
          SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`) INTO @class, @positions, @rec
          FROM `ww_approver_class_position` a
          JOIN `users_profile` b ON b.position_id = a.`position_id` AND b.`company_id`=a.`company_id` AND b.department_id=a.department_id
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          WHERE b.`user_id`=userid AND c.`class_code`= 'EREQ';
          
          IF @rec > 0 THEN
             INSERT INTO `ww_resources_request_approver`
             (`request_id`, `user_id`, `condition`, `sequence`, `request_status_id`)
             SELECT requestid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,3))
             FROM `ww_approver_class_position` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             JOIN `users_profile` u ON u.company_id=a.company_id AND u.department_id=a.department_id AND u.user_id=userid
             WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`position_id`=@positions AND a.`approver_id`<>userid
             GROUP BY 2
             ON DUPLICATE KEY UPDATE `deleted`=0;             
          ELSE     
                    
             -- [2] Override from DEPARTMENT
             -- 
             SET @rec = 0;
             SET @class = '';
             SET @department = '';
          
             SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`) INTO @class, @department, @rec
             FROM `ww_approver_class_department` a
             JOIN `users_profile` b ON b.department_id = a.`department_id` AND b.`company_id`=a.`company_id`
             JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
	     WHERE b.`user_id`=userid AND c.`class_code`= 'EREQ'
             AND a.`approver_id`<>userid;
          
             IF @rec > 0 THEN
                INSERT INTO `ww_resources_request_approver`
                (`request_id`, `user_id`, `condition`, `sequence`, `request_status_id`)
                SELECT requestid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,3))
                FROM `ww_approver_class_department` a
                JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
                WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`department_id`=@department AND a.`approver_id`<>userid
                GROUP BY 2
                ON DUPLICATE KEY UPDATE `request_status_id`=VALUES(`request_status_id`), `sequence`=VALUES(`sequence`), `deleted`=0;             
             ELSE
                --   
                -- [3] Override from COMPANY
                -- 
                SET @rec = 0;
                SET @class = '';
                SET @company = '';
          
                SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`) INTO @class, @company, @rec
                FROM `ww_approver_class_company` a
                JOIN `users_profile` b ON b.company_id = a.`company_id`
                JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
	        WHERE b.`user_id`=userid AND c.`class_code`= 'EREQ'
                AND a.`approver_id`<>userid;
          
                IF @rec > 0 THEN
                   INSERT INTO `ww_resources_request_approver`
                   (`request_id`, `user_id`, `condition`, `sequence`, `request_status_id`)
                   SELECT requestid, `approver_id`, `condition`, `sequence`, IF(@rec=1,2,IF(`sequence`=1,2,3))
                   FROM `ww_approver_class_company` a
                   JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                   WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`company_id`=@company AND a.`approver_id`<>userid
                   GROUP BY 2
                   ON DUPLICATE KEY UPDATE `deleted`=0;             
                END IF; -- IF COMPANY
             
             END IF; -- IF DEPARTMENT
             
          END IF; -- IF POSITION          
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_system_support_email` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_system_support_email` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_system_support_email`(IN msgid INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE msgcode   VARCHAR(64);
    DECLARE msgbody   TEXT;
    DECLARE createdon DATETIME;
    DECLARE fattach   VARCHAR(128);
    DECLARE fupload   VARCHAR(128);
    DECLARE email     VARCHAR(128);
    DECLARE sender    VARCHAR(128);
    
    DECLARE supportbox CURSOR FOR
       SELECT ss.msg_code, ss.msg, ss.created_on, ss.attachment, ss.upload,
              u.email, IFNULL(up.firstname,up.lastname)sender
       FROM `ww_system_support` ss
       INNER JOIN `users` u ON u.user_id=ss.user_id
       INNER JOIN `users_profile` up ON up.user_id=ss.user_id
       WHERE ss.`msg_id`=msgid AND IFNULL(u.`email`,'')<>'';
    
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    
    OPEN supportbox;
    
    REPEAT
       FETCH supportbox INTO msgcode, msgbody, createdon, fattach, fupload, email, sender;
       
       IF NOT done THEN
           SET rec = rec + 1;
           
           -- {{retrieve the email template}}
           SET @emailto = email;
           SET @emailbcc = 'rdlozada@teemworx.com';
           SET @emailsubject = '';
           SET @emailbody = '';
       
           SELECT `subject`,`body` INTO @emailsubject, @emailbody
           FROM `ww_system_template`
           WHERE `code` = 'SUPPORT-BOX-ACKNOWLEDGE' LIMIT 1;
           
           IF @emailsubject <> '' THEN
              -- {{replace variables}}
              SET @emailbody = REPLACE(@emailbody, '{{alias}}', sender);
              SET @emailbody = REPLACE(@emailbody, '{{createdon}}', DATE_FORMAT(createdon, '%b-%e %l:%i%p'));
              
              -- {{link}}
              SET @url = get_config('System','URL');
	          IF RIGHT(TRIM(@url),1) <> '/' THEN
	             SET @url = CONCAT(TRIM(@url),'/');
	          END IF;
	   
              -- {{header/email logo}}
              SET @logo = get_config('System','print_logo'); 
	          IF TRIM(@logo) <> '' THEN
	             SET @logo = CONCAT(@url,@logo);
	          ELSE
	             SET @logo = CONCAT(@url,get_config('System','logo'));
	          END IF;
	   	         
              SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
              SET @system_fromaddress = (SELECT `value` FROM `ww_config` WHERE `key`='from_address' LIMIT  1);
              SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
              SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
              SET @emailbody = REPLACE(@emailbody, '{{system_route}}', @url);
              SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
               
              -- {{insert to table}}
              IF TRIM(@emailbody) <> '' THEN
                 INSERT INTO `ww_system_email_queue` (`to`,`bcc`,`subject`,`body`)
                 SELECT @emailto, @emailbcc, @emailsubject, @emailbody;
              END IF;
              
              -- SELECT @emailto, @emailsubject, @emailbody;
              
              -- {{retrieve the email template}}
              SET @emailto = @system_fromaddress;
              SET @emailcc = 'rdlozada@teemworx.com';
              SET @emailsubject = '';
              SET @emailbody = '';
       
              SELECT `subject`,`body` INTO @emailsubject, @emailbody
              FROM `ww_system_template`
              WHERE `code` = 'SUPPORT-BOX-ADMIN' LIMIT 1;
           
              IF @emailsubject <> '' THEN
                 -- {{insert to table}}
                 IF TRIM(@emailbody) <> '' THEN
                    SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
                    SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
                    SET @emailbody = REPLACE(@emailbody, '{{system_route}}', @url);
                    SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
                    
                    SET @emailbody = REPLACE(@emailbody, '{{createdon}}', DATE_FORMAT(createdon, '%b-%e %l:%i%p'));
                    SET @emailbody = REPLACE(@emailbody, '{{file_screenshot}}', CONCAT('<a target="_blank" href="',@url,fattach,'">',fattach,'</a>'));
                    SET @emailbody = REPLACE(@emailbody, '{{file_attach}}', CONCAT('<a target="_blank" href="',@url,fupload,'">',fupload,'</a>'));
                    
                    INSERT INTO `ww_system_email_queue` (`to`,`cc`,`subject`,`body`)
                    SELECT @emailto, @emailcc, @emailsubject, @emailbody;
                 END IF;
              END IF;
              
           END IF;
        END IF;
        
    UNTIL done END REPEAT;
    
    CLOSE supportbox;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_calendar` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_calendar` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_calendar`(IN datefrom DATE, IN dateto DATE, IN userid INTEGER(11))
BEGIN
    
    -- [1] Work Schedule
    SELECT 
       ts.`shift` `title`, 
       IF(ts.`shift`='Restday', '#bcb8b8', '#4b8df8')  `color`, 
       IF(ts.`shift`='Restday', TRUE, FALSE) `allday`,
       UNIX_TIMESTAMP(CONCAT(`date`,' ',IF(IFNULL(ts.time_start,'00:00:00')='00:00:00', '12:00:00', ts.time_start))) `start`,
       UNIX_TIMESTAMP(CONCAT(`date`,' ',IF(IFNULL(ts.time_end,'00:00:00')='00:00:00', '12:00:00', ts.time_end))) `end`,
       tr.`user_id`, 
       FALSE `editable`, 'SCHEDULE' `type`, 0 `forms_id`, 0 `form_id`, '' reason
    FROM `time_record` tr
    LEFT JOIN `time_shift` ts ON ts.shift_id = IF(IFNULL(tr.aux_shift_id,0)=0, tr.shift_id, tr.aux_shift_id)
    WHERE tr.`user_id`=userid AND (`date` BETWEEN datefrom AND dateto)
    
    -- 
    -- [2] Holidays
    UNION ALL
    SELECT 
       `holiday` `title`, '#ea6734' `color`, TRUE `allday`,
       UNIX_TIMESTAMP(CONCAT(`holiday_date`,' 12:00:00')) `start`,
       UNIX_TIMESTAMP(CONCAT(`holiday_date`,' 12:00:00')) `end`,
       IFNULL(`ww_time_holiday_location`.user_id,0) `user_id`, FALSE `editable`,	
       'HOLIDAYS' `type`, 0 `forms_id`, 0 `form_id`, '' reason
    FROM `time_holiday` 
    LEFT JOIN `ww_time_holiday_location` ON 
       `ww_time_holiday_location`.holiday_id=`time_holiday`.holiday_id AND 
       IF(`time_holiday`.legal=1,0,IF(`time_holiday`.location_count=0,1,`ww_time_holiday_location`.user_id=userid))
    WHERE (`holiday_date` BETWEEN datefrom AND dateto)
    
    -- 
    -- [3] Birthdays
    UNION ALL
    SELECT 
       'It\'s your Birthday' `title`, '#a13cb4' color, TRUE `allday`,
       UNIX_TIMESTAMP(DATE_ADD(CONCAT(`up`.`birth_date`,' 12:00:00'), INTERVAL YEAR(NOW())-YEAR(`up`.`birth_date`) YEAR)) `start`, 
       UNIX_TIMESTAMP(DATE_ADD(CONCAT(`up`.`birth_date`,' 12:00:00'), INTERVAL YEAR(NOW())-YEAR(`up`.`birth_date`) YEAR)) `end`, 
       `u`.user_id, 
       FALSE editable, 'BIRTHDAY' `type`, 0 `forms_id`, 0 `form_id`, '' reason
    FROM `users` `u`
    INNER JOIN `users_profile` `up` ON `up`.user_id=`u`.user_id
    WHERE `u`.`user_id` = userid AND 
    (
       CASE WHEN MONTH(datefrom)=12 THEN 
          ( MONTH(`up`.`birth_date`)=12 OR MONTH(`up`.`birth_date`) BETWEEN 1 AND MONTH(dateto) )
       ELSE 
          ( MONTH(`up`.`birth_date`) BETWEEN MONTH(datefrom) AND MONTH(dateto) )
       END
    )
    
    -- 
    -- [4] Forms
    UNION ALL
    SELECT 
       IF(tf.`form_code` = 'ADDL', 'CL', tf.`form_code` ) `title`,
       -- IF(`form_status_id`=6,'#35aa47',IF(`form_status_id`= 8,'#969696','#ed9090')) `color`, 
       IFNULL(tfs.`color`,'#ffffff') `color`,
       FALSE `allday`,
       UNIX_TIMESTAMP(CONCAT(tfd.`date`,' 12:00:00')) `start`,
       UNIX_TIMESTAMP(CONCAT(tfd.`date`,' 12:00:00')) `end`,
       tf.`user_id`, 
       TRUE `editable`, 'FORM' `type`, tf.`forms_id`, tf.`form_id`, '' reason       
    FROM `time_forms` tf
    INNER JOIN `time_forms_date` tfd ON tfd.`forms_id`=tf.`forms_id`
    LEFT JOIN `ww_time_form_status` tfs ON tfs.`form_status_id`=tf.`form_status_id`
    WHERE tf.`user_id`=userid AND (`date_from` BETWEEN datefrom AND dateto)
    ;
    
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_calendar_manager` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_calendar_manager` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_calendar_manager`(IN datefrom DATE, IN dateto DATE, IN userid INTEGER(11))
BEGIN
    
    SET @role = 0;
    SELECT role_id INTO @role FROM users WHERE user_id = userid LIMIT 1;
    
    -- [1] Work Group Schedule 
    SELECT 
       ts.`shift` `title`, IF(ts.`shift`='Restday', '#bcb8b8', '#4b8df8') color, TRUE `allday`,
       UNIX_TIMESTAMP(CONCAT(`date`,' 12:00:00')) `start`,
       UNIX_TIMESTAMP(CONCAT(`date`,' 12:00:00')) `end`,
       userid `user_id`, FALSE editable, 'SCHEDULE' `type`, 0 `forms_id`, ts.`shift_id` `form_id`, '' reason
    FROM `time_record` tr
    INNER JOIN `time_shift` ts ON ts.shift_id = IF(IFNULL(tr.aux_shift_id,0)=0, tr.shift_id, tr.aux_shift_id)
    INNER JOIN `users_profile` up ON up.`user_id`=tr.`user_id` AND 
       (IF(@role IN (1,2,6), userid=tr.`modified_by`, up.`reports_to_id`=userid) OR up.`reports_to_id`=userid)
    WHERE tr.`date` BETWEEN datefrom AND dateto
    GROUP BY tr.`date`, ts.`shift_id`
    -- 
    -- [2] Holidays
    UNION ALL
    SELECT 
       `holiday` `title`, '#ea6734' `color`, TRUE `allday`,
       UNIX_TIMESTAMP(CONCAT(`holiday_date`,' 12:00:00')) `start`,
       UNIX_TIMESTAMP(CONCAT(`holiday_date`,' 12:00:00')) `end`,
       IFNULL(`ww_time_holiday_location`.user_id,0) `user_id`, FALSE `editable`, 'HOLIDAYS' `type`, 0 `forms_id`, 0 `form_id`, '' reason
    FROM `time_holiday` 
    LEFT JOIN `ww_time_holiday_location` ON 
       `ww_time_holiday_location`.holiday_id=`time_holiday`.holiday_id AND 
       IF(`time_holiday`.legal=1,0,IF(`time_holiday`.location_count=0,1,`ww_time_holiday_location`.user_id=userid))
    WHERE (`holiday_date` BETWEEN datefrom AND dateto)
    -- 
    -- [3] Birthdays
    UNION ALL
    SELECT 
       'It\'s your Birthday' `title`, '#a13cb4' color, TRUE `allday`,
       UNIX_TIMESTAMP(DATE_ADD(CONCAT(`up`.`birth_date`,' 12:00:00'), INTERVAL YEAR(NOW())-YEAR(`up`.`birth_date`) YEAR)) `start`, 
       UNIX_TIMESTAMP(DATE_ADD(CONCAT(`up`.`birth_date`,' 12:00:00'), INTERVAL YEAR(NOW())-YEAR(`up`.`birth_date`) YEAR)) `end`, 
       `u`.user_id, FALSE editable, 'BIRTHDAY' `type`, 0 `forms_id`, 0 `form_id`, '' reason
       
    FROM `users` `u`
    INNER JOIN `users_profile` `up` ON `up`.user_id=`u`.user_id
    WHERE `u`.`user_id` = userid AND
    (
       CASE WHEN MONTH(datefrom)=12 THEN 
          ( MONTH(`up`.`birth_date`)=12 OR MONTH(`up`.`birth_date`) BETWEEN 1 AND MONTH(dateto) )
       ELSE 
          ( MONTH(`up`.`birth_date`) BETWEEN MONTH(datefrom) AND MONTH(dateto) )
       END
    )
    ;
    
    
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_calendar_manager_insert` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_calendar_manager_insert` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_calendar_manager_insert`(IN userid INT(11), IN dates DATE, IN shiftid INT(1))
BEGIN
    
    /* force creation of a record on ww_time_record */
    -- CALL sp_time_period_populate_user(dates,dates,userid);
    
    -- [1] This will perform update
    INSERT INTO `time_record` (`user_id`, `date`, `aux_shift_id`)
    SELECT userid, dates, shiftid
    ON DUPLICATE KEY UPDATE `aux_shift_id` = shiftid;
    
    
    -- [2] update raw 
    CALL sp_time_record_raw_reupload (userid, dates);
    
    /* need to filter via immediate id */
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_calendar_manager_insert_weekly` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_calendar_manager_insert_weekly` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_calendar_manager_insert_weekly`(IN userid INT(11), IN dates DATE, IN calendarid INT(1))
BEGIN
    /* 2017-03-21 : Added checking of forms application
                  : Re-upload of time-record-raw
    */
    
    -- [01] force creation of a record on ww_time_record 
    -- CALL sp_time_period_populate_user(dates,dates,userid);
    -- ?
    
    -- [02] force update timein, timeout if there are filed application
    -- ?
    
    
    -- [03] this will perform update
    INSERT INTO `ww_time_record` (`user_id`, `date`, `aux_shift_id`)
    SELECT userid, dates, tswc.`shift_id`
    FROM `ww_time_shift_weekly_calendar` tswc 
    WHERE tswc.`calendar_id`=calendarid AND tswc.`week_name`=DAYNAME(dates)
    ON DUPLICATE KEY UPDATE `aux_shift_id` = tswc.`shift_id`, `modified_on`=NOW();
    
    
    -- [04] update raw 
    CALL sp_time_record_raw_reupload (userid, dates);
    
    /* need to filter via immediate id */
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_calendar_manager_list` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_calendar_manager_list` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_calendar_manager_list`(IN immediateid INT(11), IN dates DATE, IN shiftid INT(1), IN role INT(11))
BEGIN
    
    /**
    - ORIGINAL SCRIPT
    
    SELECT tr.user_id, u.`display_name`, p.`id_number`, tr.shift_id, tr.shift
    FROM `time_record` tr, `users` u, `partners` p
    WHERE 
       tr.`user_id` = u.`user_id` AND
       u.`user_id` = p.`user_id` AND
       u.`can_view` = 1 AND
       tr.`date`=dates AND 
       tr.`shift_id`=shiftid
    ORDER BY u.`display_name`
    LIMIT 30;
    
    -- need to filter via immediate id */
    
    -- just a quick fix to override current query script
    -- and to enable admin data access	
    
    -- 2 is HR Administrator
    -- 6 is HR Timekeeper
    
	SELECT 
		tr.`user_id`, 
		u.`display_name`,
		p.`id_number`,
		ts.shift_id,
		ts.shift
		
	FROM ww_time_record tr 
	INNER JOIN ww_time_shift ts ON IF(IFNULL(tr.`aux_shift_id`,0)=0,tr.`shift_id`,tr.`aux_shift_id`)=ts.shift_id
	LEFT JOIN ww_users u ON u.`user_id` = tr.`user_id`  
	LEFT JOIN ww_partners p ON p.`user_id` = u.`user_id` 
	LEFT JOIN ww_users_profile up ON up.`user_id` = tr.`user_id` 
	WHERE 
	       tr.`user_id` = u.`user_id` AND 
	       u.`user_id` = p.`user_id` AND 
	       u.`can_view` = 1 AND 
	       tr.`date`= dates AND  
	       IF(IFNULL(tr.`aux_shift_id`,0)=0,tr.`shift_id`,tr.`aux_shift_id`)= shiftid AND 
	       
	       -- REMOVE IMMEDIATE SUPERVISOR FILTERING
	       -- ON ROLES WITHIN HR ADMIN AND HR TIMEKEEPER
	       -- AND up.`reports_to_id` = immediateid 
               
	       IF(u.role_id IN ('1','6','24'), 1, (up.`reports_to_id`=immediateid OR up.`coordinator_id`=immediateid) ) 
	       
	ORDER BY u.`display_name`;
   
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_approval` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_approval` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_approval`(IN formsid INT, IN userid INT, IN statusid INT, IN usercomment TEXT)
BEGIN
   /* This will insert records to ww_time_record and executed thru events
      PARAMETER:
         statusid : 1=APPROVED, 0=DECLINE
      LAST Change: 2014-04-11 initial
                   2014-04-11 
   */
   -- [1]
   UPDATE `ww_time_forms_approver`
   SET
      `comment`        = usercomment,
      `comment_date`   = NOW(),
      `form_status_id` = IF(statusid = 1, 6, 7)
   WHERE 
      `forms_id` = formsid AND 
      `user_id` = userid AND
      `deleted` = 0
   LIMIT 1;
             
   -- set next approver
   IF statusid = 1 THEN
      SET @seq = (SELECT MAX(sequence) FROM `ww_time_forms_approver` WHERE `forms_id`=formsid AND `form_status_id`=6 AND `deleted`=0)+1;
      UPDATE `ww_time_forms_approver`
      SET `form_status_id` = 2
      WHERE `forms_id` = formsid AND `sequence` = @seq AND `deleted`=0 AND `condition` = 'By Level';
   END IF;
  
   -- [2] Update status by sequence to approver
   -- Change the status of the next approver
   -- 20150722 Only work on BY LEVEL
   
   -- 20150722 inlcude EITHER OF and ALL on approval condition
   -- [2.5] Check condition on approver   
   SET @conditions = '';
   
   SELECT `condition` INTO @conditions 
   FROM `ww_time_forms_approver`
   WHERE 
      `forms_id` = formsid AND 
      `user_id` = userid AND
      `deleted` = 0
   LIMIT 1;
   
   -- [3] Update status on header
   -- Check if all approver already approved
   IF(@conditions = 'Either Of') THEN
	   UPDATE `time_forms`
	   SET
	      `form_status_id` = IF(statusid=1, 6, 7),
	      `date_approved` = IF(statusid=1, NOW(), `date_approved`),
	      `date_declined` = IF(statusid=1, `date_declined`, NOW())
	   WHERE 
	      `forms_id` = formsid 
	   LIMIT 1;
	   
	   -- [1]
	   UPDATE `ww_time_forms_approver`
	   SET
	      `comment`        = usercomment,
	      `comment_date`   = NOW(),
	      `form_status_id` = IF(statusid = 1, 6, 7)
	   WHERE 
	      `forms_id` = formsid AND 
	      `deleted` = 0
	   LIMIT 1;
   
   ELSE
	   SET @appCount    = 0;
	   SET @appApproved = 0;
	   SET @appDeclined = 0;
	   
	   SELECT COUNT(*), SUM(IF(`form_status_id`=6,1,0)), SUM(IF(`form_status_id`=7,1,0)) 
	   INTO @appCount, @appApproved, @appDeclined
	   FROM `ww_time_forms_approver`
	   WHERE `forms_id`=formsid;
	   
	   UPDATE `time_forms`
	   SET
	      `form_status_id` = IF(@appCount=@appApproved, 6, IF(@appCount=@appDeclined, 7, IF(@appDeclined > 0, 7, IF(@appApproved > 0, 3, `form_status_id`)))),
	      `date_approved` = IF(@appCount=@appApproved, NOW(), `date_approved`),
	      `date_declined` = IF(@appDeclined > 0, NOW(), `date_declined`)
	   WHERE 
	      `forms_id` = formsid
	   LIMIT 1;	      
   END IF;
      
   
   -- [4] Push email 
   IF (@appCount = @appApproved) OR (@appDeclined > 0) THEN
      CALL sp_time_forms_email_status(formsid);
   ELSE
      CALL sp_time_forms_email(formsid);
   END IF;
   -- 
   
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_approval_admin` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_approval_admin` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_approval_admin`(IN formsid INT, IN userid INT, IN statusid INT, IN usercomment TEXT)
BEGIN
   /* This will insert records to ww_time_record and executed thru events
      PARAMETER:
         statusid : 1=APPROVED, 0=DECLINE
      LAST Change: 2014-04-11 initial
                   2014-04-11 
   */
   
   -- [1]
   UPDATE `ww_time_forms_approver`
   SET
      `comment`        = usercomment,
      `comment_date`   = NOW(),
      `form_status_id` = IF(statusid = 1, 6, IF(statusid = 0, 7, 8))
   WHERE 
      `forms_id` = formsid AND 
      `deleted` = 0
   LIMIT 1;
   
  
   -- [2] Update status by sequence to approver
   IF statusid = 1 THEN
      SET @seq = (SELECT MAX(sequence) FROM `ww_time_forms_approver` WHERE `forms_id`=formsid AND `form_status_id`=6 AND `deleted`=0)+1;
      UPDATE `ww_time_forms_approver`
      SET `form_status_id` = 2
      WHERE `forms_id` = formsid AND `sequence` = @seq AND `deleted`=0;
   END IF;
   
   
   -- Change the status of the next approver
   -- 
   
   -- [3] Update status on header
   -- Check if all approver already approved
   SET @appCount    = 0;
   SET @appApproved = 0;
   SET @appDeclined = 0;
   SET @appCancelled = 0;
   
   SELECT COUNT(*), SUM(IF(`form_status_id`=6,1,0)), SUM(IF(`form_status_id`=7,1,0)), SUM(IF(`form_status_id`=8,1,0)) 
   INTO @appCount, @appApproved, @appDeclined, @appCancelled
   FROM `ww_time_forms_approver`
   WHERE `forms_id`=formsid;
   
   UPDATE `time_forms`
   SET
      `form_status_id` = IF(@appCount=@appApproved, 6, IF(@appCount=@appDeclined, 7,IF(@appCount=@appCancelled, 8, IF(@appDeclined > 0, 7, IF(@appCancelled > 0, 8, IF(@appApproved > 0, 3, `form_status_id`))))))
   WHERE 
      `forms_id` = formsid 
   LIMIT 1;
      
   
   -- [4] Push email 
   CALL sp_time_forms_email(formsid);
   -- 
   
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_aux_shift` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_aux_shift` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_aux_shift`(IN formcode VARCHAR(8), IN userid INT(11), IN formsid INT(11))
BEGIN
   -- [1]
   IF (formcode = 'SL') OR (formcode = 'VL') OR
      (formcode = 'EL') OR (formcode = 'FL') OR
      (formcode = 'LIP') OR (formcode = 'HL') OR
      (formcode = 'ML') OR (formcode = 'PL') OR 
      (formcode = 'LWOP') OR (formcode = 'BL') OR 
      (formcode = 'SLW') OR (formcode = 'SPL') OR (formcode = 'VVL')  OR
      (formcode = 'ADDL') OR (formcode = 'FLV')
       THEN 
      -- [1.1] Priority 1
      
      SET @shift_exist = 0;
      SELECT tfd.`id` INTO @shift_exist
      FROM `time_forms_date` tfd, `time_record` tr 
      WHERE 
         tr.`date` = tfd.`date` AND
         tfd.`forms_id` = formsid AND
         tr.`user_id` = userid 
      ORDER BY tfd.`date` DESC LIMIT 1;
         
      IF (@shift_exist = 0 OR @shift_exist = '') THEN      
         SET @dfrom = '';
         SET @dto = '';
         
         SELECT date_from, date_to INTO @dfrom, @dto
         FROM `ww_time_forms`
         WHERE 
            `forms_id` = formsid;
         
         CALL sp_time_period_populate_user(@dfrom, @dto, userid);
      END IF;
            
      UPDATE `time_forms_date` tfd, `time_record` tr, `ww_time_shift` ts, `ww_time_duration` td, ww_time_forms tf
      SET 
         tfd.`time_from` = IF(tfd.`duration_id`=1, 
                              CONCAT(tfd.`date`,' ',ts.`time_start`), 
                              IF(tfd.`duration_id`=2, 
                                 CONCAT(tfd.`date`,' ',ts.`time_start`), 
                                 CONCAT(tfd.`date`,' ',ts.`time_end`) - INTERVAL td.`credit` HOUR)),
                                 
         tfd.`time_to` = IF(tfd.`duration_id`=1, 
                            CONCAT(tfd.`date`,' ', ts.`time_end`), 
                            IF(tfd.`duration_id`=3, 
                               CONCAT(tfd.`date`,' ',ts.`time_end`), 
                               CONCAT(tfd.`date`,' ',ts.`time_start`) + INTERVAL td.`credit` HOUR)),
                               
         tr.`aux_time_in` = IF(IFNULL(tr.`aux_time_in`,'0000-00-00 00:00:00')='0000-00-00 00:00:00', 
                               IF(tfd.`duration_id`=1, 
                                  CONCAT(tfd.`date`,' ',ts.`time_start`), 
                                  IF(tfd.`duration_id`=2, 
                                     CONCAT(tfd.`date`,' ',ts.`time_start`), 
                                     CONCAT(tfd.`date`,' ',ts.`time_end`) - INTERVAL td.`credit` HOUR)),
            
                               IF(tr.`aux_time_in` > IF(tfd.`duration_id`=1, 
                                  CONCAT(tfd.`date`,' ',ts.`time_start`), 
                                  IF(tfd.`duration_id`=2, 
                                     CONCAT(tfd.`date`,' ',ts.`time_start`), 
                                     CONCAT(tfd.`date`,' ',ts.`time_end`) - INTERVAL td.`credit` HOUR)),
                                  IF(tfd.`duration_id`=1, 
                                     CONCAT(tfd.`date`,' ',ts.`time_start`), 
                                     IF(tfd.`duration_id`=2, 
                                        CONCAT(tfd.`date`,' ',ts.`time_start`), 
                                        CONCAT(tfd.`date`,' ',ts.`time_end`) - INTERVAL td.`credit` HOUR)),
                                  tr.`aux_time_in`
                               )
                            ),
                            
         tr.`aux_time_out` = IF(IFNULL(tr.`aux_time_out`,'0000-00-00 00:00:00')='0000-00-00 00:00:00', 
                                IF(tfd.`duration_id`=1, 
                                   CONCAT(tfd.`date`,' ',ts.`time_end`), 
                                   IF(tfd.`duration_id`=3, 
                                      CONCAT(tfd.`date`,' ',ts.`time_end`), 
                                      CONCAT(tfd.`date`,' ',ts.`time_start`) + INTERVAL td.`credit` HOUR)),
            
                                IF(tr.`aux_time_out` < IF(tfd.`duration_id`=1, 
                                   CONCAT(tfd.`date`,' ',ts.`time_end`), 
                                   IF(tfd.`duration_id`=3, 
                                      CONCAT(tfd.`date`,' ',ts.`time_end`), 
                                      CONCAT(tfd.`date`,' ',ts.`time_start`) + INTERVAL td.`credit` HOUR)),
                                   IF(tfd.`duration_id`=1, 
                                      CONCAT(tfd.`date`,' ',ts.`time_end`), 
                                      IF(tfd.`duration_id`=3, 
                                         CONCAT(tfd.`date`,' ',ts.`time_end`), 
                                         CONCAT(tfd.`date`,' ',ts.`time_start`) + INTERVAL td.`credit` HOUR)),
                                   tr.`aux_time_out`
                                )
                             ),
         tr.`modified_on` = NOW()
      WHERE 
         tr.`date` = tfd.`date` AND
         tfd.`forms_id` = formsid AND
         tr.`user_id` = userid AND
         tfd.`duration_id` = td.`duration_id` AND
         tfd.forms_id = tf.forms_id AND
         ts.`shift_id` = IF(IFNULL(tr.`aux_shift_id`,0)=0,tr.`shift_id`,tr.`aux_shift_id`) AND
         (tf.form_code != 'ADDL' OR (tf.form_code = 'ADDL' AND tf.type = 'Use'));
   END IF;
   
   
   -- [2]
   IF formcode = 'CWS' THEN 
      -- [1.2] Priority 2: If a leave 
      
      UPDATE `time_record` tr, `time_forms_date` tfd, `ww_time_shift` ts 
      SET tr.`aux_shift_id` = ts.`shift_id`,
          tr.`aux_shift` = ts.`shift`,
          tr.`modified_on` = NOW()
      WHERE tr.`date`=tfd.`date` AND tfd.`forms_id`=formsid AND tr.`user_id`=userid AND ts.`shift_id`=tfd.`shift_to`;
   END IF;
   
   
   -- [3]
   IF (formcode = 'OBT') OR (formcode = 'DTRP') OR (formcode = 'DTRU') THEN
      -- [1.3] Priority 3
      
      UPDATE `time_record` tr, `time_forms_date` tfd 
      SET 
         -- tr.`aux_time_in` = IF(IFNULL(`aux_time_in`,'0000-00-00 00:00:00')='0000-00-00 00:00:00', tfd.`time_from`, IF(`aux_time_in`>tfd.`time_from`, tfd.`time_from`, `aux_time_in`)), 
         -- tr.`aux_time_out` = IF(IFNULL(`aux_time_out`,'0000-00-00 00:00:00')='0000-00-00 00:00:00', tfd.`time_to`, IF(`aux_time_out`<tfd.`time_to`, tfd.`time_to`, `aux_time_out`))
         tr.`aux_time_in` = IF( IFNULL(tr.`aux_time_in`,'0000-00-00 00:00:00')='0000-00-00 00:00:00',
                                -- TRUE
                                tfd.`time_from`,
                                -- FALSE
                                IF( tr.`aux_time_in` > IFNULL(tfd.`time_from`,'0000-00-00 00:00:00'),
                                    -- TRUE
                                    IF( IFNULL(tfd.`time_from`,'0000-00-00 00:00:00') = '0000-00-00 00:00:00',
                                        -- TRUE
                                        tr.`aux_time_in`,
                                        -- FALSE
                                        IF( tr.`aux_time_in` > IFNULL(tfd.`time_from`,'0000-00-00 00:00:00'),
                                            -- TRUE
                                            tfd.`time_from`,
                                            -- FALSE
                                            tr.`aux_time_in`
                                        )
                                    ),
                                    -- FALSE
                                    tr.`aux_time_in`
                                )
                             ),
         tr.`aux_time_out` = IF( IFNULL(tr.`aux_time_out`,'0000-00-00 00:00:00')='0000-00-00 00:00:00',
                                 -- TRUE
                                 tfd.`time_to`,
                                 -- FALSE
                                 IF( tr.`aux_time_out` < IFNULL(tfd.`time_to`,'0000-00-00 00:00:00'),
                                     -- TRUE
                                     IF( IFNULL(tfd.`time_to`,'0000-00-00 00:00:00') = '0000-00-00 00:00:00',
                                         -- TRUE
                                         tr.`aux_time_out`,
                                         -- FALSE
                                         IF( tr.`aux_time_out` < IFNULL(tfd.`time_to`,'0000-00-00 00:00:00'),
                                             -- TRUE
                                             tfd.`time_to`,
                                             -- FALSE
                                             tr.`aux_time_out`
                                         )
                                     ),
                                     -- FALSE
                                     tr.`aux_time_out`
                                 )
                             ),
         tr.`modified_on` = NOW()                             
      WHERE tr.`date`=tfd.`date` AND tfd.`forms_id`=formsid AND tr.`user_id`=userid;
   END IF;  
 
       
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_change_pending_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_change_pending_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_change_pending_approvers`(IN user_ids VARCHAR(256), IN class_code VARCHAR(16))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE forms CURSOR FOR
       SELECT  tr.`forms_id`, tr.`user_id` FROM `time_forms` tr WHERE `deleted`=0
       AND FIND_IN_SET(user_id, user_ids) AND form_status_id IN (2,3,4,5) AND UPPER(form_code) = class_code;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
    -- START TRANSACTION;
        
    OPEN forms;
    
    REPEAT
       FETCH forms INTO recordid, userid;
       
       IF NOT done THEN
	   DELETE FROM ww_time_forms_approver WHERE forms_id = recordid;
           CALL `sp_time_forms_populate_approvers`(recordid, userid);
           UPDATE ww_time_forms SET form_status_id = 2 WHERE forms_id = recordid;      
	   SET rec = rec + 1;
	   
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE forms;
    
    -- COMMIT;
    
    SELECT rec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_email` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_email` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_email`(IN formsid INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    DECLARE timeformsid INT;
    DECLARE email VARCHAR(128);
    DECLARE approver VARCHAR(32);
    DECLARE classid INT;
    DECLARE ownerid INT;
    
    DECLARE approvers CURSOR FOR
       SELECT tfa.`id`, tfa.`user_id`, u.`email`, up.`firstname`, tfa.`forms_id`, appc.`class_id`, tfs.`user_id` ownid
       FROM `ww_time_forms_approver` tfa
       INNER JOIN `users` u ON u.user_id=tfa.user_id
       INNER JOIN `users_profile` up ON up.user_id=tfa.user_id
       INNER JOIN ww_time_forms tfs ON tfs.forms_id = tfa.forms_id
       INNER JOIN ww_approver_class appc ON UPPER(appc.`class_code`)= UPPER(tfs.`form_code`)
       WHERE tfa.`deleted`=0 AND tfa.`form_status_id`=2 AND tfa.`forms_id`=formsid AND IFNULL(u.`email`,'')<>'';
    
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    
    OPEN approvers;
    
    REPEAT
       FETCH approvers INTO recordid, userid, email, approver, timeformsid, classid, ownerid;
       
       IF NOT done THEN
           SET rec = rec + 1;
           
        --   IF time_get_approver_with_email(classid,ownerid,userid) = 1 THEN
              -- START
           
           -- [1] retrieve the application
           SET @formid = 0;
           SET @formcode = '';
           SET @formname = '';
           SET @displayname = '';
           SET @createdon = '';
           SET @inclusive = '';
           SET @days = '';
           SET @hrs = '';
           SET @reason = '';
           SET @userid = 0;
           SET @datefrom = 0;
           SET @isleave = 0;
           SET @duration = '';
           SET @companytovisit = '';
           SET @companylocation = '';
           SET @timefrom = '';
           SET @timeto = '';
           SET @shifta = '';
           SET @shiftb = '';
       
           SELECT `user_id`, `form_id`, `form_code`, `display_name`, `date_from`, 
                  IF(`date_from`=`date_to`, 
                  DATE_FORMAT(`date_from`, '%M-%e'), 
                  CONCAT(DATE_FORMAT(`date_from`, '%M-%e'), ' to ', DATE_FORMAT(`date_to`, '%M-%e %Y'))
                  ),
                  DATE_FORMAT(`created_on`, '%M-%e %l%p, %W'), 
                  IF(`day` = .5, 'Halfday', IF(`day`=1,'1 day',CONCAT(`day`,' days'))), `hrs`,
                  IFNULL(`reason`,'n/a')
           INTO @userid, @formid, @formcode, @displayname, @datefrom, @inclusive, @createdon, @days, @hrs, @reason
           FROM `time_forms`
           WHERE `forms_id`=timeformsid LIMIT 1;
           
           
           -- [2] retrieve the form 
           SELECT `form`, `is_leave` INTO @formname, @isleave
           FROM `ww_time_form` WHERE `form_id`=@formid LIMIT 1;
       
           
           -- [3] retrieve the email template
           SET @emailto = email;
           SET @emailsubject = '';
           SET @emailbody = '';
       
           SELECT `subject`,`body` INTO @emailsubject, @emailbody
           FROM `ww_system_template`
           WHERE `code` = @formcode LIMIT 1;
           
           
           
           IF @emailsubject <> '' THEN
              -- [2] replace variables
              SET @emailbody = REPLACE(@emailbody, '{{alias}}', approver);
              SET @emailbody = REPLACE(@emailbody, '{{fullname}}', @displayname);
              SET @emailbody = REPLACE(@emailbody, '{{form}}', @formname);
              SET @emailbody = REPLACE(@emailbody, '{{inclusive}}', @inclusive);
              SET @emailbody = REPLACE(@emailbody, '{{createdon}}', @createdon);
              SET @emailbody = REPLACE(@emailbody, '{{reason}}', @reason);
              
              IF @formcode = 'OT' THEN
                 SET @days = @hrs;
              END IF;
              SET @emailbody = REPLACE(@emailbody, '{{days}}', @days);
              
              IF TRIM(@formcode) = 'OBT' THEN
                 SELECT company_to_visit, location INTO @companytovisit, @companylocation 
                 FROM `ww_time_forms_obt` 
                 WHERE `forms_id`=timeformsid LIMIT 1;
                 SET @emailbody = REPLACE(@emailbody, '{{company_to_visit}}', @companytovisit);
                 SET @emailbody = REPLACE(@emailbody, '{{company_location}}', @companylocation);
              END IF;
              
              IF @formcode = 'DTRP' OR @formcode = 'RES' THEN -- DTRP
                 SELECT tfd.`time_from`, tfd.`time_to` INTO @timefrom, @timeto
                 FROM `time_forms_date` tfd
                 WHERE `forms_id`=timeformsid LIMIT 1;
                 
                 IF IFNULL(@timefrom,'0000-00-00 00:00:00')='0000-00-00 00:00:00' THEN
                    SET @emailbody = REPLACE(@emailbody, '{{current_shift}}', @timeto);
                 ELSE
                    SET @emailbody = REPLACE(@emailbody, '{{current_shift}}', @timefrom);
                 END IF;
              END IF;
              
              IF @formcode = 'CWS' THEN -- CWS
                 SELECT IFNULL(tsa.`shift`,''), IFNULL(tsb.`shift`,'') INTO @shifta, @shiftb 
                 FROM `time_forms_date` tfd
                 LEFT JOIN `ww_time_shift` tsa ON tsa.`shift_id`=tfd.`shift_id`
                 LEFT JOIN `ww_time_shift` tsb ON tsb.`shift_id`=tfd.`shift_to`
                 WHERE `forms_id`=timeformsid LIMIT 1;
                 SET @emailbody = REPLACE(@emailbody, '{{current_shift}}', @shifta);
                 SET @emailbody = REPLACE(@emailbody, '{{new_shift}}', @shiftb);
              END IF;
              
              IF @formcode = 'UT' THEN
                 SELECT IFNULL(tsa.`shift`,'') INTO @shifta 
                 FROM `time_forms_date` tfd
                 LEFT JOIN `ww_time_shift` tsa ON tsa.`shift_id`=tfd.`shift_id`
                 WHERE `forms_id`=timeformsid LIMIT 1;
                 SET @emailbody = REPLACE(@emailbody, '{{current_shift}}', @shifta);
              END IF;
              
              IF @isleave = 1 THEN
                 IF @days = 'Halfday' THEN
                    SELECT CONCAT('( ',td.`duration`,' )') INTO @duration
                    FROM `time_forms_date` tfd
                    INNER JOIN `ww_time_duration` td ON td.`duration_id`=tfd.`duration_id`
                    WHERE tfd.`forms_id`=timeformsid LIMIT 1;
                 END IF;
              END IF;
              SET @emailbody = REPLACE(@emailbody, '{{duration}}', @duration);
              
              -- {{table_body}}
              SET @tbody = time_form_balance_email(@userid,YEAR(@datefrom));
              SET @emailbody = REPLACE(@emailbody, '{{table_body}}', @tbody);
          
              -- {{link}}
              SET @url = get_config('System','URL');
	          IF RIGHT(TRIM(@url),1) <> '/' THEN
	             SET @url = CONCAT(TRIM(@url),'/');
	          END IF;
	   
              -- {{header/email logo}}
              SET @logo = get_config('System','print_logo'); 
	          IF TRIM(@logo) <> '' THEN
	             SET @logo = CONCAT(@url,@logo);
	          ELSE
	             SET @logo = CONCAT(@url,get_config('System','logo'));
	          END IF;
	   	         
              SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='form_application_manage' LIMIT 1);
              SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
              SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
              SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
              SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
              SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
               
              -- [3] insert to table
              IF TRIM(@emailbody) <> '' THEN
                 INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
                 SELECT @emailto, @emailsubject, @emailbody;
              END IF;
              
              -- SELECT @emailto, @emailsubject, @emailbody;
              
             -- END IF; -- time_get_approver_with_email(classid,ownerid,userid) = 1
              
           END IF;
        END IF;
        
    UNTIL done END REPEAT;
    
    CLOSE approvers;
    
    -- SELECT rec;
    
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_email_accounting` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_email_accounting` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_email_accounting`(IN formsid INT(11), IN recipientid INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE approver VARCHAR(32);
    DECLARE comments TEXT;    
        
       -- [1] retrieve the application
       SET @userid = 0;
       SET @email = '';
       SET @formstatus = '';
       SET @formid = 0;
       SET @formcode = '';
       SET @formname = '';
       SET @recipientAlias = '';
       SET @displayname = '';
       SET @createdon = '';
       SET @inclusive = '';
       SET @days = '';
       SET @reason = '';
       SET @userid = 0;
       SET @datefrom = 0;
       SET @isleave = 0;
       SET @duration = '';
       
       SELECT tf.`user_id`, tfs.`form_status`, `form_id`, `form_code`, `date_from`, 
              IF(`date_from`=`date_to`, 
                 DATE_FORMAT(`date_from`, '%M-%e'), 
                 CONCAT(DATE_FORMAT(`date_from`, '%M-%e'), ' to ', DATE_FORMAT(`date_to`, '%M-%e %Y'))
              ),
              DATE_FORMAT(tf.`created_on`, '%M-%e %l%p, %W'), 
              IF(`day` = .5, 'Halfday', IF(`day`=1,'1 day',CONCAT(`day`,' days'))), 
              IFNULL(`reason`,'n/a'), u.full_name
       INTO @userid, @formstatus, @formid, @formcode, @datefrom, @inclusive, @createdon, @days, @reason, @displayname
       FROM `time_forms` tf
       LEFT JOIN ww_users u ON tf.user_id = u.user_id
       LEFT JOIN `ww_time_form_status` tfs ON tfs.`form_status_id` = tf.`form_status_id` AND tfs.`deleted` = 0
       WHERE `forms_id`=formsid LIMIT 1;
       
       -- [1.5] retrieve the recipient email and firstname 
       SELECT u.email, up.firstname INTO @email, @recipientAlias
       FROM `ww_users` u 
       LEFT JOIN ww_users_profile up ON u.user_id = up.user_id
       WHERE u.user_id= recipientid LIMIT 1;
       
       -- [2] retrieve the form 
       SELECT `form`, `is_leave` INTO @formname, @isleave
       FROM `ww_time_form` WHERE `form_id`=@formid LIMIT 1;
       
       -- [3] retrieve the email template
       SET @emailto = @email;
       SET @emailsubject = '';
       SET @emailbody = '';
       
       SELECT `subject`,`body` INTO @emailsubject, @emailbody
       FROM `ww_system_template`
       WHERE `code` = CONCAT(@formcode,'-ACCOUNTING') LIMIT 1;
       
       
       IF @emailsubject <> '' THEN
           -- [2] replace variables
           SET @emailbody = REPLACE(@emailbody, '{{fullname}}', @displayname);
           SET @emailbody = REPLACE(@emailbody, '{{alias}}', @recipientAlias);
           SET @emailbody = REPLACE(@emailbody, '{{status}}', @formstatus);
           SET @emailbody = REPLACE(@emailbody, '{{comments}}', @comment_body);
           SET @emailbody = REPLACE(@emailbody, '{{form}}', @formname);
           SET @emailbody = REPLACE(@emailbody, '{{inclusive}}', @inclusive);
           SET @emailbody = REPLACE(@emailbody, '{{createdon}}', @createdon);
           SET @emailbody = REPLACE(@emailbody, '{{days}}', @days);
           SET @emailbody = REPLACE(@emailbody, '{{reason}}', @reason);
              
           IF @formcode = 'OBT' THEN
              SET @companytovisit = '';
              SET @companylocation = '';
              SELECT company_to_visit, location INTO @companytovisit, @companylocation 
              FROM `ww_time_forms_obt` 
              WHERE `forms_id`=formsid LIMIT 1;
              SET @emailbody = REPLACE(@emailbody, '{{company_to_visit}}', @companytovisit);
              SET @emailbody = REPLACE(@emailbody, '{{company_location}}', @companylocation);
              
           -- {{table_body}}
           SET @tbody = time_form_obt_request(formsid);
           SET @emailbody = REPLACE(@emailbody, '{{table_body}}', @tbody);           
           END IF;
              
           SET @emailbody = REPLACE(@emailbody, '{{duration}}', @duration);              
          
           -- {{link}}
           SET @url = get_config('System','URL');
	       IF RIGHT(TRIM(@url),1) <> '/' THEN
	          SET @url = CONCAT(TRIM(@url),'/');
	       END IF;
	       
           -- {{header/email logo}}
           SET @logo = get_config('System','print_logo'); 
	       IF TRIM(@logo) <> '' THEN
	          SET @logo = CONCAT(@url,@logo);
	       ELSE
	          SET @logo = CONCAT(@url,get_config('System','logo'));
	       END IF;
	   	         
           SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='forms_request' LIMIT 1);
           SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
           SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
           SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
           SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
           SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
                      
           -- [3] insert to table
           INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
           SELECT @emailto, @emailsubject, @emailbody;
        
       END IF; -- @emailsubject <> '' THEN
       
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_email_hr_validation` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_email_hr_validation` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_email_hr_validation`(IN formsid INT(11), IN recipientid INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE approver VARCHAR(32);
    DECLARE comments TEXT;    
        
       -- [1] retrieve the application
       SET @userid = 0;
       SET @email = '';
       SET @formstatus = '';
       SET @formid = 0;
       SET @formcode = '';
       SET @formname = '';
       SET @recipientAlias = '';
       SET @displayname = '';
       SET @createdon = '';
       SET @inclusive = '';
       SET @days = '';
       SET @reason = '';
       SET @userid = 0;
       SET @datefrom = 0;
       SET @isleave = 0;
       SET @duration = '';
       
       SELECT tf.`user_id`, tfs.`form_status`, `form_id`, `form_code`, `date_from`, 
              IF(`date_from`=`date_to`, 
                 DATE_FORMAT(`date_from`, '%M-%e'), 
                 CONCAT(DATE_FORMAT(`date_from`, '%M-%e'), ' to ', DATE_FORMAT(`date_to`, '%M-%e %Y'))
              ),
              DATE_FORMAT(tf.`created_on`, '%M-%e %l%p, %W'), 
              IF(`day` = .5, 'Halfday', IF(`day`=1,'1 day',CONCAT(`day`,' days'))), 
              IFNULL(`reason`,'n/a'), u.full_name
       INTO @userid, @formstatus, @formid, @formcode, @datefrom, @inclusive, @createdon, @days, @reason, @displayname
       FROM `time_forms` tf
       LEFT JOIN ww_users u ON tf.user_id = u.user_id
       LEFT JOIN `ww_time_form_status` tfs ON tfs.`form_status_id` = tf.`form_status_id` AND tfs.`deleted` = 0
       WHERE `forms_id`=formsid LIMIT 1;
       
       -- [1.5] retrieve the recipient email and firstname 
       SELECT u.email, up.firstname INTO @email, @recipientAlias
       FROM `ww_users` u 
       LEFT JOIN ww_users_profile up ON u.user_id = up.user_id
       WHERE u.user_id= recipientid LIMIT 1;
       
       -- [2] retrieve the form 
       SELECT `form`, `is_leave` INTO @formname, @isleave
       FROM `ww_time_form` WHERE `form_id`=@formid LIMIT 1;
       
       -- [3] retrieve the email template
       SET @emailto = @email;
       SET @emailsubject = '';
       SET @emailbody = '';
       
       SELECT `subject`,`body` INTO @emailsubject, @emailbody
       FROM `ww_system_template`
       WHERE `code` = 'HR-VALIDATION' LIMIT 1;
       
       
       IF @emailsubject <> '' THEN
           -- [2] replace variables           
           SET @emailbody = REPLACE(@emailbody, '{{fullname}}', @displayname);
           SET @emailbody = REPLACE(@emailbody, '{{alias}}', @recipientAlias);
           SET @emailbody = REPLACE(@emailbody, '{{status}}', @formstatus);
           SET @emailbody = REPLACE(@emailbody, '{{comments}}', @comment_body);
           SET @emailbody = REPLACE(@emailbody, '{{form}}', @formname);
           SET @emailbody = REPLACE(@emailbody, '{{inclusive}}', @inclusive);
           SET @emailbody = REPLACE(@emailbody, '{{createdon}}', @createdon);
           SET @emailbody = REPLACE(@emailbody, '{{days}}', @days);
           SET @emailbody = REPLACE(@emailbody, '{{reason}}', @reason);
              
           IF @formcode = 'OBT' THEN              
               -- {{table_body}}
               SET @tbody = time_form_obt_request(formsid);
               SET @emailbody = REPLACE(@emailbody, '{{table_body}}', @tbody);   
           ELSE
              -- {{table_body}}
              SET @tbody = time_form_balance_email(@userid,YEAR(@datefrom));
              SET @emailbody = REPLACE(@emailbody, '{{table_body}}', @tbody);        
           END IF;
              
           SET @emailbody = REPLACE(@emailbody, '{{duration}}', @duration);              
          
           -- {{link}}
           SET @url = get_config('System','URL');
	       IF RIGHT(TRIM(@url),1) <> '/' THEN
	          SET @url = CONCAT(TRIM(@url),'/');
	       END IF;
	       
           -- {{header/email logo}}
           SET @logo = get_config('System','print_logo'); 
	       IF TRIM(@logo) <> '' THEN
	          SET @logo = CONCAT(@url,@logo);
	       ELSE
	          SET @logo = CONCAT(@url,get_config('System','logo'));
	       END IF;
	         
           SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='hr_validation' LIMIT 1);
           SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
           SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
           SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
           SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
           SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
                      
           -- [3] insert to table
           INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
           SELECT @emailto, @emailsubject, @emailbody;
        
       END IF; -- @emailsubject <> '' THEN
       
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_email_status` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_email_status` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_email_status`(IN formsid INT(11))
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE approver VARCHAR(32);
    DECLARE comments TEXT;
    DECLARE approvers CURSOR FOR
       SELECT up.`firstname`, tfa.`comment`
       FROM `ww_time_forms_approver` tfa
       JOIN `users_profile` up ON up.user_id=tfa.user_id
       WHERE 
             tfa.`deleted` = 0 AND 
             tfa.`form_status_id` IN (6,7,8) AND 
             tfa.`forms_id` = formsid;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    SET @comment_body = '';
    
    OPEN approvers;
    REPEAT
       FETCH approvers INTO approver, comments;
       IF NOT done THEN
           SET rec = rec + 1;
           SET @comment_body = CONCAT(@comment_body,'<strong>',approver,':</strong><br>',IFNULL(comments,'-'),'<br>');
        END IF;
    UNTIL done END REPEAT;
    CLOSE approvers;
    
    
    IF rec > 0 THEN
    
       -- [1] retrieve the application
       SET @userid = 0;
       SET @email = '';
       SET @formstatus = '';
       SET @formid = 0;
       SET @formcode = '';
       SET @formname = '';
       SET @displayname = '';
       SET @createdon = '';
       SET @inclusive = '';
       SET @days = '';
       SET @reason = '';
       SET @userid = 0;
       SET @datefrom = 0;
       SET @isleave = 0;
       SET @duration = '';
       
       SELECT tf.`user_id`, u.`email`, IF(tfs.`form_status_id`=9,CONCAT(' set to ',tfs.`form_status`), tfs.`form_status`), 
              `form_id`, `form_code`, `firstname`, `date_from`, 
              IF(`date_from`=`date_to`, 
                 DATE_FORMAT(`date_from`, '%M-%e'), 
                 CONCAT(DATE_FORMAT(`date_from`, '%M-%e'), ' to ', DATE_FORMAT(`date_to`, '%M-%e %Y'))
              ),
              DATE_FORMAT(tf.`created_on`, '%M-%e %l%p, %W'), 
              IF(`day` = .5, 'Halfday', IF(`day`=1,'1 day',CONCAT(`day`,' days'))), 
              IFNULL(`reason`,'n/a')
       INTO @userid, @email, @formstatus, @formid, @formcode, @displayname, @datefrom, @inclusive, @createdon, @days, @reason
       FROM `time_forms` tf
       JOIN `users` u ON u.`user_id` = tf.`user_id`
       JOIN `users_profile` up ON up.`user_id` = tf.`user_id`
       LEFT JOIN `ww_time_form_status` tfs ON tfs.`form_status_id` = tf.`form_status_id` AND tfs.`deleted` = 0
       WHERE `forms_id`=formsid LIMIT 1;
       
       -- [2] retrieve the form 
       SELECT `form`, `is_leave` INTO @formname, @isleave
       FROM `ww_time_form` WHERE `form_id`=@formid LIMIT 1;
       
       -- [3] retrieve the email template
       SET @emailto = @email;
       SET @emailsubject = '';
       SET @emailbody = '';
       
       SELECT `subject`,`body` INTO @emailsubject, @emailbody
       FROM `ww_system_template`
       WHERE `code` = CONCAT(@formcode,'-STATUS') LIMIT 1;
       
       
       IF @emailsubject <> '' AND @emailto <> '' THEN
           -- [2] replace variables
           SET @emailbody = REPLACE(@emailbody, '{{alias}}', @displayname);
           SET @emailbody = REPLACE(@emailbody, '{{status}}', @formstatus);
           SET @emailbody = REPLACE(@emailbody, '{{comments}}', @comment_body);
           SET @emailbody = REPLACE(@emailbody, '{{form}}', @formname);
           SET @emailbody = REPLACE(@emailbody, '{{inclusive}}', @inclusive);
           SET @emailbody = REPLACE(@emailbody, '{{createdon}}', @createdon);
           SET @emailbody = REPLACE(@emailbody, '{{days}}', @days);
           SET @emailbody = REPLACE(@emailbody, '{{reason}}', @reason);
              
           IF @formcode = 'OBT' THEN
              SET @companytovisit = '';
              SET @companylocation = '';
              SELECT company_to_visit, location INTO @companytovisit, @companylocation 
              FROM `ww_time_forms_obt` 
              WHERE `forms_id`=formsid LIMIT 1;
              SET @emailbody = REPLACE(@emailbody, '{{company_to_visit}}', @companytovisit);
              SET @emailbody = REPLACE(@emailbody, '{{company_location}}', @companylocation);
           END IF;
              
           IF @formcode = 'DTRP' OR @formcode = 'RES' THEN -- DTRP
              SET @timefrom = '';
              SET @timeto = '';
              SELECT tfd.`time_from`, tfd.`time_to` INTO @timefrom, @timeto
              FROM `time_forms_date` tfd
              WHERE `forms_id`=formsid LIMIT 1;
                 
              IF IFNULL(@timefrom,'0000-00-00 00:00:00')='0000-00-00 00:00:00' THEN
                 SET @emailbody = REPLACE(@emailbody, '{{current_shift}}', @timeto);
              ELSE
                 SET @emailbody = REPLACE(@emailbody, '{{current_shift}}', @timefrom);
              END IF;
           END IF;
              
           IF @formcode = 'CWS' THEN -- CWS
              SET @shifta = '';
              SET @shiftb = '';
              SELECT tsa.`shift`, tsb.`shift` INTO @shifta, @shiftb 
              FROM `time_forms_date` tfd
              LEFT JOIN `ww_time_shift` tsa ON tsa.`shift_id`=tfd.`shift_id`
              LEFT JOIN `ww_time_shift` tsb ON tsb.`shift_id`=tfd.`shift_to`
              WHERE `forms_id`=formsid LIMIT 1;
              SET @emailbody = REPLACE(@emailbody, '{{current_shift}}', @shifta);
              SET @emailbody = REPLACE(@emailbody, '{{new_shift}}', @shiftb);
           END IF;
              
           IF @isleave = 1 THEN
              IF @days = 'Halfday' THEN
                 SELECT CONCAT('( ',td.`duration`,' )') INTO @duration
                 FROM `time_forms_date` tfd
                 INNER JOIN `ww_time_duration` td ON td.`duration_id`=tfd.`duration_id`
                 WHERE tfd.`forms_id`=formsid LIMIT 1;
              END IF;
           END IF;
           SET @emailbody = REPLACE(@emailbody, '{{duration}}', @duration);
              
           -- {{table_body}}
           SET @tbody = time_form_balance_email(@userid,YEAR(@datefrom));
           SET @emailbody = REPLACE(@emailbody, '{{table_body}}', @tbody);
          
           -- {{link}}
           SET @url = get_config('System','URL');
	       IF RIGHT(TRIM(@url),1) <> '/' THEN
	          SET @url = CONCAT(TRIM(@url),'/');
	       END IF;
	       
           -- {{header/email logo}}
           SET @logo = get_config('System','print_logo'); 
	       IF TRIM(@logo) <> '' THEN
	          SET @logo = CONCAT(@url,@logo);
	       ELSE
	          SET @logo = CONCAT(@url,get_config('System','logo'));
	       END IF;
	         
           SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='form_application_manage' LIMIT 1);
           SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
           SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
           SET @emailbody = REPLACE(@emailbody, '{{system_logo}}', @logo);
           SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
           SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
                      
           -- [3] insert to table
           INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`)
           SELECT @emailto, @emailsubject, @emailbody;
        
       END IF; -- @emailsubject <> '' THEN
       
    END IF; -- rec > 0 THEN
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_get_application` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_get_application` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_get_application`(IN userid INT, IN formdate DATE)
BEGIN
	SELECT *
	FROM ww_time_forms
	WHERE form_status_id NOT IN (1,7,8)
	AND form_code = 'NOTHING'
	AND deleted=0
	AND user_id=userid AND formdate BETWEEN date_from AND date_to
	limit 1;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_get_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_get_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_get_approvers`(IN formcode VARCHAR(16), IN userid INT(11))
BEGIN
          
    -- 
    -- [0] Override from USER
    -- 
    SET @rec = 0;
    SET @class = '';
    SET @users = '';
    
    SELECT c.`class_code`, b.`user_id`, COUNT(a.`id`) INTO @class, @users, @rec
    FROM `ww_approver_class_user` a
    JOIN `users_profile` b ON b.user_id = a.`user_id`
    JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
    WHERE a.`deleted`=0 AND b.`user_id`=userid AND c.`class_code`=formcode
          AND a.department_id = b.department_id AND a.company_id = b.company_id AND a.user_id = b.user_id;
    
    IF @rec > 0 THEN
       SELECT  `approver_id`, `condition`, `sequence`, c.lastname, c.firstname, `position`
       FROM `ww_approver_class_user` a
       JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
       JOIN `users_profile` c ON a.`approver_id`=c.`user_id` 
       LEFT JOIN `ww_users_position` d ON c.`position_id`=d.`position_id` 
       JOIN `users_profile` e ON e.position_id = a.`position_id` AND e.`user_id`=userid
       WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`user_id`=@users AND
             a.department_id = e.department_id AND a.company_id = e.company_id AND a.user_id = e.user_id;
    ELSE    
       
       -- 
       -- [1] Override from POSITION
       -- 
       SET @rec = 0;
       SET @class = '';
       SET @positions = '';
    
       SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`) INTO @class, @positions, @rec
       FROM `ww_approver_class_position` a
       JOIN `users_profile` b ON b.position_id = a.`position_id`
       JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
       WHERE a.`deleted`=0 AND b.`user_id`=userid AND  c.`class_code`=formcode AND 
             a.department_id = b.department_id AND a.company_id = b.company_id;
       
       IF @rec > 0 THEN
          SELECT  `approver_id`, `condition`, `sequence`, c.lastname, c.firstname, `position`
          FROM `ww_approver_class_position` a
          JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
          JOIN `users_profile` c ON a.`approver_id`=c.`user_id` 
          LEFT JOIN `ww_users_position` d ON c.`position_id`=d.`position_id` 
          JOIN `users_profile` e ON e.position_id = a.`position_id` AND e.`user_id`=userid
          WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`position_id`=@positions AND 
                a.department_id = e.department_id AND a.company_id = e.company_id;
       ELSE     
	    
          -- 
          -- [2] Override from DEPARTMENT
          -- 
          SET @rec = 0;
          SET @class = '';
          SET @department = '';
          
          SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`) INTO @class, @department, @rec
          FROM `ww_approver_class_department` a
          JOIN `users_profile` b ON b.department_id = a.`department_id`
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
	  WHERE a.`deleted`=0 AND b.`user_id`=userid AND  c.`class_code`=formcode AND 
	        a.company_id = b.company_id;
  
          IF @rec > 0 THEN
	     SELECT  `approver_id`, `condition`, `sequence`, c.lastname, c.firstname, `position`
	     FROM `ww_approver_class_department` a
	     JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
	     JOIN `users_profile` c ON a.`approver_id`=c.`user_id` 
	     LEFT JOIN `ww_users_position` d ON c.`position_id`=d.`position_id` 
	     JOIN `users_profile` e ON e.department_id = a.`department_id` AND e.`user_id`=userid
	     WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`department_id`=@department AND a.company_id = e.company_id;
          ELSE
             
	     -- 
	     -- [3] Override from COMPANY
	     -- 
	     SET @rec = 0;
	     SET @class = '';
	     SET @company = '';
               
	     SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`) INTO @class, @company, @rec
	     FROM `ww_approver_class_company` a
	     JOIN `users_profile` b ON b.company_id = a.`company_id`
	     JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
	     WHERE b.`user_id`=userid AND  c.`class_code`=formcode AND a.`deleted`=0;
  
	    IF @rec > 0 THEN
	       SELECT  `approver_id`, `condition`, `sequence`, c.lastname, c.firstname, `position`
	       FROM `ww_approver_class_company` a
	       JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
	       JOIN `users_profile` c ON a.`approver_id`=c.`user_id` 
	       LEFT JOIN `ww_users_position` d ON c.`position_id`=d.`position_id` 
	       JOIN `users_profile` e ON e.company_id = a.`company_id` AND e.`user_id`=userid
	       WHERE a.`deleted`=0 AND b.`class_code`=@class AND a.`company_id`=@company;
	    END IF; -- IF COMPANY
            
         END IF; -- IF DEPARTMENT
         
      END IF; -- IF POSITION  
      
   END IF; -- IF USER  
   
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_maternity` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_maternity` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_maternity`(formsid INT(11))
BEGIN
    
    /* Time Record Population of Maternity */
	 
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_ot_leave_expired` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_ot_leave_expired` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_ot_leave_expired`(IN odate DATE)
BEGIN
    
	   INSERT INTO ww_time_forms_ot_leave_used
	   (forms_id, used_by_form, used)
	   SELECT otleave.forms_id, -1, otleave.credit 
	   FROM ww_time_forms_ot_leave otleave
		    WHERE otleave.expiration_date <= odate
		    AND otleave.used_by_form=0
		    AND NOT EXISTS (SELECT t1.forms_id FROM ww_time_forms_ot_leave_used t1 WHERE otleave.forms_id = t1.forms_id);
		    
	     UPDATE ww_time_forms_ot_leave
		    SET used=credit,
			remarks=CONCAT(remarks,' expired on ',expiration_date),
			used_by_form=-1
		    WHERE expiration_date <= odate
		    AND used_by_form=0;
		    
	     UPDATE ww_time_form_balance
	     SET deleted=0
	     WHERE deleted=0;
	     
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_populate_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_populate_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_populate_approvers`(IN formsid INT(11), IN userid INT(11))
BEGIN
       -- 
       -- [1] Override from user
       -- 
       SET @rec = 0;
       SET @class = '';
       SET @positions = '';
       SET @conditions = '';
       
       SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`), a.condition INTO @class, @positions, @rec, @conditions
       FROM `ww_approver_class_user` a
       JOIN `users_profile` b ON b.user_id = a.`user_id` 
       JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
       JOIN `time_forms` d ON d.`user_id` = b.`user_id`
       WHERE a.`deleted`=0 AND b.`user_id`=userid AND d.`forms_id`=formsid AND UPPER(c.`class_code`)= UPPER(d.`form_code`);
       
       IF @rec > 0 THEN
          INSERT INTO `ww_time_forms_approver`
          (`forms_id`, `user_id`, `condition`, `sequence`, `form_status_id`)
          SELECT formsid, `approver_id`, `condition`, `sequence`, IF(@conditions='By Level',IF(@rec=1,2,IF(`sequence`=1,2,3)),2)
          FROM `ww_approver_class_user` a
          JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
          JOIN `users_profile` u ON u.user_id=userid
          WHERE a.`deleted`=0 AND UPPER(b.`class_code`)=UPPER(@class) AND a.`user_id`=userid AND 
                -- a.`position_id`=u.`position_id` AND a.`department_id`=u.`department_id` AND 
                a.`company_id`=u.`company_id` AND a.`approver_id`<>userid
          GROUP BY 2
          ON DUPLICATE KEY UPDATE `deleted`=0;             
       ELSE  
          
          -- 
          -- [1] Override from POSITION
          -- 
          SET @rec = 0;
          SET @class = '';
          SET @positions = '';
          SET @conditions = '';
          
          SELECT c.`class_code`, b.`position_id`, COUNT(a.`id`), a.condition INTO @class, @positions, @rec, @conditions
          FROM `ww_approver_class_position` a
          JOIN `users_profile` b ON b.position_id = a.`position_id` AND b.`company_id`=a.`company_id` AND b.department_id=a.department_id
          JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
          JOIN `time_forms` d ON d.`user_id` = b.`user_id`
          WHERE a.`deleted`=0 AND b.`user_id`=userid AND d.`forms_id`=formsid AND UPPER(c.`class_code`)= UPPER(d.`form_code`);
          
          IF @rec > 0 THEN
             INSERT INTO `ww_time_forms_approver`
             (`forms_id`, `user_id`, `condition`, `sequence`, `form_status_id`)
             SELECT formsid, `approver_id`, `condition`, `sequence`, IF(@conditions='By Level',IF(@rec=1,2,IF(`sequence`=1,2,3)),2)
             FROM `ww_approver_class_position` a
             JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
             JOIN `users_profile` u ON u.company_id=a.company_id AND u.department_id=a.department_id AND u.user_id=userid
             WHERE a.`deleted`=0 AND UPPER(b.`class_code`)=UPPER(@class) AND a.`position_id`=@positions AND a.`approver_id`<>userid
             GROUP BY 2
             ON DUPLICATE KEY UPDATE `deleted`=0;             
          ELSE     
                    
             -- [2] Override from DEPARTMENT
             -- 
             SET @rec = 0;
             SET @class = '';
             SET @department = '';
          
             SELECT c.`class_code`, b.`department_id`, COUNT(a.`id`), a.condition INTO @class, @department, @rec, @conditions
             FROM `ww_approver_class_department` a
             JOIN `users_profile` b ON b.department_id = a.`department_id` AND b.`company_id`=a.`company_id`
             JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
             JOIN `time_forms` d ON d.`user_id` = b.`user_id`
             WHERE a.`deleted`=0 AND b.`user_id`=userid AND d.`forms_id`=formsid AND UPPER(c.`class_code`)=UPPER(d.`form_code`) AND a.`approver_id`<>userid;
          
             IF @rec > 0 THEN
                INSERT INTO `ww_time_forms_approver`
                (`forms_id`, `user_id`, `condition`, `sequence`, `form_status_id`)
                SELECT formsid, `approver_id`, `condition`, `sequence`, IF(@conditions='By Level',IF(@rec=1,2,IF(`sequence`=1,2,3)),2)
                FROM `ww_approver_class_department` a
                JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                JOIN `users_profile` u ON u.company_id=a.company_id AND u.user_id=userid
                WHERE a.`deleted`=0 AND UPPER(b.`class_code`)=UPPER(@class) AND a.`department_id`=@department AND a.`approver_id`<>userid
                GROUP BY 2
                ON DUPLICATE KEY UPDATE `form_status_id`=VALUES(`form_status_id`), `sequence`=VALUES(`sequence`), `deleted`=0;             
             ELSE
                
                --   
                -- [3] Override from COMPANY
                -- 
                SET @rec = 0;
                SET @class = '';
                SET @company = '';
          
                SELECT c.`class_code`, b.`company_id`, COUNT(a.`id`), a.condition INTO @class, @company, @rec, @conditions
                FROM `ww_approver_class_company` a
                JOIN `users_profile` b ON b.company_id = a.`company_id`
                JOIN `ww_approver_class` c ON c.`class_id` = a.`class_id`
                JOIN `time_forms` d ON d.`user_id` = b.`user_id`
                WHERE a.`deleted`=0 AND b.`user_id`=userid AND d.`forms_id`=formsid AND UPPER(c.`class_code`)=UPPER(d.`form_code`);
          
                IF @rec > 0 THEN
                   INSERT INTO `ww_time_forms_approver`
                   (`forms_id`, `user_id`, `condition`, `sequence`, `form_status_id`)
                   SELECT formsid, `approver_id`, `condition`, `sequence`, IF(@conditions='By Level',IF(@rec=1,2,IF(`sequence`=1,2,3)),2)
                   FROM `ww_approver_class_company` a
                   JOIN `ww_approver_class` b ON b.`class_id`=a.`class_id` AND b.`deleted`=0
                   WHERE a.`deleted`=0 AND UPPER(b.`class_code`)=UPPER(@class) AND a.`company_id`=@company AND a.`approver_id`<>userid
                   GROUP BY 2
                   ON DUPLICATE KEY UPDATE `deleted`=0;             
                END IF; -- IF COMPANY
             
             END IF; -- IF DEPARTMENT
             
          END IF; -- IF POSITION    
       END IF; -- IF user          
          
          
       IF @rec > 0 THEN
          -- email approver/s application content
          CALL sp_time_forms_email(formsid);
       END IF;
          
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_reminder` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_reminder` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_reminder`()
BEGIN
    
    DECLARE done TINYINT(1) DEFAULT 0;
    DECLARE userid INT(11);
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE forms CURSOR FOR
    SELECT tfa.`user_id`
    FROM `time_forms` tf
    JOIN `ww_time_forms_approver` tfa ON tfa.`form_status_id`=2 AND tfa.`deleted`=0 AND tfa.`forms_id`=tf.`forms_id`
    WHERE tf.`form_status_id` IN (2,3,4)
    GROUP BY 1;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
	OPEN forms;
	REPEAT
	   FETCH forms INTO userid;
	   IF NOT done THEN
          SET rec = rec + 1;
          
          CALL sp_time_forms_reminder_user(userid);
          
	   END IF;
	UNTIL done END REPEAT;
    CLOSE forms;
	   
	SELECT rec;
	 
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_reminder_user` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_reminder_user` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_reminder_user`(IN userid INT(11))
BEGIN
    
    DECLARE done TINYINT(1) DEFAULT 0;
    
    DECLARE formsid INT(11);
    DECLARE dname VARCHAR(128);
    DECLARE formcode VARCHAR(16);
    DECLARE created DATE;
    DECLARE datefrom DATE;
    DECLARE dateto DATE;
    DECLARE reason VARCHAR(64);
    
    DECLARE forms CURSOR FOR
       SELECT tf.`forms_id`, tf.`form_code`, tf.`display_name`, tf.`created_on`,
              tf.`date_from`, tf.`date_to`, CONCAT(LEFT(tf.`reason`,30), IF(LENGTH(tf.`reason`)>30,'...',''))reason
       FROM `time_forms` tf
       JOIN `ww_time_forms_approver` tfa ON tfa.`form_status_id`=2 AND tfa.`deleted`=0 AND tfa.`forms_id`=tf.`forms_id`
       WHERE tf.`form_status_id` IN (2,3,4) AND 
             tfa.`user_id`=userid
       ORDER BY tf.`date_from`;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
        
    SET @emailto = '';
    SET @emailsubject = '';
    SET @emailbody = '';
    SET @tbody = '';
    SET @bcc = '';
    SET @url = '';
    
	-- template 
    SELECT `subject`,`body` INTO @emailsubject, @emailbody
    FROM `ww_system_template`
    WHERE `code`='TIME-FORMS-REMINDER' AND deleted=0 LIMIT 1;
    
    
    IF @emailsubject <> '' THEN
       
	   SET @emailto = (SELECT `email` FROM `users` WHERE `user_id`=userid LIMIT 1);
       
	   IF @emailto <> '' THEN
	      OPEN forms;
	      REPEAT
	         FETCH forms INTO formsid, formcode, dname, created, datefrom, dateto, reason;
	         IF NOT done THEN
                SET @tbody = CONCAT(@tbody,'<tr>');
                SET @tbody = CONCAT(@tbody,'<td style="text-align:left">',	
                             DATE_FORMAT(datefrom,'%b-%e %a'), ' ', IF(datefrom=dateto,'', DATE_FORMAT(dateto,'%b-%e %a')), '</td>' );
                SET @tbody = CONCAT(@tbody,'<td>',formcode,'</td>');	
                SET @tbody = CONCAT(@tbody,'<td style="text-align:left">',dname,'</td>');	
                SET @tbody = CONCAT(@tbody,'<td>',created,'</td>');	
                SET @tbody = CONCAT(@tbody,'<td style="text-align:left">',reason,'</td>');	
                SET @tbody = CONCAT(@tbody,'</tr>');
	         END IF;
	      UNTIL done END REPEAT;
          CLOSE forms;
          
          IF @tbody <> '' THEN
             -- {{link}}
             SET @url = (SELECT `value` FROM `ww_config` WHERE `key`='URL' LIMIT  1);
	         IF RIGHT(TRIM(@url),1) <> '/' THEN
	            SET @url = CONCAT(TRIM(@url),'/');
	         END IF;
	         
             SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='form_application_manage' LIMIT 1);
             SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
          
             SET @emailbody = REPLACE(@emailbody, '{{table_body}}', @tbody);
             SET @emailbody = REPLACE(@emailbody, '{{link}}', CONCAT(@url,@route));
             SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
             SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
             SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
             
             SET @urgent = '';
             SET @cutoff = '';
             SELECT cutoff, 'URGENT!!! ' INTO @cutoff, @urgent
             FROM ww_time_period tp, users_profile up
             WHERE tp.company_id = up.company_id AND up.`user_id`=userid AND 
                   CURDATE() BETWEEN (cutoff - INTERVAL 2 DAY) AND cutoff;
             
             IF TRIM(@urgent) <> '' THEN
                SET @emailsubject = CONCAT(@urgent, @emailsubject, ' CUT-OFF is ', DATE_FORMAT(@cutoff,'%M %e %W'));
             END IF;
             
             INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`,`bcc`)
             SELECT @emailto,@emailsubject,@emailbody,@bcc;
          END IF;
       END IF;
       
    END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_forms_reserved_leave` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_forms_reserved_leave` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_forms_reserved_leave`(IN dateform DATE, IN userid INT(10), IN daysused DECIMAL(6,3))
BEGIN
	UPDATE ww_time_form_balance tfb 
	SET tfb.reserved_used = daysused 
	WHERE
	tfb.year = YEAR(dateform) AND
	tfb.form_id = 2 AND
	tfb.deleted = 0 AND
	tfb.user_id = userid;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_form_balance_carry_over` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_form_balance_carry_over` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_form_balance_carry_over`(IN iYear INT(11))
BEGIN
    
    DECLARE time_form_balance_process TINYINT(1) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE userid INT(11);
    DECLARE balance DECIMAL(12,2);
    DECLARE cyear INT(11);
    
    -- [2017.04.11]
    
    -- [1] CHECK AFFECTED
    DECLARE balance_process CURSOR FOR
    SELECT p.`user_id`, tfb.`balance`, tfb.`year`
    FROM `ww_partners` `p`
    JOIN `ww_users_profile` up ON up.`user_id` = p.`user_id`
    JOIN `ww_time_form_balance` tfb ON tfb.`user_id`=p.user_id
    WHERE p.`deleted`=0 AND IFNULL(p.`resigned_date`,'0000-00-00')='0000-00-00' AND
          IFNULL(p.`effectivity_date`,'0000-00-00') <> '0000-00-00' AND
          tfb.`year` = iYear; 
    
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET time_form_balance_process = 1;
    
    -- [2] CREDIT SETUP
    OPEN balance_process;
    
    
    REPEAT
       FETCH balance_process INTO userid, balance, cyear;
       
       IF NOT time_form_balance_process THEN   
	   SET @previous = IF(balance > 10, balance - 10, 0);
	   SET @cnt = 0;
	   
	   SELECT COUNT(`id`) INTO @cnt FROM ww_time_form_balance 
	   WHERE user_id = userid AND form_id = 22 AND `year` = (iYear + 1) AND deleted = 0;
	   
	   IF @cnt = 0 THEN    
		   INSERT INTO `ww_time_form_balance`
		   (`year`, `user_id`, `form_id`, `form_code`, `previous`) values
		   (iYear, userid, 22,'LIP',@previous);
	   ELSE
		   update `ww_time_form_balance` set previous = @previous
		   WHERE user_id = userid AND form_id = 22 AND `year` = (iYear + 1) AND deleted = 0;
	   END IF;
       END IF;
    
    UNTIL time_form_balance_process END REPEAT;
    
    CLOSE balance_process;
    
    SELECT rec;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_form_balance_insert` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_form_balance_insert` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_form_balance_insert`(IN formid INT(11), IN formsid INT(11), IN userid INT(1))
BEGIN
    DECLARE specialLeave TINYINT(1) DEFAULT 0;
    DECLARE formCode VARCHAR(250);
    DECLARE leaveYear INT(1);
    DECLARE balanceCount INT(1) DEFAULT 0;
    
    SELECT special_leave, form_code INTO specialLeave, formCode 
    FROM ww_time_form 
    WHERE form_id = formid;
    
    IF specialLeave = 1 THEN
        SELECT YEAR(date_from) INTO leaveYear 
        FROM ww_time_forms 
        WHERE forms_id = formsid;
        
        SELECT COUNT(id) INTO balanceCount 
        FROM ww_time_form_balance 
        WHERE form_id = formid AND `year` = leaveYear AND user_id = userid;
        
        IF balanceCount = 0 THEN
	   INSERT INTO `ww_time_form_balance` (`year`, `user_id`, `form_id`, `form_code`, `created_on`, `created_by`) 
	   VALUES (leaveYear, userid, formid, formCode, NOW(), 1);
        END IF;
        
    END IF;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_form_balance_process` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_form_balance_process` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_form_balance_process`(IN pyear INT(1), IN puserid INT(11))
BEGIN
    
    DECLARE time_form_balance_process TINYINT(11) DEFAULT 0;
    
    -- 2017.04.11
    -- [1] CHECK SETUP POLICY
    
    
    -- [2] CREDITS
	
    
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_form_balance_process_ahi` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_form_balance_process_ahi` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_form_balance_process_ahi`(IN pdate DATE, IN pclassid INT(11), puserid INT(11))
BEGIN
    
    DECLARE time_form_balance_process TINYINT(1) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE userid INT(11);
    DECLARE creditid INT(1);
    DECLARE datehired DATE;
    DECLARE statusid INT(11);
    DECLARE typeid INT(11);
    
    -- [2017.04.11]
    
    -- [1] CHECK AFFECTED
    DECLARE balance_process CURSOR FOR
    SELECT p.`user_id`, up.`credit_setup_id`, p.`effectivity_date`, p.`status_id`, p.`employment_type_id`
    FROM `ww_partners` `p`
    JOIN `ww_users_profile` up ON up.`user_id` = p.`user_id`
    JOIN `ww_time_form_balance_setup_policy` tfbsp ON tfbsp.`class_id`=up.credit_setup_id
    WHERE p.`deleted`=0 AND IFNULL(p.`resigned_date`,'0000-00-00')='0000-00-00' AND
          IF(pclassid=0, 1, up.credit_setup_id = pclassid) AND
          IF(puserid=0, 1, p.user_id = puserid) AND
          FIND_IN_SET(p.`status_id`, tfbsp.`employment_status_ids`) AND FIND_IN_SET(p.`employment_type_id`, p.`employment_type_id`) AND 
          IFNULL(p.`effectivity_date`,'0000-00-00') <> '0000-00-00' AND
          p.`effectivity_date` < pdate; 
    
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET time_form_balance_process = 1;
    
    -- [2] CREDIT SETUP
    OPEN balance_process;
    
    
    REPEAT
       FETCH balance_process INTO userid, creditid, datehired, statusid, typeid;
       
       IF NOT time_form_balance_process THEN
       
          /* check per user*/
          SET rec = rec + 1;
          
          SET @cstatusid = statusid;
          SET @ctypeid = typeid;
          
          SET @min_credit = 0;
          SET @max_credit = 0;
          SET @eff_date = '';
          SET @pol_id = 0;
          SET @frm_id = '';
          SET @fmr_code = '';
          SET @ids_stat = '';
          SET @ids_type = '';
          SET @id_class = creditid;
          
          IF @id_class > 0 THEN
             SELECT tfbsp.`policy_id`, tfbsp.`form_id`, tfbsp.`form_code`, tfbsp.`starting_credit`, tfbsp.`max_credit`, 
                    tfbsp.`effectivity`, tfbsp.`employment_status_ids`, tfbsp.`employment_type_ids`
             INTO @pol_id, @frm_id, @frm_code, @min_credit, @max_credit, @eff_date, @ids_stat, @ids_type
             FROM `ww_time_form_balance_setup_policy` `tfbsp`
             LEFT JOIN `ww_time_form_balance_credit_class` `tfbcc` ON tfbcc.`deleted`=0 AND tfbcc.`class_id`=tfbsp.`class_id` 
             WHERE tfbsp.`deleted`=0 AND tfbsp.`class_id`=@id_class LIMIT 1;
             
             SET @isok = 0;
             
             
             -- [2.1] CHECK EFFECTIVITY, EMPLOYMENT STATUS, EMPLOYMENT TYPE
                      -- STATUS: permananent, probationary
                      -- TYPE: manager, supervisor, rank & file
             IF IFNULL(@eff_date,'0000-00-00') <> '0000-00-00' THEN
                IF pdate > @eff_date THEN 
                   IF FIND_IN_SET(@cstatusid,@ids_stat) AND FIND_IN_SET(@ctypeid, @ids_type) THEN
                      SET @isok = 1;
                   END IF;
                END IF;
             END IF;
             
             
             -- [2.2] ACCRUAL
             IF @isok = 1 THEN
                SET @id_leave = 0;
                SET @credit = 0;
                SET @tenure = YEAR(pdate) - YEAR(datehired); -- getage(datehired);
                SET @daysvalid = 0;
                
                /* this query causes this stored procedure to malfunction 2017-09-04
                SELECT `id` INTO @id_leave
                FROM `ww_time_form_balance`
                WHERE `deleted`=0 AND form_code=@frm_code AND `year`=YEAR(pdate) AND `user_id`=userid LIMIT 1; */
                
                IF @tenure = 0 THEN
                   -- CHECK FOR DAYS NA PINASOK
                   SET @daysvalid = (pdate - INTERVAL 13 DAY) >= datehired;
                   
                   IF @daysvalid = 0 THEN
                      -- THIS MEANS NO CREDIT SHOULD BE PASS ON
                      SET @tenure = -1;
                   END IF;
                END IF;
                
                SELECT `credits` INTO @credit
                FROM `ww_time_form_balance_setup_increment` 
                WHERE `deleted`=0 AND `policy_id`=@pol_id AND @tenure BETWEEN `from` AND `to`;
                
                IF @credit > 0 THEN
                   IF creditid = 3 THEN
                      IF MONTH(datehired) = MONTH(pdate) AND DAY(datehired) = DAY(pdate) THEN
                         SET @credit = @credit;
                      ELSE
                         SET @credit = 0;
                      END IF;
                   END IF;
                END IF;
                
                INSERT INTO `logtable_leave_balance_accrual` (`log`) VALUES (CONCAT(pdate,' | ',userid,' | ',@credit,' | ',@frm_id));
                
                IF @credit > 0 THEN
		   SET @cnt = 0;
		   SELECT COUNT(`id`) INTO @cnt FROM ww_time_form_balance 
		   WHERE user_id = userid AND form_id = @frm_id AND `year` = YEAR(pdate) AND deleted = 0;
	           
	           INSERT INTO `logtable_leave_balance_accrual` (`log`) VALUES (CONCAT(@cnt,' | ',userid,' | ',@credit,' | ',@frm_id));
	           
	           IF @cnt = 0 THEN    
			   INSERT INTO `ww_time_form_balance`
			   (`year`, `user_id`, `form_id`, `form_code`, `period_from`, `period_to`, `period_extension`)
			   SELECT YEAR(pdate), userid, @frm_id, @frm_code, MAKEDATE(YEAR(pdate),1), LAST_DAY(MAKEDATE(YEAR(pdate),365)), LAST_DAY(MAKEDATE(YEAR(pdate)+1,90))
			   ON DUPLICATE KEY UPDATE modified_on = NOW();
                   END IF;
                      
                   INSERT INTO `ww_time_form_balance_accrual` (user_id, leave_balance_id, form_id, form_code, date_accrued, accrual)
                   SELECT `user_id`, `id`, `form_id`, `form_code`, IF(creditid = 3, pdate, pdate - INTERVAL 1 DAY), @credit
                   FROM `ww_time_form_balance` 
                   WHERE user_id = userid AND form_id = @frm_id AND `year` = YEAR(pdate) AND deleted = 0
                   ON DUPLICATE KEY UPDATE accrual=@credit, modified_on=NOW();
                   
                   UPDATE `ww_time_form_balance` SET modified_on = NOW()
                   WHERE user_id = userid AND form_id = @frm_id AND `year` = YEAR(pdate) AND deleted = 0;
                END IF;
             
             END IF; -- @isok = 1
          
          END IF; -- @id_class > 0
          
       END IF;
    
    UNTIL time_form_balance_process END REPEAT;
    
    CLOSE balance_process;
    
    SELECT rec;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_form_balance_process_credit` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_form_balance_process_credit` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_form_balance_process_credit`()
BEGIN
    
    DECLARE time_form_balance_process_credit TINYINT(11) DEFAULT 0;
    DECLARE policyid INT(11);
    DECLARE formid INT(1);
    DECLARE formcode VARCHAR(32);
    DECLARE classid INT(1);
    DECLARE classcode VARCHAR(32);
    
    
    -- 2017.04.11
    -- [1] CHECK SETUP POLICY
    DECLARE balance_process_credit CURSOR FOR
    SELECT tfbsp.`policy_id`, tfbsp.`form_id`, tfbsp.`form_code`, tfbsp.`class_id`, tfbcc.`class_code`
    FROM `ww_time_form_balance_setup_policy` `tfbsp`
    LEFT JOIN `ww_time_form_balance_credit_class` `tfbcc` ON tfbcc.`deleted`=0 AND tfbcc.`class_id`=tfbsp.`class_id` 
    WHERE tfbsp.`deleted`=0 AND CURDATE()>=tfbsp.`effectivity` ;
    
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET time_form_balance_process_credit = 1;
    
    
    -- [2] CREDITS
    OPEN balance_process_credit;
    
    REPEAT
       FETCH balance_process_credit INTO policyid, formid, formcode, classid, classcode;
       
       IF NOT time_form_balance_process_credit THEN
          
          if formid = 22 then  -- for LIP
		  IF LEFT(classcode,3) = 'AHI' THEN
		     -- CUSTOM
		     IF classcode = 'AHI-003' THEN
			-- (SRDC) TO BE GIVEN EVERY EVERY YEAR/HIRED DATE
			CALL sp_time_form_balance_process_ahi(CURDATE(), classid, 0);
		     ELSE
			IF DAY(CURDATE()) = 1 THEN
			   -- TO BE GIVEN EVERY 1ST DAY OF EVERY MONTH
			   CALL sp_time_form_balance_process_ahi(CURDATE(), classid, 0);
			END IF;
		     END IF;
		  ELSE
		     -- DEFAULT
		     CALL sp_time_form_balance_process(YEAR(CURDATE()), 0);
		  END IF;
	  else  -- For Home Leave
		CALL sp_time_form_balance_process_hl(CURDATE(), classid, 0);
	  end if;
          
       END IF;
    
    UNTIL time_form_balance_process_credit END REPEAT;
    
    CLOSE balance_process_credit;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_form_balance_process_credit_manual` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_form_balance_process_credit_manual` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_form_balance_process_credit_manual`(IN pdate DATE)
BEGIN
    
    DECLARE time_form_balance_process_credit TINYINT(11) DEFAULT 0;
    DECLARE policyid INT(11);
    DECLARE formid INT(1);
    DECLARE formcode VARCHAR(32);
    DECLARE classid INT(1);
    DECLARE classcode VARCHAR(32);
    
    
    -- 2017.04.11
    -- [1] CHECK SETUP POLICY
    DECLARE balance_process_credit CURSOR FOR
    SELECT tfbsp.`policy_id`, tfbsp.`form_id`, tfbsp.`form_code`, tfbsp.`class_id`, tfbcc.`class_code`
    FROM `ww_time_form_balance_setup_policy` `tfbsp`
    LEFT JOIN `ww_time_form_balance_credit_class` `tfbcc` ON tfbcc.`deleted`=0 AND tfbcc.`class_id`=tfbsp.`class_id` 
    WHERE tfbsp.`deleted`=0 AND pdate>=tfbsp.`effectivity` ;
    
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET time_form_balance_process_credit = 1;
    
    
    -- [2] CREDITS
    OPEN balance_process_credit;
    
    REPEAT
       FETCH balance_process_credit INTO policyid, formid, formcode, classid, classcode;
       
       IF NOT time_form_balance_process_credit THEN
          
          IF LEFT(classcode,3) = 'AHI' THEN
             -- CUSTOM
             IF classcode = 'AHI-003' THEN
                -- (SRDC) TO BE GIVEN EVERY EVERY YEAR/HIRED DATE
                CALL sp_time_form_balance_process_ahi(pdate, classid, 0);
             ELSE
                IF DAY(pdate) = 1 THEN
                   -- TO BE GIVEN EVERY 1ST DAY OF EVERY MONTH
                   CALL sp_time_form_balance_process_ahi(pdate, classid, 0);
                END IF;
             END IF;
          ELSE
             -- DEFAULT
             CALL sp_time_form_balance_process(YEAR(pdate), 0);
          END IF;
       END IF;
    
    UNTIL time_form_balance_process_credit END REPEAT;
    
    CLOSE balance_process_credit;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_form_balance_process_hl` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_form_balance_process_hl` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_form_balance_process_hl`(IN pdate DATE, IN pclassid INT(11), puserid INT(11))
BEGIN
    
    DECLARE time_form_balance_process TINYINT(1) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE userid INT(11);
    DECLARE creditid INT(1);
    DECLARE datehired DATE;
    DECLARE statusid INT(11);
    DECLARE typeid INT(11);
    
    -- [2017.04.11]
    
    -- [1] CHECK AFFECTED
    DECLARE balance_process CURSOR FOR
    SELECT p.`user_id`, 7, p.`effectivity_date`, p.`status_id`, p.`employment_type_id`
    FROM `ww_partners` `p`
    join `ww_partners_personal` pp on (pp.partner_id = p.partner_id and key_id = 209)
    JOIN `ww_users_profile` up ON up.`user_id` = p.`user_id`
    WHERE p.`deleted`=0 AND IFNULL(p.`resigned_date`,'0000-00-00')='0000-00-00' AND
          pp.key_value = 1 AND
          IF(puserid=0, 1, p.user_id = puserid) AND
          IFNULL(p.`effectivity_date`,'0000-00-00') <> '0000-00-00' AND
          dayofmonth(p.`effectivity_date`) = dayofmonth(pdate) AND
          p.`effectivity_date` < pdate; 
    
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET time_form_balance_process = 1;
    
    -- [2] CREDIT SETUP
    OPEN balance_process;
    
    
    REPEAT
       FETCH balance_process INTO userid, creditid, datehired, statusid, typeid;
       
       IF NOT time_form_balance_process THEN
       
          /* check per user*/
          SET rec = rec + 1;
          
          SET @cstatusid = statusid;
          SET @ctypeid = typeid;
          
          SET @min_credit = 0;
          SET @max_credit = 0;
          SET @eff_date = '';
          SET @pol_id = 0;
          SET @frm_id = '';
          SET @fmr_code = '';
          SET @ids_stat = '';
          SET @ids_type = '';
          SET @id_class = creditid;
          
          IF @id_class > 0 THEN
             SELECT tfbsp.`policy_id`, tfbsp.`form_id`, tfbsp.`form_code`, tfbsp.`starting_credit`, tfbsp.`max_credit`, 
                    tfbsp.`effectivity`, tfbsp.`employment_status_ids`, tfbsp.`employment_type_ids`
             INTO @pol_id, @frm_id, @frm_code, @min_credit, @max_credit, @eff_date, @ids_stat, @ids_type
             FROM `ww_time_form_balance_setup_policy` `tfbsp`
             LEFT JOIN `ww_time_form_balance_credit_class` `tfbcc` ON tfbcc.`deleted`=0 AND tfbcc.`class_id`=tfbsp.`class_id` 
             WHERE tfbsp.`deleted`=0 AND tfbsp.`class_id`=@id_class LIMIT 1;
             
             SET @isok = 1;
             
             -- [2.2] ACCRUAL
             IF @isok = 1 THEN
                SET @id_leave = 0;
                SET @credit = 0;
                SET @tenure = YEAR(pdate) - YEAR(datehired); -- getage(datehired);
                SELECT `credits` INTO @credit
                FROM `ww_time_form_balance_setup_increment` 
                WHERE `deleted`=0 AND `policy_id`=@pol_id AND @tenure BETWEEN `from` AND `to`;
                
                IF @credit > 0 THEN
		   SET @cnt = 0;
		   SELECT COUNT(`id`) INTO @cnt FROM ww_time_form_balance 
		   WHERE user_id = userid AND form_id = @frm_id AND `year` = YEAR(pdate) AND deleted = 0;
	           
	           IF @cnt = 0 THEN    
			   INSERT INTO `ww_time_form_balance`
			   (`year`, `user_id`, `form_id`, `form_code`, `period_from`, `period_to`, `period_extension`)
			   SELECT YEAR(pdate), userid, @frm_id, @frm_code, MAKEDATE(YEAR(pdate),1), LAST_DAY(MAKEDATE(YEAR(pdate),365)), LAST_DAY(MAKEDATE(YEAR(pdate)+1,90))
			   ON DUPLICATE KEY UPDATE modified_on = NOW();
                   END IF;
                      
                   INSERT INTO `ww_time_form_balance_accrual` (user_id, leave_balance_id, form_id, form_code, date_accrued, accrual)
                   SELECT `user_id`, `id`, `form_id`, `form_code`, IF(creditid = 3, pdate, pdate - INTERVAL 1 DAY), @credit
                   FROM `ww_time_form_balance` 
                   WHERE user_id = userid AND form_id = @frm_id AND `year` = YEAR(pdate) AND deleted = 0
                   ON DUPLICATE KEY UPDATE accrual=@credit, modified_on=NOW();
                   
                   UPDATE `ww_time_form_balance` SET modified_on = NOW()
                   WHERE user_id = userid AND form_id = @frm_id AND `year` = YEAR(pdate) AND deleted = 0;
                END IF;
             
             END IF; -- @isok = 1
          
          END IF; -- @id_class > 0
          
       END IF;
    
    UNTIL time_form_balance_process END REPEAT;
    
    CLOSE balance_process;
    
    SELECT rec;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_form_balance_process_id` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_form_balance_process_id` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_form_balance_process_id`(IN puserid INT(11), IN pdate DATE)
BEGIN
   
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE userid INT;
    DECLARE statusid INT;
    DECLARE positioncode VARCHAR(10) ;
    DECLARE tenure_month INT;
    DECLARE tenure INT;
    DECLARE nday INT;
    DECLARE nmonth INT;
    DECLARE effdate DATE;
    DECLARE birthdate DATE;
    
    -- [1] INCREMENTS FOR EVERY MONTH OF TENURE
    DECLARE balance CURSOR FOR    
    SELECT partners.`user_id`, 
           partners.`status_id`,
	   ww_users_position.position_code,
           `regularization_date`,
	   `birth_date`,
           MONTH(`regularization_date`) AS tenure_month,
           getage(regularization_date) AS tenure,
           DAY(regularization_date) AS applicable_day, 
           IF(TIMESTAMPDIFF(MONTH,regularization_date, pdate) = 12,12,
           TIMESTAMPDIFF(MONTH,regularization_date, pdate) % 12) AS applicable_month
    FROM `partners` 
    JOIN ww_users_profile ON ww_users_profile.partner_id = partners.partner_id
    LEFT JOIN ww_users_position ON ww_users_profile.`position_id` = ww_users_position.position_id
    WHERE 
          IFNULL(`regularization_date`,'0000-00-00')<>'0000-00-00' AND 
          IFNULL(`resigned_date`,'0000-00-00')='0000-00-00' AND 
          `regularization_date` <= pdate AND
          IF(puserid=0,1,partners.`user_id`=puserid)
    ORDER BY `applicable_day`,partners.`user_id`;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        
    -- START TRANSACTION;
    OPEN balance;
    
    REPEAT
       FETCH balance INTO userid, statusid, positioncode, effdate, birthdate, tenure_month, tenure, nday, nmonth;
       
       IF NOT done THEN	
           SET rec = rec + 1;
           -- execute processing
           INSERT INTO `ww_time_form_balance` (`year`, `user_id`, `form_id`, `form_code`, `current`, `period_from`, `period_to`, `period_extension`)
              /* SELECT YEAR(pdate) applicable_year, 
                     userid, 	
                     2 formid,
                     'VL' formcode,
                     ROUND(((nmonth / 12) * 15),2) prorate, */
           SELECT YEAR(get_fiscaldate_start(pdate) + INTERVAL 1 YEAR) applicable_year, 
                  userid, 
                  ww_time_form.form_id formid,
                  ww_time_form.form_code formcode,
                  ROUND(((nmonth / 12) * 15),2) prorate,
                  get_fiscaldate_start(pdate)  period_from,
                  get_fiscaldate_end(pdate)  period_to,
                  CASE 
                  WHEN form_code = 'VL'
                  THEN get_fiscaldate_end(pdate) + INTERVAL 2 MONTH
                  WHEN form_code = 'SL'
                  THEN get_fiscaldate_end(pdate) 
                  END period_extension
           FROM ww_time_form
           WHERE form_code IN ('SL', 'VL')              
           ON DUPLICATE KEY UPDATE 
              `modified_on` = NOW(), 
              current = VALUES(current), 
              period_from = VALUES(period_from), 
              period_to = VALUES(period_to), 
              period_extension = VALUES(period_extension);
           
           -- Inserting to time_form_balance_accrual
           SET @regularization_date = (SELECT regularization_date FROM ww_partners WHERE user_id=userid);
           SET @accrual_date = @regularization_date + INTERVAL 1 MONTH;
           
           WHILE @accrual_date <= CURDATE() DO 
		 IF (SELECT COUNT(id) FROM ww_time_form_balance WHERE @accrual_date BETWEEN period_from AND period_to AND form_code IN ('SL','VL') AND user_id=userid
		 AND user_id=userid) = 0 THEN
		   	IF (SELECT COUNT(*) FROM ww_time_form_balance_accrual WHERE user_id=userid AND date_accrued=@accrual_date) = 0 THEN
				INSERT INTO ww_time_form_balance_accrual 
				(date_accrued,accrual,user_id,form_code)
				VALUES (@accrual_date, (1 / 12) * 15,userid,'SL');
				
				INSERT INTO ww_time_form_balance_accrual 
				(date_accrued,accrual,user_id,form_code)
				VALUES (@accrual_date, (1 / 12) * 15,userid,'VL');
			END IF;
		ELSE
			IF (SELECT COUNT(*) FROM ww_time_form_balance_accrual WHERE user_id=userid AND date_accrued=@accrual_date) = 0 THEN
			
			INSERT INTO ww_time_form_balance_accrual
			(leave_balance_id,date_accrued,accrual,user_id,form_code)
			VALUES(
			(SELECT id FROM ww_time_form_balance 
			WHERE @accrual_date BETWEEN period_from AND period_to
			AND form_code='SL'
			AND user_id=userid
			AND period_from != '0000-00-00'
			AND YEAR=YEAR(get_fiscaldate_start(@accrual_date))),
			@accrual_date,
			(1 / 12) * 15,
			userid,
			'SL');
			
			INSERT INTO ww_time_form_balance_accrual
			(leave_balance_id,date_accrued,accrual,user_id,form_code)
			VALUES(
			(SELECT id FROM ww_time_form_balance 
			WHERE @accrual_date BETWEEN period_from AND period_to
			AND form_code='VL'
			AND user_id=userid
			AND period_from != '0000-00-00'
			AND YEAR=YEAR(get_fiscaldate_start(@accrual_date))),
			@accrual_date,
			(1 / 12) * 15,
			userid,
			'VL');
			END IF;
		END IF;
		SET @accrual_date = @accrual_date + INTERVAL 1 MONTH;
		 
	   END WHILE;
             -- Birthday Leave
           IF (statusid = 1) THEN
		      IF (MONTH(birthdate) = MONTH(pdate)) THEN
			     INSERT INTO `ww_time_form_balance` (`year`, `user_id`, `form_id`, `form_code`, `current`, `period_from`, `period_to`, `period_extension`)
			     SELECT YEAR(pdate) applicable_year, 
			            userid, 
			            ww_time_form.form_id formid,
			            ww_time_form.form_code formcode,
			            1 prorate,
			            DATE_FORMAT(pdate,'%Y-%m-01') period_from,
			            LAST_DAY(pdate) period_to,
			            LAST_DAY(pdate) period_extension
			     FROM ww_time_form
			     WHERE form_code IN ('BL')              
			     ON DUPLICATE KEY UPDATE 
			        `modified_on` = NOW(), 
			        current = VALUES(current), 
			        period_from = VALUES(period_from), 
			        period_to = VALUES(period_to), 
			        period_extension = VALUES(period_extension);
		      END IF;
           END IF;
             
           IF (positioncode = 'GM' || positioncode = 'DOS' || positioncode = 'DOSM') THEN
		      UPDATE `ww_time_form_balance` 
			 SET 	period_to = 	CASE
						WHEN form_code = 'VL'
						THEN '2099-12-31'
						WHEN form_code = 'SL'
						THEN get_fiscaldate_end(pdate)
						END,
								
			  period_extension = 	CASE
						WHEN form_code = 'VL'
						THEN '2099-12-31'
						WHEN form_code = 'SL'
						THEN get_fiscaldate_end(pdate)
						END
		      WHERE `year` = YEAR(get_fiscaldate_start(pdate)) AND form_code = 'VL' AND `user_id` = userid;
		      
		   /*   UPDATE `ww_time_form_balance` 
		      SET period_to = get_fiscaldate_end(pdate), period_extension = get_fiscaldate_end(pdate)
		      WHERE `year` = YEAR(get_fiscaldate_start(pdate)) AND form_code = 'SL' AND `user_id` = userid;*/
           END IF;
             
        END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE balance;
    
    -- COMMIT;
    SELECT rec;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_form_balance_process_prorated` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_form_balance_process_prorated` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_form_balance_process_prorated`(IN userid INT(11), IN actionid INT(11))
BEGIN
    
    SET @effectivitydate = '';
    SET @pyear = '';
    
    -- [1] GET REGULARIZATION EFFECTIVITY DATE
    SELECT `effectivity_date`, YEAR(`effectivity_date`), effectivity_date INTO @effectivitydate, @pyear, @effectdate
    FROM `ww_partners_movement_action`
    WHERE `action_id` = actionid 
    LIMIT 1;
    
    -- [2] INITIAL CREDITS
    -- CALL sp_time_form_balance_process_credit();    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_form_balance_process_sil` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_form_balance_process_sil` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_form_balance_process_sil`(IN puserid INT(11), IN pdate DATE)
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE userid INT(11);
    DECLARE tenure INT(11);
    DECLARE effdate DATE;
    DECLARE credit INT(11);
    DECLARE form_id INT(11);
    DECLARE form_code VARCHAR(128);
    
    -- [1] INCREMENTS FOR EVERY MONTH OF TENURE
    DECLARE balance CURSOR FOR
    SELECT p.user_id, 
           p.effectivity_date,
           getage(effectivity_date) AS tenure,
           bsp.starting_credit,
           bsp.form_code, 
           bsp.form_id
    FROM `partners` p
    JOIN `users` u 
         ON u.user_id = p.user_id AND u.active = 1
    JOIN `ww_time_form_balance_setup` bs 
         ON bs.deleted = 0 AND bs.employment_status_id = p.status_id AND bs.employment_type_id = p.employment_type_id
    JOIN `ww_time_form_balance_setup_policy` bsp 
         ON bsp.deleted = 0 AND bsp.balance_setup_id = bs.balance_setup_id AND 
            p.effectivity_date BETWEEN bs.from AND bs.to 
    WHERE 
          IFNULL(p.effectivity_date,'0000-00-00')<>'0000-00-00' AND 
          IFNULL(`resigned_date`,'0000-00-00')='0000-00-00' AND 
          p.effectivity_date = pdate AND
          IF(puserid=0,1,p.user_id=puserid)
          AND bsp.form_code = 'SIL'
    ORDER BY p.user_id;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        
    -- START TRANSACTION;
    OPEN balance;
    
    REPEAT
       FETCH balance INTO userid, effdate, tenure, credit, form_code, form_id;
       
       IF NOT done THEN
           SET rec = rec + 1;
           
           -- execute processing
           IF (tenure >= 1) THEN
              
              INSERT INTO `ww_time_form_balance` (`year`, `user_id`, `form_id`, `form_code`, `current`)
              SELECT YEAR(pdate) applicable_year, 
                     userid, 
                     form_id formid,
                     form_code formcode,
                     credit
              ON DUPLICATE KEY UPDATE 
                 `modified_on` = NOW();
              
           END IF;
           
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE balance;
    
    -- COMMIT;
    SELECT rec;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_form_leave_conversion` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_form_leave_conversion` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_form_leave_conversion`()
BEGIN
	update ww_time_form_balance tfb,ww_users u
	set tfb.paid_unit = if(tfb.balance > 10, 10, tfb.balance)
	where ((tfb.user_id = u.user_id )
	AND (u.user_id = p.user_id )
	AND tfb.year = YEAR(CURDATE() - INTERVAL 1 YEAR) 
	AND (u.active = 1)
	AND (p.status_id <> 2 AND p.status_id <> 5)
	AND (form_id = 22));	  
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_form_leave_conversion_curr_year` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_form_leave_conversion_curr_year` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_form_leave_conversion_curr_year`()
BEGIN
	update ww_time_form_balance tfb,ww_users u,ww_partners p
	set tfb.paid_unit = if(tfb.balance > 10, 10, if(tfb.balance > 0,tfb.balance,0))
	where ((tfb.user_id = u.user_id)
	and (u.user_id = p.user_id )
	AND (tfb.year = year(curdate())) 
	AND (u.active = 1)
	and (p.status_id <> 2)
	AND (form_id = 22));	      
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_form_leave_forfeiture` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_form_leave_forfeiture` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_form_leave_forfeiture`()
BEGIN
	UPDATE ww_time_form_balance tfb
	SET tfb.forfeited = IF(tfb.previous > 0 AND get_leave_used_carry_over(tfb.user_id,YEAR(CURDATE())) > 0,IF(tfb.previous - get_leave_used_carry_over(tfb.user_id,YEAR(CURDATE())) > 0,tfb.previous - get_leave_used_carry_over(tfb.user_id,YEAR(CURDATE())),0),0)
	WHERE tfb.year=YEAR(CURDATE())
	AND tfb.form_id = 22;  
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_generate_approvers` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_generate_approvers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_generate_approvers`()
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE forms CURSOR FOR
       SELECT  tr.`forms_id`, tr.`user_id` FROM `time_forms` tr WHERE `deleted`=0;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
    -- START TRANSACTION;
        
    OPEN forms;
    
    REPEAT
       FETCH forms INTO recordid, userid;
       
       IF NOT done THEN
       
           CALL `sp_time_forms_populate_approvers`(recordid, userid);
          
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE forms;
    
    -- COMMIT;
    
    SELECT rec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_generate_aux` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_generate_aux` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_generate_aux`()
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE userid INT;
    DECLARE formcode VARCHAR(8);
    DECLARE formsid INT; 
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE forms CURSOR FOR
       SELECT  tr.`form_code`, tr.`user_id`, tr.`forms_id` 
       FROM `time_forms` tr WHERE `form_status_id`=6;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
 
    -- START TRANSACTION;
        
    OPEN forms;
    
    REPEAT
       FETCH forms INTO formcode, userid, formsid;
       
       IF NOT done THEN
           SET rec = rec + 1;
           CALL `sp_time_forms_aux_shift`(formcode, userid, formsid);
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE forms;
    
    -- COMMIT;
    
    SELECT rec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_performace_planning_reminder` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_performace_planning_reminder` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_performace_planning_reminder`()
BEGIN
    
    DECLARE done TINYINT(1) DEFAULT 0;
    DECLARE userid INT(11);
    DECLARE planningid INT(11);
    DECLARE yearid INT(1);
    DECLARE email VARCHAR(128);
     
    DECLARE rec INT(11) DEFAULT 0;
     
    DECLARE planning CURSOR FOR
       SELECT pp.`planning_id`, ppa.`user_id`, u.`email`, pp.`year`
       FROM `ww_performance_planning` pp
       JOIN `ww_performance_planning_reminder` ppr ON ppr.`planning_id`=pp.`planning_id` AND ppr.`deleted`=0
       JOIN `ww_performance_planning_applicable` ppa ON ppa.`planning_id`=pp.`planning_id`
       JOIN `users` u ON u.`user_id`=ppa.`user_id`
       WHERE pp.`deleted`=0 AND ppr.`notification_id`=1 AND ppr.`date`=CURDATE();
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    SET @system_url = (SELECT `value` FROM `ww_config` WHERE `key`='URL' LIMIT  1);
    SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
    SET @system_author = (SELECT `value` FROM `ww_config` WHERE `key`='author' LIMIT  1);
    SET @system_fromaddress = (SELECT `value` FROM `ww_config` WHERE `key`='from_address' LIMIT  1);
    
    SET @emailto = @system_fromaddress;
    SET @emailsubject = '';
    SET @emailbody = '';
    SET @tbody = '';
    SET @bcc = ''; 
    SET @url = '';
     
    -- template 
    SELECT `subject`,`body` INTO @emailsubject, @emailbody
    FROM `ww_system_template`
    WHERE `code`='PPA-REMINDER' AND deleted=0 LIMIT 1;
    
    IF @emailsubject <> '' THEN
       SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
       SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @system_url);
       SET @emailbody = REPLACE(@emailbody, '{{system_author}}', @system_author);
       
       SET @count_recipients = 0;
       SET @is_hundred = 0;
       
       
       OPEN planning;
         
       REPEAT
          FETCH planning INTO planningid, userid, email, yearid;
          
          IF NOT done THEN
       
             SET rec = rec + 1;
             SET @bcc = CONCAT(email,', ', @bcc);
             SET @is_hundred = @count_recipients % 100;
             
             -- 
             SET @emailbody = REPLACE(@emailbody, '{{year}}', yearid);
             
             -- 
             IF @is_hundred = 0 AND @count_recipients > 0 THEN
                INSERT INTO `ww_system_email_queue` (`to`, `bcc`, `subject`,`body`)
                SELECT @emailto, @bcc, @emailsubject, @emailbody;
                SET @bcc = ''; -- reset
             END IF;
             
             SET @count_recipients = @count_recipients + 1;
          
          END IF;
       UNTIL done END REPEAT;
	 
       CLOSE planning;
       
       IF (CHAR_LENGTH(@bcc) > 0) THEN 
          INSERT INTO `ww_system_email_queue` (`to`, bcc, `subject`,`body`)
          SELECT @emailto, @bcc, @emailsubject, @emailbody;
       END IF;
       
    END IF;
     
    SELECT rec;
     
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_late_attnd_deduction` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_late_attnd_deduction` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_late_attnd_deduction`(
	IN prev_periodid INT(11),
	IN puserid INT(11),
	in dtPay date,
	IN cur_periodid INT(11)
    )
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE employee_id INT(11);
	DECLARE comp_id INT(11);
	DECLARE salary DECIMAL(12,2);
	DECLARE dates DATE;
	DECLARE orig_paydate DATE;
	DECLARE rec_id INT(11);
	DECLARE absent TINYINT(1);
	DECLARE lwop DECIMAL(5,2);
	DECLARE late DECIMAL(5,2);
	DECLARE undertime DECIMAL(5,2);
	DECLARE total_days DECIMAL(5,2);
	DECLARE day_type VARCHAR(32);
	
	DECLARE dtr CURSOR FOR
		SELECT p.`user_id`, u.`company_id`, AES_DECRYPT( p.`salary`,encryption_key() ) AS salary ,
			rp.`date`, rs.`payroll_date`, rs.`record_id`, 
			SUM((CASE transaction_code WHEN 'ABSENCES' THEN rp.quantity ELSE 0 END))*COUNT(DISTINCT rp.date)/COUNT(*) AS absent,
			SUM((CASE transaction_code WHEN 'LWOP' THEN rp.quantity ELSE 0 END))*COUNT(DISTINCT rp.date)/COUNT(*) AS lwop,
			SUM((CASE transaction_code WHEN 'DEDUCTION_LATE' THEN rp.quantity ELSE 0 END))*COUNT(DISTINCT rp.date)/COUNT(*) AS late,
			SUM((CASE transaction_code WHEN 'DEDUCTION_UNDERTIME' THEN rp.quantity ELSE 0 END))*COUNT(DISTINCT rp.date)/COUNT(*) AS undertime,
			-- SUM((CASE transaction_code WHEN 'ABSENCES' THEN rp.quantity ELSE 0 END)) AS absent,
			-- SUM((CASE transaction_code WHEN 'LWOP' THEN rp.quantity ELSE 0 END)) AS lwop,
			-- SUM((CASE transaction_code WHEN 'DEDUCTION_LATE' THEN rp.quantity ELSE 0 END)) AS late,
			-- SUM((CASE transaction_code WHEN 'DEDUCTION_UNDERTIME' THEN rp.quantity ELSE 0 END)) AS undertime,
			p.`total_year_days`, rs.`day_type`, dtPay, cur_periodid
		FROM ww_time_record_process rp
		INNER JOIN ww_time_record_summary rs ON rp.date = rs.date AND rs.`user_id` = rp.user_id
		INNER JOIN ww_payroll_partners p ON rp.`user_id` = p.`user_id`
		INNER JOIN ww_time_period t ON t.`payroll_date` = rs.`payroll_date`
		INNER JOIN ww_users_profile u ON p.`user_id` = u.`user_id`
		WHERE rp.`date` BETWEEN t.`date_from` AND t.`date_to` 
			AND IF(puserid=0,1,p.`user_id`=puserid) AND t.`period_id` = prev_periodid AND t.`company_id` = u.`company_id`
			AND rp.transaction_code in ('ABSENCES','LWOP','DEDUCTION_UNDERTIME','DEDUCTION_LATE')
		GROUP BY rp.date, rp.`user_id`;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	
	OPEN dtr;
	
	myLoop: LOOP
		FETCH dtr INTO employee_id, comp_id, salary, dates, orig_paydate, rec_id, absent, lwop, late, undertime, total_days, day_type, dtPay, cur_periodid ;
		
		IF done THEN
		    CLOSE dtr;
		    LEAVE myLoop;
		END IF;		
		
		SET @hourly_rate = 0;
		SET @hourly_rate = ( salary / ( total_days / 12 ) ) / 8;
		SET @OrigPaydate = orig_paydate;
		SET @latefile = 1;
		
		IF absent != 0 THEN 
			DELETE FROM ww_time_record_process 
			WHERE user_id = employee_id AND payroll_date = dtPay and `date` = dates
				AND original_payroll_date = orig_paydate AND transaction_code = 'ABSENCES_ADJ';
			SET @tran_code = 'ABSENCES_ADJ';
			SET @qty = 0;
			SET @qty = time_validate_attendance_deduction( employee_id, dates, absent, 'ABSENCES' );
			if @qty != 0 then
				CALL sp_time_period_summary_insert( rec_id, employee_id, dates, dtPay, @OrigPaydate, @latefile, @tran_code, @qty, @hourly_rate, cur_periodid);
			end if;
		END IF;
		
		/* IF lwop != 0 THEN
			DELETE FROM ww_time_record_process 
			WHERE user_id = employee_id AND payroll_date = dtPay AND `date` = dates
				AND original_payroll_date = orig_paydate AND transaction_code = 'LWOP_ADJ';
			SET @tran_code = 'LWOP_ADJ';
			SET @qty = 0;
			SET @qty = time_validate_attendance_deduction( employee_id, dates, lwop, 'LWOP' );
			IF @qty != 0 THEN
				CALL sp_time_period_summary_insert( rec_id, employee_id, dates, dtPay, @OrigPaydate, @latefile, @tran_code, @qty, @hourly_rate, cur_periodid);
			end if;
		END IF; */
		
		IF late != 0 THEN
			DELETE FROM ww_time_record_process 
			WHERE user_id = employee_id AND payroll_date = dtPay AND `date` = dates
				AND original_payroll_date = orig_paydate AND transaction_code = 'DEDUCTION_LATE_ADJ';
			SET @tran_code = 'DEDUCTION_LATE_ADJ';
			SET @qty = 0;
			SET @qty = time_validate_attendance_deduction( employee_id, dates, late, 'DEDUCTION_LATE' );
			IF @qty != 0 THEN
				CALL sp_time_period_summary_insert( rec_id, employee_id, dates, dtPay, @OrigPaydate, @latefile, @tran_code, @qty, @hourly_rate, cur_periodid);
			end if;
		END IF;
		
		IF undertime != 0 THEN
			DELETE FROM ww_time_record_process 
			WHERE user_id = employee_id AND payroll_date = dtPay AND `date` = dates
				AND original_payroll_date = orig_paydate AND transaction_code = 'DEDUCTION_UNDERTIME_ADJ';
			SET @tran_code = 'DEDUCTION_UNDERTIME_ADJ';
			SET @qty = 0;
			SET @qty = time_validate_attendance_deduction( employee_id, dates, undertime, 'DEDUCTION_UNDERTIME' );
			IF @qty != 0 THEN
				CALL sp_time_period_summary_insert( rec_id, employee_id, dates, dtPay, @OrigPaydate, @latefile, @tran_code, @qty, @hourly_rate, cur_periodid);
			end if;
		END IF;
	END LOOP;
	
	END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_late_attnd_deduction_2` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_late_attnd_deduction_2` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_late_attnd_deduction_2`(
	IN prev_periodid INT(11),
	IN puserid INT(11),
	in dtPay date,
	IN cur_periodid INT(11)
    )
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE employee_id INT(11);
	DECLARE comp_id INT(11);
	DECLARE salary DECIMAL(12,2);
	DECLARE dates DATE;
	DECLARE orig_paydate DATE;
	DECLARE rec_id INT(11);
	DECLARE absent TINYINT(1);
	DECLARE lwop DECIMAL(5,2);
	DECLARE late DECIMAL(5,2);
	DECLARE undertime DECIMAL(5,2);
	DECLARE total_days DECIMAL(5,2);
	DECLARE day_type VARCHAR(32);
	
	DECLARE dtr CURSOR FOR
		SELECT p.`user_id`, u.`company_id`, AES_DECRYPT( p.`salary`,encryption_key() ) AS salary ,
			rp.`date`, rs.`payroll_date`, rs.`record_id`, 
			SUM((CASE transaction_code WHEN 'ABSENCES' THEN rp.quantity ELSE 0 END)) AS absent,
			SUM((CASE transaction_code WHEN 'LWOP' THEN rp.quantity ELSE 0 END)) AS lwop,
			SUM((CASE transaction_code WHEN 'DEDUCTION_LATE' THEN rp.quantity ELSE 0 END)) AS late,
			SUM((CASE transaction_code WHEN 'DEDUCTION_UNDERTIME' THEN rp.quantity ELSE 0 END)) AS undertime,
			p.`total_year_days`, rs.`day_type`, dtPay, cur_periodid
		FROM ww_time_record_process rp
		INNER JOIN ww_time_record_summary rs ON rp.date = rs.date AND rs.`user_id` = rp.user_id
		INNER JOIN ww_payroll_partners p ON rp.`user_id` = p.`user_id`
		INNER JOIN ww_time_period t ON t.`payroll_date` = rs.`payroll_date`
		INNER JOIN ww_users_profile u ON p.`user_id` = u.`user_id`
		WHERE rp.`date` BETWEEN t.`date_from` AND t.`date_to` 
			AND IF(puserid=0,1,p.`user_id`=puserid) AND t.`period_id` = prev_periodid AND t.`company_id` = u.`company_id`
			AND rp.transaction_code in ('ABSENCES','LWOP','DEDUCTION_UNDERTIME','DEDUCTION_LATE')
		GROUP BY rp.date, rp.`user_id`;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
	
	OPEN dtr;
	
	INSERT INTO `logtable` (`log`) SELECT 'Start.';
	myLoop: LOOP
		FETCH dtr INTO employee_id, comp_id, salary, dates, orig_paydate, rec_id, absent, lwop, late, undertime, total_days, day_type, dtPay, cur_periodid ;
		
		IF done THEN
		    CLOSE dtr;
		    LEAVE myLoop;
		END IF;		
		
		SET @hourly_rate = 0;
		SET @hourly_rate = ( salary / ( total_days / 12 ) ) / 8;
		SET @OrigPaydate = orig_paydate;
		SET @latefile = 1;
		
		IF absent != 0 THEN 
			DELETE FROM ww_time_record_process 
			WHERE user_id = employee_id AND payroll_date = dtPay and `date` = dates
				AND original_payroll_date = orig_paydate AND transaction_code = 'ABSENCES_ADJ';
			SET @tran_code = 'ABSENCES_ADJ';
			SET @qty = 0;
			INSERT INTO `logtable` (`log`) SELECT CONCAT('time_validate_attendance_deduction', ', ', employee_id, ', ', dates, ', ', absent, ', ', 'ABSENCES' );
			SET @qty = time_validate_attendance_deduction( employee_id, dates, absent, 'ABSENCES' );
			if @qty != 0 then
				-- CALL sp_time_period_summary_insert( rec_id, employee_id, dates, dtPay, @OrigPaydate, @latefile, @tran_code, @qty, @hourly_rate, cur_periodid);
				INSERT INTO `logtable` (`log`) SELECT CONCAT('sp_time_period_summary_insert', ', ',rec_id, ', ',employee_id, ', ',dates, ', ',dtPay, ', ',@OrigPaydate, ', ',@latefile, ', ',@tran_code, ', ',@qty, ', ',@hourly_rate, ', ',cur_periodid);
			end if;
		END IF;
		
		IF lwop != 0 THEN
			DELETE FROM ww_time_record_process 
			WHERE user_id = employee_id AND payroll_date = dtPay AND `date` = dates
				AND original_payroll_date = orig_paydate AND transaction_code = 'LWOP_ADJ';
			SET @tran_code = 'LWOP_ADJ';
			SET @qty = 0;
			INSERT INTO `logtable` (`log`) SELECT CONCAT('time_validate_attendance_deduction', ', ', employee_id, ', ', dates, ', ', lwop, ', ', 'LWOP' );
			SET @qty = time_validate_attendance_deduction( employee_id, dates, lwop, 'LWOP' );
			IF @qty != 0 THEN
				-- CALL sp_time_period_summary_insert( rec_id, employee_id, dates, dtPay, @OrigPaydate, @latefile, @tran_code, @qty, @hourly_rate, cur_periodid);
				INSERT INTO `logtable` (`log`) SELECT CONCAT('sp_time_period_summary_insert', ', ',rec_id, ', ',employee_id, ', ',dates, ', ',dtPay, ', ',@OrigPaydate, ', ',@latefile, ', ',@tran_code, ', ',@qty, ', ',@hourly_rate, ', ',cur_periodid);
			end if;
		END IF;
		
		IF late != 0 THEN
			DELETE FROM ww_time_record_process 
			WHERE user_id = employee_id AND payroll_date = dtPay AND `date` = dates
				AND original_payroll_date = orig_paydate AND transaction_code = 'DEDUCTION_LATE_ADJ';
			SET @tran_code = 'DEDUCTION_LATE_ADJ';
			SET @qty = 0;
			INSERT INTO `logtable` (`log`) SELECT CONCAT('time_validate_attendance_deduction', ', ', employee_id, ', ', dates, ', ', late, ', ', 'DEDUCTION_LATE' );
			SET @qty = time_validate_attendance_deduction( employee_id, dates, late, 'DEDUCTION_LATE' );
			IF @qty != 0 THEN
				-- CALL sp_time_period_summary_insert( rec_id, employee_id, dates, dtPay, @OrigPaydate, @latefile, @tran_code, @qty, @hourly_rate, cur_periodid);
				INSERT INTO `logtable` (`log`) SELECT CONCAT('sp_time_period_summary_insert', ', ',rec_id, ', ',employee_id, ', ',dates, ', ',dtPay, ', ',@OrigPaydate, ', ',@latefile, ', ',@tran_code, ', ',@qty, ', ',@hourly_rate, ', ',cur_periodid);
			end if;
		END IF;
		
		IF undertime != 0 THEN
			DELETE FROM ww_time_record_process 
			WHERE user_id = employee_id AND payroll_date = dtPay AND `date` = dates
				AND original_payroll_date = orig_paydate AND transaction_code = 'DEDUCTION_UNDERTIME_ADJ';
			SET @tran_code = 'DEDUCTION_UNDERTIME_ADJ';
			SET @qty = 0;
			INSERT INTO `logtable` (`log`) SELECT CONCAT('time_validate_attendance_deduction', ', ', employee_id, ', ', dates, ', ', undertime, ', ', 'DEDUCTION_UNDERTIME' );
			SET @qty = time_validate_attendance_deduction( employee_id, dates, undertime, 'DEDUCTION_UNDERTIME' );
			IF @qty != 0 THEN
				-- CALL sp_time_period_summary_insert( rec_id, employee_id, dates, dtPay, @OrigPaydate, @latefile, @tran_code, @qty, @hourly_rate, cur_periodid);
				INSERT INTO `logtable` (`log`) SELECT CONCAT('sp_time_period_summary_insert', ', ',rec_id, ', ',employee_id, ', ',dates, ', ',dtPay, ', ',@OrigPaydate, ', ',@latefile, ', ',@tran_code, ', ',@qty, ', ',@hourly_rate, ', ',cur_periodid);
			end if;
		END IF;
	END LOOP;
	INSERT INTO `logtable` (`log`) SELECT 'Done.';
	END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_late_overtime` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_late_overtime` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_late_overtime`( 
	IN periodid INT(11),
	IN puserid INT(11)	
	)
BEGIN
	SET @nCompID = 0;
	SET @dtPay = '0000-00-00';	
	SELECT company_id, payroll_date INTO @nCompID, @dtPay FROM ww_time_period
	WHERE period_id = periodid;
	
	SET @nPeriod = time_get_previous_period(periodid);
	SET @dtFrom = get_time_period_from(@nPeriod, @nCompID);
	SET @dtTo = get_time_period_to(@nPeriod, @nCompID);
	
	BEGIN
		DECLARE done TINYINT(1) DEFAULT 0;
		DECLARE emp_id INT(11);
		DECLARE frm_id INT(11);
		DECLARE dtApprv DATETIME;
		DECLARE dtTimeFrm DATETIME;
		DECLARE dtTimeTo DATETIME;
		DECLARE dtDate DATE;
		DECLARE paydate DATE;
		DECLARE comp_id INT(11);
		DECLARE period_id INT(11);
		DECLARE overtime CURSOR FOR
			SELECT a.`user_id`, a.`forms_id`, DATE(a.`date_approved`), b.`time_from`, b.`time_to`, b.`date`, @nCompID, @dtPay, @nPeriod
			FROM ww_time_forms a
			LEFT JOIN ww_time_forms_date b ON a.forms_id = b.forms_id
			LEFT JOIN ww_users_profile up ON up.`user_id` = a.`user_id`
			WHERE a.`deleted` = 0 AND b.`deleted` = 0
				AND a.`form_status_id` = 6 AND a.`date_approved` IS NOT NULL AND a.`form_code` = 'OT'
				AND IF(puserid=0,1,a.`user_id`=puserid)
				AND up.company_id = @nCompID
				AND b.`date` BETWEEN @dtFrom AND @dtTo
				AND date(a.`date_approved`) > time_get_cut_off( b.`date`, @nCompID )
			UNION
			SELECT tfb.`user_id`, tf.`forms_id`, DATE(tf.`created_on`), tfd.`time_from`, tfd.`time_to`, tfd.`date`, @nCompID, @dtPay, @nPeriod
			FROM ww_time_forms tf, ww_time_forms_date tfd, ww_time_forms_blanket tfb, ww_users_profile up
			WHERE tf.`forms_id` = tfd.`forms_id` AND tf.`deleted` = 0 AND tfd.`deleted` = 0
				AND tf.`forms_id` = tfb.`forms_id` AND tfb.deleted = 0
				and tfb.user_id = up.user_id
				AND if(puserid=0,1,tfb.user_id=puserid) AND tfd.date BETWEEN @dtFrom AND @dtTo 
				AND DATE(tf.created_on) > time_get_cut_off( tfd.date, @nCompID)
				AND tf.`form_code` = 'OT'
				and up.company_id = @nCompID;
		DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
		
		OPEN overtime;
		
		myLoop: LOOP
			FETCH overtime INTO emp_id, frm_id, dtApprv, dtTimeFrm, dtTimeTo, dtDate, comp_id,  paydate, period_id ;
			
			IF done THEN
			    CLOSE overtime;
			    LEAVE myLoop;
			END IF;
			-- get shift
			DELETE FROM ww_time_record_process WHERE record_id = frm_id AND user_id = emp_id ;
			
			SET @ActualIN = "";
			SET @ActualOUT = "";
			SET @otStart = "";
			SET @otEnd = "";
			SET @nHourlyRate = 0;
			SET @nSalary = 0;
			SET @nTotalDays = 0;
			SELECT AES_DECRYPT(salary, encryption_key()), total_year_days
			INTO @nSalary, @nTotalDays
			FROM ww_payroll_partners WHERE user_id = emp_id;
			
			SET @nHourlyRate = ( @nSalary / ( @nTotalDays / 12 ) ) / 8;
			
			SET @sDayType = get_time_daytype(emp_id, dtDate);
			SET @ShiftID = 0;
			SET @ShiftID = time_get_shift(emp_id, dtDate);
			-- get sched out
			SET @SchedOut = CONCAT(dtDate, ' ', time_get_sched_out( @ShiftID ) );
			SET @SchedIn = CONCAT(dtDate, ' ', time_get_sched_in( @ShiftID ) );
			-- get current ND set up
			SET @curStartND = CONCAT(dtDate, ' ', time_get_nd_start( @ShiftID, comp_id ) );
			SET @curEndND = CONCAT( ADDDATE( dtDate, 1 ), ' ', time_get_nd_end( @ShiftID, comp_id ) );
			-- get previous ND set up
			SET @prevStartND = CONCAT( ADDDATE( dtDate, -1 ), ' ', time_get_nd_start( @ShiftID, comp_id ) );
			SET @prevEndND = CONCAT( dtDate, ' ', time_get_nd_end( @ShiftID, comp_id ) );
			-- get actual time in / out
			SET @ActualIN = time_get_time_in( emp_id, dtDate);
			SET @ActualOUT = time_get_time_out( emp_id, dtDate);
			
			SET @OrigPaydate = '0000-00-00';
			SET @dtPaydate = '0000-00-00';
			SET @latefile = 0;
			SET @cutoff = time_get_cut_off( dtDate, comp_id );
			IF dtApprv > @cutoff THEN
				-- set original payroll date
				SET @latefile = 1;
				SET @OrigPaydate = time_get_payroll_date( dtDate, comp_id );
				SET @dtPaydate = time_get_payroll_date( dtApprv, comp_id );
			ELSE 
				SET @latefile = 0;
				SET @dtPaydate = paydate;
				SET @OrigPaydate = paydate;
			END IF;
			
			-- start of regular 
			IF @sDayType = 'REGULAR' THEN
				-- pre shift ot
				IF dtTimeFrm < @SchedIn THEN
					
					IF dtTimeTo >= @SchedIn THEN
						SET @otEnd =  @SchedIn;
					END IF;
					IF dtTimeTo < @SchedIn THEN
						SET @otEnd =  dtTimeTo;
					END IF;
					
					SET @otStart = dtTimeFrm;
					IF dtTimeFrm < @ActualIN THEN
						SET @otStart = @ActualIN;
					END IF;
					
					SET @otUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
					IF @otUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = 'REGOT';
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
					END IF;
					-- check if has ND
					IF @ActualIN < @prevEndND THEN
						IF dtTimeFrm <= @prevStartND THEN
							SET @ndStart = @prevStartND;
						END IF;
						IF dtTimeFrm > @prevStartND THEN
							SET @ndStart = dtTimeFrm;
						END IF;
						SET @ndStart = @ActualIN;
						IF @ActualIN < dtTimeFrm THEN
							SET @ndStart = dtTimeFrm;
						END IF;
						SET @ndEnd = @prevEndND;
						IF dtTimeTo < @prevEndND THEN
							SET @ndEnd = dtTimeTo;
						END IF;
						
						SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );					
						IF @ndUnit > 0 THEN
							SET @tran_code = '';
							SET @tran_code = 'REGOT_ND';
							SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
							CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
						END IF;
					END IF;
				-- after shift ot
				ELSEIF dtTimeFrm > @SchedIn THEN
					IF dtTimeFrm <= @SchedOut THEN
						SET @otStart = @SchedOut;
					END IF;
					IF dtTimeFrm > @SchedOut THEN
						SET @otStart = dtTimeFrm;
					END IF;
					
					SET @otEnd = dtTimeTo;
					IF dtTimeTo > @ActualOUT THEN	
						SET @otEnd = @ActualOUT;
					END IF;
					
					SET @otUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
					IF @otUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = 'REGOT';
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
					END IF;
					-- check if has ND
					IF @ActualOUT > @curStartND THEN
						IF dtTimeTo >= @curEndND THEN
							SET @ndEnd = @curEndND;
						END IF;
						IF dtTimeTo < @curEndND THEN
							SET @ndEnd = dtTimeTo;
						END IF;
						IF dtTimeTo > @ActualOUT THEN
							SET @ndEnd = @ActualOUT;
						END IF;
						
						IF dtTimeFrm <= @curStartND THEN
							SET @ndStart = @curStartND;
						END IF;
						IF dtTimeFrm > @curStartND THEN
							SET @ndStart = dtTimeFrm;
						END IF;
						
						SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
						IF @ndUnit > 0 THEN
							SET @tran_code = '';
							SET @tran_code = 'REGOT_ND';
							SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
							CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
						END IF;
					END IF;
				END IF;
				-- end of regular
			
			ELSE 
				IF @sDayType = 'RESTDAY' OR @sDayType = 'OFF' THEN
					SET @trans = 'RDOT';
				ELSEIF @sDayType = 'LEGAL' THEN
					IF @ShiftID = 1 THEN
						SET @trans = 'LEGRDOT';
					ELSE		
						SET @trans = 'LEGOT';
					END IF;
				ELSEIF @sDayType = 'SPECIAL' THEN
					IF @ShiftID = 1 THEN
						SET @trans = 'SPERDOT';
					ELSE
						SET @trans = 'SPEOT';
					END IF;
				ELSEIF @sDayType = 'DOUBLE' THEN
					IF @ShiftID = 1 THEN
						SET @trans = 'DOBRDOT';
					ELSE
						SET @trans = 'DOBOT';
					END IF;
				END IF;
				
				IF @ActualIN <= dtTimeFrm THEN
					SET @otStart = dtTimeFrm;
				ELSEIF @ActualIN > dtTimeFrm THEN
					SET @otStart = @ActualIN;
				END IF;
				SET @otStart = dtTimeFrm;
				
				IF @ActualOUT >= dtTimeTo THEN
					SET @otEnd = dtTimeTo;
				ELSEIF @ActualOUT < dtTimeTo THEN
					SET @otEnd = @ActualOUT;
				END IF;
				SET @otEnd = dtTimeTo;
				
				SET @Unit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
				
				IF @Unit > 8 THEN
					SET @otUnit = 8.00;
					IF @otUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = @trans;
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
					END IF;
					SET @otUnitExcess = @Unit - 8.00;
					IF @otUnitExcess > 0 THEN
						SET @tran_code = '';
						SET @tran_code = CONCAT(@trans,'_EXCESS');
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnitExcess, @ot_rate, period_id);
					END IF;
				ELSE 
					SET @otUnit = @Unit;
					IF @otUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = @trans;
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
					END IF;
				END IF;
				-- check if first 8 hours has ND
				-- ND on the Ot Start
				IF @otStart < @prevEndND THEN
					SET @ndStart = @otStart;
					SET @ndEnd = @prevEndND;
					SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
					
					IF @ndUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = CONCAT(@trans,'_ND');
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
					END IF;
				END IF;
				-- ND on the First 8 Hrs
				SET @firstEight = ADDTIME( @otStart, '08:00:00' );
				
				IF @curStartND < @firstEight THEN
					SET @ndStart = @curStartND;
					SET @ndEnd = @firstEight;
					IF @firstEight > @otEnd THEN
						SET @ndEnd = @otEnd;
					END IF;
					SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
					IF @ndUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = CONCAT(@trans,'_ND');
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
					END IF;
				END IF;
				-- ND on the Remaining Hrs
				IF @firstEight < @otEnd THEN
					IF @firstEight > @curStartND THEN
						SET @ndStart = @firstEight;
					ELSE 
						SET @ndStart = @curStartND;
					END IF;
					
					SET @ndEnd = @otEnd;
					IF @otEnd > @curEndND THEN
						SET @ndEnd = @curEndND;
					END IF;
					IF @ndEnd > @ndStart THEN
						SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
					END IF;		
					IF @ndUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = CONCAT(@trans,'_ND_EXCESS');
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
					END IF;	
				END IF;			
			END IF;		
		END LOOP;
		END;
	END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_late_overtime_2` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_late_overtime_2` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_late_overtime_2`( 
	IN periodid INT(11),
	IN puserid INT(11)	
	)
BEGIN
	SET @nCompID = 0;
	SET @dtPay = '0000-00-00';	
	SELECT company_id, payroll_date INTO @nCompID, @dtPay FROM ww_time_period
	WHERE period_id = periodid;
	
	SET @nPeriod = time_get_previous_period(periodid);
	SET @dtFrom = get_time_period_from(@nPeriod, @nCompID);
	SET @dtTo = get_time_period_to(@nPeriod, @nCompID);
	
	BEGIN
		DECLARE done TINYINT(1) DEFAULT 0;
		DECLARE emp_id INT(11);
		DECLARE frm_id INT(11);
		DECLARE dtApprv DATETIME;
		DECLARE dtTimeFrm DATETIME;
		DECLARE dtTimeTo DATETIME;
		DECLARE dtDate DATE;
		DECLARE paydate DATE;
		DECLARE comp_id INT(11);
		DECLARE period_id INT(11);
		DECLARE overtime CURSOR FOR
			SELECT a.`user_id`, a.`forms_id`, DATE(a.`date_approved`), b.`time_from`, b.`time_to`, b.`date`, @nCompID, @dtPay, @nPeriod
			FROM ww_time_forms a
			LEFT JOIN ww_time_forms_date b ON a.forms_id = b.forms_id
			LEFT JOIN ww_users_profile up ON up.`user_id` = a.`user_id`
			WHERE a.`deleted` = 0 AND b.`deleted` = 0
				AND a.`form_status_id` = 6 AND a.`date_approved` IS NOT NULL AND a.`form_code` = 'OT'
				AND IF(puserid=0,1,a.`user_id`=puserid)
				AND up.company_id = @nCompID
				AND b.`date` BETWEEN @dtFrom AND @dtTo
				AND date(a.`date_approved`) > time_get_cut_off( b.`date`, @nCompID )
			UNION
			SELECT tfb.`user_id`, tf.`forms_id`, DATE(tf.`created_on`), tfd.`time_from`, tfd.`time_to`, tfd.`date`, @nCompID, @dtPay, @nPeriod
			FROM ww_time_forms tf, ww_time_forms_date tfd, ww_time_forms_blanket tfb, ww_users_profile up
			WHERE tf.`forms_id` = tfd.`forms_id` AND tf.`deleted` = 0 AND tfd.`deleted` = 0
				AND tf.`forms_id` = tfb.`forms_id` AND tfb.deleted = 0
				and tfb.user_id = up.user_id
				AND if(puserid=0,1,tfb.user_id=puserid) AND tfd.date BETWEEN @dtFrom AND @dtTo 
				AND DATE(tf.created_on) > time_get_cut_off( tfd.date, @nCompID)
				AND tf.`form_code` = 'OT'
				and up.company_id = @nCompID;
		DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
		
		OPEN overtime;
		
		myLoop: LOOP
			FETCH overtime INTO emp_id, frm_id, dtApprv, dtTimeFrm, dtTimeTo, dtDate, comp_id,  paydate, period_id ;
			
			IF done THEN
			    CLOSE overtime;
			    LEAVE myLoop;
			END IF;
			-- get shift
			SELECT 'start';
			DELETE FROM ww_time_record_process WHERE record_id = frm_id AND user_id = emp_id ;
			
			SET @ActualIN = "";
			SET @ActualOUT = "";
			SET @otStart = "";
			SET @otEnd = "";
			SET @nHourlyRate = 0;
			SET @nSalary = 0;
			SET @nTotalDays = 0;
			SELECT AES_DECRYPT(salary, encryption_key()), total_year_days
			INTO @nSalary, @nTotalDays
			FROM ww_payroll_partners WHERE user_id = emp_id;
			
			SET @nHourlyRate = ( @nSalary / ( @nTotalDays / 12 ) ) / 8;
			SELECT 'get_time_daytype',emp_id, dtDate;
			SET @sDayType = get_time_daytype(emp_id, dtDate);
			SET @ShiftID = 0;
			SELECT 'time_get_shift', emp_id, dtDate;
			SET @ShiftID = time_get_shift(emp_id, dtDate);
			-- get sched out
			SELECT 'time_get_sched_out', @ShiftID;
			SET @SchedOut = CONCAT(dtDate, ' ', time_get_sched_out( @ShiftID ) );
			SELECT 'time_get_sched_in', @ShiftID;
			SET @SchedIn = CONCAT(dtDate, ' ', time_get_sched_in( @ShiftID ) );
			-- get current ND set up
			SELECT 'time_get_nd_start', @ShiftID, comp_id;
			SET @curStartND = CONCAT(dtDate, ' ', time_get_nd_start( @ShiftID, comp_id ) );
			SELECT 'time_get_nd_end', @ShiftID, comp_id;
			SET @curEndND = CONCAT( ADDDATE( dtDate, 1 ), ' ', time_get_nd_end( @ShiftID, comp_id ) );
			-- get previous ND set up
			SELECT 'prev-time_get_nd_start', @ShiftID, comp_id;
			SET @prevStartND = CONCAT( ADDDATE( dtDate, -1 ), ' ', time_get_nd_start( @ShiftID, comp_id ) );
			SELECT 'prev-time_get_nd_end', @ShiftID, comp_id;
			SET @prevEndND = CONCAT( dtDate, ' ', time_get_nd_end( @ShiftID, comp_id ) );
			-- get actual time in / out
			SET @ActualIN = time_get_time_in( emp_id, dtDate);
			SET @ActualOUT = time_get_time_out( emp_id, dtDate);
			
			SET @OrigPaydate = '0000-00-00';
			SET @dtPaydate = '0000-00-00';
			SET @latefile = 0;
			SET @cutoff = time_get_cut_off( dtDate, comp_id );
			IF dtApprv > @cutoff THEN
				-- set original payroll date
				SET @latefile = 1;
				SET @OrigPaydate = time_get_payroll_date( dtDate, comp_id );
				SET @dtPaydate = time_get_payroll_date( dtApprv, comp_id );
			ELSE 
				SET @latefile = 0;
				SET @dtPaydate = paydate;
				SET @OrigPaydate = paydate;
			END IF;
			
			-- start of regular 
			IF @sDayType = 'REGULAR' THEN
				-- pre shift ot
				IF dtTimeFrm < @SchedIn THEN
					
					IF dtTimeTo >= @SchedIn THEN
						SET @otEnd =  @SchedIn;
					END IF;
					IF dtTimeTo < @SchedIn THEN
						SET @otEnd =  dtTimeTo;
					END IF;
					
					SET @otStart = dtTimeFrm;
					IF dtTimeFrm < @ActualIN THEN
						SET @otStart = @ActualIN;
					END IF;
					
					SET @otUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
					IF @otUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = 'REGOT';
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
					END IF;
					-- check if has ND
					IF @ActualIN < @prevEndND THEN
						IF dtTimeFrm <= @prevStartND THEN
							SET @ndStart = @prevStartND;
						END IF;
						IF dtTimeFrm > @prevStartND THEN
							SET @ndStart = dtTimeFrm;
						END IF;
						SET @ndStart = @ActualIN;
						IF @ActualIN < dtTimeFrm THEN
							SET @ndStart = dtTimeFrm;
						END IF;
						SET @ndEnd = @prevEndND;
						IF dtTimeTo < @prevEndND THEN
							SET @ndEnd = dtTimeTo;
						END IF;
						
						SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );					
						IF @ndUnit > 0 THEN
							SET @tran_code = '';
							SET @tran_code = 'REGOT_ND';
							SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
							CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
						END IF;
					END IF;
				-- after shift ot
				ELSEIF dtTimeFrm > @SchedIn THEN
					IF dtTimeFrm <= @SchedOut THEN
						SET @otStart = @SchedOut;
					END IF;
					IF dtTimeFrm > @SchedOut THEN
						SET @otStart = dtTimeFrm;
					END IF;
					
					SET @otEnd = dtTimeTo;
					IF dtTimeTo > @ActualOUT THEN	
						SET @otEnd = @ActualOUT;
					END IF;
					
					SET @otUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
					IF @otUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = 'REGOT';
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
					END IF;
					-- check if has ND
					IF @ActualOUT > @curStartND THEN
						IF dtTimeTo >= @curEndND THEN
							SET @ndEnd = @curEndND;
						END IF;
						IF dtTimeTo < @curEndND THEN
							SET @ndEnd = dtTimeTo;
						END IF;
						IF dtTimeTo > @ActualOUT THEN
							SET @ndEnd = @ActualOUT;
						END IF;
						
						IF dtTimeFrm <= @curStartND THEN
							SET @ndStart = @curStartND;
						END IF;
						IF dtTimeFrm > @curStartND THEN
							SET @ndStart = dtTimeFrm;
						END IF;
						
						SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
						IF @ndUnit > 0 THEN
							SET @tran_code = '';
							SET @tran_code = 'REGOT_ND';
							SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
							CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
						END IF;
					END IF;
				END IF;
				-- end of regular
			
			ELSE 
				IF @sDayType = 'RESTDAY' OR @sDayType = 'OFF' THEN
					SET @trans = 'RDOT';
				ELSEIF @sDayType = 'LEGAL' THEN
					IF @ShiftID = 1 THEN
						SET @trans = 'LEGRDOT';
					ELSE		
						SET @trans = 'LEGOT';
					END IF;
				ELSEIF @sDayType = 'SPECIAL' THEN
					IF @ShiftID = 1 THEN
						SET @trans = 'SPERDOT';
					ELSE
						SET @trans = 'SPEOT';
					END IF;
				ELSEIF @sDayType = 'DOUBLE' THEN
					IF @ShiftID = 1 THEN
						SET @trans = 'DOBRDOT';
					ELSE
						SET @trans = 'DOBOT';
					END IF;
				END IF;
				
				IF @ActualIN <= dtTimeFrm THEN
					SET @otStart = dtTimeFrm;
				ELSEIF @ActualIN > dtTimeFrm THEN
					SET @otStart = @ActualIN;
				END IF;
				SET @otStart = dtTimeFrm;
				
				IF @ActualOUT >= dtTimeTo THEN
					SET @otEnd = dtTimeTo;
				ELSEIF @ActualOUT < dtTimeTo THEN
					SET @otEnd = @ActualOUT;
				END IF;
				SET @otEnd = dtTimeTo;
				
				SET @Unit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
				
				IF @Unit > 8 THEN
					SET @otUnit = 8.00;
					IF @otUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = @trans;
						SELECT '1',@tran_code, comp_id, @nHourlyRate;
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						SELECT '1.a',@tran_code, comp_id, @nHourlyRate;
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
					END IF;
					SET @otUnitExcess = @Unit - 8.00;
					IF @otUnitExcess > 0 THEN
						SET @tran_code = '';
						SET @tran_code = CONCAT(@trans,'_EXCESS');
						SELECT '_excess',@tran_code, comp_id, @nHourlyRate;
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						SELECT '_excess.a',@tran_code, comp_id, @nHourlyRate;
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnitExcess, @ot_rate, period_id);
					END IF;
				ELSE 
					SET @otUnit = @Unit;
					IF @otUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = @trans;
						SELECT '2',@tran_code, comp_id, @nHourlyRate;
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						SELECT '2.a',@tran_code, comp_id, @nHourlyRate;
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
					END IF;
				END IF;
				-- check if first 8 hours has ND
				-- ND on the Ot Start
				IF @otStart < @prevEndND THEN
					SET @ndStart = @otStart;
					SET @ndEnd = @prevEndND;
					SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
					
					IF @ndUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = CONCAT(@trans,'_ND');
						SELECT '3',@tran_code, comp_id, @nHourlyRate;
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						SELECT '3.1',@tran_code, comp_id, @nHourlyRate;
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
					END IF;
				END IF;
				-- ND on the First 8 Hrs
				SET @firstEight = ADDTIME( @otStart, '08:00:00' );
				
				IF @curStartND < @firstEight THEN
					SET @ndStart = @curStartND;
					SET @ndEnd = @firstEight;
					IF @firstEight > @otEnd THEN
						SET @ndEnd = @otEnd;
					END IF;
					SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
					IF @ndUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = CONCAT(@trans,'_ND');
						SELECT '4',@tran_code, comp_id, @nHourlyRate;
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						SELECT '4.a',@tran_code, comp_id, @nHourlyRate;
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
					END IF;
				END IF;
				-- ND on the Remaining Hrs
				IF @firstEight < @otEnd THEN
					IF @firstEight > @curStartND THEN
						SET @ndStart = @firstEight;
					ELSE 
						SET @ndStart = @curStartND;
					END IF;
					
					SET @ndEnd = @otEnd;
					IF @otEnd > @curEndND THEN
						SET @ndEnd = @curEndND;
					END IF;
					IF @ndEnd > @ndStart THEN
						SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
					END IF;		
					IF @ndUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = CONCAT(@trans,'_ND_EXCESS');
						SELECT '5',@tran_code, comp_id, @nHourlyRate;
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						SELECT '5.a',@tran_code, comp_id, @nHourlyRate;
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
					END IF;	
				END IF;			
			END IF;		
		END LOOP;
		END;
	END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_populate` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_populate` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_populate`(IN FromDate DATE, IN ToDate DATE, IN CompanyID INT(11))
BEGIN
    SET @done = 0;
    SET @dates = FromDate;
    SET @rec = 0;
       
    -- [1] Loop inclusive supplied from parameters    
    REPEAT
       
       IF @dates >= ToDate THEN
          SET @done = 1;
       END IF;
        
       -- [2] All ACTIVE partners only
       --     2017-03-18: Use partners calendar_id instead of shift_id
       INSERT INTO `ww_time_record` (`user_id`, `date`, `shift_id`)
       SELECT p.`user_id`, @dates, IF(IFNULL(tswc.`shift_id`,0)=0, p.`shift_id`, tswc.`shift_id`) `shiftx`
       FROM `ww_partners` p
       INNER JOIN `ww_users_profile` up ON up.`user_id`=p.`user_id`
       LEFT JOIN `ww_time_shift_weekly_calendar` tswc ON tswc.calendar_id=p.calendar_id AND tswc.`week_name`=DAYNAME(@dates)
       WHERE
          -- Check for Resignation Date later: p.`resigned_date` 
          IF(IFNULL(p.`resigned_date`,'0000-00-00') = '0000-00-00', 1, IF(p.`resigned_date` >= @dates, 1, 0)) AND
          IF(CompanyID=0, 1, up.`company_id` = CompanyID)
       ON DUPLICATE KEY UPDATE `shift_id` = IF(IFNULL(tswc.`shift_id`,0)=0, p.`shift_id`, tswc.`shift_id`);
       
       SET @dates = @dates + INTERVAL 1 DAY;
       SET @rec = @rec + 1;
             
    UNTIL @done END REPEAT;
    
    SELECT @rec;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_populate_user` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_populate_user` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_populate_user`(IN FromDate DATE, IN ToDate DATE, IN UserID INT(11))
BEGIN
    SET @time_period_populate_user_done = 0;
    SET @dates = FromDate;
    SET @rec = 0;
       
    -- [1] Loop inclusive supplied from parameters    
    REPEAT
       
       IF @dates >= ToDate THEN
          SET @time_period_populate_user_done = 1;
       END IF;
       
       -- [2] All ACTIVE partners only
       --     2017-03-18: Use partners calendar_id instead of shift_id
       INSERT INTO `ww_time_record` (`user_id`, `date`, `shift_id`)
       SELECT 
          p.`user_id`, 
          @dates,
          IF(IFNULL(tswc.`shift_id`,0)=0, p.`shift_id`, tswc.`shift_id`) `shiftx`
          
       FROM `ww_partners` p
       INNER JOIN `ww_users_profile` up ON up.`user_id`=p.`user_id`
       LEFT JOIN `ww_time_shift_weekly_calendar` tswc ON tswc.calendar_id=p.calendar_id AND tswc.`week_name`=DAYNAME(@dates)
       WHERE
          -- Check for Resignation Date later: p.`resigned_date` 
          IF(IFNULL(p.`resigned_date`,'0000-00-00') = '0000-00-00', 1, IF(p.`resigned_date` >= @dates, 1, 0)) AND
          p.`user_id` = UserID 
       ON DUPLICATE KEY UPDATE `shift_id` = IF(IFNULL(tswc.`shift_id`,0)=0, p.`shift_id`, tswc.`shift_id`);
       
       SET @dates = @dates + INTERVAL 1 DAY;
       SET @rec = @rec + 1;
             
    UNTIL @time_period_populate_user_done END REPEAT;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_process` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_process` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_process`(IN periodid INT(11), IN userid INT(11))
BEGIN
    
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    DECLARE dtStart DATE;
    DECLARE dtEnd DATE;
    DECLARE dtPay DATE;
    
    
    -- STEP 1: CREATE A TEMPORARY TABLE TO HOLD INITIAL SUMMARY
    -- [[
    DROP TEMPORARY TABLE IF EXISTS `timeprocess`;
    CREATE TEMPORARY TABLE `timeprocess` (
           `record_id` INT(11) UNSIGNED NOT NULL DEFAULT '0',
           `user_id` INT(11) NOT NULL DEFAULT '0',
           `id_number` VARCHAR(8) NOT NULL DEFAULT '',
           `date` DATE NOT NULL DEFAULT '0000-00-00',
           `period_id` INT(11) NOT NULL DEFAULT '0',
           `payroll_date` DATE NOT NULL DEFAULT '0000-00-00',
           `shift_id` INT(11) NOT NULL DEFAULT '0',
           `shift` VARCHAR(16) NOT NULL DEFAULT '',
           `timein` DATETIME DEFAULT '0000-00-00 00:00:00',
           `timeout` DATETIME DEFAULT '0000-00-00 00:00:00',
           `day_type` VARCHAR(16) DEFAULT 'REGULAR',
           `hrs_rendered` DECIMAL(5,2) DEFAULT '0.00',
           `hrs_actual` DECIMAL(5,2) DEFAULT '0.00',
           `hrs_break` DECIMAL(5,2) DEFAULT '0.00',
           `absent` TINYINT(1) DEFAULT '0',
           `lwp` DECIMAL(5,2) DEFAULT '0.00',
           `lwop` DECIMAL(5,2) DEFAULT '0.00',
           `late` DECIMAL(5,2) DEFAULT '0.00',
           `undertime` DECIMAL(5,2) DEFAULT '0.00',
           `nd` decimal(5,2) default '0.00',
           `ot` DECIMAL(5,2) DEFAULT '0.00',
           `ot_break` DECIMAL(5,2) DEFAULT '0.00',
           `meal` DECIMAL(5,2) DEFAULT '0.00',
           `transpo` DECIMAL(5,2) DEFAULT '0.00',
           `resigned` TINYINT(1) DEFAULT '0',
           `awol` TINYINT(1) DEFAULT '0',
           `lip_approved_below_13_days` TINYINT(1) DEFAULT '0',
           `override` TINYINT(1) DEFAULT '0', -- >> (VALUE: 1=not to include, 0=include) field tag to check whether to include in the time record
    PRIMARY KEY (`record_id`,`user_id`,`date`,`payroll_date`),
            KEY `user_id` (`user_id`),
            KEY `date` (`date`),
            KEY `payroll_date` (`payroll_date`)
    ) ENGINE=INNODB DEFAULT CHARSET=utf8;
    -- ]] STEP 1
    
    
        
    -- STEP 2: INSERT TIME RECORDS NET OF ATTENDANCE LOGS
    -- [[
    CALL sp_time_period_process_cws(periodid,userid); -- last minute check on cws
    
    INSERT INTO `timeprocess`
       ( `record_id`, `user_id`, `date`, `period_id`, `payroll_date`, `shift_id`, `shift`, `timein`, `timeout`,
         `hrs_rendered` )
       SELECT 
          tr.`record_id`, tr.`user_id`, tr.`date`, tp.`period_id`, tp.`payroll_date`, 
          IF( IFNULL(tr.`aux_shift_id`, 0) = 0, tr.`shift_id`, IFNULL(tr.`aux_shift_id`, 0) ) `shift_id`,
          IF( IFNULL(tr.`aux_shift_id`, 0) = 0, tr.`shift`, IFNULL(tr.`aux_shift`, 0) ) `shift`,
          IF( IFNULL(tr.`aux_time_in`, '0000-00-00 00:00:00') = '0000-00-00 00:00:00', 
              IFNULL(tr.`time_in`, '0000-00-00 00:00:00'), 
              IF( IFNULL(tr.`aux_time_in`, '0000-00-00 00:00:00') > IFNULL(tr.`time_in`, '0000-00-00 00:00:00') AND IFNULL(tr.`time_in`, '0000-00-00 00:00:00') <> '0000-00-00 00:00:00',
                 IFNULL(tr.`time_in`, '0000-00-00 00:00:00'),
                 IFNULL(tr.`aux_time_in`, '0000-00-00 00:00:00') 
              )
          ) `timein`,
          IF( IFNULL(tr.`aux_time_out`, '0000-00-00 00:00:00') = '0000-00-00 00:00:00', 
              IFNULL(tr.`time_out`, '0000-00-00 00:00:00'), 
              IF( IFNULL(tr.`time_out`, '0000-00-00 00:00:00') > IFNULL(tr.`aux_time_out`, '0000-00-00 00:00:00'),
                 IFNULL(tr.`time_out`, '0000-00-00 00:00:00'),
                 IFNULL(tr.`aux_time_out`, '0000-00-00 00:00:00') 
              )
          ) `timeout`,
          
          time_period_process_workhrs(tr.`user_id`, tr.`date`)
       /*
       FROM  `time_record` tr, `ww_time_period` tp, `users_profile` up
       WHERE  up.`company_id` = tp.`company_id` AND
              up.`user_id` = tr.`user_id` AND
              tp.period_id = periodid AND
              IF(userid = 0, 1, tr.`user_id` = userid) AND
              tr.`date` BETWEEN tp.date_from AND IF(tp.date_to > DATE(NOW()), DATE(NOW()), tp.date_to); */
       FROM `ww_time_record` tr
       JOIN `ww_users_profile` up ON up.`user_id` = tr.`user_id`
       JOIN `ww_time_period` tp ON up.`company_id` = tp.`company_id`
       LEFT JOIN `ww_time_period_apply_to_id` tpati ON tpati.`period_id` = tp.`period_id`
       JOIN `ww_partners` p ON p.`user_id` = tr.`user_id`
       WHERE 
              tp.period_id = periodid AND
              IF(userid = 0, 1, tr.`user_id` = userid) AND
              tr.`date` BETWEEN tp.date_from AND IF(tp.date_to > DATE(NOW()), DATE(NOW()), tp.date_to) 
              AND
              IF(tp.`apply_to_id` = 0, 1, 
                 IF(tp.`apply_to_id` = 1, tpati.`apply_to_id` = tr.`user_id`, 
                    IF(tp.`apply_to_id` = 2, tpati.`apply_to_id` = p.`status_id`, 
                       IF(tp.`apply_to_id` = 3, tpati.`apply_to_id` = up.`division_id`, 
                          IF(tp.`apply_to_id` = 4, tpati.`apply_to_id` = up.`department_id`, 1))))) ;
    -- ]] STEP 2
    
    
    
    -- STEP 3: SET RESTDAY, ABSENT, LWOP, LEAVE, etc... (AWOL is executed outside this script)
    -- [[
    -- > 3.1 RESTDAY
    UPDATE `timeprocess` t, `time_shift` ts 
           SET t.`day_type` = UPPER(ts.`shift`), 
               t.`hrs_rendered` = 0
           WHERE t.`shift_id` = ts.`shift_id` AND 
                 UPPER(ts.`shift`) IN ('OFF','RESTDAY');
                     
      -- > 3.2 HOLIDAY / LEGAL / SPECIAL 
    UPDATE `timeprocess` t
    INNER JOIN `ww_time_holiday` th ON th.deleted = 0
    LEFT JOIN `ww_time_holiday_location` thl ON thl.deleted = 0 AND thl.`holiday_id` = th.`holiday_id` AND thl.`user_id` = t.`user_id`
    
           SET t.`day_type` = IF( th.`legal` = 1, 
                                  -- TRUE: IF(t.`day_type`='RESTDAY', 'RDHOL', 'LEGAL'),
                                  'LEGAL',
                                  -- FALSE:
                                  IF( IFNULL(th.`location_count`,0) = 0,
                                      -- TRUE: IF(t.`day_type`='RESTDAY', 'RDSPEC', 'SPECIAL'),
                                      'SPECIAL',
                                      -- FALSE:
                                      IF( thl.`user_id` = t.`user_id`,
                                          -- TRUE: IF(t.`day_type`='RESTDAY', 'RDSPEC', 'SPECIAL'),
                                          'SPECIAL',
                                          -- FALSE:
                                          t.`day_type`
                                      )
                                  )
                              )
           WHERE t.`date` = th.`holiday_date`; -- AND th.legal = 1;  -- AND t.`day_type` = 'REGULAR'; -- remove temporary since legal rest day does not compute 02/15/2019
    
    -- > 3.2 HOLIDAY / LEGAL / SPECIAL 
    UPDATE `timeprocess` t
    INNER JOIN `ww_time_holiday` th ON th.deleted = 0
    LEFT JOIN `ww_time_holiday_location` thl ON thl.deleted = 0 AND thl.`holiday_id` = th.`holiday_id` AND thl.`user_id` = t.`user_id`
    
           SET t.`day_type` = IF( th.`legal` = 1, 
                                  -- TRUE: IF(t.`day_type`='RESTDAY', 'RDHOL', 'LEGAL'),
                                  'LEGAL',
                                  -- FALSE:
                                  IF( IFNULL(th.`location_count`,0) = 0,
                                      -- TRUE: IF(t.`day_type`='RESTDAY', 'RDSPEC', 'SPECIAL'),
                                      'SPECIAL',
                                      -- FALSE:
                                      IF( thl.`user_id` = t.`user_id`,
                                          -- TRUE: IF(t.`day_type`='RESTDAY', 'RDSPEC', 'SPECIAL'),
                                          'SPECIAL',
                                          -- FALSE:
                                          t.`day_type`
                                      )
                                  )
                              )
           WHERE t.`date` = th.`holiday_date`; -- AND th.legal = 0  AND t.`day_type` = 'REGULAR';
           
    SELECT date_from,cutoff INTO @period_date_from,@period_cutoff
    FROM `ww_time_period` WHERE period_id = periodid;
        
    /*UPDATE `timeprocess` t
           SET t.`timein` = if(time_period_process_absent_w_in_cutoff(t.`user_id`,t.`date`,@period_date_from,@period_cutoff) = 0,t.`timein`,'0000-00-00 00:00:00'),
               t.`timeout` = IF(time_period_process_absent_w_in_cutoff(t.`user_id`,t.`date`,@period_date_from,@period_cutoff) = 0,t.`timeout`,'0000-00-00 00:00:00')
           WHERE t.`day_type` = 'REGULAR'; */    
    
    -- > 3.3 ABSENT
    UPDATE `timeprocess` t
           SET t.`absent` = 1, t.`hrs_rendered` = 0
           WHERE `day_type` = 'REGULAR' AND 
                 (`timein` = '0000-00-00 00:00:00' OR `timeout` = '0000-00-00 00:00:00');
    
    -- > 3.4 LEAVE WITH PAY /AND/ LEAVE WITHOUT PAY
    SET @lwop = 0;
    SELECT GROUP_CONCAT(`form_id`) INTO @lwop FROM `ww_time_form` WHERE `form_code`='LWOP' OR `form_code`='FLV' LIMIT 1;
    
    UPDATE `timeprocess` t
           SET t.`lwop` = time_period_process_lwop(t.`user_id`,t.`date`,@lwop,@period_cutoff,@period_date_from),
               t.`lwp` = time_period_process_lwp(t.`user_id`,t.`date`,@lwop,@period_cutoff),
               t.`hrs_break` = time_period_process_shift('BREAK-IN-MINUTES','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '60') / 60,
               t.`lip_approved_below_13_days` = time_record_form_lwp(t.`user_id`,year(t.`date`),month(t.`date`))
           WHERE t.`day_type` = 'REGULAR';
    -- ]] STEP 3    
    
    
    
    -- STEP 4: SET LATE AND UNDERTIME
    -- [[
    -- > 4.1 LATE (Converted to HOUR): limited to regular schedule only and its assigned schedule including all applications
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF(t.`absent` = 1, 
                             -- TRUE: assigned no lates since it is already absent
                             0,
                             -- FALSE: get minutes considering grace period
                             IF( (TIMESTAMPDIFF(MINUTE, 
                                                (CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_start`) + INTERVAL 
                                                (time_period_process_shift_department('GRACE-PERIOD-IN-MINUTES','EMPLOYMENT-TYPE', 
                                                    u.company_id, t.`shift_id`, t.`user_id`, '0')) MINUTE),
                                  t.`timein` )*1) <= 0,
                                  -- TRUE: assigned no lates
                                  0,
                                  -- FALSE: get minutes lates disregarding grace period
                                  TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_start`), t.`timein`) / 60
                             )
                          )
           WHERE t.`day_type` = 'REGULAR' AND 
		 t.`shift_id` = ts.`shift_id` and
		 t.user_id = u.user_id;
		 
    -- 4.1 LATE (Converted to HOUR): limited to regular schedule only and its assigned schedule including all applications
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF(time_period_process_ut(t.`user_id`,t.`date`,ts.`time_start`,ts.`time_end`) > 0, 
                             -- TRUE: assigned no lates since it is already undertime
                             0,
                             -- FALSE: no changes on the value
                             t.`late`
                          )
           WHERE t.`day_type` = 'REGULAR' AND 
		 t.`shift_id` = ts.`shift_id` AND
		 t.user_id = u.user_id;
		            
    -- > 4.1.1 EXEMPTIONS ON SPECIAL PARTNERS
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                      u.company_id, t.`shift_id`, t.`user_id`, '00:00:00') <> '00:00:00',
                            -- TRUE: special condition normally on managers (e.g. flexi until 10am)
                            IF( TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                      u.company_id, t.`shift_id`, t.`user_id`, '00:00:00')), t.`timein`) > 0,
                                -- TRUE:
                                TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                      u.company_id, t.`shift_id`, t.`user_id`, '00:00:00')), t.`timein`) / 60,
                                -- FALSE:
                                0
                            ),
                            -- FALSE: no changes on the value
                            t.`late`
                        )
           WHERE t.`late` > 0 AND 
		 t.`shift_id` = ts.`shift_id` and
		 t.user_id = u.user_id;           
    
    -- > 4.1.2 EXEMPTIONS ON MANAGERS
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                      u.company_id, t.`shift_id`, t.`user_id`,'00:00:00') <> '00:00:00',
                            -- TRUE: special condition normally on managers (e.g. flexi until 10am)
                            IF( TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                      u.company_id, t.`shift_id`, t.`user_id`,'00:00:00')), t.`timein`) > 0,
                                -- TRUE:
                                TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                      u.company_id, t.`shift_id`, t.`user_id`,'00:00:00')), t.`timein`) / 60,
                                -- FALSE:
                                0
                            ),
                            -- FALSE: no changes on the value
                            t.`late`
                        )
           WHERE t.`late` > 0 AND 
		 t.`shift_id` = ts.`shift_id` and
		 t.user_id = u.user_id;           
    
    
    -- > 4.1.3 EXEMPTIONS ON EXCUSED TARDINESS
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd, `ww_time_forms_blanket` tfb
           SET t.`late` = 0
           WHERE tf.`forms_id` =  tfd.`forms_id` AND 
                 tf.`user_id` = 0 AND 
                 tf.`form_code` = 'ET' AND 
                 tf.form_status_id = 6 AND 
                 tfd.`date` =  t.`date` AND 
                 tfb.`forms_id` = tf.`forms_id` AND
                 tfb.`user_id` =  t.`user_id`;
    
    
    -- > 4.2 UNDERTIME (Converted to HOUR)
    -- >
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`undertime` = IF(t.`absent` = 1, 
                           -- TRUE: assigned no undertime since it is already absent
                           0,
                           -- FALSE: get minutes interval
                           IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`) ) <= 0,
                               -- TRUE: assigned no lates
                               0,
                               -- FALSE: get minutes interval
                               IF( TIME(time_period_process_shift('FIRST-HALF-END','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '00:00:00')) = TIME(t.`timeout`),
                                  -- TRUE: less break
                                  (TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`)) / 60) - t.`hrs_break`,
                                  -- FALSE: 
                                  TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`)) / 60
                               )
                           )
                        )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 -- t.`lwp` = 0 AND 
                 -- t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id`;
    
    -- > 4.2.1 UNDERTIME (Converted to HOUR)
    -- >
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`undertime` = IF(t.`absent` = 1, 
                           -- TRUE: assigned no undertime since it is already absent
                           0,
                           -- FALSE: get undertime am
                           if(time_period_process_ut_checking(t.`user_id`,t.`date`) > 0,
				   time_period_process_ut(t.`user_id`,t.`date`,ts.`time_start`,ts.`time_end`),
				   IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`) ) <= 0,
				       -- TRUE: assigned no lates
				       0,
				       -- FALSE: get minutes interval
				       IF( TIME(time_period_process_shift('FIRST-HALF-END','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '00:00:00')) = TIME(t.`timeout`),
					  -- TRUE: less break
					  (TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`)) / 60) - t.`hrs_break`,
					  -- FALSE: 
					  TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`)) / 60
				       )
				   )
		           )
                        )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`shift_id` = ts.`shift_id`;
                 
    -- > 4.2.1 EXEMPTIONS ON SPECIAL PARTNERS
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u 
           SET t.`undertime` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                             u.company_id, t.`shift_id`, t.`user_id`, '00:00:00') <> '00:00:00',
                               
                                   IF( t.`timein` <= CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', 
                                                            time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                             u.company_id, t.`shift_id`, t.`user_id`, '00:00:00')),
                                
                                       -- TRUE: special condition on special partner (e.g. flexi until 10am)
                                       IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL t.`hrs_break` HOUR
                                                                 ) ) > 0,
                                           TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL t.`hrs_break` HOUR
                                                                 ) ) / 60,
                                           -- FALSE: no changes on the value
                                           0
                                       ),
                                       0
                                   ),
                                   -- FALSE: no changes on the value
                                   t.`undertime`
                               )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id` and
                 t.user_id = u.user_id;
    
    
    -- > 4.2.2 EXEMPTIONS ON MANAGERS
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`undertime` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                             u.company_id, t.`user_id`, t.`shift_id`,'00:00:00') <> '00:00:00',
                               
                                   IF( t.`timein` <= CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', 
                                                            time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                             u.company_id, t.`user_id`, t.`shift_id`,'00:00:00')),
                                
                                       -- TRUE: special condition on special partner (e.g. flexi until 10am)
                                       IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL time_period_process_shift('BREAK-IN-MINUTES','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '60') MINUTE
                                                                 ) ) > 0,
                                           TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL time_period_process_shift('BREAK-IN-MINUTES','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '60') MINUTE
                                                                 ) ) / 60,
                                           -- FALSE: no changes on the value
                                           0
                                       ),
                                       0
                                   ),
                                   -- FALSE: no changes on the value
                                   t.`undertime`
                               )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id` and 
                 t.user_id = u.user_id;
    
    
    -- > 4.2.3 EXEMPTIONS ON EXCUSED UNDERTIME
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd, `ww_time_forms_blanket` tfb
           SET t.`undertime` = 0
           WHERE tf.`forms_id` =  tfd.`forms_id` AND 
                 tf.`user_id` = 0 AND 
                 tf.`form_code` = 'UT' AND 
                 tf.form_status_id = 6 AND 
                 tfd.`date` =  t.`date` AND 
                 tfb.`forms_id` = tf.`forms_id` AND
                 tfb.`user_id` =  t.`user_id`;
    
    
    -- > 4.2.4 EXEMPTIONS ON EMERGENCY LEAVE
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd, `ww_time_forms_blanket` tfb
           SET t.`late` = 0, 
               t.`undertime` = 0, 
               t.`absent` = 0,
               t.`hrs_rendered` = IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0)
           WHERE tf.`forms_id` =  tfd.`forms_id` AND 
                 tf.`user_id` = 0 AND 
                 tf.`form_code` = 'EL' AND 
                 tf.form_status_id = 6 AND 
                 tfd.`date` =  t.`date` AND 
                 tfb.`forms_id` = tf.`forms_id` AND
                 tfb.`user_id` =  t.`user_id`;
    -- ]] STEP 4
    -- (classcode VARCHAR(32), classgroup VARCHAR(32), comp_id INT(11), shiftid INT(11), userid INT(11), optreturn VARCHAR(32))
    -- STEP 5: COMPLETING RENDERED HOURS... FINAL CHECK
    -- [[
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                              u.company_id, t.`shift_id`, t.`user_id`, '00:00:00') <> '00:00:00'
                                    ,
                                    -- TRUE                                    
                                    IF( TIME(t.`timein`) > TIME(time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                              u.company_id, t.`shift_id`, t.`user_id`, '00:00:00')),
                                        -- TRUE
                                        IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) / 2,
                                        -- FALSE
                                        t.`late`
                                    )
                                    ,
                                    -- FALSE
                                    t.`late`
                                )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id` and
                 t.user_id = u.user_id;
            
    UPDATE `timeprocess` t
           SET t.`absent` = 0, t.`hrs_rendered` = IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) * IF(t.`lwp` * 8 IN (4,6), .5, 1)
           WHERE t.`lwp` > 0 AND t.absent = 1;
    
    UPDATE `timeprocess` t
           SET t.`absent` = 0, t.`hrs_actual` = t.`hrs_rendered` - t.`late` - t.`undertime` - (IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) * IF(t.`lwop` * 8 IN (4,6), .5, IF(t.`lwop`=0, 0,1) ))
           WHERE t.`day_type` = 'REGULAR' AND t.`lwop` > 0;
    
    -- To process LIP
    UPDATE `timeprocess` t
           SET t.`hrs_actual` = t.`hrs_rendered` - t.`late` - t.`undertime`
           WHERE t.`day_type` = 'REGULAR' AND t.`lwp` > 0;
               
    UPDATE `timeprocess` t
           SET t.`hrs_actual` = t.`hrs_rendered` - t.`late` - t.`undertime`
           WHERE t.`day_type` = 'REGULAR' AND t.`lwop` = 0 AND t.`lwp` = 0;
    
    UPDATE `timeprocess` t
           SET t.`hrs_actual` = t.`hrs_rendered` - t.`late` - t.`undertime`
           WHERE t.`day_type` IN ('SPECIAL','LEGAL');
    -- ]] STEP 5
    
    
    
    -- STEP 6: RESIGNED TAGGING / COMPUTE OVERTIME
    -- [[
    -- > 6.1 RESIGNED
    UPDATE `timeprocess` t
           SET t.`resigned` = time_period_process_resigned(t.`user_id`, t.`date`);
    
    -- > 6.2 OVERTIME
    UPDATE ww_time_record_summary SET ot = 0 WHERE period_id = periodid AND IF(user_id = 0, 1, user_id = userid);
    CALL sp_time_period_process_summary_ot(periodid, userid);
    
    -- > 6.2.1 OVERTIME BREAK
    UPDATE `timeprocess` t
    JOIN `ww_time_day_type` tdt ON tdt.`deleted` = 0 AND t.`day_type` = tdt.`day_type_code`
    JOIN `ww_time_day_type_break` tdtb ON tdtb.`day_type_id` = tdt.`day_type_id`
    JOIN `ww_time_day_break` tdb ON tdb.`deleted` = 0 AND tdb.`break_id` = tdtb.`break_id`
    JOIN `ww_time_day_break_range` tdbr ON tdbr.`break_id` = tdb.`break_id`
    join `ww_users` u on u.user_id = t.user_id and u.company_id = tdbr.company_id
           SET t.`ot_break` = IFNULL(tdbr.`deduction`, 0)
           WHERE t.`ot` > 0 AND (t.`ot` BETWEEN tdbr.`hour_from` AND tdbr.`hour_to`);
    
    -- > 6.2.2 MEAL ALLOWANCE
    UPDATE `timeprocess` t
    JOIN `ww_time_day_type` tdt ON tdt.`deleted` = 0 AND t.`day_type` = tdt.`day_type_code`
    JOIN `ww_time_day_type_allowance` tdta ON tdta.`day_type_id` = tdt.`day_type_id`
    JOIN `ww_time_day_meal` tdm ON tdm.`deleted` = 0 AND tdm.`meal_id` = tdta.`meal_id`
    JOIN `ww_time_day_meal_range` tdmr ON tdmr.`meal_id` = tdm.`meal_id`
    JOIN `partners` p ON p.`user_id` = t.`user_id`
    JOIN `ww_time_day_allowance` tda ON tda.`employment_type_id` = p.`employment_type_id`
           SET t.`meal` = IFNULL(tdmr.`multiplier`, 0) * IFNULL(tda.`meal`, 0)
           WHERE t.`ot` > 0 AND ((t.`ot` - t.`ot_break`) BETWEEN tdmr.`hour_from` AND tdmr.`hour_to`);
    
    -- > 6.2.3 TRANSPO ALLOWANCE
    UPDATE `timeprocess` t
    JOIN `ww_time_day_type` tdt ON tdt.`deleted` = 0 AND t.`day_type` = tdt.`day_type_code`
    JOIN `ww_time_day_type_allowance` tdta ON tdta.`day_type_id` = tdt.`day_type_id`
    JOIN `ww_time_day_transpo` tdm ON tdm.`deleted` = 0 AND tdm.`transpo_id` = tdta.`transpo_id`
    JOIN `ww_time_day_transpo_range` tdmr ON tdmr.`transpo_id` = tdm.`transpo_id`
    JOIN `partners` p ON p.`user_id` = t.`user_id`
    JOIN `ww_time_day_allowance` tda ON tda.`employment_type_id` = p.`employment_type_id`
           SET t.`transpo` = IFNULL(tdmr.`multiplier`, 0) * IFNULL(tda.`transpo`, 0)
           WHERE t.`ot` > 0 AND ((t.`ot` - t.`ot_break`) BETWEEN tdmr.`hour_from` AND tdmr.`hour_to`);
    -- > 6.2.4 EXEMPTION ON ABSENT TAGGING ON CURRENT DATE
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`absent` = IF(NOW() < CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`), 0, t.`absent`)
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`date` = CURDATE() AND
                 t.`absent` = 1 AND
                 t.`shift_id` = ts.`shift_id`;
    
    -- > 6.2.5 MOVE LATE TO UNDERTIME
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd
           SET t.`undertime` = IF(IFNULL(t.`late`,0) > 0, IFNULL(t.`undertime`,0)+t.`late`, t.`undertime`),
               t.`late` = IF(t.`late` > 0, 0, t.`late`)
           WHERE tf.`user_id` = t.`user_id` AND 
                 tf.`form_code` = 'UT' AND 
                 tf.`form_status_id` = 6 AND 
                 tf.`forms_id` =  tfd.`forms_id` AND 
                 tfd.`duration_id` IN (1,2) AND
                 tfd.`date` =  t.`date`;
   -- ]] STEP 6
    
    
    -- > STEP 7: FINAL EXEMPTION
    -- [[
    -- > 7.1 DTR UPLOAD
    UPDATE `timeprocess` t
           SET t.`late`       =  IF(t.`hrs_actual` < 0, 0, t.`late`),
               t.`undertime`  =  IF(t.`hrs_actual` < 0, 0, t.`undertime`),
               t.`absent`     =  IF(t.`hrs_actual` < 0, 1, t.`absent`),
               t.`hrs_actual` = IF(t.`hrs_actual` < 0, 0, t.`hrs_actual`)
           WHERE t.`hrs_actual` < 0;
    
    UPDATE `timeprocess` t
           SET t.`absent` = 0
           WHERE t.`day_type` = 'REGULAR' AND t.`lwop` > 0;
    
    -- > 7.2 ATTENDANCE BASE
    UPDATE `timeprocess` t, `ww_payroll_partners` pp
           SET t.`late`       =  0,
               t.`undertime`  =  0,
               t.`absent`     =  0,
               t.`hrs_actual` = time_period_process_workhrs(t.`user_id`, t.`date`)
           WHERE (t.`hrs_rendered` > 0 OR t.`absent` = 1) AND
                 t.`lwop` = 0 AND
                 t.`user_id` = pp.`user_id` AND 
                 pp.`attendance_base` = 0 AND
                 pp.`deleted` = 0;
    
    -- > 7.3 NIGHT DIFF
    UPDATE timeprocess t, ww_users u
    SET t.nd = get_ndiff(u.user_id, t.date, u.company_id)
    WHERE u.user_id = t.user_id AND
	  (t.hrs_actual > 0 OR t.ot > 0);
    
    -- > 7.4 UNDER SUSPENSION
    
    -- ]] STEP 7
    
    
    -- STEP 7: INSERT SUMMARY
    -- [[
    INSERT INTO `ww_time_record_summary` (
           `record_id`,
           `user_id`,
           `id_number`,
           `date`,
           `period_id`,
           `payroll_date`,
           `day_type`,
           `hrs_rendered`,
           `hrs_actual`,
           `hrs_break`,
           `absent`,
           `lwp`,
           `lwop`,
           `late`,
           `undertime`,
           `nd`,
           `ot`,
           `ot_break`,
           `meal`,
           `transpo`,
           `resigned`,
           `awol` ,
           `lip_approved_below_13_days`)
    SELECT `record_id`,
           `user_id`,
           `id_number`,
           `date`,
           `period_id`,
           `payroll_date`,
           `day_type`,
           `hrs_rendered`,
           `hrs_actual`,
           `hrs_break`,
           `absent`,
           `lwp`,
           `lwop`,
           `late`,
           `undertime`,
           `nd`,
           `ot`,
           `ot_break`,
           `meal`,
           `transpo`,
           `resigned`,
           `awol`,
           `lip_approved_below_13_days`
    FROM `timeprocess`
    ON DUPLICATE KEY UPDATE 
           `user_id`      = VALUES(`user_id`),
           `date`         = VALUES(`date`),    
           `day_type`     = VALUES(`day_type`),
           `hrs_rendered` = VALUES(`hrs_rendered`),
           `hrs_actual`   = VALUES(`hrs_actual`),
           `hrs_break`    = VALUES(`hrs_break`),
           `absent`       = VALUES(`absent`),
           `lwp`          = VALUES(`lwp`),
           `lwop`         = VALUES(`lwop`),
           `late`         = VALUES(`late`),
           `undertime`    = VALUES(`undertime`),
           `nd` 	  = VALUES(`nd`),
           `ot`           = VALUES(`ot`),
           `ot_break`     = VALUES(`ot_break`),
           `meal`         = VALUES(`meal`),
           `transpo`      = VALUES(`transpo`),
           `resigned`     = VALUES(`resigned`),
           `awol`         = VALUES(`awol`),
           `lip_approved_below_13_days` = values(`lip_approved_below_13_days`),
           `modified_on`  = NOW(); 
    
    -- ]]
    
    -- STEP 8: PROCESS FOR PAYROLL INPUT
    -- [[
    SET @absent_before_holiday = 0;
    SELECT IFNULL(`value`,0) INTO @absent_before_holiday
    FROM `ww_config`
    WHERE `key`='absent_before_holiday' AND `deleted`=0;
    
    IF @absent_before_holiday = 1 THEN
       CALL sp_time_period_validate_holiday( periodid, userid );
    END IF;
    
    
    SET @notlatefile = 0;
    SELECT period_id INTO @notlatefile
    FROM `ww_time_period` WHERE (CURDATE() BETWEEN date_from AND (cutoff + INTERVAL 25 DAY)) AND period_id = periodid;
    
    -- INSERT INTO `logtable` (`log`) VALUES (CONCAT(periodid,' ',@notlatefile));
    
    IF periodid = @notlatefile THEN
       CALL sp_time_period_summary( periodid, userid );
    END IF;
    
    -- CALL `sp_time_period_process_latefile`(periodid, userid);
    
    -- ]]
    /*
    -- this will update ww_time_record_summary project id
	    select date_from, date_to, payroll_date
	    into dtStart, dtEnd, dtPay
	    from ww_time_period where period_id = periodid;
 	    -- set project to default assigned project
	    UPDATE ww_time_record_summary trs
	    left join ww_users_profile up on trs.user_id = up.user_id
	    SET trs.project_id = up.project_id
	    WHERE trs.user_id = userid AND trs.`date` BETWEEN dtStart AND dtEnd AND payroll_date = dtPay;
	    -- this will set the project if it has movement
	    call sp_time_period_set_project(userid, dtStart, dtEnd, dtPay);
    */
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_process_2` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_process_2` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_process_2`(IN periodid INT(11), IN userid INT(11))
BEGIN
    
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    DECLARE dtStart DATE;
    DECLARE dtEnd DATE;
    DECLARE dtPay DATE;
    
    
    -- STEP 1: CREATE A TEMPORARY TABLE TO HOLD INITIAL SUMMARY
    -- [[
    DROP TEMPORARY TABLE IF EXISTS `timeprocess`;
    CREATE TEMPORARY TABLE `timeprocess` (
           `record_id` INT(11) UNSIGNED NOT NULL DEFAULT '0',
           `user_id` INT(11) NOT NULL DEFAULT '0',
           `id_number` VARCHAR(8) NOT NULL DEFAULT '',
           `date` DATE NOT NULL DEFAULT '0000-00-00',
           `period_id` INT(11) NOT NULL DEFAULT '0',
           `payroll_date` DATE NOT NULL DEFAULT '0000-00-00',
           `shift_id` INT(11) NOT NULL DEFAULT '0',
           `shift` VARCHAR(16) NOT NULL DEFAULT '',
           `timein` DATETIME DEFAULT '0000-00-00 00:00:00',
           `timeout` DATETIME DEFAULT '0000-00-00 00:00:00',
           `day_type` VARCHAR(16) DEFAULT 'REGULAR',
           `hrs_rendered` DECIMAL(5,2) DEFAULT '0.00',
           `hrs_actual` DECIMAL(5,2) DEFAULT '0.00',
           `hrs_break` DECIMAL(5,2) DEFAULT '0.00',
           `absent` TINYINT(1) DEFAULT '0',
           `lwp` DECIMAL(5,2) DEFAULT '0.00',
           `lwop` DECIMAL(5,2) DEFAULT '0.00',
           `late` DECIMAL(5,2) DEFAULT '0.00',
           `undertime` DECIMAL(5,2) DEFAULT '0.00',
           `nd` decimal(5,2) default '0.00',
           `ot` DECIMAL(5,2) DEFAULT '0.00',
           `ot_break` DECIMAL(5,2) DEFAULT '0.00',
           `meal` DECIMAL(5,2) DEFAULT '0.00',
           `transpo` DECIMAL(5,2) DEFAULT '0.00',
           `resigned` TINYINT(1) DEFAULT '0',
           `awol` TINYINT(1) DEFAULT '0',
           `override` TINYINT(1) DEFAULT '0', -- >> (VALUE: 1=not to include, 0=include) field tag to check whether to include in the time record
    PRIMARY KEY (`record_id`,`user_id`,`date`,`payroll_date`),
            KEY `user_id` (`user_id`),
            KEY `date` (`date`),
            KEY `payroll_date` (`payroll_date`)
    ) ENGINE=INNODB DEFAULT CHARSET=utf8;
    -- ]] STEP 1
    
    
        
    -- STEP 2: INSERT TIME RECORDS NET OF ATTENDANCE LOGS
    -- [[
    CALL sp_time_period_process_cws(periodid,userid); -- last minute check on cws
    
    INSERT INTO `timeprocess`
       ( `record_id`, `user_id`, `date`, `period_id`, `payroll_date`, `shift_id`, `shift`, `timein`, `timeout`,
         `hrs_rendered` )
       SELECT 
          tr.`record_id`, tr.`user_id`, tr.`date`, tp.`period_id`, tp.`payroll_date`, 
          IF( IFNULL(tr.`aux_shift_id`, 0) = 0, tr.`shift_id`, IFNULL(tr.`aux_shift_id`, 0) ) `shift_id`,
          IF( IFNULL(tr.`aux_shift_id`, 0) = 0, tr.`shift`, IFNULL(tr.`aux_shift`, 0) ) `shift`,
          IF( IFNULL(tr.`aux_time_in`, '0000-00-00 00:00:00') = '0000-00-00 00:00:00', 
              IFNULL(tr.`time_in`, '0000-00-00 00:00:00'), 
              IF( IFNULL(tr.`aux_time_in`, '0000-00-00 00:00:00') > IFNULL(tr.`time_in`, '0000-00-00 00:00:00') AND IFNULL(tr.`time_in`, '0000-00-00 00:00:00') <> '0000-00-00 00:00:00',
                 IFNULL(tr.`time_in`, '0000-00-00 00:00:00'),
                 IFNULL(tr.`aux_time_in`, '0000-00-00 00:00:00') 
              )
          ) `timein`,
          IF( IFNULL(tr.`aux_time_out`, '0000-00-00 00:00:00') = '0000-00-00 00:00:00', 
              IFNULL(tr.`time_out`, '0000-00-00 00:00:00'), 
              IF( IFNULL(tr.`time_out`, '0000-00-00 00:00:00') > IFNULL(tr.`aux_time_out`, '0000-00-00 00:00:00'),
                 IFNULL(tr.`time_out`, '0000-00-00 00:00:00'),
                 IFNULL(tr.`aux_time_out`, '0000-00-00 00:00:00') 
              )
          ) `timeout`,
          
          time_period_process_workhrs(tr.`user_id`, tr.`date`)
          
       FROM 
             `time_record` tr, `ww_time_period` tp, `users_profile` up
       WHERE 
              up.`company_id` = tp.`company_id` AND
              up.`user_id` = tr.`user_id` AND
              tp.period_id = periodid AND
              IF(userid = 0, 1, tr.`user_id` = userid) AND
              tr.`date` BETWEEN tp.date_from AND IF(tp.date_to > DATE(NOW()), DATE(NOW()), tp.date_to);
    -- ]] STEP 2
    
    
    
    -- STEP 3: SET RESTDAY, ABSENT, LWOP, LEAVE, etc... (AWOL is executed outside this script)
    -- [[
    -- > 3.1 RESTDAY
    UPDATE `timeprocess` t, `time_shift` ts 
           SET t.`day_type` = UPPER(ts.`shift`), 
               t.`hrs_rendered` = 0
           WHERE t.`shift_id` = ts.`shift_id` AND 
                 UPPER(ts.`shift`) IN ('OFF','RESTDAY');
    
    
    -- > 3.2 HOLIDAY / LEGAL / SPECIAL 
    UPDATE `timeprocess` t
    INNER JOIN `ww_time_holiday` th ON th.deleted = 0
    LEFT JOIN `ww_time_holiday_location` thl ON thl.deleted = 0 AND thl.`holiday_id` = th.`holiday_id` AND thl.`user_id` = t.`user_id`
    
           SET t.`day_type` = IF( th.`legal` = 1, 
                                  -- TRUE: IF(t.`day_type`='RESTDAY', 'RDHOL', 'LEGAL'),
                                  'LEGAL',
                                  -- FALSE:
                                  IF( IFNULL(th.`location_count`,0) = 0,
                                      -- TRUE: IF(t.`day_type`='RESTDAY', 'RDSPEC', 'SPECIAL'),
                                      'SPECIAL',
                                      -- FALSE:
                                      IF( thl.`user_id` = t.`user_id`,
                                          -- TRUE: IF(t.`day_type`='RESTDAY', 'RDSPEC', 'SPECIAL'),
                                          'SPECIAL',
                                          -- FALSE:
                                          t.`day_type`
                                      )
                                  )
                              )
           WHERE t.`date` = th.`holiday_date` AND t.`day_type` = 'REGULAR';
    
    
    -- > 3.3 ABSENT
    UPDATE `timeprocess` t
           SET t.`absent` = 1, t.`hrs_rendered` = 0
           WHERE `day_type` = 'REGULAR' AND 
                 (`timein` = '0000-00-00 00:00:00' OR `timeout` = '0000-00-00 00:00:00');
    
    
    -- > 3.4 LEAVE WITH PAY /AND/ LEAVE WITHOUT PAY
    SET @lwop = 0;
    SELECT GROUP_CONCAT(`form_id`) INTO @lwop FROM `ww_time_form` WHERE `form_code`='LWOP' OR `form_code`='FLV' LIMIT 1;
    
    UPDATE `timeprocess` t
           SET t.`lwop` = time_period_process_lwop(t.`user_id`,t.`date`,@lwop),
               t.`lwp` = time_period_process_lwp(t.`user_id`,t.`date`,@lwop),
               t.`hrs_break` = time_period_process_shift('BREAK-IN-MINUTES','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '60') / 60               
           WHERE t.`day_type` = 'REGULAR';
    -- ]] STEP 3    
    
    
    
    -- STEP 4: SET LATE AND UNDERTIME
    -- [[
    -- > 4.1 LATE (Converted to HOUR): limited to regular schedule only and its assigned schedule including all applications
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF(t.`absent` = 1, 
                             -- TRUE: assigned no lates since it is already absent
                             0,
                             -- FALSE: get minutes considering grace period
                             IF( (TIMESTAMPDIFF(MINUTE, 
                                                (CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_start`) + INTERVAL 
                                                (time_period_process_shift_department('GRACE-PERIOD-IN-MINUTES','EMPLOYMENT-TYPE', 
                                                    u.company_id, t.`shift_id`, t.`user_id`, '0')) MINUTE),
                                  t.`timein` )*1) <= 0,
                                  -- TRUE: assigned no lates
                                  0,
                                  -- FALSE: get minutes lates disregarding grace period
                                  TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_start`), t.`timein`) / 60
                             )
                          )
           WHERE t.`day_type` = 'REGULAR' AND 
		 t.`shift_id` = ts.`shift_id` and
		 t.user_id = u.user_id;
           
    -- > 4.1.1 EXEMPTIONS ON SPECIAL PARTNERS
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                      u.company_id, t.`shift_id`, t.`user_id`, '00:00:00') <> '00:00:00',
                            -- TRUE: special condition normally on managers (e.g. flexi until 10am)
                            IF( TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                      u.company_id, t.`shift_id`, t.`user_id`, '00:00:00')), t.`timein`) > 0,
                                -- TRUE:
                                TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                      u.company_id, t.`shift_id`, t.`user_id`, '00:00:00')), t.`timein`) / 60,
                                -- FALSE:
                                0
                            ),
                            -- FALSE: no changes on the value
                            t.`late`
                        )
           WHERE t.`late` > 0 AND 
		 t.`shift_id` = ts.`shift_id` and
		 t.user_id = u.user_id;           
    
    -- > 4.1.2 EXEMPTIONS ON MANAGERS
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                      u.company_id, t.`shift_id`, t.`user_id`,'00:00:00') <> '00:00:00',
                            -- TRUE: special condition normally on managers (e.g. flexi until 10am)
                            IF( TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                      u.company_id, t.`shift_id`, t.`user_id`,'00:00:00')), t.`timein`) > 0,
                                -- TRUE:
                                TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                      u.company_id, t.`shift_id`, t.`user_id`,'00:00:00')), t.`timein`) / 60,
                                -- FALSE:
                                0
                            ),
                            -- FALSE: no changes on the value
                            t.`late`
                        )
           WHERE t.`late` > 0 AND 
		 t.`shift_id` = ts.`shift_id` and
		 t.user_id = u.user_id;           
    
    
    -- > 4.1.3 EXEMPTIONS ON EXCUSED TARDINESS
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd, `ww_time_forms_blanket` tfb
           SET t.`late` = 0
           WHERE tf.`forms_id` =  tfd.`forms_id` AND 
                 tf.`user_id` = 0 AND 
                 tf.`form_code` = 'ET' AND 
                 tf.form_status_id = 6 AND 
                 tfd.`date` =  t.`date` AND 
                 tfb.`forms_id` = tf.`forms_id` AND
                 tfb.`user_id` =  t.`user_id`;
    
    
    -- > 4.2 UNDERTIME (Converted to HOUR)
    -- >
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`undertime` = IF(t.`absent` = 1, 
                           -- TRUE: assigned no undertime since it is already absent
                           0,
                           -- FALSE: get minutes interval
                           IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`) ) <= 0,
                               -- TRUE: assigned no lates
                               0,
                               -- FALSE: get minutes interval
                               IF( TIME(time_period_process_shift('FIRST-HALF-END','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '00:00:00')) = TIME(t.`timeout`),
                                  -- TRUE: less break
                                  (TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`)) / 60) - t.`hrs_break`,
                                  -- FALSE: 
                                  TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`)) / 60
                               )
                           )
                        )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 -- t.`lwp` = 0 AND 
                 -- t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id`;
    
     
    -- > 4.2.1 EXEMPTIONS ON SPECIAL PARTNERS
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u 
           SET t.`undertime` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                             u.company_id, t.`shift_id`, t.`user_id`, '00:00:00') <> '00:00:00',
                               
                                   IF( t.`timein` <= CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', 
                                                            time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                             u.company_id, t.`shift_id`, t.`user_id`, '00:00:00')),
                                
                                       -- TRUE: special condition on special partner (e.g. flexi until 10am)
                                       IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL t.`hrs_break` HOUR
                                                                 ) ) > 0,
                                           TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL t.`hrs_break` HOUR
                                                                 ) ) / 60,
                                           -- FALSE: no changes on the value
                                           0
                                       ),
                                       0
                                   ),
                                   -- FALSE: no changes on the value
                                   t.`undertime`
                               )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id` and
                 t.user_id = u.user_id;
    
    
    -- > 4.2.2 EXEMPTIONS ON MANAGERS
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`undertime` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                             u.company_id, t.`user_id`, t.`shift_id`,'00:00:00') <> '00:00:00',
                               
                                   IF( t.`timein` <= CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', 
                                                            time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                             u.company_id, t.`user_id`, t.`shift_id`,'00:00:00')),
                                
                                       -- TRUE: special condition on special partner (e.g. flexi until 10am)
                                       IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL time_period_process_shift('BREAK-IN-MINUTES','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '60') MINUTE
                                                                 ) ) > 0,
                                           TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL time_period_process_shift('BREAK-IN-MINUTES','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '60') MINUTE
                                                                 ) ) / 60,
                                           -- FALSE: no changes on the value
                                           0
                                       ),
                                       0
                                   ),
                                   -- FALSE: no changes on the value
                                   t.`undertime`
                               )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id` and 
                 t.user_id = u.user_id;
    
    
    -- > 4.2.3 EXEMPTIONS ON EXCUSED UNDERTIME
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd, `ww_time_forms_blanket` tfb
           SET t.`undertime` = 0
           WHERE tf.`forms_id` =  tfd.`forms_id` AND 
                 tf.`user_id` = 0 AND 
                 tf.`form_code` = 'UT' AND 
                 tf.form_status_id = 6 AND 
                 tfd.`date` =  t.`date` AND 
                 tfb.`forms_id` = tf.`forms_id` AND
                 tfb.`user_id` =  t.`user_id`;
    
    
    -- > 4.2.4 EXEMPTIONS ON EMERGENCY LEAVE
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd, `ww_time_forms_blanket` tfb
           SET t.`late` = 0, 
               t.`undertime` = 0, 
               t.`absent` = 0,
               t.`hrs_rendered` = IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0)
           WHERE tf.`forms_id` =  tfd.`forms_id` AND 
                 tf.`user_id` = 0 AND 
                 tf.`form_code` = 'EL' AND 
                 tf.form_status_id = 6 AND 
                 tfd.`date` =  t.`date` AND 
                 tfb.`forms_id` = tf.`forms_id` AND
                 tfb.`user_id` =  t.`user_id`;
    -- ]] STEP 4
    
    
    -- (classcode VARCHAR(32), classgroup VARCHAR(32), comp_id INT(11), shiftid INT(11), userid INT(11), optreturn VARCHAR(32))
    -- STEP 5: COMPLETING RENDERED HOURS... FINAL CHECK
    -- [[
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                              u.company_id, t.`shift_id`, t.`user_id`, '00:00:00') <> '00:00:00'
                                    ,
                                    -- TRUE                                    
                                    IF( TIME(t.`timein`) > TIME(time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                              u.company_id, t.`shift_id`, t.`user_id`, '00:00:00')),
                                        -- TRUE
                                        IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) / 2,
                                        -- FALSE
                                        t.`late`
                                    )
                                    ,
                                    -- FALSE
                                    t.`late`
                                )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id` and
                 t.user_id = u.user_id;
    /*             
    UPDATE `timeprocess` t
           SET t.`absent` = 0, t.`hrs_rendered` = IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) * IF(t.`lwp` * 8 IN (4,6), .5, 1)
           WHERE t.`lwp` > 0 AND t.absent = 1;
    
    UPDATE `timeprocess` t
           SET t.`hrs_actual` = t.`hrs_rendered` - t.`late` - t.`undertime` - (IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) * IF(t.`lwop` * 8 IN (4,6), .5, IF(t.`lwop`=0, 0,1) ))
           WHERE t.`day_type` = 'REGULAR';
    
    UPDATE `timeprocess` t
           SET t.`hrs_actual` = t.`hrs_rendered` - t.`late` - t.`undertime` - (IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) * IF(t.`lwop` * 8 IN (4,6), .5, IF(t.`lwop`=0, 0,1) ))
           WHERE t.`day_type` IN ('SPECIAL','LEGAL');
    */
    -- ]] STEP 5
    
    
    
    -- STEP 6: RESIGNED TAGGING / COMPUTE OVERTIME
    -- [[
    -- > 6.1 RESIGNED
    UPDATE `timeprocess` t
           SET t.`resigned` = time_period_process_resigned(t.`user_id`, t.`date`);
    
    -- > 6.2 OVERTIME
    CALL sp_time_period_process_summary_ot(periodid, userid);
    
    -- > 6.2.1 OVERTIME BREAK
    UPDATE `timeprocess` t
    JOIN `ww_time_day_type` tdt ON tdt.`deleted` = 0 AND t.`day_type` = tdt.`day_type_code`
    JOIN `ww_time_day_type_break` tdtb ON tdtb.`day_type_id` = tdt.`day_type_id`
    JOIN `ww_time_day_break` tdb ON tdb.`deleted` = 0 AND tdb.`break_id` = tdtb.`break_id`
    JOIN `ww_time_day_break_range` tdbr ON tdbr.`break_id` = tdb.`break_id`
    join `ww_users` u on u.user_id = t.user_id and u.company_id = tdbr.company_id
           SET t.`ot_break` = IFNULL(tdbr.`deduction`, 0)
           WHERE t.`ot` > 0 AND (t.`ot` BETWEEN tdbr.`hour_from` AND tdbr.`hour_to`);
    
    -- > 6.2.2 MEAL ALLOWANCE
    UPDATE `timeprocess` t
    JOIN `ww_time_day_type` tdt ON tdt.`deleted` = 0 AND t.`day_type` = tdt.`day_type_code`
    JOIN `ww_time_day_type_allowance` tdta ON tdta.`day_type_id` = tdt.`day_type_id`
    JOIN `ww_time_day_meal` tdm ON tdm.`deleted` = 0 AND tdm.`meal_id` = tdta.`meal_id`
    JOIN `ww_time_day_meal_range` tdmr ON tdmr.`meal_id` = tdm.`meal_id`
    JOIN `partners` p ON p.`user_id` = t.`user_id`
    JOIN `ww_time_day_allowance` tda ON tda.`employment_type_id` = p.`employment_type_id`
           SET t.`meal` = IFNULL(tdmr.`multiplier`, 0) * IFNULL(tda.`meal`, 0)
           WHERE t.`ot` > 0 AND ((t.`ot` - t.`ot_break`) BETWEEN tdmr.`hour_from` AND tdmr.`hour_to`);
    
    -- > 6.2.3 TRANSPO ALLOWANCE
    UPDATE `timeprocess` t
    JOIN `ww_time_day_type` tdt ON tdt.`deleted` = 0 AND t.`day_type` = tdt.`day_type_code`
    JOIN `ww_time_day_type_allowance` tdta ON tdta.`day_type_id` = tdt.`day_type_id`
    JOIN `ww_time_day_transpo` tdm ON tdm.`deleted` = 0 AND tdm.`transpo_id` = tdta.`transpo_id`
    JOIN `ww_time_day_transpo_range` tdmr ON tdmr.`transpo_id` = tdm.`transpo_id`
    JOIN `partners` p ON p.`user_id` = t.`user_id`
    JOIN `ww_time_day_allowance` tda ON tda.`employment_type_id` = p.`employment_type_id`
           SET t.`transpo` = IFNULL(tdmr.`multiplier`, 0) * IFNULL(tda.`transpo`, 0)
           WHERE t.`ot` > 0 AND ((t.`ot` - t.`ot_break`) BETWEEN tdmr.`hour_from` AND tdmr.`hour_to`);
    
    -- > 6.2.4 EXEMPTION ON ABSENT TAGGING ON CURRENT DATE
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`absent` = IF(NOW() < CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`), 0, t.`absent`)
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`date` = CURDATE() AND
                 t.`absent` = 1 AND
                 t.`shift_id` = ts.`shift_id`;
    
    -- > 6.2.5 MOVE LATE TO UNDERTIME
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd
           SET t.`undertime` = IF(IFNULL(t.`late`,0) > 0, IFNULL(t.`undertime`,0)+t.`late`, t.`undertime`),
               t.`late` = IF(t.`late` > 0, 0, t.`late`)
           WHERE tf.`user_id` = t.`user_id` AND 
                 tf.`form_code` = 'UT' AND 
                 tf.`form_status_id` = 6 AND 
                 tf.`forms_id` =  tfd.`forms_id` AND 
                 tfd.`duration_id` IN (1,2) AND
                 tfd.`date` =  t.`date`;
   -- ]] STEP 6
    
    
    -- > STEP 7: FINAL EXEMPTION
    -- [[
    -- > 7.1 DTR UPLOAD
    /*
    UPDATE `timeprocess` t
           SET t.`late`       =  IF(t.`hrs_actual` < 0, 0, t.`late`),
               t.`undertime`  =  IF(t.`hrs_actual` < 0, 0, t.`undertime`),
               t.`absent`     =  IF(t.`hrs_actual` < 0, 1, t.`absent`),
               t.`hrs_actual` = IF(t.`hrs_actual` < 0, 0, t.`hrs_actual`)
           WHERE t.`hrs_actual` < 0;
    */
    -- > 7.2 ATTENDANCE BASE
    UPDATE `timeprocess` t, `ww_payroll_partners` pp
           SET t.`late`       =  0,
               t.`undertime`  =  0,
               t.`absent`     =  0,
               t.`hrs_actual` = time_period_process_workhrs(t.`user_id`, t.`date`)
           WHERE (t.`hrs_rendered` > 0 OR t.`absent` = 1) AND
                 t.`user_id` = pp.`user_id` AND 
                 pp.`attendance_base` = 0 AND
                 pp.`deleted` = 0;
    
    -- > 7.3 NIGHT DIFF
    UPDATE timeprocess t, ww_users u
    SET t.nd = get_ndiff(u.user_id, t.date, u.company_id)
    WHERE u.user_id = t.user_id AND
	  (t.hrs_actual > 0 OR t.ot > 0);
    
    -- > 7.4 UNDER SUSPENSION
    
    -- ]] STEP 7
    
    
    -- STEP 7: INSERT SUMMARY
    -- [[
    INSERT INTO `ww_time_record_summary` (
           `record_id`,
           `user_id`,
           `id_number`,
           `date`,
           `period_id`,
           `payroll_date`,
           `day_type`,
           `hrs_rendered`,
           `hrs_actual`,
           `hrs_break`,
           `absent`,
           `lwp`,
           `lwop`,
           `late`,
           `undertime`,
           `nd`,
           `ot`,
           `ot_break`,
           `meal`,
           `transpo`,
           `resigned`,
           `awol` )
    SELECT `record_id`,
           `user_id`,
           `id_number`,
           `date`,
           `period_id`,
           `payroll_date`,
           `day_type`,
           `hrs_rendered`,
           `hrs_actual`,
           `hrs_break`,
           `absent`,
           `lwp`,
           `lwop`,
           `late`,
           `undertime`,
           `nd`,
           `ot`,
           `ot_break`,
           `meal`,
           `transpo`,
           `resigned`,
           `awol`
    FROM `timeprocess`
    ON DUPLICATE KEY UPDATE 
           `day_type`     = VALUES(`day_type`),
           `hrs_rendered` = VALUES(`hrs_rendered`),
           `hrs_actual`   = VALUES(`hrs_actual`),
           `hrs_break`    = VALUES(`hrs_break`),
           `absent`       = VALUES(`absent`),
           `lwp`          = VALUES(`lwp`),
           `lwop`         = VALUES(`lwop`),
           `late`         = VALUES(`late`),
           `undertime`    = VALUES(`undertime`),
           `nd` 	  = values(`nd`),
           `ot`           = VALUES(`ot`),
           `ot_break`     = VALUES(`ot_break`),
           `meal`         = VALUES(`meal`),
           `transpo`      = VALUES(`transpo`),
           `resigned`     = VALUES(`resigned`),
           `awol`         = VALUES(`awol`),
           `modified_on`  = NOW();
    -- ]]
    
    
    
    -- STEP 8: PROCESS FOR PAYROLL INPUT
    -- [[
    SET @absent_before_holiday = 0;
    SELECT IFNULL(`value`,0) INTO @absent_before_holiday
    FROM `ww_config`
    WHERE `key`='absent_before_holiday' AND `deleted`=0;
    
    IF @absent_before_holiday = 1 THEN
       CALL sp_time_period_validate_holiday( periodid, userid );
    END IF;
    
    
    SET @notlatefile = 0;
    SELECT period_id INTO @notlatefile
    FROM `ww_time_period` WHERE (CURDATE() BETWEEN date_from AND (cutoff + INTERVAL 10 DAY)) AND period_id = periodid;
    
    -- INSERT INTO `logtable` (`log`) VALUES (CONCAT(periodid,' ',@notlatefile));
    
    IF periodid = @notlatefile THEN
       CALL sp_time_period_summary( periodid, userid );
    END IF;
    
    -- ]]
    /*
    -- this will update ww_time_record_summary project id
	    select date_from, date_to, payroll_date
	    into dtStart, dtEnd, dtPay
	    from ww_time_period where period_id = periodid;
 	    -- set project to default assigned project
	    UPDATE ww_time_record_summary trs
	    left join ww_users_profile up on trs.user_id = up.user_id
	    SET trs.project_id = up.project_id
	    WHERE trs.user_id = userid AND trs.`date` BETWEEN dtStart AND dtEnd AND payroll_date = dtPay;
	    -- this will set the project if it has movement
	    call sp_time_period_set_project(userid, dtStart, dtEnd, dtPay);
    */
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_process_all` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_process_all` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_process_all`()
BEGIN
    DECLARE pdone TINYINT(11) DEFAULT 0;
    DECLARE prec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE periodid INT;
    DECLARE companyid INT;
    DECLARE datefrom DATE;
    DECLARE dateto DATE;
    DECLARE cutoff DATE; 
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE periods CURSOR FOR
       SELECT tp.`period_id`, tp.`company_id`, tp.`date_from`, tp.`date_to`, tp.`cutoff`
       FROM `ww_time_period` tp
       WHERE tp.`closed`=0 AND tp.`deleted`=0 AND 
             CURDATE() BETWEEN tp.`date_from` AND IF(tp.`cutoff` > tp.`date_to`, tp.`cutoff`, tp.`date_to`);
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET pdone = 1;
 
 
    -- START TRANSACTION;
        
    OPEN periods;
    
    REPEAT
       FETCH periods INTO periodid, companyid, datefrom, dateto, cutoff;
       
       IF NOT pdone THEN
           SET prec = prec + 1;
           
           -- execute processing
           -- version 1.0: CALL `sp_time_period_process`(periodid, 0);
           -- version 1.1: CALL `sp_time_period_process_summary`(periodid, 0);
            
           IF (CURDATE() BETWEEN (dateto + INTERVAL 1 DAY) AND cutoff) THEN
              CALL `sp_time_period_process_latefile`(periodid, 0);
           END IF;
           
           SET @rec = 1; -- 0;
           /*
           SELECT COUNT(tr.`user_id`) INTO @rec
           FROM `users_profile` up, `time_record` tr 
           WHERE tr.`user_id`=up.`user_id` AND up.`company_id`=companyid AND
                 (tr.`created_on` >= (NOW()- INTERVAL 1 HOUR) OR tr.`modified_on` >= (NOW()- INTERVAL 1 HOUR));
           */
           IF @rec > 0 THEN
              -- [1]
              CALL `sp_time_period_process`(periodid, 0);
              
              -- [2] update period header
              UPDATE `ww_time_period` SET `last_processed`=NOW(), `processed`=IFNULL(`processed`,0)+1
              WHERE `period_id`=periodid;
              
              -- [3] re-update time-records, initialize first: 2016-04-22
              /*
              UPDATE `ww_time_record` tr
              SET tr.time_in=NULL,tr.time_out=NULL
              WHERE tr.`aux_shift_id`<>0 AND tr.override=0 
                AND tr.`date` BETWEEN datefrom AND dateto 
                AND tr.`user_id` IN (SELECT `user_id` FROM `users_profile` WHERE `company_id`=companyid);
              */
              
              -- [4] re-update time-records, updating of raw: 2016-04-22
              /*
              UPDATE `ww_time_record_raw` trr
              SET trr.`processed`=0
              WHERE trr.`date` BETWEEN datefrom AND dateto 
                AND trr.`user_id` IN (SELECT `user_id` FROM `users_profile` WHERE `company_id`=companyid);
              */
           END IF;
       END IF;
       
    UNTIL pdone END REPEAT;
    
    CLOSE periods;
    
    -- COMMIT;
    
    SELECT prec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_process_checking` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_process_checking` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_process_checking`(IN periodid INT(11), IN userid INT(11))
BEGIN
    
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    DECLARE dtStart DATE;
    DECLARE dtEnd DATE;
    DECLARE dtPay DATE;
    
    
    -- STEP 1: CREATE A TEMPORARY TABLE TO HOLD INITIAL SUMMARY
    -- [[
    DROP TEMPORARY TABLE IF EXISTS `timeprocess`;
    CREATE TEMPORARY TABLE `timeprocess` (
           `record_id` INT(11) UNSIGNED NOT NULL DEFAULT '0',
           `user_id` INT(11) NOT NULL DEFAULT '0',
           `id_number` VARCHAR(8) NOT NULL DEFAULT '',
           `date` DATE NOT NULL DEFAULT '0000-00-00',
           `period_id` INT(11) NOT NULL DEFAULT '0',
           `payroll_date` DATE NOT NULL DEFAULT '0000-00-00',
           `shift_id` INT(11) NOT NULL DEFAULT '0',
           `shift` VARCHAR(16) NOT NULL DEFAULT '',
           `timein` DATETIME DEFAULT '0000-00-00 00:00:00',
           `timeout` DATETIME DEFAULT '0000-00-00 00:00:00',
           `day_type` VARCHAR(16) DEFAULT 'REGULAR',
           `hrs_rendered` DECIMAL(5,2) DEFAULT '0.00',
           `hrs_actual` DECIMAL(5,2) DEFAULT '0.00',
           `hrs_break` DECIMAL(5,2) DEFAULT '0.00',
           `absent` TINYINT(1) DEFAULT '0',
           `lwp` DECIMAL(5,2) DEFAULT '0.00',
           `lwop` DECIMAL(5,2) DEFAULT '0.00',
           `late` DECIMAL(5,2) DEFAULT '0.00',
           `undertime` DECIMAL(5,2) DEFAULT '0.00',
           `nd` decimal(5,2) default '0.00',
           `ot` DECIMAL(5,2) DEFAULT '0.00',
           `ot_break` DECIMAL(5,2) DEFAULT '0.00',
           `meal` DECIMAL(5,2) DEFAULT '0.00',
           `transpo` DECIMAL(5,2) DEFAULT '0.00',
           `resigned` TINYINT(1) DEFAULT '0',
           `awol` TINYINT(1) DEFAULT '0',
           `override` TINYINT(1) DEFAULT '0', -- >> (VALUE: 1=not to include, 0=include) field tag to check whether to include in the time record
    PRIMARY KEY (`record_id`,`user_id`,`date`,`payroll_date`),
            KEY `user_id` (`user_id`),
            KEY `date` (`date`),
            KEY `payroll_date` (`payroll_date`)
    ) ENGINE=INNODB DEFAULT CHARSET=utf8;
    -- ]] STEP 1
    
    
        
    -- STEP 2: INSERT TIME RECORDS NET OF ATTENDANCE LOGS
    -- [[
    CALL sp_time_period_process_cws(periodid,userid); -- last minute check on cws
    
    INSERT INTO `timeprocess`
       ( `record_id`, `user_id`, `date`, `period_id`, `payroll_date`, `shift_id`, `shift`, `timein`, `timeout`,
         `hrs_rendered` )
       SELECT 
          tr.`record_id`, tr.`user_id`, tr.`date`, tp.`period_id`, tp.`payroll_date`, 
          IF( IFNULL(tr.`aux_shift_id`, 0) = 0, tr.`shift_id`, IFNULL(tr.`aux_shift_id`, 0) ) `shift_id`,
          IF( IFNULL(tr.`aux_shift_id`, 0) = 0, tr.`shift`, IFNULL(tr.`aux_shift`, 0) ) `shift`,
          IF( IFNULL(tr.`aux_time_in`, '0000-00-00 00:00:00') = '0000-00-00 00:00:00', 
              IFNULL(tr.`time_in`, '0000-00-00 00:00:00'), 
              IF( IFNULL(tr.`aux_time_in`, '0000-00-00 00:00:00') > IFNULL(tr.`time_in`, '0000-00-00 00:00:00') AND IFNULL(tr.`time_in`, '0000-00-00 00:00:00') <> '0000-00-00 00:00:00',
                 IFNULL(tr.`time_in`, '0000-00-00 00:00:00'),
                 IFNULL(tr.`aux_time_in`, '0000-00-00 00:00:00') 
              )
          ) `timein`,
          IF( IFNULL(tr.`aux_time_out`, '0000-00-00 00:00:00') = '0000-00-00 00:00:00', 
              IFNULL(tr.`time_out`, '0000-00-00 00:00:00'), 
              IF( IFNULL(tr.`time_out`, '0000-00-00 00:00:00') > IFNULL(tr.`aux_time_out`, '0000-00-00 00:00:00'),
                 IFNULL(tr.`time_out`, '0000-00-00 00:00:00'),
                 IFNULL(tr.`aux_time_out`, '0000-00-00 00:00:00') 
              )
          ) `timeout`,
          
          time_period_process_workhrs(tr.`user_id`, tr.`date`)
       /*
       FROM  `time_record` tr, `ww_time_period` tp, `users_profile` up
       WHERE  up.`company_id` = tp.`company_id` AND
              up.`user_id` = tr.`user_id` AND
              tp.period_id = periodid AND
              IF(userid = 0, 1, tr.`user_id` = userid) AND
              tr.`date` BETWEEN tp.date_from AND IF(tp.date_to > DATE(NOW()), DATE(NOW()), tp.date_to); */
       FROM `ww_time_record` tr
       JOIN `ww_users_profile` up ON up.`user_id` = tr.`user_id`
       JOIN `ww_time_period` tp ON up.`company_id` = tp.`company_id`
       LEFT JOIN `ww_time_period_apply_to_id` tpati ON tpati.`period_id` = tp.`period_id`
       JOIN `ww_partners` p ON p.`user_id` = tr.`user_id`
       WHERE 
              tp.period_id = periodid AND
              tr.user_id > 0 AND
              IF(userid = 0, 1, tr.`user_id` = userid) AND
              tr.`date` BETWEEN tp.date_from AND IF(tp.date_to > DATE(NOW()), DATE(NOW()), tp.date_to) 
              AND
              IF(tp.`apply_to_id` = 0, 1, 
                 IF(tp.`apply_to_id` = 1, tpati.`apply_to_id` = tr.`user_id`, 
                    IF(tp.`apply_to_id` = 2, tpati.`apply_to_id` = p.`status_id`, 
                       IF(tp.`apply_to_id` = 3, tpati.`apply_to_id` = up.`division_id`, 
                          IF(tp.`apply_to_id` = 4, tpati.`apply_to_id` = up.`department_id`, 1))))) ;
    -- ]] STEP 2
    
    -- STEP 3: SET RESTDAY, ABSENT, LWOP, LEAVE, etc... (AWOL is executed outside this script)
    -- [[
    -- > 3.1 RESTDAY
    UPDATE `timeprocess` t, `time_shift` ts 
           SET t.`day_type` = UPPER(ts.`shift`), 
               t.`hrs_rendered` = 0
           WHERE t.`shift_id` = ts.`shift_id` AND 
                 UPPER(ts.`shift`) IN ('OFF','RESTDAY');
                     
      -- > 3.2 HOLIDAY / LEGAL / SPECIAL 
    UPDATE `timeprocess` t
    INNER JOIN `ww_time_holiday` th ON th.deleted = 0
    LEFT JOIN `ww_time_holiday_location` thl ON thl.deleted = 0 AND thl.`holiday_id` = th.`holiday_id` AND thl.`user_id` = t.`user_id`
    
           SET t.`day_type` = IF( th.`legal` = 1, 
                                  -- TRUE: IF(t.`day_type`='RESTDAY', 'RDHOL', 'LEGAL'),
                                  'LEGAL',
                                  -- FALSE:
                                  IF( IFNULL(th.`location_count`,0) = 0,
                                      -- TRUE: IF(t.`day_type`='RESTDAY', 'RDSPEC', 'SPECIAL'),
                                      'SPECIAL',
                                      -- FALSE:
                                      IF( thl.`user_id` = t.`user_id`,
                                          -- TRUE: IF(t.`day_type`='RESTDAY', 'RDSPEC', 'SPECIAL'),
                                          'SPECIAL',
                                          -- FALSE:
                                          t.`day_type`
                                      )
                                  )
                              )
           WHERE t.`date` = th.`holiday_date`; -- AND th.legal = 1;  -- AND t.`day_type` = 'REGULAR'; -- remove temporary since legal rest day does not compute 02/15/2019
           
    -- > 3.2 HOLIDAY / LEGAL / SPECIAL 
    UPDATE `timeprocess` t
    INNER JOIN `ww_time_holiday` th ON th.deleted = 0
    LEFT JOIN `ww_time_holiday_location` thl ON thl.deleted = 0 AND thl.`holiday_id` = th.`holiday_id` AND thl.`user_id` = t.`user_id`
    
           SET t.`day_type` = IF( th.`legal` = 1, 
                                  -- TRUE: IF(t.`day_type`='RESTDAY', 'RDHOL', 'LEGAL'),
                                  'LEGAL',
                                  -- FALSE:
                                  IF( IFNULL(th.`location_count`,0) = 0,
                                      -- TRUE: IF(t.`day_type`='RESTDAY', 'RDSPEC', 'SPECIAL'),
                                      'SPECIAL',
                                      -- FALSE:
                                      IF( thl.`user_id` = t.`user_id`,
                                          -- TRUE: IF(t.`day_type`='RESTDAY', 'RDSPEC', 'SPECIAL'),
                                          'SPECIAL',
                                          -- FALSE:
                                          t.`day_type`
                                      )
                                  )
                              )
           WHERE t.`date` = th.`holiday_date`; -- AND th.legal = 0  AND t.`day_type` = 'REGULAR';
           
    SELECT date_from,cutoff INTO @period_date_from,@period_cutoff
    FROM `ww_time_period` WHERE period_id = periodid;
        
    /*UPDATE `timeprocess` t
           SET t.`timein` = if(time_period_process_absent_w_in_cutoff(t.`user_id`,t.`date`,@period_date_from,@period_cutoff) = 0,t.`timein`,'0000-00-00 00:00:00'),
               t.`timeout` = IF(time_period_process_absent_w_in_cutoff(t.`user_id`,t.`date`,@period_date_from,@period_cutoff) = 0,t.`timeout`,'0000-00-00 00:00:00')
           WHERE t.`day_type` = 'REGULAR'; */    
    
    -- > 3.3 ABSENT
    UPDATE `timeprocess` t
           SET t.`absent` = 1, t.`hrs_rendered` = 0
           WHERE `day_type` = 'REGULAR' AND 
                 (`timein` = '0000-00-00 00:00:00' OR `timeout` = '0000-00-00 00:00:00');
    
    -- > 3.4 LEAVE WITH PAY /AND/ LEAVE WITHOUT PAY
    SET @lwop = 0;
    SELECT GROUP_CONCAT(`form_id`) INTO @lwop FROM `ww_time_form` WHERE `form_code`='LWOP' OR `form_code`='FLV' LIMIT 1;
    
    UPDATE `timeprocess` t
           SET t.`lwop` = time_period_process_lwop(t.`user_id`,t.`date`,@lwop,@period_cutoff,@period_date_from),
               t.`lwp` = time_period_process_lwp(t.`user_id`,t.`date`,@lwop,@period_cutoff),
               t.`hrs_break` = time_period_process_shift('BREAK-IN-MINUTES','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '60') / 60               
           WHERE t.`day_type` = 'REGULAR';
    -- ]] STEP 3    
    
    
    
    -- STEP 4: SET LATE AND UNDERTIME
    -- [[
    -- > 4.1 LATE (Converted to HOUR): limited to regular schedule only and its assigned schedule including all applications
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF(t.`absent` = 1, 
                             -- TRUE: assigned no lates since it is already absent
                             0,
                             -- FALSE: get minutes considering grace period
                             IF( (TIMESTAMPDIFF(MINUTE, 
                                                (CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_start`) + INTERVAL 
                                                (time_period_process_shift_department('GRACE-PERIOD-IN-MINUTES','EMPLOYMENT-TYPE', 
                                                    u.company_id, t.`shift_id`, t.`user_id`, '0')) MINUTE),
                                  t.`timein` )*1) <= 0,
                                  -- TRUE: assigned no lates
                                  0,
                                  -- FALSE: get minutes lates disregarding grace period
                                  TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_start`), t.`timein`) / 60
                             )
                          )
           WHERE t.`day_type` = 'REGULAR' AND 
		 t.`shift_id` = ts.`shift_id` and
		 t.user_id = u.user_id;
		 
    -- 4.1 LATE (Converted to HOUR): limited to regular schedule only and its assigned schedule including all applications
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF(time_period_process_ut(t.`user_id`,t.`date`,ts.`time_start`,ts.`time_end`) > 0, 
                             -- TRUE: assigned no lates since it is already undertime
                             0,
                             -- FALSE: no changes on the value
                             t.`late`
                          )
           WHERE t.`day_type` = 'REGULAR' AND 
		 t.`shift_id` = ts.`shift_id` AND
		 t.user_id = u.user_id;
		            
    -- > 4.1.1 EXEMPTIONS ON SPECIAL PARTNERS
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                      u.company_id, t.`shift_id`, t.`user_id`, '00:00:00') <> '00:00:00',
                            -- TRUE: special condition normally on managers (e.g. flexi until 10am)
                            IF( TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                      u.company_id, t.`shift_id`, t.`user_id`, '00:00:00')), t.`timein`) > 0,
                                -- TRUE:
                                TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                      u.company_id, t.`shift_id`, t.`user_id`, '00:00:00')), t.`timein`) / 60,
                                -- FALSE:
                                0
                            ),
                            -- FALSE: no changes on the value
                            t.`late`
                        )
           WHERE t.`late` > 0 AND 
		 t.`shift_id` = ts.`shift_id` and
		 t.user_id = u.user_id;           
    
    -- > 4.1.2 EXEMPTIONS ON MANAGERS
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                      u.company_id, t.`shift_id`, t.`user_id`,'00:00:00') <> '00:00:00',
                            -- TRUE: special condition normally on managers (e.g. flexi until 10am)
                            IF( TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                      u.company_id, t.`shift_id`, t.`user_id`,'00:00:00')), t.`timein`) > 0,
                                -- TRUE:
                                TIMESTAMPDIFF(MINUTE, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                      u.company_id, t.`shift_id`, t.`user_id`,'00:00:00')), t.`timein`) / 60,
                                -- FALSE:
                                0
                            ),
                            -- FALSE: no changes on the value
                            t.`late`
                        )
           WHERE t.`late` > 0 AND 
		 t.`shift_id` = ts.`shift_id` and
		 t.user_id = u.user_id;           
    
    
    -- > 4.1.3 EXEMPTIONS ON EXCUSED TARDINESS
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd, `ww_time_forms_blanket` tfb
           SET t.`late` = 0
           WHERE tf.`forms_id` =  tfd.`forms_id` AND 
                 tf.`user_id` = 0 AND 
                 tf.`form_code` = 'ET' AND 
                 tf.form_status_id = 6 AND 
                 tfd.`date` =  t.`date` AND 
                 tfb.`forms_id` = tf.`forms_id` AND
                 tfb.`user_id` =  t.`user_id`;
    
    
    -- > 4.2 UNDERTIME (Converted to HOUR)
    -- >
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`undertime` = IF(t.`absent` = 1, 
                           -- TRUE: assigned no undertime since it is already absent
                           0,
                           -- FALSE: get minutes interval
                           IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`) ) <= 0,
                               -- TRUE: assigned no lates
                               0,
                               -- FALSE: get minutes interval
                               IF( TIME(time_period_process_shift('FIRST-HALF-END','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '00:00:00')) = TIME(t.`timeout`),
                                  -- TRUE: less break
                                  (TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`)) / 60) - t.`hrs_break`,
                                  -- FALSE: 
                                  TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`)) / 60
                               )
                           )
                        )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 -- t.`lwp` = 0 AND 
                 -- t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id`;
    
    -- > 4.2.1 UNDERTIME (Converted to HOUR)
    -- >
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`undertime` = IF(t.`absent` = 1, 
                           -- TRUE: assigned no undertime since it is already absent
                           0,
                           -- FALSE: get undertime am
                           if(time_period_process_ut_checking(t.`user_id`,t.`date`) > 0,
				   time_period_process_ut(t.`user_id`,t.`date`,ts.`time_start`,ts.`time_end`),
				   IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`) ) <= 0,
				       -- TRUE: assigned no lates
				       0,
				       -- FALSE: get minutes interval
				       IF( TIME(time_period_process_shift('FIRST-HALF-END','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '00:00:00')) = TIME(t.`timeout`),
					  -- TRUE: less break
					  (TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`)) / 60) - t.`hrs_break`,
					  -- FALSE: 
					  TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`)) / 60
				       )
				   )
		           )
                        )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`shift_id` = ts.`shift_id`;
                      
    -- > 4.2.1 EXEMPTIONS ON SPECIAL PARTNERS
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u 
           SET t.`undertime` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                             u.company_id, t.`shift_id`, t.`user_id`, '00:00:00') <> '00:00:00',
                               
                                   IF( t.`timein` <= CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', 
                                                            time_period_process_shift_department('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                             u.company_id, t.`shift_id`, t.`user_id`, '00:00:00')),
                                
                                       -- TRUE: special condition on special partner (e.g. flexi until 10am)
                                       IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL t.`hrs_break` HOUR
                                                                 ) ) > 0,
                                           TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL t.`hrs_break` HOUR
                                                                 ) ) / 60,
                                           -- FALSE: no changes on the value
                                           0
                                       ),
                                       0
                                   ),
                                   -- FALSE: no changes on the value
                                   t.`undertime`
                               )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id` and
                 t.user_id = u.user_id;
    
    
    -- > 4.2.2 EXEMPTIONS ON MANAGERS
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`undertime` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                             u.company_id, t.`user_id`, t.`shift_id`,'00:00:00') <> '00:00:00',
                               
                                   IF( t.`timein` <= CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ', 
                                                            time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                             u.company_id, t.`user_id`, t.`shift_id`,'00:00:00')),
                                
                                       -- TRUE: special condition on special partner (e.g. flexi until 10am)
                                       IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL time_period_process_shift('BREAK-IN-MINUTES','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '60') MINUTE
                                                                 ) ) > 0,
                                           TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL time_period_process_shift('BREAK-IN-MINUTES','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '60') MINUTE
                                                                 ) ) / 60,
                                           -- FALSE: no changes on the value
                                           0
                                       ),
                                       0
                                   ),
                                   -- FALSE: no changes on the value
                                   t.`undertime`
                               )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id` and 
                 t.user_id = u.user_id;
    
    
    -- > 4.2.3 EXEMPTIONS ON EXCUSED UNDERTIME
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd, `ww_time_forms_blanket` tfb
           SET t.`undertime` = 0
           WHERE tf.`forms_id` =  tfd.`forms_id` AND 
                 tf.`user_id` = 0 AND 
                 tf.`form_code` = 'UT' AND 
                 tf.form_status_id = 6 AND 
                 tfd.`date` =  t.`date` AND 
                 tfb.`forms_id` = tf.`forms_id` AND
                 tfb.`user_id` =  t.`user_id`;
    
    
    -- > 4.2.4 EXEMPTIONS ON EMERGENCY LEAVE
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd, `ww_time_forms_blanket` tfb
           SET t.`late` = 0, 
               t.`undertime` = 0, 
               t.`absent` = 0,
               t.`hrs_rendered` = IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0)
           WHERE tf.`forms_id` =  tfd.`forms_id` AND 
                 tf.`user_id` = 0 AND 
                 tf.`form_code` = 'EL' AND 
                 tf.form_status_id = 6 AND 
                 tfd.`date` =  t.`date` AND 
                 tfb.`forms_id` = tf.`forms_id` AND
                 tfb.`user_id` =  t.`user_id`;
    -- ]] STEP 4
    -- (classcode VARCHAR(32), classgroup VARCHAR(32), comp_id INT(11), shiftid INT(11), userid INT(11), optreturn VARCHAR(32))
    -- STEP 5: COMPLETING RENDERED HOURS... FINAL CHECK
    -- [[
    UPDATE `timeprocess` t, `time_shift` ts, ww_users u
           SET t.`late` = IF( time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                              u.company_id, t.`shift_id`, t.`user_id`, '00:00:00') <> '00:00:00'
                                    ,
                                    -- TRUE                                    
                                    IF( TIME(t.`timein`) > TIME(time_period_process_shift_department('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                              u.company_id, t.`shift_id`, t.`user_id`, '00:00:00')),
                                        -- TRUE
                                        IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) / 2,
                                        -- FALSE
                                        t.`late`
                                    )
                                    ,
                                    -- FALSE
                                    t.`late`
                                )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id` and
                 t.user_id = u.user_id;
            
    UPDATE `timeprocess` t
           SET t.`absent` = 0, t.`hrs_rendered` = IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) * IF(t.`lwp` * 8 IN (4,6), .5, 1)
           WHERE t.`lwp` > 0 AND t.absent = 1;
    
    UPDATE `timeprocess` t
           SET t.`absent` = 0, t.`hrs_actual` = t.`hrs_rendered` - t.`late` - t.`undertime` - (IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) * IF(t.`lwop` * 8 IN (4,6), .5, IF(t.`lwop`=0, 0,1) ))
           WHERE t.`day_type` = 'REGULAR' AND t.`lwop` > 0;
    
    -- To process LIP
    UPDATE `timeprocess` t
           SET t.`hrs_actual` = t.`hrs_rendered` - t.`late` - t.`undertime`
           WHERE t.`day_type` = 'REGULAR' AND t.`lwp` > 0;
               
    UPDATE `timeprocess` t
           SET t.`hrs_actual` = t.`hrs_rendered` - t.`late` - t.`undertime`
           WHERE t.`day_type` = 'REGULAR' AND t.`lwop` = 0 AND t.`lwp` = 0;
    
    UPDATE `timeprocess` t
           SET t.`hrs_actual` = t.`hrs_rendered` - t.`late` - t.`undertime`
           WHERE t.`day_type` IN ('SPECIAL','LEGAL');
    -- ]] STEP 5
    
    
    
    -- STEP 6: RESIGNED TAGGING / COMPUTE OVERTIME
    -- [[
    -- > 6.1 RESIGNED
    UPDATE `timeprocess` t
           SET t.`resigned` = time_period_process_resigned(t.`user_id`, t.`date`);
    
    -- > 6.2 OVERTIME
    UPDATE ww_time_record_summary SET ot = 0 WHERE period_id = periodid AND IF(user_id = 0, 1, user_id = userid);
    CALL sp_time_period_process_summary_ot(periodid, userid);
    
    -- > 6.2.1 OVERTIME BREAK
    UPDATE `timeprocess` t
    JOIN `ww_time_day_type` tdt ON tdt.`deleted` = 0 AND t.`day_type` = tdt.`day_type_code`
    JOIN `ww_time_day_type_break` tdtb ON tdtb.`day_type_id` = tdt.`day_type_id`
    JOIN `ww_time_day_break` tdb ON tdb.`deleted` = 0 AND tdb.`break_id` = tdtb.`break_id`
    JOIN `ww_time_day_break_range` tdbr ON tdbr.`break_id` = tdb.`break_id`
    join `ww_users` u on u.user_id = t.user_id and u.company_id = tdbr.company_id
           SET t.`ot_break` = IFNULL(tdbr.`deduction`, 0)
           WHERE t.`ot` > 0 AND (t.`ot` BETWEEN tdbr.`hour_from` AND tdbr.`hour_to`);
    
    -- > 6.2.2 MEAL ALLOWANCE
    UPDATE `timeprocess` t
    JOIN `ww_time_day_type` tdt ON tdt.`deleted` = 0 AND t.`day_type` = tdt.`day_type_code`
    JOIN `ww_time_day_type_allowance` tdta ON tdta.`day_type_id` = tdt.`day_type_id`
    JOIN `ww_time_day_meal` tdm ON tdm.`deleted` = 0 AND tdm.`meal_id` = tdta.`meal_id`
    JOIN `ww_time_day_meal_range` tdmr ON tdmr.`meal_id` = tdm.`meal_id`
    JOIN `partners` p ON p.`user_id` = t.`user_id`
    JOIN `ww_time_day_allowance` tda ON tda.`employment_type_id` = p.`employment_type_id`
           SET t.`meal` = IFNULL(tdmr.`multiplier`, 0) * IFNULL(tda.`meal`, 0)
           WHERE t.`ot` > 0 AND ((t.`ot` - t.`ot_break`) BETWEEN tdmr.`hour_from` AND tdmr.`hour_to`);
    
    -- > 6.2.3 TRANSPO ALLOWANCE
    UPDATE `timeprocess` t
    JOIN `ww_time_day_type` tdt ON tdt.`deleted` = 0 AND t.`day_type` = tdt.`day_type_code`
    JOIN `ww_time_day_type_allowance` tdta ON tdta.`day_type_id` = tdt.`day_type_id`
    JOIN `ww_time_day_transpo` tdm ON tdm.`deleted` = 0 AND tdm.`transpo_id` = tdta.`transpo_id`
    JOIN `ww_time_day_transpo_range` tdmr ON tdmr.`transpo_id` = tdm.`transpo_id`
    JOIN `partners` p ON p.`user_id` = t.`user_id`
    JOIN `ww_time_day_allowance` tda ON tda.`employment_type_id` = p.`employment_type_id`
           SET t.`transpo` = IFNULL(tdmr.`multiplier`, 0) * IFNULL(tda.`transpo`, 0)
           WHERE t.`ot` > 0 AND ((t.`ot` - t.`ot_break`) BETWEEN tdmr.`hour_from` AND tdmr.`hour_to`);
    -- > 6.2.4 EXEMPTION ON ABSENT TAGGING ON CURRENT DATE
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`absent` = IF(NOW() < CONCAT(t.`date` + INTERVAL IF(ts.`time_start`='00:00:00', 1, 0) DAY,' ',ts.`time_end`), 0, t.`absent`)
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`date` = CURDATE() AND
                 t.`absent` = 1 AND
                 t.`shift_id` = ts.`shift_id`;
    
    -- > 6.2.5 MOVE LATE TO UNDERTIME
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd
           SET t.`undertime` = IF(IFNULL(t.`late`,0) > 0, IFNULL(t.`undertime`,0)+t.`late`, t.`undertime`),
               t.`late` = IF(t.`late` > 0, 0, t.`late`)
           WHERE tf.`user_id` = t.`user_id` AND 
                 tf.`form_code` = 'UT' AND 
                 tf.`form_status_id` = 6 AND 
                 tf.`forms_id` =  tfd.`forms_id` AND 
                 tfd.`duration_id` IN (1,2) AND
                 tfd.`date` =  t.`date`;
   -- ]] STEP 6
    
    
    -- > STEP 7: FINAL EXEMPTION
    -- [[
    -- > 7.1 DTR UPLOAD
    UPDATE `timeprocess` t
           SET t.`late`       =  IF(t.`hrs_actual` < 0, 0, t.`late`),
               t.`undertime`  =  IF(t.`hrs_actual` < 0, 0, t.`undertime`),
               t.`absent`     =  IF(t.`hrs_actual` < 0, 1, t.`absent`),
               t.`hrs_actual` = IF(t.`hrs_actual` < 0, 0, t.`hrs_actual`)
           WHERE t.`hrs_actual` < 0;
    
    UPDATE `timeprocess` t
           SET t.`absent` = 0
           WHERE t.`day_type` = 'REGULAR' AND t.`lwop` > 0;
    
    -- > 7.2 ATTENDANCE BASE
    UPDATE `timeprocess` t, `ww_payroll_partners` pp
           SET t.`late`       =  0,
               t.`undertime`  =  0,
               t.`absent`     =  0,
               t.`hrs_actual` = time_period_process_workhrs(t.`user_id`, t.`date`)
           WHERE (t.`hrs_rendered` > 0 OR t.`absent` = 1) AND
                 t.`lwop` = 0 AND
                 t.`user_id` = pp.`user_id` AND 
                 pp.`attendance_base` = 0 AND
                 pp.`deleted` = 0;
    
    -- > 7.3 NIGHT DIFF
    UPDATE timeprocess t, ww_users u
    SET t.nd = get_ndiff(u.user_id, t.date, u.company_id)
    WHERE u.user_id = t.user_id AND
	  (t.hrs_actual > 0 OR t.ot > 0);
    
    -- > 7.4 UNDER SUSPENSION
    
    -- ]] STEP 7
    
    
    -- STEP 7: INSERT SUMMARY
    -- [[
    INSERT INTO `ww_time_record_summary` (
           `record_id`,
           `user_id`,
           `id_number`,
           `date`,
           `period_id`,
           `payroll_date`,
           `day_type`,
           `hrs_rendered`,
           `hrs_actual`,
           `hrs_break`,
           `absent`,
           `lwp`,
           `lwop`,
           `late`,
           `undertime`,
           `nd`,
           `ot`,
           `ot_break`,
           `meal`,
           `transpo`,
           `resigned`,
           `awol` )
    SELECT `record_id`,
           `user_id`,
           `id_number`,
           `date`,
           `period_id`,
           `payroll_date`,
           `day_type`,
           `hrs_rendered`,
           `hrs_actual`,
           `hrs_break`,
           `absent`,
           `lwp`,
           `lwop`,
           `late`,
           `undertime`,
           `nd`,
           `ot`,
           `ot_break`,
           `meal`,
           `transpo`,
           `resigned`,
           `awol`
    FROM `timeprocess`
    ON DUPLICATE KEY UPDATE 
           `user_id`      = VALUES(`user_id`),
           `date`         = VALUES(`date`),    
           `day_type`     = VALUES(`day_type`),
           `hrs_rendered` = VALUES(`hrs_rendered`),
           `hrs_actual`   = VALUES(`hrs_actual`),
           `hrs_break`    = VALUES(`hrs_break`),
           `absent`       = VALUES(`absent`),
           `lwp`          = VALUES(`lwp`),
           `lwop`         = VALUES(`lwop`),
           `late`         = VALUES(`late`),
           `undertime`    = VALUES(`undertime`),
           `nd` 	  = VALUES(`nd`),
           `ot`           = VALUES(`ot`),
           `ot_break`     = VALUES(`ot_break`),
           `meal`         = VALUES(`meal`),
           `transpo`      = VALUES(`transpo`),
           `resigned`     = VALUES(`resigned`),
           `awol`         = VALUES(`awol`),
           `modified_on`  = NOW(); 
    
    -- ]]
    
    -- STEP 8: PROCESS FOR PAYROLL INPUT
    -- [[
    SET @absent_before_holiday = 0;
    SELECT IFNULL(`value`,0) INTO @absent_before_holiday
    FROM `ww_config`
    WHERE `key`='absent_before_holiday' AND `deleted`=0;
    
    IF @absent_before_holiday = 1 THEN
       CALL sp_time_period_validate_holiday( periodid, userid );
    END IF;
    
    
    SET @notlatefile = 0;
    SELECT period_id INTO @notlatefile
    FROM `ww_time_period` WHERE (CURDATE() BETWEEN date_from AND (cutoff + INTERVAL 25 DAY)) AND period_id = periodid;
    
    -- INSERT INTO `logtable` (`log`) VALUES (CONCAT(periodid,' ',@notlatefile));
    
    IF periodid = @notlatefile THEN
       CALL sp_time_period_summary( periodid, userid );
    END IF;
    
    -- CALL `sp_time_period_process_latefile`(periodid, userid);
    
    -- ]]
    /*
    -- this will update ww_time_record_summary project id
	    select date_from, date_to, payroll_date
	    into dtStart, dtEnd, dtPay
	    from ww_time_period where period_id = periodid;
 	    -- set project to default assigned project
	    UPDATE ww_time_record_summary trs
	    left join ww_users_profile up on trs.user_id = up.user_id
	    SET trs.project_id = up.project_id
	    WHERE trs.user_id = userid AND trs.`date` BETWEEN dtStart AND dtEnd AND payroll_date = dtPay;
	    -- this will set the project if it has movement
	    call sp_time_period_set_project(userid, dtStart, dtEnd, dtPay);
    */
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_process_cws` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_process_cws` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_process_cws`(IN periodid INT(11), IN userid INT(11))
BEGIN
    
    DECLARE cwsdone TINYINT(11) DEFAULT 0;
    DECLARE cwsrec INT(11) DEFAULT 0;
    DECLARE formcode VARCHAR(8);
    DECLARE formsid INT(11);
    DECLARE formsdate DATE;
    
    DECLARE periods CURSOR FOR
       /*
       SELECT tf.form_code, tf.forms_id, tfd.`date`
       FROM ww_time_forms tf
       INNER JOIN ww_time_forms_date tfd ON tfd.forms_id=tf.forms_id
       INNER JOIN (
           SELECT tf.forms_id, tf.user_id, tfd.`date`
           FROM `ww_time_forms` tf
           INNER JOIN ww_time_forms_date tfd ON tfd.forms_id = tf.forms_id
           INNER JOIN ww_time_period tp ON tp.period_id = periodid AND tfd.`date` BETWEEN tp.date_from AND tp.date_to
           WHERE tf.`deleted`=0 AND tf.`user_id`=userid AND
                 tf.`form_status_id` = 6 AND tf.`form_code` = 'CWS'
       ) cws ON cws.`date`=tfd.`date` AND tf.user_id=userid AND tf.form_code <> 'CWS'; */
       
       SELECT tf.form_code, tf.forms_id, tfd.`date`
       FROM `ww_time_forms` tf
       JOIN ww_time_forms_date tfd ON tfd.forms_id = tf.forms_id
       JOIN ww_users_profile up ON up.`user_id`=tf.`user_id`
       JOIN ww_time_period tp ON tp.`company_id`=up.`company_id` AND tfd.`date` BETWEEN tp.date_from AND tp.date_to
       JOIN ww_time_form t ON t.`form_id`=tf.`form_id` -- AND t.`is_leave`=1
       JOIN ww_time_record_summary trs ON trs.`user_id`=tf.`user_id` AND trs.`date`=tfd.`date` 
       WHERE tf.`deleted`=0 AND 
             IF(userid=0, 1, tf.`user_id`=userid) AND
             tf.`form_status_id` = 6 AND 
             tf.`form_code` <> 'LWOP' AND 
             tp.period_id = periodid AND (trs.`absent` = 1 OR trs.`late` > 0 OR trs.`undertime`);
       
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET cwsdone = 1;
    
    OPEN periods;
    
    REPEAT
       FETCH periods INTO formcode, formsid, formsdate;
       
       IF NOT cwsdone THEN
          SET cwsrec = cwsrec + 1;
          CALL sp_time_forms_aux_shift(formcode, userid, formsid);
          CALL sp_time_record_raw_reupload(userid, formsdate);
       END IF;
       
    UNTIL cwsdone END REPEAT;
    
    CLOSE periods;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_process_latefile` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_process_latefile` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_process_latefile`(IN periodid INT(11), IN userid INT(11))
BEGIN
    
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    -- STEP 1: RECOMPUTE PREVIOUS CUT OFF
    SET @nComp = 0;
    SET @PrevPeriod = 0;
    
    -- get previous period
    SET @PrevPeriod = time_get_previous_period(periodid);
    
    CALL sp_time_period_process( @PrevPeriod, userid ); 
    
    SET @dtPay = '0000-00-00';
    SELECT payroll_date INTO @dtPay FROM ww_time_period WHERE period_id = periodid;
    
    -- clear record
    DELETE FROM ww_time_record_process 
    WHERE time_period_id = @PrevPeriod AND payroll_date = @dtPay AND IF(userid=0,1,`user_id`=userid);
    
    -- STEP 2: VALIDATE RECORD FROM PREVIOUS CUTOFF
    -- INSERT INTO `logtable` (`log`) VALUES (CONCAT(@PrevPeriod,' - ',userid,' - ',@dtPay,' - ',periodid));
    CALL sp_time_period_late_attnd_deduction( @PrevPeriod, userid, @dtPay, periodid );
    
    -- STEP 3: RECOMPUTE OVERTIME FROM PREVIOUS CUT OFF
    CALL sp_time_period_late_overtime( periodid, userid );
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_process_latefile_2` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_process_latefile_2` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_process_latefile_2`(IN periodid INT(11), IN userid INT(11))
BEGIN
    
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    -- STEP 1: RECOMPUTE PREVIOUS CUT OFF
    SET @nComp = 0;
    SET @PrevPeriod = 0;
    
    -- get previous period
    INSERT INTO `logtable` (`log`) SELECT CONCAT('sp_time_period_process(', @PrevPeriod, ',', userid, ' )' ); 
    SET @PrevPeriod = time_get_previous_period(periodid);
    CALL sp_time_period_process( @PrevPeriod, userid ); 
    
    SET @dtPay = '0000-00-00';
    SELECT payroll_date INTO @dtPay FROM ww_time_period WHERE period_id = periodid;
    
    -- clear record
    DELETE FROM ww_time_record_process 
    WHERE time_period_id = @PrevPeriod AND payroll_date = @dtPay AND IF(userid=0,1,`user_id`=userid);
    
    -- STEP 2: VALIDATE RECORD FROM PREVIOUS CUTOFF
    INSERT INTO `logtable` (`log`) SELECT CONCAT('sp_time_period_late_attnd_deduction( ',@PrevPeriod, ',', userid, ',',@dtPay, ',',periodid,')' );
    CALL sp_time_period_late_attnd_deduction( @PrevPeriod, userid, @dtPay, periodid );
    
    -- STEP 3: RECOMPUTE OVERTIME FROM PREVIOUS CUT OFF
    INSERT INTO `logtable` (`log`) SELECT CONCAT('sp_time_period_late_overtime( ',periodid, ',',userid,')' );
    CALL sp_time_period_late_overtime( periodid, userid );
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_process_summary` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_process_summary` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_process_summary`(IN periodid INT(11), IN userid INT(11))
BEGIN
    
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    
    -- STEP 1: CREATE A TEMPORARY TABLE TO HOLD INITIAL SUMMARY
    -- [[
    DROP TEMPORARY TABLE IF EXISTS `timeprocess`;
    CREATE TEMPORARY TABLE `timeprocess` (
           `record_id` INT(11) UNSIGNED NOT NULL DEFAULT '0',
           `user_id` INT(11) NOT NULL DEFAULT '0',
           `id_number` VARCHAR(8) NOT NULL DEFAULT '',
           `date` DATE NOT NULL DEFAULT '0000-00-00',
           `payroll_date` DATE NOT NULL DEFAULT '0000-00-00',
           `shift_id` INT(11) NOT NULL DEFAULT '0',
           `shift` VARCHAR(16) NOT NULL DEFAULT '',
           `timein` DATETIME DEFAULT '0000-00-00 00:00:00',
           `timeout` DATETIME DEFAULT '0000-00-00 00:00:00',
           `day_type` VARCHAR(16) DEFAULT 'REGULAR',
           `hrs_rendered` DECIMAL(5,2) DEFAULT '0.00',
           `hrs_actual` DECIMAL(5,2) DEFAULT '0.00',
           `hrs_break` DECIMAL(5,2) DEFAULT '0.00',
           `absent` TINYINT(1) DEFAULT '0',
           `lwp` DECIMAL(5,2) DEFAULT '0.00',
           `lwop` DECIMAL(5,2) DEFAULT '0.00',
           `late` DECIMAL(5,2) DEFAULT '0.00',
           `undertime` DECIMAL(5,2) DEFAULT '0.00',
           `ot` DECIMAL(5,2) DEFAULT '0.00',
           `ot_break` DECIMAL(5,2) DEFAULT '0.00',
           `meal` DECIMAL(5,2) DEFAULT '0.00',
           `transpo` DECIMAL(5,2) DEFAULT '0.00',
           `resigned` TINYINT(1) DEFAULT '0',
           `awol` TINYINT(1) DEFAULT '0',
           `override` TINYINT(1) DEFAULT '0', -- >> (VALUE: 1=not to include, 0=include) field tag to check whether to include in the time record
    PRIMARY KEY (`record_id`,`user_id`,`date`,`payroll_date`),
            KEY `user_id` (`user_id`),
            KEY `date` (`date`),
            KEY `payroll_date` (`payroll_date`)
    ) ENGINE=INNODB DEFAULT CHARSET=utf8;
    -- ]] STEP 1
    
    
        
    -- STEP 2: INSERT TIME RECORDS NET OF ATTENDANCE LOGS
    -- [[
    INSERT INTO `timeprocess`
       ( `record_id`, `user_id`, `date`, `payroll_date`, `shift_id`, `shift`, `timein`, `timeout`,
         `hrs_rendered` )
       SELECT 
          tr.`record_id`, tr.`user_id`, tr.`date`, tp.`payroll_date`, 
          IF( IFNULL(tr.`aux_shift_id`, 0) = 0, tr.`shift_id`, IFNULL(tr.`aux_shift_id`, 0) ) `shift_id`,
          IF( IFNULL(tr.`aux_shift_id`, 0) = 0, tr.`shift`, IFNULL(tr.`aux_shift`, 0) ) `shift`,
          IF( IFNULL(tr.`aux_time_in`, '0000-00-00 00:00:00') = '0000-00-00 00:00:00', 
              IFNULL(tr.`time_in`, '0000-00-00 00:00:00'), 
              IF( IFNULL(tr.`aux_time_in`, '0000-00-00 00:00:00') > IFNULL(tr.`time_in`, '0000-00-00 00:00:00') AND IFNULL(tr.`time_in`, '0000-00-00 00:00:00') <> '0000-00-00 00:00:00',
                 IFNULL(tr.`time_in`, '0000-00-00 00:00:00'),
                 IFNULL(tr.`aux_time_in`, '0000-00-00 00:00:00') 
              )
          ) `timein`,
          IF( IFNULL(tr.`aux_time_out`, '0000-00-00 00:00:00') = '0000-00-00 00:00:00', 
              IFNULL(tr.`time_out`, '0000-00-00 00:00:00'), 
              IF( IFNULL(tr.`time_out`, '0000-00-00 00:00:00') > IFNULL(tr.`aux_time_out`, '0000-00-00 00:00:00'),
                 IFNULL(tr.`time_out`, '0000-00-00 00:00:00'),
                 IFNULL(tr.`aux_time_out`, '0000-00-00 00:00:00') 
              )
          ) `timeout`,
          
          time_period_process_workhrs(tr.`user_id`, tr.`date`)
          
       FROM 
             `time_record` tr, `ww_time_period` tp, `users_profile` up
       WHERE 
              up.`company_id` = tp.`company_id` AND
              up.`user_id` = tr.`user_id` AND
              tp.period_id = periodid AND
              IF(userid = 0, 1, tr.`user_id` = userid) AND
              tr.`date` BETWEEN tp.date_from AND IF(tp.date_to > DATE(NOW()), DATE(NOW()), tp.date_to);
    -- ]] STEP 2
    
    
    
    -- STEP 3: SET RESTDAY, ABSENT, LWOP, LEAVE, etc... (AWOL is executed outside this script)
    -- [[
    -- > 3.1 RESTDAY
    UPDATE `timeprocess` t, `time_shift` ts 
           SET t.`day_type` = UPPER(ts.`shift`), 
               t.`hrs_rendered` = 0
           WHERE t.`shift_id` = ts.`shift_id` AND 
                 UPPER(ts.`shift`) = 'RESTDAY';
    
    
    -- > 3.2 HOLIDAY / LEGAL / SPECIAL 
    /*
    UPDATE `timeprocess` t
    INNER JOIN `ww_time_day_type` tdt ON tdt.deleted = 0
    INNER JOIN `ww_time_holiday` th ON th.deleted = 0
    LEFT JOIN `ww_time_holiday_location` thl ON thl.deleted = 0 AND thl.`holiday_id` = th.`holiday_id` AND thl.`user_id` = t.`user_id`
    
           SET t.`day_type` = IF( th.`legal` = 1, 
                                  UPPER(tdt.`day_type_code`),
                                  IF( IFNULL(th.`location_count`,0) = 0, 
                                      UPPER(tdt.`day_type_code`),
                                      IF( thl.`user_id` = t.`user_id`,
                                          UPPER(tdt.`day_type_code`),
                                          t.`day_type`
                                      )
                                  )
                              )
           WHERE t.`date` = th.`holiday_date` AND t.`day_type` = 'REGULAR';
    */
    UPDATE `timeprocess` t
    INNER JOIN `ww_time_holiday` th ON th.deleted = 0
    LEFT JOIN `ww_time_holiday_location` thl ON thl.deleted = 0 AND thl.`holiday_id` = th.`holiday_id` AND thl.`user_id` = t.`user_id`
    
           SET t.`day_type` = IF( th.`legal` = 1, 
                                  -- TRUE: IF(t.`day_type`='RESTDAY', 'RDHOL', 'LEGAL'),
                                  'LEGAL',
                                  -- FALSE:
                                  IF( IFNULL(th.`location_count`,0) = 0,
                                      -- TRUE: IF(t.`day_type`='RESTDAY', 'RDSPEC', 'SPECIAL'),
                                      'SPECIAL',
                                      -- FALSE:
                                      IF( thl.`user_id` = t.`user_id`,
                                          -- TRUE: IF(t.`day_type`='RESTDAY', 'RDSPEC', 'SPECIAL'),
                                          'SPECIAL',
                                          -- FALSE:
                                          t.`day_type`
                                      )
                                  )
                              )
           WHERE t.`date` = th.`holiday_date` AND t.`day_type` = 'REGULAR';
    
    
    -- > 3.3 ABSENT
    UPDATE `timeprocess` t
           SET t.`absent` = 1, t.`hrs_rendered` = 0
           WHERE `day_type` = 'REGULAR' AND 
                 (`timein` = '0000-00-00 00:00:00' OR `timeout` = '0000-00-00 00:00:00');
    
    
    -- > 3.4 LEAVE WITH PAY /AND/ LEAVE WITHOUT PAY
    SET @lwop = 0;
    SELECT `form_id` INTO @lwop FROM `ww_time_form` WHERE `form_code`='LWOP' LIMIT 1;
    
    UPDATE `timeprocess` t
           SET t.`lwop` = time_period_process_lwop(t.`user_id`,t.`date`,@lwop),
               t.`lwp` = time_period_process_lwp(t.`user_id`,t.`date`,@lwop),
               t.`hrs_break` = time_period_process_shift('BREAK-IN-MINUTES','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '60') / 60               
           WHERE t.`day_type` = 'REGULAR';
    -- ]] STEP 3    
    
    
    
    -- STEP 4: SET LATE AND UNDERTIME
    -- [[
    -- > 4.1 LATE (Converted to HOUR): limited to regular schedule only and its assigned schedule including all applications
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`late` = IF(t.`absent` = 1, 
                             -- TRUE: assigned no lates since it is already absent
                             0,
                             -- FALSE: get minutes considering grace period
                             IF( (TIMESTAMPDIFF(MINUTE, 
                                                (CONCAT(t.`date`,' ',ts.`time_start`) + INTERVAL 
                                                (time_period_process_shift('GRACE-PERIOD-IN-MINUTES','EMPLOYMENT-TYPE', 
                                                    t.`user_id`, t.`shift_id`,'0')) MINUTE),
                                  t.`timein` )*1) <= 0,
                                  -- TRUE: assigned no lates
                                  0,
                                  -- FALSE: get minutes lates disregarding grace period
                                  TIMESTAMPDIFF(MINUTE, CONCAT(t.`date`,' ',ts.`time_start`), t.`timein`) / 60
                             )
                          )
           WHERE t.`day_type` = 'REGULAR' AND t.`shift_id` = ts.`shift_id`;
           
    
    -- > 4.1.1 EXEMPTIONS ON SPECIAL PARTNERS
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`late` = IF( time_period_process_shift('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                      t.`user_id`, t.`shift_id`,'00:00:00') <> '00:00:00',
                            -- TRUE: special condition normally on managers (e.g. flexi until 10am)
                            IF( TIMESTAMPDIFF(MINUTE, CONCAT(t.`date`,' ', time_period_process_shift('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                      t.`user_id`, t.`shift_id`,'00:00:00')), t.`timein`) > 0,
                                -- TRUE:
                                TIMESTAMPDIFF(MINUTE, CONCAT(t.`date`,' ', time_period_process_shift('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                      t.`user_id`, t.`shift_id`,'00:00:00')), t.`timein`) / 60,
                                -- FALSE:
                                0
                            ),
                            -- FALSE: no changes on the value
                            t.`late`
                        )
           WHERE t.`late` > 0 AND t.`shift_id` = ts.`shift_id`;           
    
    
    -- > 4.1.2 EXEMPTIONS ON MANAGERS
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`late` = IF( time_period_process_shift('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                      t.`user_id`, t.`shift_id`,'00:00:00') <> '00:00:00',
                            -- TRUE: special condition normally on managers (e.g. flexi until 10am)
                            IF( TIMESTAMPDIFF(MINUTE, CONCAT(t.`date`,' ', time_period_process_shift('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                      t.`user_id`, t.`shift_id`,'00:00:00')), t.`timein`) > 0,
                                -- TRUE:
                                TIMESTAMPDIFF(MINUTE, CONCAT(t.`date`,' ', time_period_process_shift('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                      t.`user_id`, t.`shift_id`,'00:00:00')), t.`timein`) / 60,
                                -- FALSE:
                                0
                            ),
                            -- FALSE: no changes on the value
                            t.`late`
                        )
           WHERE t.`late` > 0 AND t.`shift_id` = ts.`shift_id`;           
    
    
    -- > 4.1.3 EXEMPTIONS ON EXCUSED TARDINESS
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd, `ww_time_forms_blanket` tfb
           SET t.`late` = 0
           WHERE tf.`forms_id` =  tfd.`forms_id` AND 
                 tf.`user_id` = 0 AND 
                 tf.`form_code` = 'ET' AND 
                 tf.form_status_id = 6 AND 
                 tfd.`date` =  t.`date` AND 
                 tfb.`forms_id` = tf.`forms_id` AND
                 tfb.`user_id` =  t.`user_id`;
    
    
    -- > 4.2 UNDERTIME (Converted to HOUR)
    -- >
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`undertime` = IF(t.`absent` = 1, 
                           -- TRUE: assigned no undertime since it is already absent
                           0,
                           -- FALSE: get minutes interval
                           IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date`,' ',ts.`time_end`) ) <= 0,
                               -- TRUE: assigned no lates
                               0,
                               -- FALSE: get minutes interval
                               TIMESTAMPDIFF(MINUTE, t.`timeout`, CONCAT(t.`date`,' ',ts.`time_end`)) / 60
                           )
                        )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id`;
    
     
    -- > 4.2.1 EXEMPTIONS ON SPECIAL PARTNERS
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`undertime` = IF( time_period_process_shift('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                             t.`user_id`, t.`shift_id`,'00:00:00') <> '00:00:00',
                               
                                   IF( t.`timein` <= CONCAT(t.`date`,' ', 
                                                            time_period_process_shift('FLEXIBLE-SHIFT','PARTNERS-ID', 
                                                            t.`user_id`, t.`shift_id`,'00:00:00')),
                                
                                       -- TRUE: special condition on special partner (e.g. flexi until 10am)
                                       IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL t.`hrs_break` HOUR
                                                                 ) ) > 0,
                                           TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL t.`hrs_break` HOUR
                                                                 ) ) / 60,
                                           -- FALSE: no changes on the value
                                           0
                                       ),
                                       0
                                   ),
                                   -- FALSE: no changes on the value
                                   t.`undertime`
                               )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id`;
    
    
    -- > 4.2.2 EXEMPTIONS ON MANAGERS
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`undertime` = IF( time_period_process_shift('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                             t.`user_id`, t.`shift_id`,'00:00:00') <> '00:00:00',
                               
                                   IF( t.`timein` <= CONCAT(t.`date`,' ', 
                                                            time_period_process_shift('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                            t.`user_id`, t.`shift_id`,'00:00:00')),
                                
                                       -- TRUE: special condition on special partner (e.g. flexi until 10am)
                                       IF( TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL time_period_process_shift('BREAK-IN-MINUTES','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '60') MINUTE
                                                                 ) ) > 0,
                                           TIMESTAMPDIFF(MINUTE, t.`timeout`, 
                                                                 ( t.`timein` +
                                                                   INTERVAL time_period_process_workhrs(t.`user_id`, t.`date`) HOUR +
                                                                   INTERVAL time_period_process_shift('BREAK-IN-MINUTES','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`, '60') MINUTE
                                                                 ) ) / 60,
                                           -- FALSE: no changes on the value
                                           0
                                       ),
                                       0
                                   ),
                                   -- FALSE: no changes on the value
                                   t.`undertime`
                               )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id`;
    
    
    -- > 4.2.3 EXEMPTIONS ON EXCUSED UNDERTIME
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd, `ww_time_forms_blanket` tfb
           SET t.`undertime` = 0
           WHERE tf.`forms_id` =  tfd.`forms_id` AND 
                 tf.`user_id` = 0 AND 
                 tf.`form_code` = 'UT' AND 
                 tf.form_status_id = 6 AND 
                 tfd.`date` =  t.`date` AND 
                 tfb.`forms_id` = tf.`forms_id` AND
                 tfb.`user_id` =  t.`user_id`;
    
    
    -- > 4.2.4 EXEMPTIONS ON EMERGENCY LEAVE
    UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd, `ww_time_forms_blanket` tfb
           SET t.`late` = 0, 
               t.`undertime` = 0, 
               t.`absent` = 0,
               t.`hrs_rendered` = IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0)
           WHERE tf.`forms_id` =  tfd.`forms_id` AND 
                 tf.`user_id` = 0 AND 
                 tf.`form_code` = 'EL' AND 
                 tf.form_status_id = 6 AND 
                 tfd.`date` =  t.`date` AND 
                 tfb.`forms_id` = tf.`forms_id` AND
                 tfb.`user_id` =  t.`user_id`;
    -- ]] STEP 4
    
    
    
    -- STEP 5: COMPLETING RENDERED HOURS... FINAL CHECK
    -- [[
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`late` = IF( time_period_process_shift('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                              t.`user_id`, t.`shift_id`,'00:00:00') <> '00:00:00'
                                    ,
                                    -- TRUE                                    
                                    IF( TIME(t.`timein`) > TIME(time_period_process_shift('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`,'00:00:00')),
                                        -- TRUE
                                        IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) / 2,
                                        -- FALSE
                                        t.`late`
                                    )
                                    ,
                                    -- FALSE
                                    t.`late`
                                )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id`;
    UPDATE `timeprocess` t
           SET t.`absent` = 0, t.`hrs_rendered` = IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) * t.`lwp`
           WHERE t.`lwp` > 0 AND t.absent = 1;
    
    UPDATE `timeprocess` t
           SET t.`hrs_actual` = t.`hrs_rendered` - t.`late` - t.`undertime` - (IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) * t.`lwop`)
           WHERE t.`day_type` = 'REGULAR';
    UPDATE `timeprocess` t
           SET t.`hrs_actual` = t.`hrs_rendered` - t.`late` - t.`undertime` - (IFNULL(time_period_process_workhrs(t.`user_id`, t.`date`),0) * t.`lwop`)
           WHERE t.`day_type` IN ('SPECIAL','LEGAL');
    -- > 5.x EXEMPTIONS ON MANAGERS
    /*
    UPDATE `timeprocess` t, `time_shift` ts
           SET t.`late` = IF( time_period_process_shift('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                              t.`user_id`, t.`shift_id`,'00:00:00') <> '00:00:00'
                                    ,
                                    -- TRUE                                    
                                    IF( TIME(t.`timein`) > TIME(time_period_process_shift('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`,'00:00:00')),
                                        -- TRUE
                                        0,
                                        -- FALSE
                                        t.`late`
                                    )
                                    ,
                                    -- FALSE
                                    t.`late`
                                ),
               t.`hrs_actual` = IF( time_period_process_shift('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', 
                                                              t.`user_id`, t.`shift_id`,'00:00:00') <> '00:00:00'
                                    ,
                                    -- TRUE                                    
                                    IF( TIME(t.`timein`) > TIME(time_period_process_shift('FLEXIBLE-SHIFT','EMPLOYMENT-TYPE', t.`user_id`, t.`shift_id`,'00:00:00')),
                                        -- TRUE
                                        IF( t.`hrs_actual` >= 4, t.`hrs_actual` - 4, t.`hrs_actual`),
                                        -- FALSE
                                        t.`hrs_actual`
                                    )
                                    ,
                                    -- FALSE
                                    t.`hrs_actual`
                                )
           WHERE t.`day_type` = 'REGULAR' AND 
                 t.`absent` = 0 AND
                 t.`lwp` = 0 AND 
                 t.`lwop` = 0 AND 
                 t.`shift_id` = ts.`shift_id`;
    */
    -- ]] STEP 5
    
    
    
    -- STEP 6: RESIGNED TAGGING / COMPUTE OVERTIME
    -- [[
    -- > 6.1 RESIGNED
    UPDATE `timeprocess` t
           SET t.`resigned` = time_period_process_resigned(t.`user_id`, t.`date`);
    
    -- > 6.2 OVERTIME
    
    -- UPDATE `timeprocess` t, `time_forms` tf, `time_forms_date` tfd, `ww_time_form_status` tfs, `ww_time_form` tfc
                 
    CALL sp_time_period_process_summary_ot(periodid, userid);
    
    -- > 6.2.1 OVERTIME BREAK
    UPDATE `timeprocess` t
    JOIN `ww_time_day_type` tdt ON tdt.`deleted` = 0 AND t.`day_type` = tdt.`day_type_code`
    JOIN `ww_time_day_type_break` tdtb ON tdtb.`day_type_id` = tdt.`day_type_id`
    JOIN `ww_time_day_break` tdb ON tdb.`deleted` = 0 AND tdb.`break_id` = tdtb.`break_id`
    JOIN `ww_time_day_break_range` tdbr ON tdbr.`break_id` = tdb.`break_id`
           SET t.`ot_break` = IFNULL(tdbr.`deduction`, 0)
           WHERE t.`ot` > 0 AND (t.`ot` BETWEEN tdbr.`hour_from` AND tdbr.`hour_to`);
    
    -- > 6.2.2 MEAL ALLOWANCE
    UPDATE `timeprocess` t
    JOIN `ww_time_day_type` tdt ON tdt.`deleted` = 0 AND t.`day_type` = tdt.`day_type_code`
    JOIN `ww_time_day_type_allowance` tdta ON tdta.`day_type_id` = tdt.`day_type_id`
    JOIN `ww_time_day_meal` tdm ON tdm.`deleted` = 0 AND tdm.`meal_id` = tdta.`meal_id`
    JOIN `ww_time_day_meal_range` tdmr ON tdmr.`meal_id` = tdm.`meal_id`
    JOIN `partners` p ON p.`user_id` = t.`user_id`
    JOIN `ww_time_day_allowance` tda ON tda.`employment_type_id` = p.`employment_type_id`
           SET t.`meal` = IFNULL(tdmr.`multiplier`, 0) * IFNULL(tda.`meal`, 0)
           WHERE t.`ot` > 0 AND ((t.`ot` - t.`ot_break`) BETWEEN tdmr.`hour_from` AND tdmr.`hour_to`);
    
    -- > 6.2.3 TRANSPO ALLOWANCE
    UPDATE `timeprocess` t
    JOIN `ww_time_day_type` tdt ON tdt.`deleted` = 0 AND t.`day_type` = tdt.`day_type_code`
    JOIN `ww_time_day_type_allowance` tdta ON tdta.`day_type_id` = tdt.`day_type_id`
    JOIN `ww_time_day_transpo` tdm ON tdm.`deleted` = 0 AND tdm.`transpo_id` = tdta.`transpo_id`
    JOIN `ww_time_day_transpo_range` tdmr ON tdmr.`transpo_id` = tdm.`transpo_id`
    JOIN `partners` p ON p.`user_id` = t.`user_id`
    JOIN `ww_time_day_allowance` tda ON tda.`employment_type_id` = p.`employment_type_id`
           SET t.`transpo` = IFNULL(tdmr.`multiplier`, 0) * IFNULL(tda.`transpo`, 0)
           WHERE t.`ot` > 0 AND ((t.`ot` - t.`ot_break`) BETWEEN tdmr.`hour_from` AND tdmr.`hour_to`);
    -- ]] STEP 6
    
    /*
    SELECT `record_id`,
           `user_id`,
           `id_number`,
           `date`,
           `payroll_date`,
           `shift_id`,
           `shift`,
           `timein`,
           `timeout`,
           `day_type`,
           `hrs_rendered`,
           `hrs_actual`,
           `hrs_break`,
           `absent`,
           `lwp`,
           `lwop`,
           `late`,
           `undertime`,
           `ot`,
           `ot_break`,
           `meal`,
           `transpo`,
           `resigned`,
           `awol`
    FROM `timeprocess` 
    ORDER BY `user_id`, `date`;
    */
    
    -- STEP 7: INSERT SUMMARY
    -- [[
    INSERT INTO `ww_time_record_summary` (
           `record_id`,
           `user_id`,
           `id_number`,
           `date`,
           `payroll_date`,
           `day_type`,
           `hrs_rendered`,
           `hrs_actual`,
           `hrs_break`,
           `absent`,
           `lwp`,
           `lwop`,
           `late`,
           `undertime`,
           `ot`,
           `ot_break`,
           `meal`,
           `transpo`,
           `resigned`,
           `awol` )
    SELECT `record_id`,
           `user_id`,
           `id_number`,
           `date`,
           `payroll_date`,
           `day_type`,
           `hrs_rendered`,
           `hrs_actual`,
           `hrs_break`,
           `absent`,
           `lwp`,
           `lwop`,
           `late`,
           `undertime`,
           `ot`,
           `ot_break`,
           `meal`,
           `transpo`,
           `resigned`,
           `awol`
    FROM `timeprocess`
    ON DUPLICATE KEY UPDATE 
           `day_type`     = VALUES(`day_type`),
           `hrs_rendered` = VALUES(`hrs_rendered`),
           `hrs_actual`   = VALUES(`hrs_actual`),
           `hrs_break`    = VALUES(`hrs_break`),
           `absent`       = VALUES(`absent`),
           `lwp`          = VALUES(`lwp`),
           `lwop`         = VALUES(`lwop`),
           `late`         = VALUES(`late`),
           `undertime`    = VALUES(`undertime`),
           `ot`           = VALUES(`ot`),
           `ot_break`     = VALUES(`ot_break`),
           `meal`         = VALUES(`meal`),
           `transpo`      = VALUES(`transpo`),
           `resigned`     = VALUES(`resigned`),
           `awol`         = VALUES(`awol`),
           `modified_on`  = NOW();
    -- ]]
    
    
    
    -- STEP 8: PROCESS FOR PAYROLL INPUT
    -- [[
    CALL sp_time_period_validate_holiday( periodid, userid );
    CALL sp_time_period_summary( periodid, userid );
    CALL sp_time_period_late_overtime( periodid, userid );
    -- ]]
    
    
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_process_summary_ot` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_process_summary_ot` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_process_summary_ot`(  IN periodid INT(11), IN userid INT(11) )
BEGIN	
	DECLARE otdone TINYINT(1) DEFAULT 0;
	DECLARE nUserID INT(11);
	DECLARE nRecID INT(11);
	DECLARE nShiftID INT(11);
	DECLARE dtDate DATE;			
	DECLARE nCompID INT(11);
	DECLARE sDayType VARCHAR(32);
	DECLARE dtTimeFrom DATETIME;
	DECLARE dtTimeTo DATETIME;
	DECLARE nHours DECIMAL(5,2);
	
	DECLARE overtime CURSOR FOR
		SELECT a.`user_id`, a.`forms_id`, time_get_shift(a.`user_id`, b.`date`), b.`date`, 
			getcompany(a.user_id), get_time_daytype( a.user_id, b.date),
			b.`time_from`, b.`time_to`
		FROM ww_time_forms a, ww_time_forms_date b, ww_time_period c, ww_users d 
		WHERE a.forms_id = b.forms_id AND a.`deleted` = 0 AND b.`deleted` = 0
		AND a.`form_status_id` = 6 AND  a.`date_approved` IS NOT NULL 
		AND IF(userid=0, 1, a.`user_id` = userid) AND a.`form_code` = 'OT'
		-- AND b.date BETWEEN get_time_period_from(periodid,getcompany(userid)) AND get_time_period_to(periodid,getcompany(userid));
		AND c.deleted = 0 AND c.period_id = periodid AND (b.date BETWEEN c.date_from AND c.date_to)
		AND c.company_id = d.company_id AND a.user_id = d.user_id
		union all
		-- Query for getting OT filed in behalf
		SELECT tfb.`user_id`, tf.`forms_id`, time_get_shift(tfb.`user_id`, tfd.`date`), tfd.`date`,
		       getcompany(tfb.`user_id`), get_time_daytype(tfb.`user_id`, tfd.`date`),
		       tfd.`time_from`, tfd.`time_to`
		FROM ww_time_forms tf, ww_time_forms_date tfd, ww_time_period tp, ww_users u, ww_time_forms_blanket tfb
		WHERE 	tf.forms_id = tfd.forms_id AND 
			tf.form_code = 'OT' AND
			tf.display_name = 'Blanket' AND
			tfd.forms_id = tfb.forms_id AND
			u.`user_id` = tfb.`user_id` AND
			tp.`deleted` = 0 AND
			tf.`deleted` = 0 AND
			tp.`period_id` = periodid AND
			u.`company_id` = tp.`company_id` AND
		       (tfd.`date` BETWEEN tp.`date_from` AND tp.`date_to`) AND
		       IF(userid=0,1,tfb.`user_id`=userid);
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET otdone = 1;
	
	OPEN overtime;
	
	myLoop: LOOP
		FETCH overtime INTO nUserID, nRecID, nShiftID, dtDate, nCompID, sDayType, dtTimeFrom, dtTimeTo;
		
		IF otdone = 1 THEN
		    CLOSE overtime;
		    LEAVE myLoop;
		END IF;
		
		SET @nHours = 0;
		SET @ActualIN = "";
		SET @ActualOUT = "";
		SET @otStart = "";
		SET @otEnd = "";
		
		-- get sched out
		IF time_get_sched_in( nShiftID ) > time_get_sched_out( nShiftID ) THEN
		    SET @SchedOut = CONCAT(dtDate + INTERVAL 1 DAY, ' ', time_get_sched_out( nShiftID ) );
		ELSE
		    SET @SchedOut = CONCAT(dtDate, ' ', time_get_sched_out( nShiftID ) );
		END IF;
		SET @SchedIn = CONCAT(dtDate, ' ', time_get_sched_in( nShiftID ) );
		
		-- get current ND set up
		-- SET @curStartND = CONCAT(dtDate, ' ', time_get_nd_start( nShiftID, nCompID ) );
		-- SET @curEndND = CONCAT( ADDDATE( dtDate, 1 ), ' ', time_get_nd_end( nShiftID, nCompID ) );
		-- get previous ND set up
		-- SET @prevStartND = CONCAT( ADDDATE( dtDate, -1 ), ' ', time_get_nd_start( nShiftID, nCompID ) );
		-- SET @prevEndND = CONCAT( dtDate, ' ', time_get_nd_end( nShiftID, nCompID ) );
		-- get actual time in / out
		
		SET @ActualIN = time_get_time_in( nUserID, dtDate);
		SET @ActualOUT = time_get_time_out( nUserID, dtDate);
		
		if @ActualIN <> '0000-00-00 00:0:00' AND @ActualOUT <> '0000-00-00 00:0:00' then
			-- update ot of timeprocess
			IF sDayType = 'REGULAR' THEN
				
				-- before shift ot
				/*
				IF dtTimeFrom < @SchedIn THEN
					IF dtTimeTo >= @SchedIn THEN
						SET @otEnd =  @SchedIn;
					END IF;
					IF dtTimeTo < @SchedIn THEN
						SET @otEnd =  dtTimeTo;
					END IF;
					
					SET @otStart = dtTimeFrom;
					IF dtTimeFrom < @ActualIN THEN
						SET @otStart = @ActualIN;
					END IF;
					
					SET @nHours = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
				END IF; */
					
				-- after shift ot
				IF dtTimeFrom > @SchedIn THEN
					IF dtTimeFrom <= @SchedOut THEN
						SET @otStart = @SchedOut;
					END IF;
					IF dtTimeFrom > @SchedOut THEN
						SET @otStart = dtTimeFrom;
					END IF;
					
					SET @otEnd = dtTimeTo;
					IF dtTimeTo > @ActualOUT THEN	
						SET @otEnd = @ActualOUT;
					END IF;
					
					SET @nHours = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
				ELSE
					SET @otStart = @SchedOut;
					IF @ActualOUT > dtTimeTo THEN
						SET @otEnd = dtTimeTo;
					ELSE
						SET @otEnd = @ActualOUT;
					END IF;
					
					SET @nHours = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
				END IF;
				-- end of regular
			
			ELSE 
				IF @ActualIN <= dtTimeFrom THEN
					SET @otStart = dtTimeFrom;
				ELSEIF @ActualIN > dtTimeFrom THEN
					SET @otStart = @ActualIN;
				END IF;
				
				IF @ActualOUT >= dtTimeTo THEN
					SET @otEnd = dtTimeTo;
				ELSEIF @ActualOUT < dtTimeTo THEN
					SET @otEnd = @ActualOUT;
				END IF;
				
				SET @nHours = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
				SET @nHours = ROUND( ( TIME_TO_SEC( TIMEDIFF( dtTimeTo, dtTimeFrom ) ) / 3600 ), 2 );
			END IF;
		end if;
		IF IFNULL(@nHours,0) > 0 THEN
			UPDATE timeprocess SET ot = ot + IFNULL(@nHours,0) WHERE user_id = nUserID AND DATE = dtDate;
			
			IF sDayType = 'DOUBLE' THEN
				UPDATE timeprocess SET day_type = 'DOUBLE' WHERE user_id = nUserID AND DATE = dtDate;
			END IF;
		END IF;
	END LOOP;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_process_summary_ot_2` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_process_summary_ot_2` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_process_summary_ot_2`(  IN periodid INT(11), IN userid INT(11) )
BEGIN	
	DECLARE period_otdone TINYINT(1) DEFAULT 0;
	DECLARE nUserID INT(11);
	DECLARE nRecID INT(11);
	DECLARE nShiftID INT(11);
	DECLARE dtDate DATE;			
	DECLARE nCompID INT(11);
	DECLARE sDayType VARCHAR(32);
	DECLARE dtTimeFrom DATETIME;
	DECLARE dtTimeTo DATETIME;
	DECLARE nHours DECIMAL(5,2);
	
	DECLARE period_overtime CURSOR FOR
		SELECT a.`user_id`, a.`forms_id`, time_get_shift(a.`user_id`, b.`date`), b.`date`, 
			getcompany(a.user_id), get_time_daytype( a.user_id, b.date),
			b.`time_from`, b.`time_to`
		FROM ww_time_forms a, ww_time_forms_date b, ww_time_period c, ww_users d 
		WHERE a.forms_id = b.forms_id AND a.`deleted` = 0 AND b.`deleted` = 0
		AND a.`form_status_id` = 6 AND  a.`date_approved` IS NOT NULL 
		AND IF(userid=0, 1, a.`user_id` = userid) AND a.`form_code` = 'OT'
		-- AND b.date BETWEEN get_time_period_from(periodid,getcompany(userid)) AND get_time_period_to(periodid,getcompany(userid));
		AND c.deleted = 0 AND c.period_id = periodid AND (b.date BETWEEN c.date_from AND c.date_to)
		AND c.company_id = d.company_id AND a.user_id = d.user_id
		/*
		union all
		-- Query for getting OT filed in behalf
		SELECT tfb.`user_id`, tf.`forms_id`, time_get_shift(tfb.`user_id`, tfd.`date`), tfd.`date`,
		       getcompany(tfb.`user_id`), get_time_daytype(tfb.`user_id`, tfd.`date`),
		       tfd.`time_from`, tfd.`time_to`
		FROM ww_time_forms tf, ww_time_forms_date tfd, ww_time_period tp, ww_users u, ww_time_forms_blanket tfb
		WHERE 	tf.forms_id = tfd.forms_id AND 
			tf.form_code = 'OT' AND
			tf.display_name = 'Blanket' AND
			tfd.forms_id = tfb.forms_id AND
			u.`user_id` = tfb.`user_id` AND
			tp.`deleted` = 0 AND
			tf.`deleted` = 0 AND
			tp.`period_id` = periodid AND
			u.`company_id` = tp.`company_id` AND
		       (tfd.`date` BETWEEN tp.`date_from` AND tp.`date_to`) AND
		       IF(userid=0,1,tfb.`user_id`=userid)
		*/
		ORDER BY a.`user_id`, b.`date`;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET period_otdone = 1;
	
	OPEN period_overtime;
	
	myLoop: LOOP
		FETCH period_overtime INTO nUserID, nRecID, nShiftID, dtDate, nCompID, sDayType, dtTimeFrom, dtTimeTo;
		INSERT INTO `logtable` (`log`) -- SELECT CONCAT('user_id=',nUserID,', date=',dtDate);
		SELECT CONCAT(period_otdone,', ', nUserID,', ', nRecID,', ', nShiftID,', ', dtDate,', ', nCompID,', ', sDayType,', ', dtTimeFrom,', ', dtTimeTo);
		
		IF period_otdone = 1 THEN
		    CLOSE period_overtime;
		    LEAVE myLoop;
		END IF;
		INSERT INTO `logtable` (`log`) SELECT 'start';
		SET @nHours = 0;
		SET @ActualIN = "";
		SET @ActualOUT = "";
		SET @otStart = "";
		SET @otEnd = "";
		
		-- get sched out
		IF time_get_sched_in( nShiftID ) > time_get_sched_out( nShiftID ) THEN
		    SET @SchedOut = CONCAT(dtDate + INTERVAL 1 DAY, ' ', time_get_sched_out( nShiftID ) );
		ELSE
		    SET @SchedOut = CONCAT(dtDate, ' ', time_get_sched_out( nShiftID ) );
		END IF;
		SET @SchedIn = CONCAT(dtDate, ' ', time_get_sched_in( nShiftID ) );
		
		-- get current ND set up
		-- SET @curStartND = CONCAT(dtDate, ' ', time_get_nd_start( nShiftID, nCompID ) );
		-- SET @curEndND = CONCAT( ADDDATE( dtDate, 1 ), ' ', time_get_nd_end( nShiftID, nCompID ) );
		-- get previous ND set up
		-- SET @prevStartND = CONCAT( ADDDATE( dtDate, -1 ), ' ', time_get_nd_start( nShiftID, nCompID ) );
		-- SET @prevEndND = CONCAT( dtDate, ' ', time_get_nd_end( nShiftID, nCompID ) );
		-- get actual time in / out
		
		SET @ActualIN = time_get_time_in( nUserID, dtDate);
		SET @ActualOUT = time_get_time_out( nUserID, dtDate);
		
		-- update ot of timeprocess
		IF sDayType = 'REGULAR' THEN
			
			-- before shift ot
			/*
			IF dtTimeFrom < @SchedIn THEN
				IF dtTimeTo >= @SchedIn THEN
					SET @otEnd =  @SchedIn;
				END IF;
				IF dtTimeTo < @SchedIn THEN
					SET @otEnd =  dtTimeTo;
				END IF;
				
				SET @otStart = dtTimeFrom;
				IF dtTimeFrom < @ActualIN THEN
					SET @otStart = @ActualIN;
				END IF;
				
				SET @nHours = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
			END IF; */
				
			-- after shift ot
			IF dtTimeFrom > @SchedIn THEN
				IF dtTimeFrom <= @SchedOut THEN
					SET @otStart = @SchedOut;
				END IF;
				IF dtTimeFrom > @SchedOut THEN
					SET @otStart = dtTimeFrom;
				END IF;
				
				SET @otEnd = dtTimeTo;
				IF dtTimeTo > @ActualOUT THEN	
					SET @otEnd = @ActualOUT;
				END IF;
				
				SET @nHours = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
			ELSE
				SET @otStart = @SchedOut;
				IF @ActualOUT > dtTimeTo THEN
					SET @otEnd = dtTimeTo;
				ELSE
					SET @otEnd = @ActualOUT;
				END IF;
				
				SET @nHours = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
			END IF;
			-- end of regular
		
		ELSE 
			IF @ActualIN <= dtTimeFrom THEN
				SET @otStart = dtTimeFrom;
			ELSEIF @ActualIN > dtTimeFrom THEN
				SET @otStart = @ActualIN;
			END IF;
			
			IF @ActualOUT >= dtTimeTo THEN
				SET @otEnd = dtTimeTo;
			ELSEIF @ActualOUT < dtTimeTo THEN
				SET @otEnd = @ActualOUT;
			END IF;
			
			SET @nHours = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
		END IF;
		
		INSERT INTO `logtable` (`log`) SELECT CONCAT('user_id=',nUserID,', date=',dtDate,', ot_hrs=',IFNULL(@nHours,0));
		UPDATE ww_time_record_summary SET ot = ot + IFNULL(@nHours,0) WHERE user_id = nUserID AND `date` = dtDate;
	END LOOP;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_process_summary_ot_3` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_process_summary_ot_3` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_process_summary_ot_3`( 
	IN periodid INT(11),
	IN puserid INT(11)	
	)
BEGIN
	SET @nCompID = 0;
	SET @dtPay = '0000-00-00';	
	SELECT company_id, payroll_date INTO @nCompID, @dtPay FROM ww_time_period
	WHERE period_id = periodid;
	
	SET @nPeriod = periodid; -- time_get_previous_period(periodid);
	SET @dtFrom = get_time_period_from(@nPeriod, @nCompID);
	SET @dtTo = get_time_period_to(@nPeriod, @nCompID);
	
	BEGIN
		DECLARE done TINYINT(1) DEFAULT 0;
		DECLARE emp_id INT(11);
		DECLARE frm_id INT(11);
		DECLARE dtApprv DATETIME;
		DECLARE dtTimeFrm DATETIME;
		DECLARE dtTimeTo DATETIME;
		DECLARE dtDate DATE;
		DECLARE paydate DATE;
		DECLARE comp_id INT(11);
		DECLARE period_id INT(11);
		DECLARE overtime CURSOR FOR
			SELECT a.`user_id`, a.`forms_id`, DATE(a.`date_approved`), b.`time_from`, b.`time_to`, b.`date`, @nCompID, @dtPay, @nPeriod
			FROM ww_time_forms a
			LEFT JOIN ww_time_forms_date b ON a.forms_id = b.forms_id
			LEFT JOIN ww_users_profile up ON up.`user_id` = a.`user_id`
			WHERE a.`deleted` = 0 AND b.`deleted` = 0
				AND a.`form_status_id` = 6 AND a.`date_approved` IS NOT NULL AND a.`form_code` = 'OT'
				AND IF(puserid=0,1,a.`user_id`=puserid)
				AND up.company_id = @nCompID
				AND b.`date` BETWEEN @dtFrom AND @dtTo
				AND date(a.`date_approved`) > time_get_cut_off( b.`date`, @nCompID )
			UNION
			SELECT tfb.`user_id`, tf.`forms_id`, DATE(tf.`created_on`), tfd.`time_from`, tfd.`time_to`, tfd.`date`, @nCompID, @dtPay, @nPeriod
			FROM ww_time_forms tf, ww_time_forms_date tfd, ww_time_forms_blanket tfb, ww_users_profile up
			WHERE tf.`forms_id` = tfd.`forms_id` AND tf.`deleted` = 0 AND tfd.`deleted` = 0
				AND tf.`forms_id` = tfb.`forms_id` AND tfb.deleted = 0
				and tfb.user_id = up.user_id
				AND if(puserid=0,1,tfb.user_id=puserid) AND tfd.date BETWEEN @dtFrom AND @dtTo 
				AND DATE(tf.created_on) > time_get_cut_off( tfd.date, @nCompID)
				AND tf.`form_code` = 'OT'
				and up.company_id = @nCompID;
		DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
		
		OPEN overtime;
		
		myLoop: LOOP
			FETCH overtime INTO emp_id, frm_id, dtApprv, dtTimeFrm, dtTimeTo, dtDate, comp_id,  paydate, period_id ;
			
			IF done THEN
			    CLOSE overtime;
			    LEAVE myLoop;
			END IF;
			-- get shift
			DELETE FROM ww_time_record_process WHERE record_id = frm_id AND user_id = emp_id ;
			
			SET @ActualIN = "";
			SET @ActualOUT = "";
			SET @otStart = "";
			SET @otEnd = "";
			SET @nHourlyRate = 0;
			SET @nSalary = 0;
			SET @nTotalDays = 0;
			SELECT AES_DECRYPT(salary, encryption_key()), total_year_days
			INTO @nSalary, @nTotalDays
			FROM ww_payroll_partners WHERE user_id = emp_id;
			
			SET @nHourlyRate = ( @nSalary / ( @nTotalDays / 12 ) ) / 8;
			
			SET @sDayType = get_time_daytype(emp_id, dtDate);
			SET @ShiftID = 0;
			SET @ShiftID = time_get_shift(emp_id, dtDate);
			-- get sched out
			SET @SchedOut = CONCAT(dtDate, ' ', time_get_sched_out( @ShiftID ) );
			SET @SchedIn = CONCAT(dtDate, ' ', time_get_sched_in( @ShiftID ) );
			-- get current ND set up
			SET @curStartND = CONCAT(dtDate, ' ', time_get_nd_start( @ShiftID, comp_id ) );
			SET @curEndND = CONCAT( ADDDATE( dtDate, 1 ), ' ', time_get_nd_end( @ShiftID, comp_id ) );
			-- get previous ND set up
			SET @prevStartND = CONCAT( ADDDATE( dtDate, -1 ), ' ', time_get_nd_start( @ShiftID, comp_id ) );
			SET @prevEndND = CONCAT( dtDate, ' ', time_get_nd_end( @ShiftID, comp_id ) );
			-- get actual time in / out
			SET @ActualIN = time_get_time_in( emp_id, dtDate);
			SET @ActualOUT = time_get_time_out( emp_id, dtDate);
			
			SET @OrigPaydate = '0000-00-00';
			SET @dtPaydate = '0000-00-00';
			SET @latefile = 0;
			SET @cutoff = time_get_cut_off( dtDate, comp_id );
			IF dtApprv > @cutoff THEN
				-- set original payroll date
				SET @latefile = 1;
				SET @OrigPaydate = time_get_payroll_date( dtDate, comp_id );
				SET @dtPaydate = time_get_payroll_date( dtApprv, comp_id );
			ELSE 
				SET @latefile = 0;
				SET @dtPaydate = paydate;
				SET @OrigPaydate = paydate;
			END IF;
			
			-- start of regular 
			IF @sDayType = 'REGULAR' THEN
				-- pre shift ot
				IF dtTimeFrm < @SchedIn THEN
					
					IF dtTimeTo >= @SchedIn THEN
						SET @otEnd =  @SchedIn;
					END IF;
					IF dtTimeTo < @SchedIn THEN
						SET @otEnd =  dtTimeTo;
					END IF;
					
					SET @otStart = dtTimeFrm;
					IF dtTimeFrm < @ActualIN THEN
						SET @otStart = @ActualIN;
					END IF;
					
					SET @otUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
					IF @otUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = 'REGOT';
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
					END IF;
					-- check if has ND
					IF @ActualIN < @prevEndND THEN
						IF dtTimeFrm <= @prevStartND THEN
							SET @ndStart = @prevStartND;
						END IF;
						IF dtTimeFrm > @prevStartND THEN
							SET @ndStart = dtTimeFrm;
						END IF;
						SET @ndStart = @ActualIN;
						IF @ActualIN < dtTimeFrm THEN
							SET @ndStart = dtTimeFrm;
						END IF;
						SET @ndEnd = @prevEndND;
						IF dtTimeTo < @prevEndND THEN
							SET @ndEnd = dtTimeTo;
						END IF;
						
						SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );					
						IF @ndUnit > 0 THEN
							SET @tran_code = '';
							SET @tran_code = 'REGOT_ND';
							SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
							CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
						END IF;
					END IF;
				-- after shift ot
				ELSEIF dtTimeFrm > @SchedIn THEN
					IF dtTimeFrm <= @SchedOut THEN
						SET @otStart = @SchedOut;
					END IF;
					IF dtTimeFrm > @SchedOut THEN
						SET @otStart = dtTimeFrm;
					END IF;
					
					SET @otEnd = dtTimeTo;
					IF dtTimeTo > @ActualOUT THEN	
						SET @otEnd = @ActualOUT;
					END IF;
					
					SET @otUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
					IF @otUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = 'REGOT';
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
					END IF;
					-- check if has ND
					IF @ActualOUT > @curStartND THEN
						IF dtTimeTo >= @curEndND THEN
							SET @ndEnd = @curEndND;
						END IF;
						IF dtTimeTo < @curEndND THEN
							SET @ndEnd = dtTimeTo;
						END IF;
						IF dtTimeTo > @ActualOUT THEN
							SET @ndEnd = @ActualOUT;
						END IF;
						
						IF dtTimeFrm <= @curStartND THEN
							SET @ndStart = @curStartND;
						END IF;
						IF dtTimeFrm > @curStartND THEN
							SET @ndStart = dtTimeFrm;
						END IF;
						
						SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
						IF @ndUnit > 0 THEN
							SET @tran_code = '';
							SET @tran_code = 'REGOT_ND';
							SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
							CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
						END IF;
					END IF;
				END IF;
				-- end of regular
			
			ELSE 
				IF @sDayType = 'RESTDAY' THEN
					SET @trans = 'RDOT';
				ELSEIF @sDayType = 'LEGAL' THEN
					IF @ShiftID = 1 THEN
						SET @trans = 'LEGRDOT';
					ELSE		
						SET @trans = 'LEGOT';
					END IF;
				ELSEIF @sDayType = 'SPECIAL' THEN
					IF @ShiftID = 1 THEN
						SET @trans = 'SPERDOT';
					ELSE
						SET @trans = 'SPEOT';
					END IF;
				ELSEIF @sDayType = 'DOUBLE' THEN
					IF @ShiftID = 1 THEN
						SET @trans = 'DOBRDOT';
					ELSE
						SET @trans = 'DOBOT';
					END IF;
				END IF;
				
				IF @ActualIN <= dtTimeFrm THEN
					SET @otStart = dtTimeFrm;
				ELSEIF @ActualIN > dtTimeFrm THEN
					SET @otStart = @ActualIN;
				END IF;
				
				IF @ActualOUT >= dtTimeTo THEN
					SET @otEnd = dtTimeTo;
				ELSEIF @ActualOUT < dtTimeTo THEN
					SET @otEnd = @ActualOUT;
				END IF;
				
				SET @Unit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
				
				IF @Unit > 8 THEN
					SET @otUnit = 8.00;
					IF @otUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = @trans;
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
					END IF;
					SET @otUnitExcess = @Unit - 8.00;
					IF @otUnitExcess > 0 THEN
						SET @tran_code = '';
						SET @tran_code = CONCAT(@trans,'_EXCESS');
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnitExcess, @ot_rate, period_id);
					END IF;
				ELSE 
					SET @otUnit = @Unit;
					IF @otUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = @trans;
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
					END IF;
				END IF;
				-- check if first 8 hours has ND
				-- ND on the Ot Start
				IF @otStart < @prevEndND THEN
					SET @ndStart = @otStart;
					SET @ndEnd = @prevEndND;
					SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
					
					IF @ndUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = CONCAT(@trans,'_ND');
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
					END IF;
				END IF;
				-- ND on the First 8 Hrs
				SET @firstEight = ADDTIME( @otStart, '08:00:00' );
				
				IF @curStartND < @firstEight THEN
					SET @ndStart = @curStartND;
					SET @ndEnd = @firstEight;
					IF @firstEight > @otEnd THEN
						SET @ndEnd = @otEnd;
					END IF;
					SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
					IF @ndUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = CONCAT(@trans,'_ND');
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
					END IF;
				END IF;
				-- ND on the Remaining Hrs
				IF @firstEight < @otEnd THEN
					IF @firstEight > @curStartND THEN
						SET @ndStart = @firstEight;
					ELSE 
						SET @ndStart = @curStartND;
					END IF;
					
					SET @ndEnd = @otEnd;
					IF @otEnd > @curEndND THEN
						SET @ndEnd = @curEndND;
					END IF;
					IF @ndEnd > @ndStart THEN
						SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
					END IF;		
					IF @ndUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = CONCAT(@trans,'_ND_EXCESS');
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, @nHourlyRate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
					END IF;	
				END IF;			
			END IF;		
		END LOOP;
		END;
	END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_reminder` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_reminder` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_reminder`()
BEGIN
    
    DECLARE done TINYINT(1) DEFAULT 0;
    DECLARE done_e TINYINT(1) DEFAULT 0;
    DECLARE company VARCHAR(64);
    DECLARE email VARCHAR(128);
    
    DECLARE users_email CURSOR FOR
    SELECT u.`email`
    FROM `users` u
    JOIN `ww_roles` r ON r.`role_id`=u.`role_id`
    WHERE u.active=1 AND u.deleted=0 AND r.`role`='HR Timekeeper';
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    SET @rec = 0;
    SET @emails = '';
    SET @system_fromaddress = (SELECT `value` FROM `ww_config` WHERE `key`='from_address' LIMIT  1);
    
    SELECT COUNT(uc.company) INTO @rec
    FROM `ww_users_company` uc
    INNER JOIN `ww_time_period` tp ON 
       tp.`company_id`=uc.`company_id` AND tp.`deleted`=0 AND
       CURDATE() BETWEEN tp.`date_from` AND tp.`date_to`
    WHERE uc.`deleted`=0 AND tp.`payroll_date` IS NULL;
          
    
    IF @rec > 0 THEN   
       OPEN users_email;
       REPEAT
          FETCH users_email INTO email;
          IF NOT done THEN
             SET @emails = CONCAT(@emails,email,',');
          END IF;
       UNTIL done END REPEAT;
       CLOSE users_email;
          
       IF RIGHT(@emails,1)=',' THEN
          SET @emails = MID(@emails,1,LENGTH(@emails)-1);
       END IF;
	   
	   
       IF @emails <> '' THEN
          SET @emailto = '';
          SET @emailsubject = '';
          SET @emailbody = '';
          SET @bcc = @system_fromaddress;
          SET @url = '';
       
          SELECT `subject`,`body` INTO @emailsubject, @emailbody
          FROM `ww_system_template`
          WHERE `code` = 'TIME-PERIOD-REMINDER' AND deleted=0 LIMIT 1;
          IF @emailsubject <> '' THEN
             -- {{link}}
             SET @url = (SELECT `value` FROM `ww_config` WHERE `key`='URL' LIMIT  1);
	         IF RIGHT(TRIM(@url),1) <> '/' THEN
	            SET @url = CONCAT(TRIM(@url),'/');
	         END IF;
	         
             SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='dtr_processing' LIMIT 1);
             SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
	   
             SET @emailbody = REPLACE(@emailbody, '{{listname}}', @rec);
             SET @emailbody = REPLACE(@emailbody, '{{link}}', CONCAT(@url,@route));
             SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
             
             INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`,`bcc`)
             SELECT @emails,@emailsubject,@emailbody,@bcc;
          END IF; -- @emailsubject
          
       END IF; -- @emails
       
    END IF; -- @rec
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_set_project` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_set_project` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_set_project`( in intUser int(11), IN dtStart DATE, IN dtEnd DATE, IN dtPay DATE )
BEGIN	
	declare intEmp int(11);
	declare dtProjectFrom date;
	declare dtProjectTO date;
	declare intProject int(11);
	declare intDefaultProject int(11);
	declare proj_done TINYINT(1) DEFAULT 0;
	DECLARE movement CURSOR FOR
		SELECT ma.`user_id`, ma.`effectivity_date`, STR_TO_DATE(mat.`to_name`, '%M %d,%Y'), mat.`to_id`, up.project_id, dtStart, dtEnd, dtPay
		FROM ww_partners_movement m 
		LEFT JOIN ww_partners_movement_action ma ON m.`movement_id` = ma.`movement_id`
		LEFT JOIN ww_partners_movement_action_transfer mat ON ma.`movement_id` = mat.`movement_id` AND ma.`action_id` = mat.`action_id`
		left join ww_users_profile up on ma.user_id = up.user_id
		WHERE field_name IN ('end_date') AND m.`status_id` = 3
		AND ma.movement_id = `get_project_movement`( intUser, dtStart, dtEnd )
		AND ma.`user_id` = intUser
		AND ( ma.`effectivity_date` BETWEEN dtStart AND dtEnd
		OR STR_TO_DATE(mat.`to_name`, '%M %d,%Y') BETWEEN dtStart AND dtEnd );
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET proj_done = 1;
	
	OPEN movement;
	myMovement: LOOP
		FETCH movement INTO intEmp, dtProjectFrom, dtProjectTO, intProject, intDefaultProject, dtStart, dtEnd, dtPay;
		
		IF proj_done THEN
		    CLOSE movement;
		    LEAVE myMovement;
		END IF;
		-- set project base on movement
		UPDATE ww_time_record_summary SET project_id = intProject WHERE user_id = intEmp AND `date` BETWEEN dtProjectFrom AND dtProjectTO AND payroll_date = dtPay;
		
	END LOOP;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_summary` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_summary` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_summary`( IN periodid INT(11), IN puserid INT(11) )
BEGIN
	
	DECLARE summarydone TINYINT(1) DEFAULT 0;
	DECLARE employee_id INT(11);
	DECLARE comp_id INT(11);
	DECLARE rate_type INT(11);
	DECLARE salary DECIMAL(12,2);
	DECLARE dates DATE;
	DECLARE paydate DATE;
	DECLARE rec_id INT(11);
	DECLARE absent TINYINT(1);
	DECLARE lwp DECIMAL(5,2);
	DECLARE lwop DECIMAL(5,2);
	DECLARE late DECIMAL(5,2);
	DECLARE undertime DECIMAL(5,2);
	DECLARE nd DECIMAL(5,2);
	DECLARE ot DECIMAL(5,2);
	DECLARE total_days DECIMAL(5,2);
	DECLARE day_type VARCHAR(32);
	DECLARE lates_exemption_val DECIMAL(5,2);
	
	DECLARE dtr CURSOR FOR
		SELECT p.`user_id`, u.`company_id`, p.`payroll_rate_type_id`, AES_DECRYPT( p.`salary`,encryption_key() ) AS salary ,s.`date`, s.`payroll_date`, s.`record_id`, 
			s.`absent`, s.`lwp`, s.`lwop`, s.`late`, s.`undertime`, s.nd, s.`ot`, p.`total_year_days`, s.`day_type`, lates_exemption, periodid
		FROM ww_time_record_summary s
		INNER JOIN ww_payroll_partners p ON s.`user_id` = p.`user_id`
		INNER JOIN ww_time_period t ON t.`payroll_date` = s.`payroll_date`
		INNER JOIN ww_users_profile u ON p.`user_id` = u.`user_id`
		INNER JOIN ww_partners pp ON u.`user_id` = pp.`user_id`
		LEFT JOIN ww_payroll_late_exemption ple ON pp.`employment_type_id` = ple.`employment_type_id`		
		WHERE s.`date` BETWEEN t.`date_from` AND t.`date_to` 
			AND IF(puserid=0,1,p.`user_id`=puserid) AND t.`period_id` = periodid AND t.`company_id` = u.`company_id`;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET summarydone = 1;
	
	OPEN dtr;
	
	myLoop: LOOP
		FETCH dtr INTO employee_id, comp_id, rate_type, salary, dates, paydate, rec_id, absent, lwp, lwop, late, undertime, nd, ot, total_days, day_type, lates_exemption_val, periodid;
		
		IF summarydone THEN
		    CLOSE dtr;
		    LEAVE myLoop;
		END IF;
		
		DELETE FROM ww_time_record_process WHERE user_id = employee_id AND `date` = dates AND payroll_date = paydate;
		
		SET @workhrs = 0;
		SET @workhrs = time_period_process_workhrs(employee_id, dates);
		
		SET @hourly_rate = 0;
		IF rate_type = 6 THEN
			SET @hourly_rate = salary / @workhrs;
		else
			SET @hourly_rate = ( salary / ( total_days / 12 ) ) / @workhrs;
		END IF;
			
		-- SET @hourly_rate = ( salary / ( total_days / 12 ) ) / @workhrs;
		SET @OrigPaydate = '0000-00-00';
		SET @latefile = 0;
		
		IF absent > 0 THEN 
			
			SET @tran_code = 'ABSENCES';
			SET @qty = 0;
			SET @qty = absent * @workhrs;
			
			CALL sp_time_period_summary_insert( rec_id, employee_id, dates, paydate, @OrigPaydate, @latefile, @tran_code, @qty, @hourly_rate, periodid);
			
		END IF;
		
		-- payment for late approved leaves
		IF lwp > 0 THEN
			CALL sp_time_period_summary_lwp( employee_id, comp_id, dates, @hourly_rate, paydate, periodid );
		END IF;
		
		IF lwop > 0 THEN
			SET @tran_code = 'LWOP';
			SET @qty = 0;
			SET @qty = lwop * 8; -- @workhrs;
			
			CALL sp_time_period_summary_insert( rec_id, employee_id, dates, paydate, @OrigPaydate, @latefile, @tran_code, @qty, @hourly_rate, periodid);
			
		END IF;
			
		IF late > ifnull(lates_exemption_val,0) THEN
			SET @tran_code = 'DEDUCTION_LATE';
			SET @qty = 0;
			SET @qty = late ;
			
			CALL sp_time_period_summary_insert( rec_id, employee_id, dates, paydate, @OrigPaydate, @latefile, @tran_code, @qty, @hourly_rate, periodid);
			
		END IF;
		
		IF undertime > 0 THEN
			SET @tran_code = 'DEDUCTION_UNDERTIME';
			SET @qty = 0;
			SET @qty = undertime ;
			
			CALL sp_time_period_summary_insert( rec_id, employee_id, dates, paydate, @OrigPaydate, @latefile, @tran_code, @qty, @hourly_rate, periodid);
		END IF;
		
		IF nd > 0 THEN
			SET @tran_code = 'REGND';
			SET @qty = 0;
			SET @qty = nd;
			IF day_type = 'REGULAR' THEN
				CALL sp_time_period_summary_insert( rec_id, employee_id, dates, paydate, @OrigPaydate, @latefile, @tran_code, @qty, @hourly_rate, periodid);
			END IF;
		END IF;
				
		IF ot > 0 AND absent = 0 THEN 
			CALL sp_time_period_summary_ot( employee_id, comp_id, dates, day_type, @hourly_rate, paydate, periodid );
		END IF;
		
	END LOOP;
			
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_summary_insert` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_summary_insert` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_summary_insert`(
		in rec_id int(11), 
		in employee_id int(11), 
		in dates date,
		in paydate date, 
		in orig_paydate date,
		in lt_file tinyint(1),
		in tran_code varchar(32), 
		in qty decimal(5,2), 
		in hourly_rate decimal(5,2),
		IN period_id INT(11)
	)
BEGIN	
	SET @tran_code = '';
	set @tran_id = 0;
	set @tran_type_id = 0;
	set @frmCode = '';
	select form_code into @frmCode from ww_time_forms where forms_id = rec_id LIMIT 1;
	if @frmCode = 'OT' and lt_file = 1 then
		SELECT transaction_code, transaction_id , transaction_type_id
		INTO @tran_code, @tran_id, @tran_type_id
		FROM ww_payroll_transaction WHERE deleted=0 AND transaction_code = concat(tran_code, '_ADJ' ) LIMIT 1;
	else
		SELECT transaction_code, transaction_id , transaction_type_id
		INTO @tran_code, @tran_id, @tran_type_id
		FROM ww_payroll_transaction WHERE deleted=0 AND transaction_code = tran_code LIMIT 1;
	END IF;
	
	DELETE FROM ww_time_record_process WHERE user_id = employee_id AND transaction_code = tran_code AND `date` = dates AND payroll_date = paydate;
	
	INSERT INTO ww_time_record_process
            ( `record_id`, `user_id`, `time_period_id`, `date`, `payroll_date`, `original_payroll_date`, `latefile`, `transaction_id`, `transaction_code`, `transaction_type_id`, `quantity`, `unit_rate`)
	VALUES ( rec_id, employee_id, period_id, dates, paydate, orig_paydate, lt_file, @tran_id, @tran_code, @tran_type_id, qty, hourly_rate);
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_summary_lwp` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_summary_lwp` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_summary_lwp`(
	IN employee_id INT(11),
	IN comp_id INT(11),
	IN dates DATE,
	IN hourly_rate DECIMAL(12,2), 
	IN paydate DATE,
	IN period_id INT(11)
    )
BEGIN
	DECLARE done TINYINT(1) DEFAULT 0;
	DECLARE nFrmID INT(11);
	DECLARE sFrmCode VARCHAR(30);
	DECLARE nQty DECIMAL(5,2);
	DECLARE dtApprv DATETIME;
	DECLARE nEmpID INT(11);
	DECLARE dtDate DATE;
	DECLARE nCompID INT(11);
	DECLARE nHourlyRate DECIMAL(12,2);
	DECLARE dtPaydate DATE;
	DECLARE lvs CURSOR FOR
		SELECT a.user_id,a.`forms_id`, a.`form_code`, ( b.`day` * 8 ), a.`date_approved`, b.`date`, comp_id, hourly_rate, paydate, period_id
		FROM ww_time_forms a, ww_time_forms_date b, ww_time_form c
		WHERE a.forms_id = b.forms_id AND a.`deleted` = 0 AND b.`deleted` = 0
			AND a.`form_status_id` = 6 AND a.`date_approved` IS NOT NULL 
			AND a.`user_id` = employee_id AND dates BETWEEN `date_from` AND `date_to` 
			AND b.date = dates AND c.form_id = a.form_id AND c.is_leave = 1 AND c.form_code != 'LWOP';
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
		
	OPEN lvs;
	myLoop: LOOP
		
		FETCH lvs INTO nEmpID, nFrmID, sFrmCode, nQty, dtApprv, dtDate, nCompID, nHourlyRate, dtPaydate, period_id;
		
		IF done THEN
		    CLOSE lvs;
		    LEAVE myLoop;
		END IF;
		
		SET @cutoff = '0000-00-00';
		SET @dtOrigPaydate = '0000-00-00';
		SET @sTranCode = '';
		set @dtPayrollDate = '0000-00-00';
		-- check if within the period
		-- SET @cutoff = time_get_cut_off( dtDate, comp_id );
		-- IF DATE(dtApprv) > @cutoff THEN
		SET @nLatefile = 0;
		SET @sTranCode = sFrmCode;
		set @dtPayrollDate = dtPaydate;
		delete from ww_time_record_process where user_id = nEmpID and `date` = dtDate and transaction_code = @sTranCode and payroll_date = @dtPayrollDate and original_payroll_date = @dtOrigPaydate;
		CALL sp_time_period_summary_insert( nFrmID, nEmpID, dtDate, @dtPayrollDate, @dtOrigPaydate, @nLatefile, @sTranCode, nQty, nHourlyRate, period_id);
			
	END LOOP;
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_summary_ot` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_summary_ot` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_summary_ot`(
	IN employee_id INT(11),
	IN comp_id INT(11),
	IN dates DATE,
	IN day_type VARCHAR(32),
	IN hourly_rate DECIMAL(12,2),
	IN paydate DATE,
	IN period_id INT(11)
    )
BEGIN
	DECLARE doneOT TINYINT(1) DEFAULT 0;
	DECLARE frm_id INT(11);
	DECLARE hrs DECIMAL(5,2);
	DECLARE otBreak DECIMAL(5,2) default 0.00;
	DECLARE dtApprv DATETIME;
	DECLARE dtTimeFrm DATETIME;
	DECLARE dtTimeTo DATETIME;
	DECLARE emp_id INT(11);
	DECLARE dtDate DATE;	
	DECLARE overtime CURSOR FOR
		SELECT a.`user_id`, a.`forms_id`, b.`hrs`, DATE(a.`date_approved`), b.`time_from`, b.`time_to`, b.`date`, comp_id, day_type, hourly_rate, paydate, period_id
		FROM ww_time_forms a, ww_time_forms_date b 
		WHERE a.forms_id = b.forms_id AND a.`deleted` = 0 AND b.`deleted` = 0
			AND a.`form_status_id` = 6 AND ( a.`date_approved` IS NOT NULL AND DATE(a.date_approved) <= time_get_cut_off( dates, comp_id ) )
			AND a.`user_id` = employee_id  AND dates BETWEEN DATE_SUB(`date_from`, INTERVAL 1 DAY) AND `date_to` 
			AND b.date = dates AND a.`form_code` = 'OT'
		UNION
		SELECT tfb.`user_id`, tf.`forms_id`, tfd.`hrs`, DATE(tf.`created_on`), tfd.`time_from`, tfd.`time_to`, tfd.`date`, comp_id, day_type, hourly_rate, paydate, period_id
		FROM ww_time_forms tf, ww_time_forms_date tfd, ww_time_forms_blanket tfb
		WHERE tf.`forms_id` = tfd.`forms_id` AND tf.`deleted` = 0 AND tfd.`deleted` = 0
			AND tf.`forms_id` = tfb.`forms_id` AND tfb.deleted = 0
			AND tfb.`user_id` = employee_id AND dates BETWEEN DATE_SUB(tf.`date_from`, INTERVAL 1 DAY) AND tf.`date_to` AND
			(tf.created_on IS NOT NULL AND DATE(tf.created_on) <= time_get_cut_off( dates, comp_id)) 
			AND tfd.`date` = dates
			AND tf.`form_code` = 'OT';
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET doneOT = 1;
	OPEN overtime;
	myLoop: LOOP
		FETCH overtime INTO emp_id, frm_id, hrs, dtApprv, dtTimeFrm, dtTimeTo, dtDate, comp_id, day_type, hourly_rate, paydate, period_id;
		
		IF doneOT = 1 THEN
		    LEAVE myLoop;
		END IF;
		
		SET @ActualIN = "";
		SET @ActualOUT = "";
		SET @otStart = "";
		SET @otEnd = "";
		
		SET @otUnit = 0;
		SET @otUnitExcess = 0;
		SET @Unit = 0;
		SET @ndUnit = 0;
		
		-- get shift
		SET @ShiftID = 0;
		SET @ShiftID = time_get_shift(emp_id, dtDate);
		-- get sched out
		SET @SchedOut = CONCAT(dtDate, ' ', time_get_sched_out( @ShiftID ) );
		SET @SchedIn = CONCAT(dtDate, ' ', time_get_sched_in( @ShiftID ) );
		-- get current ND set up
		SET @curStartND = CONCAT(dtDate, ' ', time_get_nd_start( @ShiftID, comp_id ) );
		SET @curEndND = CONCAT( ADDDATE( dtDate, 1 ), ' ', time_get_nd_end( @ShiftID, comp_id ) );
		-- get previous ND set up
		SET @prevStartND = CONCAT( ADDDATE( dtDate, -1 ), ' ', time_get_nd_start( @ShiftID, comp_id ) );
		SET @prevEndND = CONCAT( dtDate, ' ', time_get_nd_end( @ShiftID, comp_id ) );
		-- get actual time in / out
		SET @ActualIN = time_get_time_in( emp_id, dtDate);
		SET @ActualOUT = time_get_time_out( emp_id, dtDate);
		
		SET @OrigPaydate = '0000-00-00';
		SET @dtPaydate = '0000-00-00';
		SET @latefile = 0;
		SET @cutoff = time_get_cut_off( dtDate, comp_id );
		
		IF dtApprv > @cutoff THEN
			-- set original payroll date
			SET @latefile = 1;
			SET @OrigPaydate = paydate;
			SET @dtPaydate = time_get_payroll_date( dtApprv, comp_id );
		ELSE 
			SET @latefile = 0;
			SET @dtPaydate = paydate;
			SET @OrigPaydate = paydate;
		END IF;
		
		-- start of regular 
		IF day_type = 'REGULAR' THEN
			-- pre shift ot
			IF dtTimeFrm < @SchedIn THEN
				
				IF dtTimeTo >= @SchedIn THEN
					SET @otEnd =  @SchedIn;
				END IF;
				IF dtTimeTo < @SchedIn THEN
					SET @otEnd =  dtTimeTo;
				END IF;
				
				SET @otStart = dtTimeFrm;
				IF dtTimeFrm < @ActualIN THEN
					SET @otStart = @ActualIN;
				END IF;
				
				SET @otUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
				if @otUnit > 0 then
					SET otBreak = get_overtime_break( day_type, @otUnit, comp_id );
					SET @otUnit = @otUnit - otBreak;				
				end if;
				
				IF @otUnit > 0 THEN
					SET @tran_code = '';
					SET @tran_code = 'REGOT';
					SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, hourly_rate );
					CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
				END IF;
				-- check if has ND
				IF @ActualIN < @prevEndND THEN
					IF dtTimeFrm <= @prevStartND THEN
						SET @ndStart = @prevStartND;
					END IF;
					IF dtTimeFrm > @prevStartND THEN
						SET @ndStart = dtTimeFrm;
					END IF;
					SET @ndStart = @ActualIN;
					IF @ActualIN < dtTimeFrm THEN
						SET @ndStart = dtTimeFrm;
					END IF;
					SET @ndEnd = @prevEndND;
					IF dtTimeTo < @prevEndND THEN
						SET @ndEnd = dtTimeTo;
					END IF;
					
					SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );					
					IF @ndUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = 'REGOT_ND';
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, hourly_rate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
					END IF;
				END IF;
			-- after shift ot
			ELSEIF dtTimeFrm > @SchedIn THEN
				IF dtTimeFrm <= @SchedOut THEN
					SET @otStart = @SchedOut;
				END IF;
				IF dtTimeFrm > @SchedOut THEN
					SET @otStart = dtTimeFrm;
				END IF;
				
				SET @otEnd = dtTimeTo;
				IF dtTimeTo > @ActualOUT THEN	
					SET @otEnd = @ActualOUT;
				END IF;
				
				SET @otUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
				SET @otUnit = @otUnit - `get_overtime_break`( day_type, @otUnit, comp_id ) ;
				IF @otUnit > 0 THEN
					SET @tran_code = '';
					SET @tran_code = 'REGOT';
					SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, hourly_rate );
					CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
				END IF;
				-- check if has ND
				IF @ActualOUT > @curStartND THEN
					IF dtTimeTo >= @curEndND THEN
						SET @ndEnd = @curEndND;
					END IF;
					IF dtTimeTo < @curEndND THEN
						SET @ndEnd = dtTimeTo;
					END IF;
					IF dtTimeTo > @ActualOUT THEN
						SET @ndEnd = @ActualOUT;
					END IF;
					
					IF dtTimeFrm <= @curStartND THEN
						SET @ndStart = @curStartND;
					END IF;
					IF dtTimeFrm > @curStartND THEN
						SET @ndStart = dtTimeFrm;
					END IF;
					
					SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
					IF @ndUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = 'REGOT_ND';
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, hourly_rate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
					END IF;
				END IF;
			END IF;
			-- end of regular
		
		ELSE 
			IF day_type = 'RESTDAY' THEN
				SET @trans = 'RDOT';
			elseIF day_type = 'OFF' THEN
				SET @trans = 'DOFF';				
			ELSEIF day_type = 'LEGAL' THEN
				IF @ShiftID = 1 THEN
					SET @trans = 'LEGRDOT';
				ELSE		
					SET @trans = 'LEGOT';
				END IF;
			ELSEIF day_type = 'SPECIAL' THEN
				IF @ShiftID = 1 THEN
					SET @trans = 'SPERDOT';
				ELSE
					SET @trans = 'SPEOT';
				END IF;
			ELSEIF day_type = 'DOUBLE' THEN
				IF @ShiftID = 1 THEN
					SET @trans = 'DOBRDOT';
				ELSE
					SET @trans = 'DOBOT';
				END IF;
			END IF;
			
			IF @ActualIN <= dtTimeFrm THEN
				SET @otStart = dtTimeFrm;
			ELSEIF @ActualIN > dtTimeFrm THEN
				SET @otStart = @ActualIN;
			END IF;
			SET @otStart = dtTimeFrm;
			
			IF @ActualOUT >= dtTimeTo THEN
				SET @otEnd = dtTimeTo;
			ELSEIF @ActualOUT < dtTimeTo THEN
				SET @otEnd = @ActualOUT;
			END IF;
			SET @otEnd = dtTimeTo;
			
			SET @Unit = 0.00;
			SET @Unit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @otEnd, @otStart ) ) / 3600 ), 2 );
			SET @Unit = @Unit - `get_overtime_break`( day_type, @Unit, comp_id ) ;
			IF @Unit > 8 THEN
				SET @otUnit = 8.00;
				IF @otUnit > 0 THEN
					SET @tran_code = '';
					SET @tran_code = @trans;
					SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, hourly_rate );
					CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
				END IF;
				SET @otUnitExcess = @Unit - 8.00;
				IF @otUnitExcess > 0 THEN
					SET @tran_code = '';
					SET @tran_code = CONCAT(@trans,'_EXCESS');
					SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, hourly_rate );
					CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnitExcess, @ot_rate, period_id);
				END IF;
			ELSE 
				SET @otUnit = @Unit;
				IF @otUnit > 0 THEN
					SET @tran_code = '';
					SET @tran_code = @trans;
					SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, hourly_rate );
					CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @otUnit, @ot_rate, period_id);
				END IF;
			END IF;
			-- check if first 8 hours has ND
			-- ND on the Ot Start
			IF @otStart < @prevEndND THEN
				SET @ndStart = @otStart;
				SET @ndEnd = @prevEndND;
				SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
				
				IF @ndUnit > 0 THEN
					SET @tran_code = '';
					SET @tran_code = CONCAT(@trans,'_ND');
					SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, hourly_rate );
					CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
				END IF;
			END IF;
			-- ND on the First 8 Hrs
			
			SET @firstEight = ADDTIME( @otStart, '08:00:00' );
			IF @curStartND < @firstEight THEN
				SET @ndStart = @curStartND;
				SET @ndEnd = @firstEight;
				IF @firstEight > @otEnd THEN
					SET @ndEnd = @otEnd;
				END IF;
				SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
				IF @ndUnit > 0 THEN
					SET @tran_code = '';
					SET @tran_code = CONCAT(@trans,'_ND');
					SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, hourly_rate );
					CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
				END IF;
			END IF;
			
			-- check if excess hour is between ND Period
			IF @otEnd > @curStartND THEN
				-- ND on the Remaining Hrs
				IF @firstEight < @otEnd THEN
					IF @firstEight > @curStartND THEN
						SET @ndStart = @firstEight;
					ELSE 
						SET @ndStart = @curStartND;
						
					END IF;
					
					SET @ndEnd = @otEnd;
					IF @otEnd > @curEndND THEN
						SET @ndEnd = @curEndND;
					END IF;
					IF @ndEnd > @ndStart THEN
						SET @ndUnit = ROUND( ( TIME_TO_SEC( TIMEDIFF( @ndEnd, @ndStart ) ) / 3600 ), 2 );
					END IF;		
					IF @ndUnit > 0 THEN
						SET @tran_code = '';
						SET @tran_code = CONCAT(@trans,'_ND_EXCESS');
						SET @ot_rate = time_get_ot_rate( @tran_code, comp_id, hourly_rate );
						CALL sp_time_period_summary_insert( frm_id, emp_id, dtDate, @dtPaydate, @OrigPaydate, @latefile, @tran_code, @ndUnit, @ot_rate, period_id);
					END IF;	
				END IF;	
			END IF;		
		END IF;		
	END LOOP myLoop;
	CLOSE overtime;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_period_validate_holiday` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_period_validate_holiday` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_period_validate_holiday`( IN periodid INT(11), IN puserid INT(11) )
BEGIN 
	SET @nCompID = 0;
	SET @dtPay = '0000-00-00';	
	SELECT company_id, payroll_date INTO @nCompID, @dtPay FROM ww_time_period
	WHERE period_id = periodid;
	-- check if present before holiday
	BEGIN
		DECLARE holidaydone TINYINT(1) DEFAULT 0;
		DECLARE nEmpID INT(11);
		DECLARE nRecID INT(11);	
		DECLARE dtDate DATE;
		DECLARE holiday CURSOR FOR
			SELECT t.user_id, t.record_id, t.`date` 
			FROM ww_time_record_summary t
			LEFT JOIN ww_users_profile u ON t.`user_id` = u.`user_id`
			WHERE t.`deleted` = 0 AND u.company_id = @nCompID AND IF(puserid=0,1,t.`user_id`=puserid) 
				AND payroll_date = @dtPay AND day_type = 'LEGAL'
			ORDER BY t.user_id, t.date;
		DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET holidaydone = 1;
			
		OPEN holiday;
		SET @nBCount = 0;
		SET @nBRow = 0;
		SELECT COUNT(t.user_id) INTO @nBCount
			FROM ww_time_record_summary t
			LEFT JOIN ww_users_profile u ON t.`user_id` = u.`user_id`
			WHERE t.`deleted` = 0 AND u.company_id = @nCompID AND IF(puserid=0,1,t.`user_id`=puserid) 
				AND payroll_date = @dtPay AND day_type = 'LEGAL';
		
		myLoop: LOOP
			FETCH holiday INTO nEmpID, nRecID, dtDate;
			
			IF @nBCount = @nBRow THEN
			    CLOSE holiday;
			    LEAVE myLoop;
			END IF;
			
			SET @dtPrevDate = '0000-00-00';
			SET @nPrevAbsent = 0;
			SET @sShift = '';
			 
			SELECT IF(aux_shift_id=0,shift,aux_shift) INTO @sShift FROM ww_time_record WHERE user_id = nEmpID AND `date` = dtDate;
			
			IF UPPER(@sShift) <> 'RESTDAY' THEN
			   SELECT MAX(DATE) INTO @dtPrevDate FROM ww_time_record_summary WHERE user_id = nEmpID AND day_type = 'REGULAR' AND DATE < dtDate;
			   
			   SELECT absent INTO @nPrevAbsent  FROM ww_time_record_summary WHERE `date` = @dtPrevDate AND user_id = nEmpID AND absent = 1;
			   
			   IF @nPrevAbsent > 0 THEN
			      UPDATE ww_time_record_summary SET hrs_rendered = 0 , hrs_actual = 0, absent = 1 WHERE record_id = nRecID;
			   END IF;
			END IF;
			 
			SET @nBRow = @nBRow + 1;
		END LOOP;
	END;
	
	-- check if present after holiday
	/* remove due to the policy: 2015-10-09
	BEGIN
		DECLARE holidaydone TINYINT(1) DEFAULT 0;
		DECLARE nEmpID INT(11);
		DECLARE nRecID INT(11);	
		DECLARE dtDate DATE;
		DECLARE holiday CURSOR FOR
			SELECT t.user_id, t.record_id, t.`date` 
			FROM ww_time_record_summary t
			LEFT JOIN ww_users_profile u ON t.`user_id` = u.`user_id`
			WHERE t.`deleted` = 0 AND u.company_id = @nCompID AND IF(puserid=0,1,t.`user_id`=puserid) 
				AND payroll_date = @dtPay AND day_type = 'LEGAL'
			ORDER BY t.user_id, t.date DESC;
		DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET holidaydone = 1;
			
		OPEN holiday;
		SET @nACount = 0;
		SET @nARow = 0;
		SELECT COUNT(t.user_id) INTO @nACount
			FROM ww_time_record_summary t
			LEFT JOIN ww_users_profile u ON t.`user_id` = u.`user_id`
			WHERE t.`deleted` = 0 AND u.company_id = @nCompID AND IF(puserid=0,1,t.`user_id`=puserid) 
				AND payroll_date = @dtPay AND day_type = 'LEGAL';
		
		myLoop: LOOP
			FETCH holiday INTO nEmpID, nRecID, dtDate;
			
			IF @nACount = @nARow THEN
			    CLOSE holiday;
			    LEAVE myLoop;
			END IF;
			
			SET @dtAfterDate = '0000-00-00';
			SET @nAfterAbsent = 0;
			
			SELECT MIN(DATE) INTO @dtAfterDate FROM ww_time_record_summary WHERE user_id = nEmpID AND day_type = 'REGULAR' AND `date` > dtDate;
			
			SELECT absent INTO @nAfterAbsent  FROM ww_time_record_summary WHERE `date` = @dtAfterDate AND user_id = nEmpID AND absent = 1;
			
			IF @nAfterAbsent > 0 THEN
				UPDATE ww_time_record_summary SET hrs_rendered = 0 , hrs_actual = 0, absent = 1 WHERE record_id = nRecID;
			END IF;
			SET @nARow = @nARow + 1;
		END LOOP;
	END;
	*/
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_populate` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_populate` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_populate`(IN startday DATE, IN endday DATE)
BEGIN
    
    DROP TEMPORARY TABLE IF EXISTS `tmpDays`;
    CREATE TEMPORARY TABLE `tmpDays` ( indate DATE, inweek INTEGER(1) ); 
    SET @done  = 0;
    SET @dates = startday;
    REPEAT
       IF @dates > endday THEN
          SET @done = 1;
       ELSE
          INSERT INTO `tmpDays` SELECT @dates, WEEKDAY(@dates);
       END IF;
       SET @dates = @dates + INTERVAL 1 DAY;
       UNTIL @done END REPEAT;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_record_insert` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_record_insert` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_record_insert`(IN dateid DATE)
BEGIN
   /* This will insert records to ww_time_record and executed thru events
      LAST Change: 2014-02-20 initial
                   2014-02-20 shift name and biometrics
   */
    DECLARE done TINYINT(1) DEFAULT 0;
          
    DECLARE p1 INT(11) DEFAULT 0;    
    DECLARE p2 DATE;
    DECLARE p3 DATE;
    DECLARE p4 INT(11) DEFAULT 0;
    
    -- [1] Prepare dates to be executed
    DECLARE periods CURSOR FOR
    SELECT `period_id`, `date_from`, `date_to`, `company_id`
    FROM `ww_time_period`
    WHERE `deleted` = 0 AND dateid BETWEEN `date_from` AND `date_to`;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    OPEN periods;
    
    REPEAT
       FETCH periods INTO p1, p2, p3, p4;
    
       IF NOT done THEN
          SET p3 = LAST_DAY(p3 + INTERVAL 1 MONTH);
          
          INSERT INTO `ww_system_messages` (msg_code,msg) VALUES ('EVENT_TIME_PERIOD',CONCAT(p2,'-',p3));
          -- [2] Create inclusive dates 
          CALL sp_time_period_populate(p2, p3, p4);
       
          -- [3] Update record so that it will not executed again
          UPDATE `ww_time_period` SET `pop_dates`=2 WHERE `period_id`=p1 LIMIT 1;
          INSERT INTO `ww_system_messages` (msg_code,msg) VALUES ('EVENT_TIME_PERIOD',CONCAT(p2,'-',p3));
       
       END IF;
       
    UNTIL done END REPEAT;
    
    CLOSE periods;
    
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_record_insert_user` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_record_insert_user` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_record_insert_user`()
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    DECLARE puserid INT(20);
    DECLARE peffectivitydate DATE;
    DECLARE pdate DATE;
    
    DECLARE users CURSOR FOR
       SELECT p.`user_id`, p.`effectivity_date`, COUNT(tr.`date`) days, DATEDIFF(CURDATE(),p.`effectivity_date`)+1 days_no
       FROM `partners` p
       JOIN `ww_time_record` tr ON tr.`user_id` = p.`user_id` AND tr.`date` BETWEEN p.`effectivity_date` AND CURDATE()
       WHERE IFNULL(p.`effectivity_date`,CURDATE()) BETWEEN (CURDATE() - INTERVAL 10 DAY) AND CURDATE()
             AND IFNULL(p.`resigned_date`,'0000-00-00')='0000-00-00'
       GROUP BY p.`user_id`
       HAVING days <> days_no;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    
    OPEN users;
    
    REPEAT	
       FETCH users INTO puserid, peffectivitydate;
       
       IF NOT done THEN
          SET rec = rec + 1;
          
          SET pdate = LAST_DAY(peffectivitydate + INTERVAL 1 MONTH);
          CALL sp_time_period_populate_user(peffectivitydate, pdate, puserid);
          
       END IF;
       
       UNTIL done END REPEAT;
       
       CLOSE users;
       
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_record_raw_populate` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_record_raw_populate` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_record_raw_populate`(IN FromDate DATE)
BEGIN
	DECLARE summarydone TINYINT(1) DEFAULT 0;
	DECLARE r_id INT(11);
	DECLARE u_id INT(11);
	
	DECLARE dtr CURSOR FOR
		SELECT raw_id,user_id
		FROM ww_time_record_raw		
		WHERE `date` = FromDate;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET summarydone = 1;
	
	OPEN dtr;
	
	myLoop: LOOP
		FETCH dtr INTO r_id,u_id;
		
		IF summarydone THEN
		    CLOSE dtr;
		    LEAVE myLoop;
		END IF;
		
		UPDATE ww_time_record_raw SET last_processed = NOW() WHERE raw_id = r_id;		
		
	END LOOP;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_record_raw_process` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_record_raw_process` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_record_raw_process`(IN userid INT(11), IN dates DATE, IN checktime DATETIME)
BEGIN
    
    DECLARE rec INT(11) DEFAULT 0;
    DECLARE shift_start TIME;
    DECLARE shift_end TIME;
    
    DECLARE NewTimeIn DATETIME;
    DECLARE NewTimeOut DATETIME;
    DECLARE NewDate DATE;
    DECLARE CurTimeIN DATETIME;
    DECLARE CurTimeOUT DATETIME;
    DECLARE CurShiftID INT(11) DEFAULT 0;
    DECLARE CurShift VARCHAR(32) DEFAULT '';
    
    DECLARE shift_datetime_start DATETIME;
    DECLARE shift_datetime_end DATETIME;
    DECLARE msg VARCHAR(64) DEFAULT '';
    
    
    -- [1] GET AND POPULATE THE NEEDED TIME RECORD
    IF (SELECT COUNT(*) FROM `ww_time_record` WHERE `user_id` = userid AND `date` = dates LIMIT 1) = 0 THEN
       -- better include partners employment date in the future
       CALL sp_time_period_populate_user(dates, dates + INTERVAL 2 DAY, userid);
    END IF;     
    
       
    -- [3] GET CURRENT ATTENDANCE RECORD
    SELECT tr.`record_id`, `time_start`, `time_end`, 
           IF(IFNULL(tr.`aux_shift_id`,0)=0, tr.`shift_id`, tr.`aux_shift_id`), IF(IFNULL(tr.`aux_shift_id`,0)=0, tr.`shift`, tr.`aux_shift`), 
           IFNULL(`time_in`, '0000-00-00 00:00:00'), IFNULL(`time_out`, '0000-00-00 00:00:00') 
    INTO rec, shift_start, shift_end, CurShiftID, CurShift, CurTimeIN, CurTimeOUT
    FROM `ww_time_record` tr
    JOIN `ww_time_shift` ts ON ts.`shift_id`=IF(tr.`aux_shift_id`=0, tr.`shift_id`, tr.`aux_shift_id`)
    WHERE tr.`user_id` = userid AND tr.`date` = dates LIMIT 1;
    
    
    SET @cur_date = DATE(checktime);
    SET @prv_date = @cur_date - INTERVAL 1 DAY;
    SET @nxt_date = IF(shift_start > shift_end, @cur_date + INTERVAL 1 DAY, @cur_date);
    SET shift_datetime_start = CONCAT(@cur_date,' ',shift_start);
    SET shift_datetime_end = CONCAT(@nxt_date,' ',shift_end);
    SET @restday = 0;
    
    
    -- [4] IF RESTDAY/OFF
    IF CurShift = 'RESTDAY' OR CurShift = 'OFF'  THEN
       SET @restday = 1;
    END IF;
    
    
    -- [5] VALIDATE AND UPDATE
    IF rec = 0 THEN
       INSERT INTO `ww_time_record` (`user_id`, `date`, `time_in`) 
       SELECT userid, dates, checktime
       ON DUPLICATE KEY UPDATE `time_in` = checktime, `modified_on`=NOW();
       SET msg = 'Insert 1N';
    ELSE
       BEGIN
       DECLARE prevrec INT(11) DEFAULT 0;
       DECLARE prevshift_start TIME;
       DECLARE prevshift_end TIME;
       DECLARE prevCurTimeIN DATETIME;
       DECLARE prevCurTimeOUT DATETIME;
       DECLARE prevCurShiftID INT(11) DEFAULT 0;
       DECLARE prevCurShift VARCHAR(32) DEFAULT '';
       DECLARE prevshift_datetime_start DATETIME;
       DECLARE prevshift_datetime_end DATETIME;
              
       SELECT tr.`record_id`, `time_start`, `time_end`, 
              IF(IFNULL(tr.`aux_shift_id`,0)=0, tr.`shift_id`, tr.`aux_shift_id`), IF(IFNULL(tr.`aux_shift_id`,0)=0, tr.`shift`, tr.`aux_shift`), 
              IFNULL(`time_in`, '0000-00-00 00:00:00'), IFNULL(`time_out`, '0000-00-00 00:00:00') 
       INTO prevrec, prevshift_start, prevshift_end, prevCurShiftID, prevCurShift, prevCurTimeIN, prevCurTimeOUT
       FROM `ww_time_record` tr
       JOIN `ww_time_shift` ts ON ts.`shift_id`=IF(tr.`aux_shift_id`=0, tr.`shift_id`, tr.`aux_shift_id`)
       WHERE tr.`user_id` = userid AND tr.`date` = @prv_date LIMIT 1;
       
       IF prevrec > 0 THEN
          SET prevshift_datetime_start = CONCAT(@prv_date,' ',prevshift_start);
          SET prevshift_datetime_end = CONCAT(IF(prevshift_start > prevshift_end, @cur_date, @prv_date),' ',prevshift_end);
       END IF;
       SET @bypass = 0;
          
       IF CurTimeIN = '0000-00-00 00:00:00' THEN  -- TIMEIN
          IF prevrec > 0 THEN
             IF prevCurTimeOUT = '0000-00-00 00:00:00' AND checktime <= (shift_datetime_start - INTERVAL 8 HOUR) AND
                (prevCurShift <> 'RESTDAY' AND prevCurShift <> 'OFF') AND (CurShift <> 'RESTDAY' AND CurShift <> 'OFF') THEN -- using 2hrs interval
                IF checktime = CurTimeIN THEN
                   SET msg = CONCAT(msg,'Update bypass Prev OUT');
                   SET @bypass = 1;
                ELSE
		   IF prevCurTimeIN <> '0000-00-00 00:00:00' THEN
                      SET msg = CONCAT(msg,'Update Prev OUT - ');
                      SET @bypass = 1;
                      UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
                      WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;
                   ELSE
		      IF checktime < (prevshift_datetime_end + INTERVAL 8 HOUR) THEN
			      SET msg = CONCAT(msg,'Update Prev OUT - ');
			      SET @bypass = 1;
			      UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
			      WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;		      
		      END IF;                      
                   END IF;
                END IF;
             ELSEIF prevCurTimeOUT = '0000-00-00 00:00:00' AND (prevCurShift = 'RESTDAY' OR prevCurShift = 'OFF') THEN -- using 2hrs interval
		IF checktime < (shift_datetime_start - INTERVAL 16 HOUR) AND (CurShift <> 'RESTDAY' AND CurShift <> 'OFF') THEN -- using 24hrs interval from previous shift-start
			SET msg = CONCAT(msg,'Update Prev OUT - ');
			SET @bypass = 1;
			UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
			WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;	  		
		END IF;              
             ELSE
                IF (CurShift = 'RESTDAY' OR CurShift = 'OFF') AND (prevCurShift <> 'RESTDAY' OR prevCurShift <> 'OFF') THEN
                   IF checktime < (prevshift_datetime_end + INTERVAL 8 HOUR) THEN -- using 24hrs interval from previous shift-start
                      SET msg = CONCAT(msg,'Update RESTDAY - ');
                      SET @bypass = 1;
                      UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
                      WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;
                   ELSE
                      SET msg = CONCAT(msg,'Update RESTDAY 2 - ');
                      SET @bypass = 1;
                      UPDATE `ww_time_record` SET `time_in` = checktime, `modified_on` = NOW()
                      WHERE `record_id` = rec AND `override` = 0 LIMIT 1;
                   END IF;
                ELSE
		   IF checktime < (prevshift_datetime_end + INTERVAL 8 HOUR) THEN
			SET msg = CONCAT(msg,'Update Prev OUT - ');
			SET @bypass = 1;
			UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
			WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;	  		   
		   END IF;
                END IF;
                IF prevCurTimeOUT <> '0000-00-00 00:00:00' THEN
                   IF prevCurTimeOUT = checktime THEN
                      SET msg = 'Update bypass Prev OUT';
                      SET @bypass = 1;
                   END IF;
                END IF;
             END IF;
          END IF;
          
          IF @bypass = 0 THEN
             IF checktime >= shift_datetime_end THEN
                SET msg = CONCAT(msg,'Update OUT - ');
                UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
                WHERE `record_id` = rec AND `override` = 0 LIMIT 1;
             ELSE
                SET msg = CONCAT(msg,'Update IN - ');
                UPDATE `ww_time_record` SET `time_in` = checktime, `modified_on` = NOW()
                WHERE `record_id` = rec AND `override` = 0 LIMIT 1;
             END IF;
          END IF;
          
       ELSE  -- TIMEOUT
	  -- INSERT INTO `logtable` (`log`) VALUES (CONCAT(checktime,' ',shift_datetime_start - INTERVAL 8 HOUR));
          IF prevrec > 0 AND (prevCurShift <> 'RESTDAY' AND prevCurShift <> 'OFF') THEN -- using 2hrs interval
	     IF prevCurTimeIN <> '0000-00-00 00:00:00' AND prevCurTimeOUT = '0000-00-00 00:00:00' THEN
	        IF prevCurShift = 'RESTDAY' AND prevCurShift = 'OFF' THEN
			SET msg = CONCAT(msg,'Update OUT Prev OUT - ');
			SET @bypass = 1;
			UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
			WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;
		ELSEIF checktime < (shift_datetime_start - INTERVAL 8 HOUR) AND checktime > prevCurTimeIN THEN
			SET msg = CONCAT(msg,'Update OUT Prev OUT - ');
			SET @bypass = 1;
			UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
			WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;		
                END IF;
	     ELSE
	        IF checktime < (shift_datetime_start - INTERVAL 8 HOUR) AND checktime > prevCurTimeOUT THEN
		      SET msg = CONCAT(msg,'Update Prev OUT - ');
		      SET @bypass = 1;
		      UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
		      WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;		      
	        END IF;                 
             END IF;
          ELSEIF prevrec > 0 AND (prevCurShift = 'RESTDAY' OR prevCurShift = 'OFF') THEN
	     IF prevCurTimeIN <> '0000-00-00 00:00:00' AND prevCurTimeOUT = '0000-00-00 00:00:00' THEN
                SET msg = CONCAT(msg,'Update OUT Prev OUT - ');
                SET @bypass = 1;
                UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
                WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;
	     ELSE
	        IF checktime < (shift_datetime_start - INTERVAL 8 HOUR) THEN
		      SET msg = CONCAT(msg,'Update Prev OUT - ');
		      SET @bypass = 1;
		      UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
		      WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;		      
	        END IF;                 
             END IF;          
          END IF;
          
          IF @bypass = 0 THEN
             IF CurTimeIN = checktime THEN
                SET msg = 'Update bypass OUT';
                SET @bypass = 1;
             ELSE
                IF CurTimeIN > checktime AND checktime > (shift_datetime_start - INTERVAL 2 HOUR) THEN -- using 2hrs interval
                   SET msg = CONCAT(msg,'Update IN - ');
                   UPDATE `ww_time_record` SET `time_in` = checktime, `modified_on` = NOW()
                   WHERE `record_id` = rec AND `override` = 0 LIMIT 1;
		ELSE
		   IF shift_end = '00:00:00' THEN
		        SET @nxt_date = @cur_date + INTERVAL 1 DAY;
		        SET shift_datetime_end = CONCAT(@nxt_date,' ',shift_end);		   
		   END IF;
		   IF CurTimeOUT = '0000-00-00 00:00:00' THEN
                      SET msg = CONCAT(msg,'Update OUT Current - ');
                      UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
                      WHERE `record_id` = rec AND `override` = 0 LIMIT 1;		   
                   ELSEIF CurTimeOUT < checktime AND checktime < (shift_datetime_end + INTERVAL 8 HOUR) THEN
                      SET msg = CONCAT(msg,'Update OUT Current - ');
                      UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
                      WHERE `record_id` = rec AND `override` = 0 LIMIT 1;
                   END IF;
                END IF;
             END IF;
          END IF;
       END IF;
       
       -- HOW ABOUT WE ALTER TIMEIN THAT WAS SUPPOSED TO BE TIMEOUT
       -- MINUS MINUS 2 DAYS: NEXT
       
       -- [[
       -- SELECT prevrec, msg, @cur_date, @prv_date, @nxt_date, checktime, prevshift_datetime_start, prevshift_datetime_end, prevCurShiftID, prevCurShift, prevCurTimeIN, prevCurTimeOUT;
       -- ]]
       END;
    END IF;
    
    -- [[
    -- SELECT rec, msg, @cur_date, @prv_date, @nxt_date, checktime, shift_datetime_start, shift_datetime_end, CurShiftID, CurShift, CurTimeIN, CurTimeOUT;
    -- ]]
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_record_raw_process_2` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_record_raw_process_2` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_record_raw_process_2`(IN userid INT(11), IN dates DATE, IN checktime DATETIME)
BEGIN
       DECLARE shiftid INT(11) DEFAULT 0;
       DECLARE rec INT(11) DEFAULT 0;
       DECLARE shift_start TIME;
       DECLARE shift_end TIME;
       DECLARE NewCIn DATETIME;
       DECLARE NewCOut DATETIME;
       DECLARE NewTime TINYINT(1) DEFAULT 0;  --  1==In  2==Out
       DECLARE NewTimeIn DATE;
       DECLARE NewTimeOut DATE;
       DECLARE NewDate DATE;
       
       DECLARE MaxPreShift TIME;
       DECLARE MaxPostShift TIME;
       DECLARE MidPostShift TIME;
       DECLARE FirstHalfEnd TIME;   
       
       DECLARE auxshiftid INT;
       DECLARE shift_datetime_start DATETIME;
       DECLARE shift_datetime_end DATETIME;
       DECLARE prev_date DATE;
       DECLARE prev_datetime_in DATETIME;
       DECLARE prev_datetime_out DATETIME;
       DECLARE prev_shift_datetime_end DATETIME;
       DECLARE exist_timein DATETIME;
       DECLARE exist_timeout DATETIME;
       DECLARE shift_start_base DATETIME;
       DECLARE shift_end_base DATETIME;
       
       DECLARE time_in_notset DATETIME;
       DECLARE prev_time_in DATETIME;
       DECLARE prev_time_out DATETIME;
       DECLARE prev_shift_start TIME;
       DECLARE prev_shift_end TIME;
       
       -- [1] Check current shift on partner table
       if (select count(*) from ww_time_record where user_id = userid and `date` = dates) = 0 then
          call sp_time_period_populate_user(dates,dates,userid);
       end if;     
       
       -- just to check if there is already an override
       SELECT IF(IFNULL(aux_shift_id,0)=0,shift_id,aux_shift_id) INTO auxshiftid
       FROM `ww_time_record`
       WHERE `user_id`=userid AND `date`=dates LIMIT 1;
       
      
       
       -- and now is the time
       SELECT `time_start`, `time_end`, 
              IFNULL(tscc1.class_value,'') AS `max_preshift`, 
              IFNULL(tscc2.class_value,'') AS `max_postshift`, 
              IFNULL(tscc3.class_value,'') AS `mid_postshift`,
              IFNULL(tscc4.class_value,'') AS `firsthalfend` 
       INTO shift_start, shift_end, MaxPreShift, MaxPostShift, MidPostShift, FirstHalfEnd
       
       FROM `partners` p
       INNER JOIN `ww_users_profile` up ON up.`user_id`=p.`user_id`
       INNER JOIN `ww_time_shift` ts ON ts.`shift_id`=IF(auxshiftid=0,p.`shift_id`,auxshiftid)
       LEFT JOIN time_shift_class tscc1 ON tscc1.shift_id=ts.shift_id AND tscc1.company_id=up.company_id AND tscc1.class_code='MAX-PRESHIFT'
       LEFT JOIN time_shift_class tscc2 ON tscc2.shift_id=ts.shift_id AND tscc2.company_id=up.company_id AND tscc2.class_code='MAX-POSTSHIFT'
       LEFT JOIN time_shift_class tscc3 ON tscc3.shift_id=ts.shift_id AND tscc3.company_id=up.company_id AND tscc3.class_code='MID-POSTSHIFT'
       LEFT JOIN time_shift_class tscc4 ON tscc4.shift_id=ts.shift_id AND tscc4.company_id=up.company_id AND tscc4.class_code='FIRST-HALF-END'
       WHERE p.`user_id` = userid;
       
       
	   SET NewDate=DATE(checktime);
	   SET shift_datetime_start = CONCAT(NewDate,' ',shift_start);
	   SET shift_datetime_end = CONCAT(NewDate,' ',shift_end);
	   SET prev_date = DATE(checktime - INTERVAL 1 DAY);
	   SET shift_start_base = shift_datetime_start - INTERVAL 6 HOUR; -- maxpreshift
	   SET shift_end_base = shift_datetime_end + INTERVAL 10 HOUR; -- maxpostshift
	   SET NewTimeIn = NewDate;
	   SET NewTimeOut = NewDate;
	   SET prev_time_in = (SELECT time_in FROM ww_time_record WHERE user_id=userid AND DATE=prev_date);
	   
	   IF shift_start > shift_end THEN
		SET prev_shift_datetime_end = shift_datetime_end + INTERVAL 8 HOUR;
	   ELSE
		SET prev_shift_datetime_end = CONCAT(prev_date,' ',shift_end) + INTERVAL 8 HOUR;
	   END IF;
	   
	   SET @previous_timeout = '';
	      
	    -- Checking if the sched is nightshift or dayshift
		IF shift_start >= '00:00:00' AND shift_start <= '16:00:00' THEN
			IF TIME(checktime) >= '00:00:00' AND TIME(checktime) <= '06:00:00' THEN
				IF shift_start > shift_end THEN
					SET NewDate = NewDate - INTERVAL 1 DAY;
					SET NewTimeIn = NewDate;
					SET NewTimeOut = NewDate;
				END IF;
			ELSEIF shift_start > shift_end THEN
				SET shift_datetime_end = shift_datetime_end + INTERVAL 1 DAY;
				SET shift_end_base = shift_datetime_end + INTERVAL 8 HOUR;
				SET NewDate = shift_datetime_end - INTERVAL 1 DAY;
				SET NewTimeIn = NewDate;
				SET NewTimeOut = NewDate;
			END IF;
		ELSEIF TIME(checktime) >= '00:00:00' AND TIME(checktime) <= '08:00:00' THEN
				SET NewDate = NewDate - INTERVAL 1 DAY;
				SET NewTimeIn = NewDate;
				SET NewTimeOut = NewDate;	
		ELSEIF shift_start > shift_end THEN
				SET shift_datetime_end = shift_datetime_end + INTERVAL 1 DAY;
				SET shift_end_base = shift_datetime_end + INTERVAL 8 HOUR;
				SET NewDate = shift_datetime_end - INTERVAL 1 DAY;
				SET NewTimeIn = NewDate;
				SET NewTimeOut = NewDate;
		END IF;
		
		 -- [4] Checking for existence of previous record
		SELECT time_in,time_out,record_id, time_start, time_end INTO exist_timein,exist_timeout,rec,prev_shift_start,prev_shift_end
		FROM ww_time_record tr 
		JOIN ww_time_shift ts ON ts.`shift_id` = IF(tr.aux_shift_id=0,tr.`shift_id`,tr.aux_shift_id)
		WHERE tr.user_id=userid AND tr.date = prev_date;
		
		IF rec > 0 AND checktime != '0000-00-00 00:00:00' THEN
			IF (exist_timeout IS NULL OR exist_timeout = '' OR exist_timeout = '0000-00-00 00:00:00') THEN 
				
				IF (prev_shift_start > prev_shift_end) AND (exist_timein != '' OR exist_timein IS NOT NULL OR exist_timein = '0000-00-00 00:00:00') THEN
					SET prev_shift_datetime_end = CONCAT(NewDate,' ',prev_shift_end) + INTERVAL 8 HOUR;
					SET NewDate = prev_date;
				END IF;
				
				IF checktime <= prev_shift_datetime_end AND (prev_time_in IS NOT NULL OR checktime <= shift_start_base)
				THEN
					UPDATE ww_time_record tr 
					SET tr.time_out=checktime,`modified_on`=NOW()
					WHERE tr.user_id=userid AND tr.date= prev_date AND tr.override=0;
					
					SET @previous_timeout=checktime;
				SELECT 'Update 0';
				END IF;
				
			END IF;
			SET prev_time_out = exist_timeout;
		END IF;
		
		
		
		
	-- [4] Checking for existence of record
	-- exist_time_in is the time_in if there's already a record
	-- exist_time_out is the time_out if there's already a record
	
	SELECT `record_id`, `time_in`, `time_out` INTO rec, exist_timein, exist_timeout 
	FROM `time_record` 
	WHERE `user_id`=userid AND `date`=NewDate 
	LIMIT 1;
	
	IF rec > 0 AND checktime != '0000-00-00 00:00:00' THEN
		IF (exist_timein IS NULL OR exist_timein = '' OR exist_timein = '0000-00-00 00:00:00') THEN
			-- UPDATE ww_time_record SET time_in=checktime WHERE user_id=userid AND DATE=NewTimeIn;
			IF checktime >= shift_start_base AND checktime <= shift_end_base THEN
				UPDATE ww_time_record SET time_in=checktime,`modified_on`=NOW() 
				WHERE user_id=userid AND `date`=NewTimeIn AND override=0;				
				SELECT 'Update 1',NewTimeIn,checktime;
			ELSEIF (checktime < shift_datetime_start AND checktime < shift_datetime_end) AND 
				(prev_time_out IS NOT NULL AND checktime != prev_time_out AND prev_time_out != '0000-00-00 00:00:00') THEN
				UPDATE ww_time_record SET time_in=checktime,`modified_on`=NOW() 
				WHERE user_id=userid AND `date`=NewTimeIn AND override=0;	
				SELECT 'Update 2';
			END IF;									
		ELSEIF checktime != exist_timein OR checktime != exist_timeout THEN
			IF exist_timein > checktime THEN
				IF checktime >= shift_start_base AND checktime <= shift_end_base THEN
					UPDATE ww_time_record SET time_out=IF(time_in>checktime,time_in,time_out), time_in=checktime,`modified_on`=NOW() 
					WHERE user_id=userid AND `date`=NewTimeIn AND override=0;
				SELECT 'Update 3';
				END IF;					  
			END IF;
						
			IF exist_timeout IS NULL OR exist_timeout = '' OR exist_timeout = '0000-00-00 00:00:00' THEN
				IF checktime < shift_end_base THEN
					SET @current_timein='';
					SELECT `time_in` INTO @current_timein
					FROM `time_record` 
					WHERE `user_id`=userid AND `date`=NewTimeOut LIMIT 1;
					
					IF @current_timein IS NULL OR @current_timein = '' THEN
						UPDATE ww_time_record 
						SET time_in=checktime, `modified_on`=NOW() 
						WHERE user_id=userid AND `date`=NewTimeOut AND override=0 LIMIT 1;
					ELSE
						UPDATE ww_time_record 
						SET time_out=IF(time_in=checktime, time_out, IF(time_in>checktime,time_out,checktime)), `modified_on`=NOW() 
						WHERE user_id=userid AND `date`=NewTimeOut AND override=0 LIMIT 1;
					END IF;
				SELECT 'Update 4',checktime,shift_end_base,exist_timein,exist_timeout,NewTimeOut;
				END IF;
			ELSEIF exist_timeout < checktime THEN
				UPDATE ww_time_record SET time_out=IF(time_in=checktime, time_out, checktime),`modified_on`=NOW() 
				WHERE user_id=userid AND `date`=NewTimeOut AND override=0;
				SELECT 'Update 5';
			END IF;
		END IF;
		IF exist_timein IS NOT NULL AND (shift_start IS NULL OR shift_start = '00:00:00') THEN 
			UPDATE ww_time_record SET time_out=IF(time_in=checktime, time_out, checktime),`modified_on`=NOW()
			WHERE user_id=userid AND `date`=NewDate;
				SELECT 'Update 6', NewDate;
		END IF;
		IF exist_timein IS NULL AND exist_timeout IS NULL AND prev_time_in IS NOT NULL AND prev_time_in IS NOT NULL THEN 
			IF @previous_timeout = '' THEN
				UPDATE ww_time_record SET time_in=checktime,`modified_on`=NOW()
				WHERE user_id=userid AND `date`=NewDate;
			SELECT 'Update 7',NewDate,checktime;
			END IF;
		END IF;
	ELSE 
		INSERT INTO ww_time_record (`user_id`,`date`,`time_in`) VALUES (userid,NewDate,checktime);
		IF checktime = prev_time_out AND prev_time_out IS NOT NULL THEN 
			UPDATE ww_time_record SET time_in=NULL,`modified_on`=NOW() 
			WHERE user_id=userid AND `date`=NewTimeIn AND override=0;
				SELECT 'Insert 1';
		END IF;
		
	END IF;
	
			
	-- SELECT rec,checktime,prev_time_out, prev_shift_datetime_end, NewDate,shift_start,shift_end,shift_datetime_start,shift_datetime_end,prev_date,prev_shift_datetime_end,shift_start_base,shift_end_base, exist_timein,exist_timeout,NewTimeIn,NewTimeOut,prev_time_in,prev_time_out;
 
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_record_raw_process_new` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_record_raw_process_new` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_record_raw_process_new`(IN userid INT(11), IN dates DATE, IN checktime DATETIME)
BEGIN
    
    DECLARE rec INT(11) DEFAULT 0;
    DECLARE shift_start TIME;
    DECLARE shift_end TIME;
    
    DECLARE NewTimeIn DATETIME;
    DECLARE NewTimeOut DATETIME;
    DECLARE NewDate DATE;
    DECLARE CurTimeIN DATETIME;
    DECLARE CurTimeOUT DATETIME;
    DECLARE CurShiftID INT(11) DEFAULT 0;
    DECLARE CurShift VARCHAR(32) DEFAULT '';
    
    DECLARE shift_datetime_start DATETIME;
    DECLARE shift_datetime_end DATETIME;
    DECLARE msg VARCHAR(64) DEFAULT '';
    
    
    -- [1] GET AND POPULATE THE NEEDED TIME RECORD
    IF (SELECT COUNT(*) FROM `ww_time_record` WHERE `user_id` = userid AND `date` = dates LIMIT 1) = 0 THEN
       -- better include partners employment date in the future
       CALL sp_time_period_populate_user(dates, dates + INTERVAL 2 DAY, userid);
    END IF;     
    
       
    -- [3] GET CURRENT ATTENDANCE RECORD
    SELECT tr.`record_id`, `time_start`, `time_end`, 
           IF(IFNULL(tr.`aux_shift_id`,0)=0, tr.`shift_id`, tr.`aux_shift_id`), IF(IFNULL(tr.`aux_shift_id`,0)=0, tr.`shift`, tr.`aux_shift`), 
           IFNULL(`time_in`, '0000-00-00 00:00:00'), IFNULL(`time_out`, '0000-00-00 00:00:00') 
    INTO rec, shift_start, shift_end, CurShiftID, CurShift, CurTimeIN, CurTimeOUT
    FROM `ww_time_record` tr
    JOIN `ww_time_shift` ts ON ts.`shift_id`=IF(tr.`aux_shift_id`=0, tr.`shift_id`, tr.`aux_shift_id`)
    WHERE tr.`user_id` = userid AND tr.`date` = dates LIMIT 1;
    
    
    SET @cur_date = DATE(checktime);
    SET @prv_date = @cur_date - INTERVAL 1 DAY;
    SET @nxt_date = IF(shift_start > shift_end, @cur_date + INTERVAL 1 DAY, @cur_date);
    SET shift_datetime_start = CONCAT(@cur_date,' ',shift_start);
    SET shift_datetime_end = CONCAT(@nxt_date,' ',shift_end);
    SET @restday = 0;
    
    
    -- [4] IF RESTDAY/OFF
    IF CurShift = 'RESTDAY' OR CurShift = 'OFF'  THEN
       SET @restday = 1;
    END IF;
    
    
    -- [5] VALIDATE AND UPDATE
    IF rec = 0 THEN
       INSERT INTO `ww_time_record` (`user_id`, `date`, `time_in`) 
       SELECT userid, dates, checktime;
       SET msg = 'Insert 1N';
    ELSE
       BEGIN
       DECLARE prevrec INT(11) DEFAULT 0;
       DECLARE prevshift_start TIME;
       DECLARE prevshift_end TIME;
       DECLARE prevCurTimeIN DATETIME;
       DECLARE prevCurTimeOUT DATETIME;
       DECLARE prevCurShiftID INT(11) DEFAULT 0;
       DECLARE prevCurShift VARCHAR(32) DEFAULT '';
       DECLARE prevshift_datetime_start DATETIME;
       DECLARE prevshift_datetime_end DATETIME;
              
       SELECT tr.`record_id`, `time_start`, `time_end`, 
              IF(IFNULL(tr.`aux_shift_id`,0)=0, tr.`shift_id`, tr.`aux_shift_id`), IF(IFNULL(tr.`aux_shift_id`,0)=0, tr.`shift`, tr.`aux_shift`), 
              IFNULL(`time_in`, '0000-00-00 00:00:00'), IFNULL(`time_out`, '0000-00-00 00:00:00') 
       INTO prevrec, prevshift_start, prevshift_end, prevCurShiftID, prevCurShift, prevCurTimeIN, prevCurTimeOUT
       FROM `ww_time_record` tr
       JOIN `ww_time_shift` ts ON ts.`shift_id`=IF(tr.`aux_shift_id`=0, tr.`shift_id`, tr.`aux_shift_id`)
       WHERE tr.`user_id` = userid AND tr.`date` = @prv_date LIMIT 1;
       
       IF prevrec > 0 THEN
          SET prevshift_datetime_start = CONCAT(@prv_date,' ',prevshift_start);
          SET prevshift_datetime_end = CONCAT(IF(prevshift_start > prevshift_end, @cur_date, @prv_date),' ',prevshift_end);
       END IF;
       SET @bypass = 0;
          
       IF CurTimeIN = '0000-00-00 00:00:00' THEN  -- TIMEIN
          
          IF prevrec > 0 THEN
             IF prevCurTimeOUT = '0000-00-00 00:00:00' AND checktime < (shift_datetime_start - INTERVAL 2 HOUR) AND
                (prevCurShift <> 'RESTDAY' AND prevCurShift <> 'OFF') THEN -- using 2hrs interval
                IF checktime = CurTimeIN THEN
                   SET msg = CONCAT(msg,'Update bypass Prev OUT');
                   SET @bypass = 1;
                ELSE
                   SET msg = CONCAT(msg,'Update Prev OUT - ');
                   SET @bypass = 1;
                   UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
                   WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;
                END IF;
             ELSE
                IF CurShift = 'RESTDAY' OR CurShift = 'OFF' THEN
                   IF checktime < (prevshift_datetime_start + INTERVAL 24 HOUR) THEN -- using 24hrs interval from previous shift-start
                      SET msg = CONCAT(msg,'Update RESTDAY - ');
                      SET @bypass = 1;
                      UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
                      WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;
                   ELSE
                      SET msg = CONCAT(msg,'Update RESTDAY 2 - ');
                      SET @bypass = 1;
                      UPDATE `ww_time_record` SET `time_in` = checktime, `modified_on` = NOW()
                      WHERE `record_id` = rec AND `override` = 0 LIMIT 1;
                   END IF;
                END IF;
                IF prevCurTimeOUT <> '0000-00-00 00:00:00' THEN
                   IF prevCurTimeOUT = checktime THEN
                      SET msg = 'Update bypass Prev OUT';
                      SET @bypass = 1;
                   END IF;
                ELSE
                   IF prevCurShift = 'RESTDAY' OR prevCurShift = 'OFF' THEN
                      SET msg = CONCAT(msg,'Update RESTDAY 3 - ');
                      SET @bypass = 1;
                      UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
                      WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;
                   END IF;
                END IF;
             END IF;
          END IF;
          
          IF @bypass = 0 THEN
             IF checktime >= shift_datetime_end THEN
                SET msg = CONCAT(msg,'Update OUT - ');
                UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
                WHERE `record_id` = rec AND `override` = 0 LIMIT 1;
             ELSE
                SET msg = CONCAT(msg,'Update IN - ');
                UPDATE `ww_time_record` SET `time_in` = checktime, `modified_on` = NOW()
                WHERE `record_id` = rec AND `override` = 0 LIMIT 1;
             END IF;
          END IF;
          
       ELSE  -- TIMEOUT
          
          IF prevrec > 0 AND checktime < (shift_datetime_start - INTERVAL 2 HOUR) THEN -- using 2hrs interval
             SET msg = CONCAT(msg,'Update OUT Prev OUT - ');
             SET @bypass = 1;
             UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
             WHERE `record_id` = prevrec AND `override` = 0 LIMIT 1;
          END IF;
          
          IF @bypass = 0 THEN
             IF CurTimeIN = checktime THEN
                SET msg = 'Update bypass OUT';
                SET @bypass = 1;
             ELSE
                SET msg = CONCAT(msg,'Update OUT Current - ');
                UPDATE `ww_time_record` SET `time_out` = checktime, `modified_on` = NOW()
                WHERE `record_id` = rec AND `override` = 0 LIMIT 1;
             END IF;
          END IF;
       END IF;
       
       -- HOW ABOUT WE ALTER TIMEIN THAT WAS SUPPOSED TO BE TIMEOUT
       -- MINUS MINUS 2 DAYS: NEXT
       
       -- [[
       SELECT prevrec, msg, @cur_date, @prv_date, @nxt_date, checktime, prevshift_datetime_start, prevshift_datetime_end, prevCurShiftID, prevCurShift, prevCurTimeIN, prevCurTimeOUT;
       -- ]]
       END;
    END IF;
    
    -- [[
    SELECT rec, msg, @cur_date, @prv_date, @nxt_date, checktime, shift_datetime_start, shift_datetime_end, CurShiftID, CurShift, CurTimeIN, CurTimeOUT;
    -- ]]
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_record_raw_reupload` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_record_raw_reupload` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_record_raw_reupload`(IN userid INT(11),IN dates DATE)
BEGIN
     
     /* Revisions
        2017-05-16 : Time-record update if there is an existing time-record-raw
     */
     
     DECLARE dates_pre DATE;
     DECLARE dates_nex DATE; 
     
     -- [1] get date range but do not include manual override by the timekeeper
     SELECT `date` INTO dates_pre 
     FROM `ww_time_record` WHERE `user_id` = userid AND `override` = 0 AND `date` = dates - INTERVAL 1 DAY LIMIT 1;
     
     SELECT `date` INTO dates_nex 
     FROM `ww_time_record` WHERE `user_id` = userid AND `override` = 0 AND `date` = dates + INTERVAL 1 DAY LIMIT 1;
     
     
     -- [2] reset in-out
     UPDATE `ww_time_record` SET time_in = NULL, time_out = NULL
     WHERE `date` IN (dates,dates_pre,dates_nex) AND `user_id` = userid AND `override` = 0;
     
     
     -- [3] redo re-process
     UPDATE `ww_time_record_raw` trr SET trr.`last_processed`=NOW()
     WHERE trr.`date` IN (dates,dates_pre,dates_nex) AND trr.`user_id` = userid;
     
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_record_reminder` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_record_reminder` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_record_reminder`()
BEGIN
    
    DECLARE done TINYINT(1) DEFAULT 0;
    DECLARE userid INT(11);
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE forms CURSOR FOR
       SELECT iar.`user_id`
       FROM report_time_iar iar
       JOIN `ww_time_period` tp ON tp.`deleted`=0 AND CURDATE() BETWEEN tp.`date_from` AND tp.`date_to`
       JOIN `ww_users` u ON u.`user_id`=iar.`user_id` AND u.`active`=1 AND u.`deleted`=0
       JOIN `ww_partners` p ON p.`user_id`=u.`user_id` AND p.`employment_type_id`<>9
       WHERE iar.`date` BETWEEN tp.`date_from` AND tp.`date_to` AND iar.`company_id`=tp.`company_id` -- AND iar.user_id=65
       GROUP BY 1;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
	OPEN forms;
	REPEAT
	   FETCH forms INTO userid;
	   IF NOT done THEN
          SET rec = rec + 1;
          CALL sp_time_record_reminder_user(userid);
	   END IF;
	UNTIL done END REPEAT;
    CLOSE forms;
	   
	SELECT rec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_record_reminder_user` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_record_reminder_user` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_record_reminder_user`(IN userid INT(11))
BEGIN
    
    DECLARE done TINYINT(1) DEFAULT 0;
    
    DECLARE formsid INT(11);
    DECLARE fullname VARCHAR(128);
    DECLARE dateid DATE;
    DECLARE paydate DATE;
    DECLARE cutoff DATE;
    DECLARE shift VARCHAR(32);
    DECLARE timefrom DATETIME;
    DECLARE timeto DATETIME;
    DECLARE particulars VARCHAR(64);
    DECLARE datefrom DATE;
    DECLARE dateto DATE;
    DECLARE records INT(11) DEFAULT 0;
    
    DECLARE forms_user CURSOR FOR
       SELECT tp.`payroll_date`, tp.`cutoff`, tp.`date_from`, tp.`date_to`, 
              iar.`date`, iar.`shift`, iar.`time_from`, iar.`time_to`, iar.`particulars`
       FROM `report_time_iar` iar
       JOIN `ww_time_period` tp ON tp.`deleted`=0 AND CURDATE() BETWEEN tp.`date_from` AND tp.`date_to`
       JOIN `ww_partners` p ON p.`user_id` = iar.`user_id` AND p.`employment_type_id` <> 9
       WHERE iar.`date` BETWEEN tp.`date_from` AND tp.`date_to` AND 
             iar.`date` <= CURDATE() - INTERVAL 1 DAY AND
             IF(iar.`particulars` IN ('LATE','UNDERTIME'), iar.`date` = CURDATE() - INTERVAL 1 DAY, 1) AND
             iar.`particulars` <> 'LWOP' AND
             iar.`company_id`=tp.`company_id` AND 
             iar.`user_id`=userid
             GROUP BY iar.date
       ORDER BY 1,2;
    
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
        
    SET @emailto = '';
    SET @username = '';
    SET @emailsubject = '';
    SET @emailbody = '';
    SET @tbody = '';
    SET @bcc = '';
    SET @url = '';
    SET @pdate = '';
    SET @cdate = '';
    SET @pfrom = '';
    SET @pto = '';      
    
    -- template 
    SELECT `subject`,`body` INTO @emailsubject, @emailbody
    FROM `ww_system_template`
    WHERE `code`='TIME-RECORD-REMINDER' AND deleted=0 LIMIT 1;
    
    
    IF @emailsubject <> '' THEN
       
	   SELECT u.`email`, up.firstname INTO @emailto, @username
	   FROM `users` u, `users_profile` up
	   WHERE u.`user_id`=up.`user_id` AND u.`user_id`=userid LIMIT 1;
       
	   IF @emailto <> '' THEN
	      OPEN forms_user;
	      REPEAT
	         FETCH forms_user INTO paydate, cutoff, datefrom, dateto, dateid, shift, timefrom, timeto, particulars;
	         IF NOT done THEN
	            SET records = records + 1;
	            
	            SET @pdate = paydate;
	            SET @cdate = cutoff;
	            SET @pfrom = datefrom;
	            SET @pto   = dateto;
	            
                    SET @tbody = CONCAT(@tbody,'<tr>');
                    SET @tbody = CONCAT(@tbody,'<td>',dateid,'</td>');	
                    SET @tbody = CONCAT(@tbody,'<td>',shift,'</td>');	
                    SET @tbody = CONCAT(@tbody,'<td>',IFNULL(timefrom,'&nbsp;'),'</td>');	
                    SET @tbody = CONCAT(@tbody,'<td>',IFNULL(timeto,'&nbsp;'),'</td>');	
                    SET @tbody = CONCAT(@tbody,'<td style="text-align:left">',particulars,'</td>');	
                    SET @tbody = CONCAT(@tbody,'</tr>');
	         END IF;
	      UNTIL done END REPEAT;
          CLOSE forms_user;
          
          IF @tbody <> '' THEN
             -- {{link}}
             SET @url = (SELECT `value` FROM `ww_config` WHERE `key`='URL' LIMIT  1);
	     IF RIGHT(TRIM(@url),1) <> '/' THEN
	         SET @url = CONCAT(TRIM(@url),'/');
	     END IF;
	         
             SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='form_application' LIMIT 1);
             SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
          
             SET @emailbody = REPLACE(@emailbody, '{{alias}}', @username);
             SET @emailbody = REPLACE(@emailbody, '{{table_body}}', @tbody);
             SET @emailbody = REPLACE(@emailbody, '{{payrolldate}}', DATE_FORMAT(@pdate,'%M %e, %Y - %W'));
             SET @emailbody = REPLACE(@emailbody, '{{cutoff}}', DATE_FORMAT(@cdate,'%M %e, %Y - %W'));
             SET @emailbody = REPLACE(@emailbody, '{{datefrom}}', DATE_FORMAT(@pfrom,'%b-%e'));
             SET @emailbody = REPLACE(@emailbody, '{{dateto}}', DATE_FORMAT(@pto,'%b-%e'));
             
             SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
             SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
             SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
             SET @urgent = '';
             SET @cut_off = '';
             
             SELECT cutoff, 'URGENT!!! ' INTO @cut_off, @urgent
             FROM ww_time_period tp, users_profile up
             WHERE tp.deleted=0 AND tp.company_id = up.company_id AND up.`user_id`=userid AND 
                   CURDATE() BETWEEN (cutoff - INTERVAL 2 DAY) AND cutoff LIMIT 1;
             
             IF TRIM(@urgent) <> '' THEN
                SET @emailsubject = CONCAT(@urgent, @emailsubject, ' CUT-OFF is ', DATE_FORMAT(@cut_off,'%M %e %W'));
             END IF;
	   
          
             INSERT INTO `ww_system_email_queue` (`to`,`subject`,`body`,`bcc`)
             SELECT @emailto,@emailsubject,@emailbody,@bcc;
             
             -- SELECT @emailto, @emailbody, records;
          ELSE
             SELECT 'no record';
          END IF;
       ELSE
          SELECT 'no recipient';
       END IF;
    
    ELSE
       SELECT 'template';
    END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_record_sms_reminder` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_record_sms_reminder` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_record_sms_reminder`(IN companyid INT(11), IN dateid DATE)
BEGIN
    
    INSERT INTO `ww_system_sms_queue` (`to`,`subject`,`body`)
    SELECT 
       REPLACE(REPLACE(TRIM(pp.`key_value`),'-',''),'+',''), 
       IF(IFNULL(`nickname`,'')='',`firstname`,`nickname`),
       REPLACE(
       REPLACE(
       REPLACE(`body`, 
          '{{alias}}', IF(IFNULL(`nickname`,'')='',`firstname`,`nickname`)), 
          '{{particular}}', iar.`particulars`),
          '{{date}}', DATE_FORMAT(iar.`date`,'%b-%e %a'))particular
    FROM `report_time_iar` iar
    JOIN `users_profile` up ON up.`user_id`=iar.`user_id` 
    JOIN `users` u ON u.user_id=up.user_id AND u.active=1
    LEFT JOIN `ww_system_template` st ON st.`code`='SMS-TIME-REMINDER'
    LEFT JOIN `ww_partners_personal` pp ON pp.`key`='mobile' AND pp.`partner_id`=up.`partner_id`
    WHERE iar.`particulars`<>'LWOP' AND 
          IF(dateid=0,iar.`date`=(CURDATE()-INTERVAL 1 DAY),iar.`date`=dateid) AND
          REPLACE(TRIM(pp.`key_value`),'-','')<>'' AND pp.`sequence`=1 AND
          IF(companyid=0,1,up.company_id=companyid);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_record_sms_reminder_all` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_record_sms_reminder_all` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_record_sms_reminder_all`()
BEGIN
    DECLARE pdone TINYINT(11) DEFAULT 0;
    DECLARE prec INT(11) DEFAULT 0;
    
    DECLARE recordid INT;
    DECLARE periodid INT;
    DECLARE datefrom DATE;
    DECLARE dateto DATE;
    DECLARE cutoff DATE; 
    DECLARE companyid INT;
    
    
    -- STEP 1:
    -- SCAN ALL DATES;
    -- PUT THE RESULT ONTO A TEMPORARY TABLE (CURSOR)
    -- 
     
    DECLARE periods CURSOR FOR
       SELECT tp.`period_id`, tp.`date_from`, tp.`date_to`, tp.`cutoff`, tp.`company_id`
       FROM `ww_time_period` tp
       WHERE tp.`closed`=0 AND tp.`deleted`=0 AND 
             CURDATE() BETWEEN tp.`date_from` AND IF(tp.`cutoff` > tp.`date_to`, tp.`cutoff`, tp.`date_to`)
             -- AND tp.`company_id`=5
             ;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET pdone = 1;
 
 
    -- START TRANSACTION;
        
    OPEN periods;
    
    REPEAT
       FETCH periods INTO periodid, datefrom, dateto, cutoff, companyid;
       
       IF NOT pdone THEN
           SET prec = prec + 1;
           
           -- execute sms sending
           CALL `sp_time_record_sms_reminder`(companyid, 0);
           
       END IF;
       
    UNTIL pdone END REPEAT;
    
    CLOSE periods;
    
    SELECT prec;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_record_tardiness_process` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_record_tardiness_process` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_record_tardiness_process`(IN pdate DATE)
BEGIN
    
    DECLARE time_record_tardiness_process TINYINT(1) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    
    DECLARE nuserid INT(11);
    DECLARE cidnum VARCHAR(16);
    DECLARE ninstance DECIMAL(5,2);
    DECLARE ntotalmin DECIMAL(5,2);
    
    -- [1]
    DECLARE tardiness_process CURSOR FOR
    SELECT p.`user_id`, p.`id_number`, COUNT(trs.`date`) instances, SUM(trs.late) total_minutes 
    FROM `ww_partners` p
    JOIN `ww_time_record_summary` trs ON trs.`deleted`=0 AND trs.`user_id`=p.`user_id` AND trs.late>0
    JOIN `ww_partners_employment_status` pes ON pes.`deleted`=0 AND pes.`active`=1 AND pes.`employment_status_id`=p.`status_id`
    WHERE p.`deleted`=0 AND 
          YEAR(trs.`date`)=YEAR(pdate) AND 
          MONTH(trs.`date`)=MONTH(pdate) AND 
          p.`employment_type_id`<>9
    GROUP BY p.`user_id`;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET time_record_tardiness_process = 1;
    
    -- [2]
    OPEN tardiness_process;
    
    REPEAT
       FETCH tardiness_process INTO nuserid, cidnum, ninstance, ntotalmin;
       
       IF NOT time_record_tardiness_process THEN
          SET rec = rec + 1;
          
          -- [1]
          INSERT INTO `ww_time_record_tardiness` (`period_year`,`period_month`,`user_id`,`id_number`,`instances`,`total_minutes`)
          SELECT YEAR(pdate), MONTH(pdate), nuserid, cidnum, ninstance, ntotalmin 
          ON DUPLICATE KEY UPDATE 
             `instances`     = VALUES(`instances`),
             `total_minutes` = VALUES(`total_minutes`),
             `modified_on`   = NOW();
          
          -- [2]
          INSERT INTO `ww_time_record_tardiness_detail` (`period_year`,`period_month`,`user_id`,`date`,`late`)
          SELECT YEAR(pdate), MONTH(pdate), `user_id`, `date`, `late`
          FROM `ww_time_record_summary`
          WHERE `deleted` = 0 AND 
                `user_id` = nuserid AND `late` > 0 AND
                YEAR(`date`) = YEAR(pdate) AND MONTH(`date`) = MONTH(pdate)
          ON DUPLICATE KEY UPDATE
             `late` = VALUES(`late`),
             `modified_on` = NOW();
          
       END IF;
       
    UNTIL time_record_tardiness_process END REPEAT;
    
    CLOSE tardiness_process;
       
    SELECT rec;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_server_reminder` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_server_reminder` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_server_reminder`()
BEGIN
    DECLARE done TINYINT(11) DEFAULT 0;
    DECLARE rec INT(11) DEFAULT 0;
    DECLARE loc VARCHAR(64);
    DECLARE pc INT(11);
    DECLARE wr INT(11);
    DECLARE nr INT(11);
    
    DECLARE locations CURSOR FOR
       SELECT ul.`location`, 
       COUNT(p.`user_id`)partner_count, 
       SUM(IF(IFNULL(tr.`time_in`,tr.`aux_time_in`) IS NULL, 0, 1))with_record,
       SUM(IF(IFNULL(tr.`time_in`,tr.`aux_time_in`) IS NULL, 1, 0))no_record
       FROM `ww_users_location` ul
       JOIN `users_profile` up ON up.`location_id`=ul.`location_id`
       JOIN `partners` p ON p.`user_id`=up.`user_id` AND IFNULL(p.resigned_date,'0000-00-00')='0000-00-00'
       LEFT JOIN `time_record` tr ON tr.`user_id`=p.`user_id` AND tr.`date` = (CURDATE()-INTERVAL 1 DAY)
       WHERE ul.`deleted` = 0
       GROUP BY 1;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    
    
    SET @perc = 0;
    SET @tbody = '';
    SET @tprop = '<td style="padding: 8px;vertical-align: top;border-top: 1px solid #dddddd;">';
    SET @system_fromaddress = (SELECT `value` FROM `ww_config` WHERE `key`='from_address' LIMIT  1);
        
    OPEN locations;
    
    REPEAT
       FETCH locations INTO loc, pc, wr, nr;
       
       SET @perc = 0;
       IF NOT done THEN
          SET @perc = (nr / pc) * 100;
          IF @perc > 50 THEN
             SET rec = rec + 1;
          END IF;
          SET @tbody = CONCAT(@tbody,'<tr>');
          SET @tbody = CONCAT(@tbody,@tprop,loc,'</td>');
          SET @tbody = CONCAT(@tbody,@tprop,pc,'</td>');
          SET @tbody = CONCAT(@tbody,@tprop,wr,'</td>');
          SET @tbody = CONCAT(@tbody,@tprop,nr,'</td>');
          SET @tbody = CONCAT(@tbody,@tprop,IF(@perc>50,'<b>',''),ROUND(@perc,0),'%',IF(@perc>50,'</b>',''),'</td>');
          SET @tbody = CONCAT(@tbody,'</tr>');
       END IF;
        
    UNTIL done END REPEAT;
    
    CLOSE locations;
    
    IF rec > 0 THEN
           
       -- retrieve the email template
       SET @emailto = @system_fromaddress;
       SET @emailcc = '';
       SET @emailbcc = (SELECT IFNULL(`value`,'') FROM `ww_config` WHERE `key`='email_tk_officer' LIMIT  1);
       SET @emailsubject = '';
       SET @emailbody = '';
       
       SELECT `subject`,`body` INTO @emailsubject, @emailbody
       FROM `ww_system_template` WHERE `code` = 'TIME-SERVER-REMINDER' LIMIT 1;
           
       IF @emailsubject <> '' THEN
          -- {{table_body}}
          SET @emailbody = REPLACE(@emailbody, '{{table_body}}', @tbody);
          
          -- {{link}}
          SET @url = (SELECT `value` FROM `ww_config` WHERE `key`='URL' LIMIT  1);
	      IF RIGHT(TRIM(@url),1) <> '/' THEN
	         SET @url = CONCAT(TRIM(@url),'/');
	      END IF;
	         
          -- SET @route = (SELECT `route` FROM `ww_modules` WHERE `mod_code`='form_application_manage' LIMIT 1);
          SET @system_title = (SELECT `value` FROM `ww_config` WHERE `key`='application_title' LIMIT  1);
          SET @emailbody = REPLACE(@emailbody, '{{system_url}}', @url);
          SET @emailbody = REPLACE(@emailbody, '{{system_route}}', CONCAT(@url,@route));
          SET @emailbody = REPLACE(@emailbody, '{{system_title}}', @system_title);
          
          -- {{insert to table}}
          INSERT INTO `ww_system_email_queue` (`to`,`cc`,`bcc`,`subject`,`body`)
          SELECT @emailto, @emailcc, @emailbcc, @emailsubject, @emailbody;
          
          -- SELECT @emailbody;
       END IF;
       
    END IF;
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_shift_class_company` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_shift_class_company` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_shift_class_company`(IN shiftid INT(11))
BEGIN
    
    INSERT INTO `ww_time_shift_class_company` 
    (`shift_id`, `company_id`, `class_id`, `class_value`, `employment_status_id`, `employment_type_id`, `partners_id`)  
    
    SELECT ts.`shift_id`, uc.`company_id`, tsc.`class_id`, tsc.`default_value`, 'ALL' `employment_status_id`, 'ALL' `employment_type_id`, 0 `partners_id`
    FROM `ww_time_shift_class` tsc
    JOIN `ww_users_company` uc ON uc.`deleted`=0
    JOIN `ww_time_shift` ts ON ts.`deleted`=0 AND ts.shift <> 'Restday' AND tsc.`class_id` IN (1,3,29,30)
    WHERE tsc.`default_value` IS NOT NULL AND ts.`shift_id`=shiftid
    
    ON DUPLICATE KEY UPDATE `deleted` = 0;
END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_shift_insert` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_shift_insert` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_shift_insert`(IN calendarid INT, IN weekno INT, IN shiftid INT)
BEGIN
       INSERT INTO `ww_time_shift_weekly_calendar` (`calendar_id`, `week_no`, `shift_id`)
       SELECT calendarid, weekno, shiftid
       ON DUPLICATE KEY UPDATE `shift_id`=shiftid;
       
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_time_shift_process` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_time_shift_process` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_time_shift_process`(IN shiftid INT(11))
BEGIN
       /* This will insert-update time_record
          last change: 2016-04-21 initial
                       2016-04-21 
       */
       DELETE FROM ww_time_shift_class_company
       WHERE shift_id=shiftid;
       
       INSERT INTO `ww_time_shift_class_company`
       (shift_id, company_id, class_id, class_value, employment_status_id, employment_type_id, partners_id)
       
       SELECT  ts.`shift_id`, tsati.`apply_to_id`, tsc.`class_id`, 
       
              CASE tsc.class_id 
                   WHEN 1 THEN  -- WORKING-HOURS
                        IF(ts.time_start < ts.time_end,
				-- dayshift
				HOUR(TIMEDIFF(time_end,ts.time_start)) - 1,
				-- nightshift
				TIMESTAMPDIFF(HOUR,CONCAT(DATE(NOW()) - INTERVAL 1 DAY,' ',ts.time_start),CONCAT(DATE(NOW()),' ',ts.time_end))-1)
		   WHEN 3 THEN -- GRACE-PERIOD-IN-MINUTES
                        tsc.`default_value`
                   WHEN 4 THEN -- HALFDAY TAGGING (IN HOURS)
                        TIME(CONCAT(DATE(DATE(NOW())),' ',ts.time_start) + INTERVAL 4 HOUR)
                   WHEN 6 THEN -- FIRST-HALF-END (IN HOURS)
                        TIME(CONCAT(DATE(DATE(NOW())),' ',ts.time_start) + INTERVAL 4 HOUR)
                   WHEN 9 THEN -- SECOND-HALF-GRACE-IN-MINUTES
                        0
                   WHEN 10 THEN -- MAX-PRESHIFT (IN TIME-FORMAT OR MINUS 2 HOURS FROM TIME-START)
                        TIME_FORMAT(CONCAT(CURDATE(),' ',ts.`time_start`) - INTERVAL 120 MINUTE, '%H:%i:%s')
                   WHEN 14 THEN -- MAX-POSTSHIFT (IN TIME-FORMAT OR PLUS 12 HOURS AND 59 MINUTES AFTER TIME-END)
                        TIME_FORMAT(CONCAT(CURDATE(),' ',ts.`time_end`) + INTERVAL 779 MINUTE, '%H:%i:%s')
                   /*WHEN 24 THEN -- FLEXIBLE-SHIFT: DEFAULT IS 0-NON FLEXI TAG
                        0*/
                   WHEN 28 THEN -- BREAK-IN-MINUTES: DEFAULT IS 60 MINUTES
                        60
                   WHEN 29 THEN  -- NIGHT-DIFF-START: DEFAULT IS 10PM
                        tsc.`default_value` 
                   WHEN 30 THEN  -- NIGHT-DIFF-END: DEFAULT IS 6AM
                        tsc.`default_value` 
                   ELSE ''
              END alt_value,
       
              'ALL', 'ALL', 'NONE'
              -- For checking: ts.`shift`, ts.`time_start`, ts.`time_end`, tsc.`default_value`, tsc.`class_code`
       FROM ww_time_shift_class tsc
       INNER JOIN ww_time_shift_apply_to_id tsati ON tsati.`apply_to` = 2
       INNER JOIN ww_time_shift ts ON ts.`deleted`=0 AND ts.`shift_id`=tsati.`shift_id`
       WHERE tsc.`deleted`=0 AND tsc.`class_id` <> 24
       AND ts.shift_id=shiftid
       ON DUPLICATE KEY UPDATE 
              `deleted`=VALUES(`deleted`);
       
    END */$$
DELIMITER ;

/* Procedure structure for procedure `sp_truncate_payroll_table` */

/*!50003 DROP PROCEDURE IF EXISTS  `sp_truncate_payroll_table` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`emplopad`@`%` PROCEDURE `sp_truncate_payroll_table`()
BEGIN
	truncate ww_payroll_account;
	truncate ww_payroll_bonus;
	TRUNCATE ww_payroll_bonus_accrual;
	TRUNCATE ww_payroll_bonus_employee;
	TRUNCATE ww_payroll_closed_summary;
	TRUNCATE ww_payroll_closed_transaction;
	TRUNCATE ww_payroll_current_transaction;
	TRUNCATE ww_payroll_entry_batch;
	TRUNCATE ww_payroll_entry_batch_employee;
	TRUNCATE ww_payroll_entry_recurring;
	TRUNCATE ww_payroll_entry_recurring_employee;
	TRUNCATE ww_payroll_loan;
	TRUNCATE ww_payroll_location;
	TRUNCATE ww_payroll_partners_contribution;
	TRUNCATE ww_payroll_partners_loan;
	TRUNCATE ww_payroll_partners_loan_payment;
	TRUNCATE ww_payroll_period;
	TRUNCATE ww_payroll_period_apply_to;
    END */$$
DELIMITER ;

/*Table structure for table `applicant_details` */

DROP TABLE IF EXISTS `applicant_details`;

/*!50001 DROP VIEW IF EXISTS `applicant_details` */;
/*!50001 DROP TABLE IF EXISTS `applicant_details` */;

/*!50001 CREATE TABLE  `applicant_details`(
 `recruit_id` int(11) unsigned ,
 `position_desired` longtext ,
 `desired_salary` longtext ,
 `fullname` varchar(66) ,
 `firstname` varchar(32) ,
 `middlename` varchar(32) ,
 `lastname` varchar(32) ,
 `birthdate` date ,
 `nickname` varchar(32) ,
 `gender` enum('Male','Female') ,
 `age` tinyint(3) unsigned ,
 `present_address_no` longtext ,
 `present_address_street` longtext ,
 `present_address_village` longtext ,
 `present_address_barangay` longtext ,
 `present_address_town` longtext ,
 `present_address_city_town` longtext ,
 `present_address_province` longtext ,
 `present_address_country` longtext ,
 `present_address` longtext ,
 `present_province` longtext ,
 `phone` longtext ,
 `mobile` longtext ,
 `birth_place` longtext ,
 `height` longtext ,
 `weight` longtext ,
 `religion` longtext ,
 `citizenship` longtext ,
 `civil_status` longtext ,
 `tin_number` longtext ,
 `sss_number` longtext ,
 `pagibig_number` longtext ,
 `philhealth_number` longtext ,
 `emergency_name` longtext ,
 `emergency_phone` longtext ,
 `emergency_relationship` longtext ,
 `language` longtext ,
 `dialect` longtext ,
 `interests_hobbies` longtext ,
 `machine_operated` longtext ,
 `driver_license` longtext ,
 `driver_type_license` longtext ,
 `prc_license` longtext ,
 `prc_type_license` longtext ,
 `prc_license_no` longtext ,
 `prc_date_expiration` longtext ,
 `illness_question` longtext ,
 `illness_yes` longtext ,
 `trial_court` longtext ,
 `how_hiring_heard` longtext ,
 `work_start` longtext ,
 `referred_employee` longtext ,
 `emergency_ddress` longtext ,
 `recruitment_date` date 
)*/;

/*Table structure for table `applicant_personal` */

DROP TABLE IF EXISTS `applicant_personal`;

/*!50001 DROP VIEW IF EXISTS `applicant_personal` */;
/*!50001 DROP TABLE IF EXISTS `applicant_personal` */;

/*!50001 CREATE TABLE  `applicant_personal`(
 `recruit_id` int(11) unsigned ,
 `position_desired` longtext ,
 `desired_salary` longtext ,
 `present_address_no` longtext ,
 `present_address_street` longtext ,
 `present_address_village` longtext ,
 `present_address_barangay` longtext ,
 `present_address_town` longtext ,
 `present_address_city_town` longtext ,
 `present_address_province` longtext ,
 `present_address_country` longtext ,
 `phone` longtext ,
 `mobile` longtext ,
 `birth_place` longtext ,
 `height` longtext ,
 `weight` longtext ,
 `religion` longtext ,
 `nationality` longtext ,
 `civil_status` longtext ,
 `tin_number` longtext ,
 `sss_number` longtext ,
 `philhealth_number` longtext ,
 `pagibig_number` longtext ,
 `emergency_name` longtext ,
 `emergency_phone` longtext ,
 `emergency_relationship` longtext ,
 `emergency_address` longtext ,
 `emergency_city` longtext ,
 `emergency_country` longtext ,
 `language` longtext ,
 `dialect` longtext ,
 `interests_hobbies` longtext ,
 `machine_operated` longtext ,
 `driver_license` longtext ,
 `driver_type_license` longtext ,
 `prc_license` longtext ,
 `prc_type_license` longtext ,
 `prc_license_no` longtext ,
 `prc_date_expiration` longtext ,
 `illness_question` longtext ,
 `illness_yes` longtext ,
 `trial_court` longtext ,
 `how_hiring_heard` longtext ,
 `work_start` longtext ,
 `referred_employee` longtext 
)*/;

/*Table structure for table `applicant_personal_history` */

DROP TABLE IF EXISTS `applicant_personal_history`;

/*!50001 DROP VIEW IF EXISTS `applicant_personal_history` */;
/*!50001 DROP TABLE IF EXISTS `applicant_personal_history` */;

/*!50001 CREATE TABLE  `applicant_personal_history`(
 `recruit_id` int(11) unsigned ,
 `father_name` longtext ,
 `mother_name` longtext ,
 `brother_name` longtext ,
 `sister_name` longtext ,
 `son_name` longtext ,
 `daughter_name` longtext ,
 `guardian_name` longtext ,
 `spouse_name` longtext ,
 `father_occupation` longtext ,
 `mother_occupation` longtext ,
 `brother_occupation` longtext ,
 `sister_occupation` longtext ,
 `son_occupation` longtext ,
 `daughter_occupation` longtext ,
 `guardian_occupation` longtext ,
 `spouse_occupation` longtext ,
 `father_age` longtext ,
 `mother_age` longtext ,
 `brother_age` longtext ,
 `sister_age` longtext ,
 `son_age` longtext ,
 `daughter_age` longtext ,
 `guardian_age` longtext ,
 `spouse_age` longtext ,
 `relationship` varchar(128) ,
 `name` varchar(128) ,
 `birthday` varchar(128) ,
 `occupation` varchar(128) 
)*/;

/*Table structure for table `approver_class_department` */

DROP TABLE IF EXISTS `approver_class_department`;

/*!50001 DROP VIEW IF EXISTS `approver_class_department` */;
/*!50001 DROP TABLE IF EXISTS `approver_class_department` */;

/*!50001 CREATE TABLE  `approver_class_department`(
 `company_id` int(1) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) 
)*/;

/*Table structure for table `approver_class_position` */

DROP TABLE IF EXISTS `approver_class_position`;

/*!50001 DROP VIEW IF EXISTS `approver_class_position` */;
/*!50001 DROP TABLE IF EXISTS `approver_class_position` */;

/*!50001 CREATE TABLE  `approver_class_position`(
 `company_id` int(1) ,
 `department_id` int(1) ,
 `position_id` int(11) unsigned ,
 `position` varchar(64) 
)*/;

/*Table structure for table `approver_position_users` */

DROP TABLE IF EXISTS `approver_position_users`;

/*!50001 DROP VIEW IF EXISTS `approver_position_users` */;
/*!50001 DROP TABLE IF EXISTS `approver_position_users` */;

/*!50001 CREATE TABLE  `approver_position_users`(
 `user_id` int(11) unsigned ,
 `full_name` varchar(64) ,
 `company_id` int(1) ,
 `department_id` int(1) ,
 `position_id` int(1) 
)*/;

/*Table structure for table `attrition_report` */

DROP TABLE IF EXISTS `attrition_report`;

/*!50001 DROP VIEW IF EXISTS `attrition_report` */;
/*!50001 DROP TABLE IF EXISTS `attrition_report` */;

/*!50001 CREATE TABLE  `attrition_report`(
 `company` varchar(64) ,
 `company_id` int(1) ,
 `division_id` int(1) ,
 `division` varchar(64) ,
 `year` int(4) ,
 `jan_headcount` int(11) ,
 `jan_managed` int(11) ,
 `jan_unmanaged` int(11) ,
 `jan_total_attrition` int(11) ,
 `jan_actual_ytd_attrition` int(11) ,
 `jan_ytd_attrition` decimal(13,2) ,
 `feb_headcount` int(11) ,
 `feb_managed` int(11) ,
 `feb_unmanaged` int(11) ,
 `feb_total_attrition` int(11) ,
 `feb_actual_ytd_attrition` int(11) ,
 `feb_ytd_attrition` decimal(13,2) ,
 `mar_headcount` int(11) ,
 `mar_managed` int(11) ,
 `mar_unmanaged` int(11) ,
 `mar_total_attrition` int(11) ,
 `mar_actual_ytd_attrition` int(11) ,
 `mar_ytd_attrition` decimal(13,2) ,
 `apr_headcount` int(11) ,
 `apr_managed` int(11) ,
 `apr_unmanaged` int(11) ,
 `apr_total_attrition` int(11) ,
 `apr_actual_ytd_attrition` int(11) ,
 `apr_ytd_attrition` decimal(13,2) ,
 `may_headcount` int(11) ,
 `may_managed` int(11) ,
 `may_unmanaged` int(11) ,
 `may_total_attrition` int(11) ,
 `may_actual_ytd_attrition` int(11) ,
 `may_ytd_attrition` decimal(13,2) ,
 `jun_headcount` int(11) ,
 `jun_managed` int(11) ,
 `jun_unmanaged` int(11) ,
 `jun_total_attrition` int(11) ,
 `jun_actual_ytd_attrition` int(11) ,
 `jun_ytd_attrition` decimal(13,2) ,
 `jul_headcount` int(11) ,
 `jul_managed` int(11) ,
 `jul_unmanaged` int(11) ,
 `jul_total_attrition` int(11) ,
 `jul_actual_ytd_attrition` int(11) ,
 `jul_ytd_attrition` decimal(13,2) ,
 `aug_headcount` int(11) ,
 `aug_managed` int(11) ,
 `aug_unmanaged` int(11) ,
 `aug_total_attrition` int(11) ,
 `aug_actual_ytd_attrition` int(11) ,
 `aug_ytd_attrition` decimal(13,2) ,
 `sep_headcount` int(11) ,
 `sep_managed` int(11) ,
 `sep_unmanaged` int(11) ,
 `sep_total_attrition` int(11) ,
 `sep_actual_ytd_attrition` int(11) ,
 `sep_ytd_attrition` decimal(13,2) ,
 `oct_headcount` int(11) ,
 `oct_managed` int(11) ,
 `oct_unmanaged` int(11) ,
 `oct_total_attrition` int(11) ,
 `oct_actual_ytd_attrition` int(11) ,
 `oct_ytd_attrition` decimal(13,2) ,
 `nov_headcount` int(11) ,
 `nov_managed` int(11) ,
 `nov_unmanaged` int(11) ,
 `nov_total_attrition` int(11) ,
 `nov_actual_ytd_attrition` int(11) ,
 `nov_ytd_attrition` decimal(13,2) ,
 `dec_headcount` int(11) ,
 `dec_managed` int(11) ,
 `dec_unmanaged` int(11) ,
 `dec_total_attrition` int(11) ,
 `dec_actual_ytd_attrition` int(11) ,
 `dec_ytd_attrition` decimal(13,2) 
)*/;

/*Table structure for table `birthday_list_for_the_year` */

DROP TABLE IF EXISTS `birthday_list_for_the_year`;

/*!50001 DROP VIEW IF EXISTS `birthday_list_for_the_year` */;
/*!50001 DROP TABLE IF EXISTS `birthday_list_for_the_year` */;

/*!50001 CREATE TABLE  `birthday_list_for_the_year`(
 `celebrant_id` int(11) unsigned ,
 `full_name` varchar(64) ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `position` varchar(64) ,
 `birth_date` varchar(41) 
)*/;

/*Table structure for table `dashboard_birthday` */

DROP TABLE IF EXISTS `dashboard_birthday`;

/*!50001 DROP VIEW IF EXISTS `dashboard_birthday` */;
/*!50001 DROP TABLE IF EXISTS `dashboard_birthday` */;

/*!50001 CREATE TABLE  `dashboard_birthday`(
 `celebrant_id` int(11) unsigned ,
 `photo` varchar(128) ,
 `display_name` varchar(64) ,
 `position` varchar(64) ,
 `birth_date` date ,
 `time_line` varchar(16) ,
 `datetime` date 
)*/;

/*Table structure for table `dashboard_birthday_greetings` */

DROP TABLE IF EXISTS `dashboard_birthday_greetings`;

/*!50001 DROP VIEW IF EXISTS `dashboard_birthday_greetings` */;
/*!50001 DROP TABLE IF EXISTS `dashboard_birthday_greetings` */;

/*!50001 CREATE TABLE  `dashboard_birthday_greetings`(
 `id` int(11) unsigned ,
 `status` enum('info','success','warning','danger') ,
 `user_id` int(11) ,
 `display_name` varchar(64) ,
 `content` text ,
 `birthday` date ,
 `recipient_id` int(11) ,
 `position` varchar(64) ,
 `photo` varchar(128) ,
 `time_line` varchar(32) ,
 `createdon` timestamp 
)*/;

/*Table structure for table `dashboard_birthday_list` */

DROP TABLE IF EXISTS `dashboard_birthday_list`;

/*!50001 DROP VIEW IF EXISTS `dashboard_birthday_list` */;
/*!50001 DROP TABLE IF EXISTS `dashboard_birthday_list` */;

/*!50001 CREATE TABLE  `dashboard_birthday_list`(
 `celebrant_id` int(11) unsigned ,
 `photo` varchar(128) ,
 `display_name` varchar(64) ,
 `position` varchar(64) ,
 `birth_date` date ,
 `time_line` varchar(16) 
)*/;

/*Table structure for table `dashboard_feeds` */

DROP TABLE IF EXISTS `dashboard_feeds`;

/*!50001 DROP VIEW IF EXISTS `dashboard_feeds` */;
/*!50001 DROP TABLE IF EXISTS `dashboard_feeds` */;

/*!50001 CREATE TABLE  `dashboard_feeds`(
 `id` int(11) unsigned ,
 `user_id` int(11) ,
 `message_type` enum('Admin','Announcement','Birthday','Comment','Company News','Feedback','Partners','Personnel','System','Time Record','Code of Conduct','Movement','Signatories','Clearance','Recruitment','Performance Appraisal') ,
 `class` varchar(13) ,
 `display_name` varchar(64) ,
 `feed_content` text ,
 `recipient_id` bigint(11) ,
 `recipients` varchar(255) ,
 `readon` datetime ,
 `createdon_datetime` timestamp ,
 `createdon` varchar(32) ,
 `avatar` varchar(128) ,
 `uri` varchar(128) ,
 `record_id` int(11) ,
 `like` tinyint(1) ,
 `deleted` tinyint(1) 
)*/;

/*Table structure for table `dashboard_feeds2` */

DROP TABLE IF EXISTS `dashboard_feeds2`;

/*!50001 DROP VIEW IF EXISTS `dashboard_feeds2` */;
/*!50001 DROP TABLE IF EXISTS `dashboard_feeds2` */;

/*!50001 CREATE TABLE  `dashboard_feeds2`(
 `id` int(11) unsigned ,
 `user_id` int(11) ,
 `message_type` enum('Admin','Announcement','Birthday','Comment','Company News','Feedback','Partners','Personnel','System','Time Record','Code of Conduct','Movement','Signatories','Clearance','Recruitment','Performance Appraisal') ,
 `class` varchar(13) ,
 `display_name` varchar(64) ,
 `feed_content` text ,
 `recipient_id` bigint(11) ,
 `recipients` varchar(255) ,
 `readon` datetime ,
 `createdon_datetime` timestamp ,
 `createdon` varchar(32) ,
 `avatar` varchar(128) ,
 `deleted` tinyint(1) 
)*/;

/*Table structure for table `dashboard_group_notification` */

DROP TABLE IF EXISTS `dashboard_group_notification`;

/*!50001 DROP VIEW IF EXISTS `dashboard_group_notification` */;
/*!50001 DROP TABLE IF EXISTS `dashboard_group_notification` */;

/*!50001 CREATE TABLE  `dashboard_group_notification`(
 `post` longtext ,
 `type_id` int(11) ,
 `url` varchar(255) ,
 `created_on` timestamp ,
 `created_by` int(11) ,
 `recipient` int(11) ,
 `notif` text ,
 `read` tinyint(1) ,
 `read_on` datetime ,
 `full_name` varchar(64) ,
 `photo` varchar(128) ,
 `timeline` varchar(32) ,
 `type` varchar(64) 
)*/;

/*Table structure for table `dashboard_inbox` */

DROP TABLE IF EXISTS `dashboard_inbox`;

/*!50001 DROP VIEW IF EXISTS `dashboard_inbox` */;
/*!50001 DROP TABLE IF EXISTS `dashboard_inbox` */;

/*!50001 CREATE TABLE  `dashboard_inbox`(
 `id` int(11) unsigned ,
 `status` enum('info','success','warning','danger') ,
 `user_id` int(11) ,
 `display_name` varchar(64) ,
 `avatar` varchar(128) ,
 `recipient_id` int(11) ,
 `content` longtext ,
 `readon` datetime ,
 `timeline` varchar(32) ,
 `reactedon` datetime ,
 `createdon` timestamp 
)*/;

/*Table structure for table `dashboard_notification` */

DROP TABLE IF EXISTS `dashboard_notification`;

/*!50001 DROP VIEW IF EXISTS `dashboard_notification` */;
/*!50001 DROP TABLE IF EXISTS `dashboard_notification` */;

/*!50001 CREATE TABLE  `dashboard_notification`(
 `id` int(11) unsigned ,
 `status` enum('info','success','warning','danger') ,
 `message_type` enum('Admin','Announcement','Birthday','Comment','Company News','Feedback','Partners','Personnel','System','Time Record','Code of Conduct','Movement','Signatories','Clearance','Recruitment','Performance Appraisal') ,
 `recipient_id` bigint(11) ,
 `feed_content` longtext ,
 `readon` datetime ,
 `timeline` varchar(32) ,
 `uri` varchar(128) ,
 `record_id` int(11) ,
 `reactedon` datetime ,
 `createdon` timestamp 
)*/;

/*Table structure for table `dashboard_todo` */

DROP TABLE IF EXISTS `dashboard_todo`;

/*!50001 DROP VIEW IF EXISTS `dashboard_todo` */;
/*!50001 DROP TABLE IF EXISTS `dashboard_todo` */;

/*!50001 CREATE TABLE  `dashboard_todo`(
 `forms_id` int(11) unsigned ,
 `form_status_id` tinyint(1) ,
 `form_status` varchar(16) ,
 `form_id` int(1) ,
 `form` varchar(32) ,
 `form_code` varchar(8) ,
 `user_id` int(11) ,
 `display_name` varchar(64) ,
 `date_from` date ,
 `date_to` date ,
 `reason` text ,
 `createdon` varchar(32) ,
 `deleted` tinyint(1) 
)*/;

/*Table structure for table `dashboard_todos` */

DROP TABLE IF EXISTS `dashboard_todos`;

/*!50001 DROP VIEW IF EXISTS `dashboard_todos` */;
/*!50001 DROP TABLE IF EXISTS `dashboard_todos` */;

/*!50001 CREATE TABLE  `dashboard_todos`(
 `forms_id` int(11) unsigned ,
 `form_status_id` tinyint(1) ,
 `form_status` varchar(16) ,
 `form_id` int(1) ,
 `form_code` varchar(8) ,
 `form` varchar(32) ,
 `reason` text ,
 `user_id` int(11) ,
 `display_name` varchar(64) ,
 `day` decimal(5,2) ,
 `hrs` decimal(5,2) ,
 `date_range` varchar(140) ,
 `date_from` date ,
 `date_to` date ,
 `createdon` varchar(32) ,
 `created_on` timestamp ,
 `approver_status_id` int(1) ,
 `approver_status` varchar(16) ,
 `approver_id` int(11) ,
 `approver_name` varchar(64) ,
 `timeline` varchar(16) 
)*/;

/*Table structure for table `incident_report` */

DROP TABLE IF EXISTS `incident_report`;

/*!50001 DROP VIEW IF EXISTS `incident_report` */;
/*!50001 DROP TABLE IF EXISTS `incident_report` */;

/*!50001 CREATE TABLE  `incident_report`(
 `company_id` int(1) unsigned ,
 `department_id` int(11) unsigned ,
 `user_id` int(11) unsigned ,
 `offense_id` int(11) ,
 `sanction_id` int(11) ,
 `name` varchar(64) ,
 `position` varchar(64) ,
 `company` varchar(64) ,
 `department` varchar(64) ,
 `frequency` varchar(32) ,
 `penalty` text ,
 `payment` varchar(128) ,
 `from` varbinary(10) ,
 `to` varbinary(10) ,
 `date_of_offense` date ,
 `date_of_offense_from` date ,
 `date_of_offense_to` date ,
 `date_serve` varbinary(19) ,
 `remarks` text ,
 `ir_closed_date` varbinary(19) ,
 `superior` varchar(64) ,
 `offense` text ,
 `details_of_violations` text 
)*/;

/*Table structure for table `leave_balance_monitoring` */

DROP TABLE IF EXISTS `leave_balance_monitoring`;

/*!50001 DROP VIEW IF EXISTS `leave_balance_monitoring` */;
/*!50001 DROP TABLE IF EXISTS `leave_balance_monitoring` */;

/*!50001 CREATE TABLE  `leave_balance_monitoring`(
 `company_id` int(1) ,
 `company` varchar(64) ,
 `full_name` varchar(129) ,
 `year` int(1) ,
 `leave_type` varchar(8) ,
 `previous` decimal(7,4) ,
 `current` decimal(7,4) ,
 `used` decimal(7,4) ,
 `converted` decimal(7,4) ,
 `forfeited` decimal(7,4) ,
 `balance` decimal(7,4) 
)*/;

/*Table structure for table `manpower_movement_report` */

DROP TABLE IF EXISTS `manpower_movement_report`;

/*!50001 DROP VIEW IF EXISTS `manpower_movement_report` */;
/*!50001 DROP TABLE IF EXISTS `manpower_movement_report` */;

/*!50001 CREATE TABLE  `manpower_movement_report`(
 `effectivity_date` date ,
 `display_name` varchar(64) ,
 `from_name_promote` varchar(128) ,
 `to_name_promote` varchar(128) ,
 `from_name_transfer` varchar(128) ,
 `to_name_transfer` varchar(128) ,
 `manage` varbinary(1) ,
 `unmanaged` varbinary(1) ,
 `EOC` varbinary(1) ,
 `company_id` int(1) ,
 `division_id` int(1) ,
 `year` int(4) 
)*/;

/*Table structure for table `month` */

DROP TABLE IF EXISTS `month`;

/*!50001 DROP VIEW IF EXISTS `month` */;
/*!50001 DROP TABLE IF EXISTS `month` */;

/*!50001 CREATE TABLE  `month`(
 `MONTH` varchar(9) 
)*/;

/*Table structure for table `new_hires_report` */

DROP TABLE IF EXISTS `new_hires_report`;

/*!50001 DROP VIEW IF EXISTS `new_hires_report` */;
/*!50001 DROP TABLE IF EXISTS `new_hires_report` */;

/*!50001 CREATE TABLE  `new_hires_report`(
 `prf_no` varchar(16) ,
 `name` varchar(32) ,
 `status` varchar(32) ,
 `recruiter` varchar(64) ,
 `company_id` int(1) ,
 `division_id` int(1) ,
 `year` int(4) 
)*/;

/*Table structure for table `night_differential` */

DROP TABLE IF EXISTS `night_differential`;

/*!50001 DROP VIEW IF EXISTS `night_differential` */;
/*!50001 DROP TABLE IF EXISTS `night_differential` */;

/*!50001 CREATE TABLE  `night_differential`(
 `user_id` int(11) ,
 `DATE` date ,
 `transaction_code` varchar(32) ,
 `quantity` decimal(12,3) 
)*/;

/*Table structure for table `overtime_checking` */

DROP TABLE IF EXISTS `overtime_checking`;

/*!50001 DROP VIEW IF EXISTS `overtime_checking` */;
/*!50001 DROP TABLE IF EXISTS `overtime_checking` */;

/*!50001 CREATE TABLE  `overtime_checking`(
 `display_name` varchar(64) ,
 `date` date ,
 `payroll_date` date ,
 `form_status_id` tinyint(1) ,
 `shift` varchar(32) ,
 `time_in` datetime ,
 `time_out` datetime ,
 `focus_date` date ,
 `date_approved` datetime ,
 `time_from` datetime ,
 `time_to` datetime ,
 `ot_hours_application` decimal(5,2) ,
 `ot_processed` decimal(5,2) 
)*/;

/*Table structure for table `overtime_checking_on_approved` */

DROP TABLE IF EXISTS `overtime_checking_on_approved`;

/*!50001 DROP VIEW IF EXISTS `overtime_checking_on_approved` */;
/*!50001 DROP TABLE IF EXISTS `overtime_checking_on_approved` */;

/*!50001 CREATE TABLE  `overtime_checking_on_approved`(
 `display_name` varchar(64) ,
 `date` date ,
 `payroll_date` date ,
 `form_status_id` tinyint(1) ,
 `shift` varchar(32) ,
 `time_in` datetime ,
 `time_out` datetime ,
 `date_approved` datetime ,
 `focus_date` date ,
 `time_from` datetime ,
 `time_to` datetime ,
 `ot_hours_application` decimal(5,2) ,
 `ot_processed` decimal(5,2) 
)*/;

/*Table structure for table `partner_contribution` */

DROP TABLE IF EXISTS `partner_contribution`;

/*!50001 DROP VIEW IF EXISTS `partner_contribution` */;
/*!50001 DROP TABLE IF EXISTS `partner_contribution` */;

/*!50001 CREATE TABLE  `partner_contribution`(
 `user_id` int(11) ,
 `year` int(1) ,
 `month` varchar(9) ,
 `SSS` varbinary(255) ,
 `PhilHealth` varbinary(255) ,
 `PagIBIG` varbinary(255) ,
 `WTax` varbinary(255) 
)*/;

/*Table structure for table `partner_contribution_view` */

DROP TABLE IF EXISTS `partner_contribution_view`;

/*!50001 DROP VIEW IF EXISTS `partner_contribution_view` */;
/*!50001 DROP TABLE IF EXISTS `partner_contribution_view` */;

/*!50001 CREATE TABLE  `partner_contribution_view`(
 `user_id` int(11) ,
 `YEAR` int(1) ,
 `summary_code` varchar(32) ,
 `MONTH` varchar(9) ,
 `VALUE` varbinary(255) 
)*/;

/*Table structure for table `partner_loan_payment` */

DROP TABLE IF EXISTS `partner_loan_payment`;

/*!50001 DROP VIEW IF EXISTS `partner_loan_payment` */;
/*!50001 DROP TABLE IF EXISTS `partner_loan_payment` */;

/*!50001 CREATE TABLE  `partner_loan_payment`(
 `user_id` int(11) ,
 `partner_loan_id` int(11) ,
 `principal` double(19,2) ,
 `interest` double(19,2) ,
 `amount` varbinary(255) ,
 `date_paid` date ,
 `transaction` varchar(128) 
)*/;

/*Table structure for table `partner_manpower_status_position_filter` */

DROP TABLE IF EXISTS `partner_manpower_status_position_filter`;

/*!50001 DROP VIEW IF EXISTS `partner_manpower_status_position_filter` */;
/*!50001 DROP TABLE IF EXISTS `partner_manpower_status_position_filter` */;

/*!50001 CREATE TABLE  `partner_manpower_status_position_filter`(
 `user_id` int(11) unsigned ,
 `position` varchar(17) 
)*/;

/*Table structure for table `partner_manpower_status_report` */

DROP TABLE IF EXISTS `partner_manpower_status_report`;

/*!50001 DROP VIEW IF EXISTS `partner_manpower_status_report` */;
/*!50001 DROP TABLE IF EXISTS `partner_manpower_status_report` */;

/*!50001 CREATE TABLE  `partner_manpower_status_report`(
 `active` tinyint(1) ,
 `status_id` int(1) ,
 `status` varchar(32) ,
 `position` varchar(17) ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `department_id` int(1) ,
 `department` varchar(64) ,
 `payroll_rate_type_id` int(1) ,
 `payroll_rate_type` varchar(64) ,
 `count` bigint(21) ,
 `employed` decimal(23,0) ,
 `resigned` decimal(23,0) 
)*/;

/*Table structure for table `partner_movement` */

DROP TABLE IF EXISTS `partner_movement`;

/*!50001 DROP VIEW IF EXISTS `partner_movement` */;
/*!50001 DROP TABLE IF EXISTS `partner_movement` */;

/*!50001 CREATE TABLE  `partner_movement`(
 `record_id` int(11) unsigned ,
 `employee_name` varchar(341) ,
 `movement_type` varchar(341) ,
 `cause` varchar(32) ,
 `deleted` tinyint(1) ,
 `created_by` int(11) 
)*/;

/*Table structure for table `partner_movement_current` */

DROP TABLE IF EXISTS `partner_movement_current`;

/*!50001 DROP VIEW IF EXISTS `partner_movement_current` */;
/*!50001 DROP TABLE IF EXISTS `partner_movement_current` */;

/*!50001 CREATE TABLE  `partner_movement_current`(
 `role_id` int(1) unsigned ,
 `role` varchar(64) ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `department_id` int(1) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `department` varchar(83) ,
 `division_id` int(1) ,
 `division` varchar(64) ,
 `project_id` int(11) unsigned ,
 `project` varchar(64) ,
 `location_id` int(1) ,
 `location` varchar(64) ,
 `position_id` int(1) ,
 `position` varchar(64) ,
 `reports_to_id` int(11) ,
 `reports_to` varchar(64) ,
 `employment_status_id` int(1) ,
 `employment_status` varchar(32) ,
 `employment_type_id` int(1) ,
 `employment_type` varchar(32) ,
 `job_grade_id` int(11) ,
 `job_level` varchar(64) ,
 `user_id` int(11) unsigned ,
 `partner_id` int(11) unsigned 
)*/;

/*Table structure for table `partner_payslip` */

DROP TABLE IF EXISTS `partner_payslip`;

/*!50001 DROP VIEW IF EXISTS `partner_payslip` */;
/*!50001 DROP TABLE IF EXISTS `partner_payslip` */;

/*!50001 CREATE TABLE  `partner_payslip`(
 `employee` int(11) unsigned ,
 `status` varchar(32) ,
 `position` varchar(64) ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `address` varchar(128) ,
 `city` varchar(32) ,
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `department_id` int(1) ,
 `department_code` varchar(16) ,
 `project_id` int(11) unsigned ,
 `project_code` varchar(16) ,
 `project` varchar(64) ,
 `payroll_rate_type_id` int(11) ,
 `payroll_rate_type` varchar(64) ,
 `adjustment` double(19,2) ,
 `other_taxable` int(1) ,
 `absent` double(19,2) ,
 `late` double(19,2) ,
 `undertime` double(19,2) ,
 `lwop` double(19,2) ,
 `absent_hours` double(19,2) ,
 `late_hours` double(19,2) ,
 `undertime_hours` double(19,2) ,
 `lwop_hours` double(19,2) ,
 `absent_tardy` double(19,2) ,
 `sss` int(1) ,
 `philhealth` int(1) ,
 `pag_ibig` int(1) ,
 `nontax_income` int(1) ,
 `nd` double(19,2) ,
 `reg` double(19,2) ,
 `nd_otnd` double(19,2) ,
 `reg_otnd` double(19,2) ,
 `rest` double(19,2) ,
 `rest_otnd` double(19,2) ,
 `rest_x8_otnd` double(19,2) ,
 `rest_x8` double(19,2) ,
 `doff` double(19,2) ,
 `doff_x8` double(19,2) ,
 `hourly_rate` double(19,2) ,
 `legal` double(19,2) ,
 `legal_x8` double(19,2) ,
 `legal_otnd` double(19,2) ,
 `legal_x8_otnd` double(19,2) ,
 `rest_legal` double(19,2) ,
 `rest_leg_x8` double(19,2) ,
 `rest_legal_otnd` double(19,2) ,
 `rest_leg_x8_otnd` double(19,2) ,
 `sp` double(19,2) ,
 `sp_x8` double(19,2) ,
 `sp_otnd` double(19,2) ,
 `sp_x8_otnd` double(19,2) ,
 `rest_sp` double(19,2) ,
 `rest_sp_x8` double(19,2) ,
 `rest_sp_otnd` double(19,2) ,
 `rest_sp_x8_otnd` double(19,2) ,
 `dobot` double(19,2) ,
 `dobot_x8` double(19,2) ,
 `dobot_otnd` double(19,2) ,
 `dobot_x8_otnd` double(19,2) ,
 `rest_dobot` double(19,2) ,
 `rest_dobot_x8` double(19,2) ,
 `rest_dobot_otnd` double(19,2) ,
 `rest_dobot_x8_otnd` double(19,2) ,
 `reg_hrs` double(19,2) ,
 `nd_hrs` double(19,2) ,
 `rest_hrs` double(19,2) ,
 `rest_otnd_hrs` double(19,2) ,
 `rest_x8_otnd_hrs` double(19,2) ,
 `rest_x8_hrs` double(19,2) ,
 `doff_hrs` double(19,2) ,
 `doff_x8_hrs` double(19,2) ,
 `legal_hrs` double(19,2) ,
 `legal_x8_hrs` double(19,2) ,
 `rest_legal_hrs` double(19,2) ,
 `rest_leg_x8_hrs` double(19,2) ,
 `sp_hrs` double(19,2) ,
 `sp_x8_hrs` double(19,2) ,
 `rest_sp_hrs` double(19,2) ,
 `rest_sp_x8_hrs` double(19,2) ,
 `dobot_hrs` double(19,2) ,
 `dobot_x8_hrs` double(19,2) ,
 `dobot_otnd_hrs` double(19,2) ,
 `dobot_x8_otnd_hrs` double(19,2) ,
 `rest_dobot_hrs` double(19,2) ,
 `rest_dobot_x8_hrs` double(19,2) ,
 `rest_dobot_otnd_hrs` double(19,2) ,
 `rest_dobot_x8_otnd_hrs` double(19,2) ,
 `health_card` int(1) ,
 `other_deduction_one` int(1) ,
 `other_deduction_two` int(1) ,
 `other_deduction_three` int(1) ,
 `sss_sal_loan_payments` int(1) ,
 `sss_cal_loan_payments` int(1) ,
 `hdmf_sal_loan_payments` int(1) ,
 `hdmf_cal_loan_payments` int(1) ,
 `company_loan_payments` int(1) ,
 `sss_sal_loan_balance` int(1) ,
 `sss_cal_loan_balance` int(1) ,
 `hdmf_sal_loan_balance` int(1) ,
 `hdmf_cal_loan_balance` int(1) ,
 `tax_status` int(1) ,
 `ytd_sss` int(1) ,
 `ytd_philhealth` int(1) ,
 `ytd_pag_ibig` int(1) ,
 `tin` varchar(16) ,
 `transaction_label` varchar(128) ,
 `transaction_class_code` varchar(32) ,
 `transaction_code` varchar(32) ,
 `qty` varbinary(291) ,
 `amount` double(19,2) ,
 `transaction_type_id` int(1) ,
 `group` varchar(10) ,
 `type` varchar(10) ,
 `record_id` varbinary(11) ,
 `beginning_balance` double(19,2) ,
 `running_balance` double(19,2) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `date_from_applicable` varchar(10) ,
 `date_to_applicable` varchar(10) ,
 `taxcode` varchar(50) ,
 `phone_no` varchar(255) ,
 `fax_no` varchar(255) 
)*/;

/*Table structure for table `partner_payslip_orig` */

DROP TABLE IF EXISTS `partner_payslip_orig`;

/*!50001 DROP VIEW IF EXISTS `partner_payslip_orig` */;
/*!50001 DROP TABLE IF EXISTS `partner_payslip_orig` */;

/*!50001 CREATE TABLE  `partner_payslip_orig`(
 `employee` int(11) unsigned ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `address` varchar(128) ,
 `city` varchar(32) ,
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `department_id` int(11) ,
 `department_code` varchar(16) ,
 `project_id` int(11) unsigned ,
 `project_code` varchar(16) ,
 `project` varchar(64) ,
 `payroll_rate_type_id` int(11) ,
 `payroll_rate_type` varchar(64) ,
 `adjustment` bigint(20) ,
 `other_taxable` bigint(20) ,
 `absent_tardy` double(19,2) ,
 `sss` bigint(20) ,
 `philhealth` bigint(20) ,
 `pag_ibig` bigint(20) ,
 `nontax_income` bigint(20) ,
 `nd` double(19,2) ,
 `reg` bigint(20) ,
 `rest` double(19,2) ,
 `rest_x8` double(19,2) ,
 `sp` double(19,2) ,
 `sp_x8` double(19,2) ,
 `rest_sp` double(19,2) ,
 `rest_sp_x8` double(19,2) ,
 `hourly_rate` double(19,2) ,
 `legal` double(19,2) ,
 `legal_x8` double(19,2) ,
 `rest_legal` double(19,2) ,
 `rest_leg_x8` double(19,2) ,
 `nd_otnd` double(19,2) ,
 `reg_otnd` double(19,2) ,
 `rest_otnd` double(19,2) ,
 `rest_x8_otnd` double(19,2) ,
 `sp_otnd` double(19,2) ,
 `sp_x8_otnd` double(19,2) ,
 `rest_sp_otnd` double(19,2) ,
 `rest_sp_x8_otnd` double(19,2) ,
 `legal_otnd` double(19,2) ,
 `legal_x8_otnd` double(19,2) ,
 `rest_legal_otnd` double(19,2) ,
 `rest_leg_x8_otnd` double(19,2) ,
 `nd_hrs` double(19,2) ,
 `reg_hrs` bigint(20) ,
 `rest_hrs` double(19,2) ,
 `rest_x8_hrs` double(19,2) ,
 `sp_hrs` double(19,2) ,
 `sp_x8_hrs` double(19,2) ,
 `rest_sp_hrs` double(19,2) ,
 `rest_sp_x8_hrs` double(19,2) ,
 `legal_hrs` double(19,2) ,
 `legal_x8_hrs` double(19,2) ,
 `rest_legal_hrs` double(19,2) ,
 `rest_leg_x8_hrs` double(19,2) ,
 `health_card` bigint(20) ,
 `other_deduction_one` bigint(20) ,
 `other_deduction_two` bigint(20) ,
 `other_deduction_three` bigint(20) ,
 `sss_sal_loan_payments` bigint(20) ,
 `sss_cal_loan_payments` bigint(20) ,
 `hdmf_sal_loan_payments` bigint(20) ,
 `hdmf_cal_loan_payments` bigint(20) ,
 `company_loan_payments` bigint(20) ,
 `sss_sal_loan_balance` bigint(20) ,
 `sss_cal_loan_balance` bigint(20) ,
 `hdmf_sal_loan_balance` bigint(20) ,
 `hdmf_cal_loan_balance` bigint(20) ,
 `tax_status` bigint(20) ,
 `ytd_sss` bigint(20) ,
 `ytd_philhealth` bigint(20) ,
 `ytd_pag_ibig` bigint(20) ,
 `tin` varchar(16) ,
 `transaction_label` varchar(128) ,
 `transaction_class_code` varchar(32) ,
 `transaction_code` varchar(32) ,
 `qty` varbinary(291) ,
 `amount` double(19,2) ,
 `transaction_type_id` int(11) ,
 `group` varchar(10) ,
 `type` varchar(10) ,
 `record_id` varbinary(11) ,
 `beginning_balance` double(19,2) ,
 `running_balance` double(19,2) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `taxcode` varchar(50) ,
 `phone_no` varchar(255) ,
 `fax_no` varchar(255) 
)*/;

/*Table structure for table `partners` */

DROP TABLE IF EXISTS `partners`;

/*!50001 DROP VIEW IF EXISTS `partners` */;
/*!50001 DROP TABLE IF EXISTS `partners` */;

/*!50001 CREATE TABLE  `partners`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `biometric` varchar(16) ,
 `partner_id` int(11) unsigned ,
 `deleted` tinyint(1) ,
 `shift_id` int(1) ,
 `shift` varchar(32) ,
 `calendar_id` int(11) ,
 `calendar` varchar(32) ,
 `full_name` varchar(64) ,
 `alias` varchar(32) ,
 `status_id` int(1) ,
 `status` varchar(32) ,
 `employment_type_id` int(1) ,
 `employment_type` varchar(16) ,
 `company_id` int(11) ,
 `salary` varchar(373) ,
 `sss_no` varchar(16) ,
 `phic_no` varchar(16) ,
 `hdmf_no` varchar(16) ,
 `resigned_date` date ,
 `email` varchar(128) ,
 `year` int(4) ,
 `month` int(2) ,
 `effectivity_date` date ,
 `regularization_date` date ,
 `created_on` timestamp ,
 `created_by` int(11) ,
 `modified_on` datetime ,
 `modified_by` int(11) ,
 `company` varchar(64) ,
 `sss` varchar(32) ,
 `tin` varchar(32) ,
 `phic` varchar(32) ,
 `hdmf` varchar(32) ,
 `address` varchar(128) ,
 `birth_date` date ,
 `position_id` int(1) ,
 `position` varchar(64) 
)*/;

/*Table structure for table `partners_details` */

DROP TABLE IF EXISTS `partners_details`;

/*!50001 DROP VIEW IF EXISTS `partners_details` */;
/*!50001 DROP TABLE IF EXISTS `partners_details` */;

/*!50001 CREATE TABLE  `partners_details`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `status` varchar(32) ,
 `full_name` varchar(64) ,
 `active` tinyint(1) ,
 `company_id` int(1) ,
 `division_id` int(1) ,
 `department_id` int(1) ,
 `project_id` int(11) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `salary` varchar(373) ,
 `sss_no` varchar(16) ,
 `phic_no` varchar(16) ,
 `hdmf_no` varchar(16) ,
 `tin` varchar(16) ,
 `resigned_date` date ,
 `email` varchar(128) ,
 `year` int(4) ,
 `month` int(2) ,
 `date_hired` date ,
 `address` varchar(128) ,
 `position_id` int(1) ,
 `end_date` date ,
 `birthdate` date ,
 `position` varchar(64) ,
 `project` varchar(64) ,
 `project_code` varchar(16) ,
 `address1` longtext ,
 `age` tinyint(3) unsigned ,
 `birth_place` longtext ,
 `gender` longtext ,
 `civil_status` longtext 
)*/;

/*Table structure for table `partners_gender_age` */

DROP TABLE IF EXISTS `partners_gender_age`;

/*!50001 DROP VIEW IF EXISTS `partners_gender_age` */;
/*!50001 DROP TABLE IF EXISTS `partners_gender_age` */;

/*!50001 CREATE TABLE  `partners_gender_age`(
 `gender` longtext ,
 `edad` varchar(11) ,
 `bilang` decimal(23,0) 
)*/;

/*Table structure for table `partners_personal` */

DROP TABLE IF EXISTS `partners_personal`;

/*!50001 DROP VIEW IF EXISTS `partners_personal` */;
/*!50001 DROP TABLE IF EXISTS `partners_personal` */;

/*!50001 CREATE TABLE  `partners_personal`(
 `user_id` int(11) ,
 `alias` varchar(32) ,
 `address_1` longtext ,
 `birth_place` longtext ,
 `gender` longtext ,
 `civil_status` longtext 
)*/;

/*Table structure for table `partners_personal_history_accountabilities` */

DROP TABLE IF EXISTS `partners_personal_history_accountabilities`;

/*!50001 DROP VIEW IF EXISTS `partners_personal_history_accountabilities` */;
/*!50001 DROP TABLE IF EXISTS `partners_personal_history_accountabilities` */;

/*!50001 CREATE TABLE  `partners_personal_history_accountabilities`(
 `user_id` int(11) ,
 `alias` varchar(32) ,
 `name` longtext ,
 `code` longtext ,
 `qty` longtext ,
 `date_issued` longtext ,
 `date_returned` longtext ,
 `remarks` longtext ,
 `photo` longtext 
)*/;

/*Table structure for table `partners_report` */

DROP TABLE IF EXISTS `partners_report`;

/*!50001 DROP VIEW IF EXISTS `partners_report` */;
/*!50001 DROP TABLE IF EXISTS `partners_report` */;

/*!50001 CREATE TABLE  `partners_report`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `company_id` int(11) ,
 `salary` varchar(373) ,
 `sss_no` varchar(16) ,
 `phic_no` varchar(16) ,
 `hdmf_no` varchar(16) ,
 `resigned_date` date ,
 `email` varchar(128) ,
 `year` int(4) ,
 `month` int(2) ,
 `effectivity_date` date ,
 `company` varchar(64) ,
 `sss` varchar(32) ,
 `tin` varchar(32) ,
 `phic` varchar(32) ,
 `hdmf` varchar(32) ,
 `address` varchar(128) ,
 `birth_date` date ,
 `position_id` int(1) ,
 `position` varchar(64) 
)*/;

/*Table structure for table `partners_termination_letter_view` */

DROP TABLE IF EXISTS `partners_termination_letter_view`;

/*!50001 DROP VIEW IF EXISTS `partners_termination_letter_view` */;
/*!50001 DROP TABLE IF EXISTS `partners_termination_letter_view` */;

/*!50001 CREATE TABLE  `partners_termination_letter_view`(
 `full_name` varchar(64) ,
 `user_id` int(11) unsigned ,
 `position` varchar(64) ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `project_id` int(11) ,
 `project` varchar(64) ,
 `department_id` int(1) ,
 `department` varchar(64) ,
 `end_date` date 
)*/;

/*Table structure for table `payroll_1601c` */

DROP TABLE IF EXISTS `payroll_1601c`;

/*!50001 DROP VIEW IF EXISTS `payroll_1601c` */;
/*!50001 DROP TABLE IF EXISTS `payroll_1601c` */;

/*!50001 CREATE TABLE  `payroll_1601c`(
 `company_id` int(11) ,
 `company` varchar(64) ,
 `year` int(4) ,
 `month` int(2) ,
 `address` varchar(128) ,
 `tin` varchar(32) ,
 `rdo` varchar(4) ,
 `contact_no` varchar(16) ,
 `zipcode` varchar(16) ,
 `line_business` varchar(8) ,
 `other_nontax_compensation` double(19,2) ,
 `total_compensation` double(19,2) ,
 `wtax` double(19,2) ,
 `statutory_minimum` double(19,2) ,
 `overtime` double(19,2) 
)*/;

/*Table structure for table `payroll_1604cf_7_1` */

DROP TABLE IF EXISTS `payroll_1604cf_7_1`;

/*!50001 DROP VIEW IF EXISTS `payroll_1604cf_7_1` */;
/*!50001 DROP TABLE IF EXISTS `payroll_1604cf_7_1` */;

/*!50001 CREATE TABLE  `payroll_1604cf_7_1`(
 `user_id` int(11) ,
 `year` int(1) ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `schedule_num` varchar(4) ,
 `ftype_code` varchar(6) ,
 `comp_tin` varchar(32) ,
 `branch_code_employer` varchar(4) ,
 `return_period` datetime ,
 `seq_num` char(0) ,
 `emp_tin` varchar(255) ,
 `branch_code_employees` varchar(4) ,
 `lastname` varchar(30) ,
 `firstname` varchar(30) ,
 `middlename` varchar(30) ,
 `employment_from` date ,
 `employment_to` datetime ,
 `gross_compensation` decimal(12,2) ,
 `pres_nontax_13th_month` decimal(12,2) ,
 `pres_nontax_de_minimis` decimal(12,2) ,
 `pres_nontax_sss_etc` decimal(12,2) ,
 `pres_nontax_salaries` decimal(12,2) ,
 `total_nontax_comp_income` decimal(12,2) ,
 `pres_taxable_basic_salary` decimal(12,2) ,
 `pres_taxable_13th_month` decimal(12,2) ,
 `pres_taxable_salaries` decimal(13,2) ,
 `total_taxable_comp_income` decimal(12,2) ,
 `exmpn_code` varchar(3) ,
 `exmpn_amt` decimal(12,2) ,
 `premium_paid` decimal(3,2) ,
 `net_table_comp_income` decimal(12,2) ,
 `tax_due` decimal(12,2) ,
 `pres_tax_wthld` decimal(12,2) ,
 `amt_wthld_dec` decimal(3,2) ,
 `over_wthld` decimal(3,2) ,
 `actual_amt_wthld` decimal(14,2) ,
 `subs_filing` varchar(1) ,
 `resigned_date` date 
)*/;

/*Table structure for table `payroll_1604cf_7_3` */

DROP TABLE IF EXISTS `payroll_1604cf_7_3`;

/*!50001 DROP VIEW IF EXISTS `payroll_1604cf_7_3` */;
/*!50001 DROP TABLE IF EXISTS `payroll_1604cf_7_3` */;

/*!50001 CREATE TABLE  `payroll_1604cf_7_3`(
 `user_id` int(11) ,
 `year` int(1) ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `schedule_num` varchar(4) ,
 `ftype_code` varchar(6) ,
 `comp_tin` varchar(32) ,
 `branch_code_employer` varchar(4) ,
 `return_period` datetime ,
 `seq_num` char(0) ,
 `emp_tin` varchar(255) ,
 `branch_code_employees` varchar(4) ,
 `lastname` varchar(30) ,
 `firstname` varchar(30) ,
 `middlename` varchar(30) ,
 `employment_from` date ,
 `employment_to` datetime ,
 `gross_compensation` decimal(12,2) ,
 `pres_nontax_13th_month` decimal(12,2) ,
 `pres_nontax_de_minimis` decimal(12,2) ,
 `pres_nontax_sss_etc` decimal(12,2) ,
 `pres_nontax_salaries` decimal(12,2) ,
 `total_nontax_comp_income` decimal(12,2) ,
 `pres_taxable_basic_salary` decimal(12,2) ,
 `pres_taxable_13th_month` decimal(12,2) ,
 `pres_taxable_salaries` decimal(13,2) ,
 `total_taxable_comp_income` decimal(12,2) ,
 `exmpn_code` varchar(3) ,
 `exmpn_amt` decimal(12,2) ,
 `premium_paid` decimal(3,2) ,
 `net_table_comp_income` decimal(12,2) ,
 `tax_due` decimal(12,2) ,
 `pres_tax_wthld` decimal(12,2) ,
 `amt_wthld_dec` decimal(3,2) ,
 `over_wthld` decimal(3,2) ,
 `actual_amt_wthld` decimal(14,2) ,
 `subs_filing` varchar(1) ,
 `resigned_date` date 
)*/;

/*Table structure for table `payroll_1604cf_7_4` */

DROP TABLE IF EXISTS `payroll_1604cf_7_4`;

/*!50001 DROP VIEW IF EXISTS `payroll_1604cf_7_4` */;
/*!50001 DROP TABLE IF EXISTS `payroll_1604cf_7_4` */;

/*!50001 CREATE TABLE  `payroll_1604cf_7_4`(
 `user_id` int(11) ,
 `year` int(1) ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `schedule_num` varchar(4) ,
 `ftype_code` varchar(6) ,
 `comp_tin` varchar(32) ,
 `branch_code_employer` varchar(4) ,
 `return_period` datetime ,
 `seq_num` char(0) ,
 `emp_tin` varchar(255) ,
 `branch_code_employees` varchar(4) ,
 `lastname` varchar(30) ,
 `firstname` varchar(30) ,
 `middlename` varchar(30) ,
 `employment_from` date ,
 `employment_to` datetime ,
 `gross_compensation` decimal(12,2) ,
 `prev_nontax_13th_month` varbinary(255) ,
 `prev_nontax_de_minimis` varbinary(255) ,
 `prev_nontax_sss_etc` varchar(255) ,
 `prev_nontax_salaries` varbinary(255) ,
 `prev_total_nontax_comp_income` varbinary(255) ,
 `prev_taxable_basic_salary` varbinary(255) ,
 `prev_taxable_13th_month` varbinary(255) ,
 `prev_taxable_salaries` varbinary(255) ,
 `prev_total_taxable` varbinary(255) ,
 `pres_nontax_13th_month` decimal(12,2) ,
 `pres_nontax_de_minimis` decimal(12,2) ,
 `pres_nontax_sss_etc` decimal(12,2) ,
 `pres_nontax_salaries` decimal(12,2) ,
 `total_nontax_comp_income` decimal(12,2) ,
 `pres_taxable_basic_salary` decimal(12,2) ,
 `pres_taxable_13th_month` decimal(12,2) ,
 `pres_taxable_salaries` decimal(13,2) ,
 `pres_total_comp` decimal(12,2) ,
 `total_taxable_comp_income` decimal(12,2) ,
 `exmpn_code` varchar(3) ,
 `exmpn_amt` decimal(12,2) ,
 `premium_paid` decimal(3,2) ,
 `net_table_comp_income` decimal(12,2) ,
 `tax_due` decimal(12,2) ,
 `pres_tax_wthld` decimal(12,2) ,
 `prev_tax_wthld` varbinary(255) ,
 `amt_wthld_dec` decimal(3,2) ,
 `over_wthld` decimal(3,2) ,
 `actual_amt_wthld` decimal(14,2) ,
 `subs_filing` varchar(1) ,
 `resigned_date` date 
)*/;

/*Table structure for table `payroll_1604cf_7_5` */

DROP TABLE IF EXISTS `payroll_1604cf_7_5`;

/*!50001 DROP VIEW IF EXISTS `payroll_1604cf_7_5` */;
/*!50001 DROP TABLE IF EXISTS `payroll_1604cf_7_5` */;

/*!50001 CREATE TABLE  `payroll_1604cf_7_5`(
 `user_id` int(11) ,
 `year` int(1) ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `schedule_num` varchar(4) ,
 `ftype_code` varchar(6) ,
 `comp_tin` varchar(32) ,
 `branch_code_employer` varchar(4) ,
 `return_period` datetime ,
 `seq_num` char(0) ,
 `emp_tin` varchar(255) ,
 `branch_code_employees` varchar(4) ,
 `lastname` varchar(30) ,
 `firstname` varchar(30) ,
 `middlename` varchar(30) ,
 `employment_from` date ,
 `employment_to` datetime ,
 `gross_compensation` decimal(12,2) ,
 `pres_nontax_13th_month` decimal(12,2) ,
 `pres_nontax_de_minimis` decimal(12,2) ,
 `pres_nontax_sss_etc` decimal(12,2) ,
 `pres_nontax_salaries` decimal(12,2) ,
 `total_nontax_comp_income` decimal(12,2) ,
 `pres_taxable_basic_salary` decimal(12,2) ,
 `pres_taxable_13th_month` decimal(12,2) ,
 `pres_taxable_salaries` decimal(13,2) ,
 `total_taxable_comp_income` decimal(12,2) ,
 `exmpn_code` varchar(3) ,
 `exmpn_amt` decimal(12,2) ,
 `premium_paid` decimal(3,2) ,
 `net_table_comp_income` decimal(12,2) ,
 `tax_due` decimal(12,2) ,
 `pres_tax_wthld` decimal(12,2) ,
 `amt_wthld_dec` decimal(3,2) ,
 `over_wthld` decimal(3,2) ,
 `actual_amt_wthld` decimal(14,2) ,
 `subs_filing` varchar(1) ,
 `resigned_date` date 
)*/;

/*Table structure for table `payroll_account_report` */

DROP TABLE IF EXISTS `payroll_account_report`;

/*!50001 DROP VIEW IF EXISTS `payroll_account_report` */;
/*!50001 DROP TABLE IF EXISTS `payroll_account_report` */;

/*!50001 CREATE TABLE  `payroll_account_report`(
 `account_code` varchar(32) ,
 `account_name` varchar(255) ,
 `account_type` varchar(255) 
)*/;

/*Table structure for table `payroll_alpha_breakdown` */

DROP TABLE IF EXISTS `payroll_alpha_breakdown`;

/*!50001 DROP VIEW IF EXISTS `payroll_alpha_breakdown` */;
/*!50001 DROP TABLE IF EXISTS `payroll_alpha_breakdown` */;

/*!50001 CREATE TABLE  `payroll_alpha_breakdown`(
 `full_name` varchar(64) ,
 `year` int(4) ,
 `payroll_date` date ,
 `tax_basic` decimal(15,2) ,
 `tax_income` decimal(12,2) ,
 `min_basic` decimal(12,2) ,
 `min_income` decimal(12,2) ,
 `bonus` decimal(12,2) ,
 `deminimis` decimal(12,2) ,
 `wtax` decimal(12,2) ,
 `sss` decimal(12,2) ,
 `hdmf` decimal(12,2) ,
 `phic` decimal(12,2) ,
 `tot_contri` decimal(14,2) ,
 `employee` int(11) unsigned ,
 `company` int(11) 
)*/;

/*Table structure for table `payroll_alpha_minimum_wage_earner` */

DROP TABLE IF EXISTS `payroll_alpha_minimum_wage_earner`;

/*!50001 DROP VIEW IF EXISTS `payroll_alpha_minimum_wage_earner` */;
/*!50001 DROP TABLE IF EXISTS `payroll_alpha_minimum_wage_earner` */;

/*!50001 CREATE TABLE  `payroll_alpha_minimum_wage_earner`(
 `tin` varchar(255) ,
 `employee_name` varchar(98) ,
 `location` varchar(30) ,
 `hired_date` date ,
 `resigned_date` varbinary(17) ,
 `minwage_day` decimal(12,2) ,
 `minwage_month` decimal(12,2) ,
 `total_year_days` decimal(12,2) ,
 `col_5a` decimal(3,2) ,
 `col_5q` decimal(20,2) ,
 `col_5b` decimal(3,2) ,
 `col_5t` decimal(12,2) ,
 `col_5c` decimal(3,2) ,
 `col_5v` decimal(12,2) ,
 `col_5d` decimal(3,2) ,
 `col_5w` decimal(12,2) ,
 `col_5e` decimal(3,2) ,
 `col_5x` decimal(12,2) ,
 `col_5f` decimal(3,2) ,
 `col_5y` decimal(12,2) ,
 `col_5g` decimal(3,2) ,
 `col_5z` decimal(12,2) ,
 `col_5h` decimal(3,2) ,
 `col_5aa` decimal(12,2) ,
 `col_5i` decimal(3,2) ,
 `col_5ab` decimal(12,2) ,
 `col_5j` decimal(3,2) ,
 `col_5ac` decimal(12,2) ,
 `col_5k` decimal(20,2) ,
 `col_5l` decimal(3,2) ,
 `col_5ad` decimal(3,2) ,
 `col_5m` decimal(3,2) ,
 `col_5ae` decimal(3,2) ,
 `col_5n` decimal(3,2) ,
 `col_5af` decimal(3,2) ,
 `col_5ag` decimal(3,2) ,
 `exempt_code` varchar(3) ,
 `exempt_amount` decimal(12,2) ,
 `premium` decimal(3,2) ,
 `net_taxable` decimal(3,2) ,
 `taxdue` decimal(12,2) ,
 `wtax` decimal(12,2) ,
 `payable` decimal(13,2) ,
 `refund` decimal(13,2) ,
 `total_tax` decimal(12,2) ,
 `sub_filing` varchar(3) ,
 `company` int(11) ,
 `company_name` varchar(64) ,
 `company_address` varchar(128) ,
 `employee` int(11) ,
 `pay_year` int(1) 
)*/;

/*Table structure for table `payroll_alpha_terminated` */

DROP TABLE IF EXISTS `payroll_alpha_terminated`;

/*!50001 DROP VIEW IF EXISTS `payroll_alpha_terminated` */;
/*!50001 DROP TABLE IF EXISTS `payroll_alpha_terminated` */;

/*!50001 CREATE TABLE  `payroll_alpha_terminated`(
 `tin` varchar(255) ,
 `employee_name` varchar(98) ,
 `hired_date` date ,
 `resigned_date` date ,
 `col_4a` decimal(12,2) ,
 `col_4b` decimal(12,2) ,
 `col_4c` decimal(12,2) ,
 `col_4d` decimal(12,2) ,
 `col_4e` decimal(12,2) ,
 `col_4f` decimal(12,2) ,
 `col_4g` decimal(12,2) ,
 `col_4h` decimal(12,2) ,
 `col_4i` decimal(21,2) ,
 `col_4j` decimal(12,2) ,
 `exempt_code` varchar(3) ,
 `exempt_amount` decimal(12,2) ,
 `net_taxable` decimal(12,2) ,
 `taxdue` decimal(12,2) ,
 `wtax` decimal(12,2) ,
 `payable` decimal(13,2) ,
 `refund` decimal(13,2) ,
 `total_tax` decimal(12,2) ,
 `sub_filing` varchar(3) ,
 `company` int(11) ,
 `company_name` varchar(64) ,
 `company_address` varchar(128) ,
 `employee` int(11) ,
 `pay_year` int(1) 
)*/;

/*Table structure for table `payroll_alpha_without_previous` */

DROP TABLE IF EXISTS `payroll_alpha_without_previous`;

/*!50001 DROP VIEW IF EXISTS `payroll_alpha_without_previous` */;
/*!50001 DROP TABLE IF EXISTS `payroll_alpha_without_previous` */;

/*!50001 CREATE TABLE  `payroll_alpha_without_previous`(
 `tin` varchar(255) ,
 `employee_name` varchar(98) ,
 `hired_date` date ,
 `resigned_date` varbinary(17) ,
 `col_4a` decimal(12,2) ,
 `col_4b` decimal(12,2) ,
 `col_4c` decimal(12,2) ,
 `col_4d` decimal(12,2) ,
 `col_4e` decimal(12,2) ,
 `col_4f` decimal(12,2) ,
 `col_4g` decimal(12,2) ,
 `col_4h` decimal(12,2) ,
 `col_4i` decimal(21,2) ,
 `col_4j` decimal(12,2) ,
 `exempt_code` varchar(3) ,
 `exempt_amount` decimal(12,2) ,
 `net_taxable` decimal(12,2) ,
 `taxdue` decimal(12,2) ,
 `wtax` decimal(12,2) ,
 `payable` decimal(13,2) ,
 `refund` decimal(13,2) ,
 `total_tax` decimal(12,2) ,
 `sub_filing` varchar(3) ,
 `company` int(11) ,
 `company_name` varchar(64) ,
 `company_address` varchar(128) ,
 `employee` int(11) ,
 `pay_year` int(1) 
)*/;

/*Table structure for table `payroll_atm_register` */

DROP TABLE IF EXISTS `payroll_atm_register`;

/*!50001 DROP VIEW IF EXISTS `payroll_atm_register` */;
/*!50001 DROP TABLE IF EXISTS `payroll_atm_register` */;

/*!50001 CREATE TABLE  `payroll_atm_register`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `bank_id` int(11) ,
 `bank_account` varchar(32) ,
 `payout_schedule` tinyint(4) ,
 `payout_scheme` tinyint(4) ,
 `amount` decimal(12,2) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `transaction_code` varchar(32) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `record_reference` varchar(11) ,
 `address` varchar(128) ,
 `posting_date` date ,
 `account_no` varchar(128) ,
 `batch_no` int(11) ,
 `bank_code_numeric` varchar(20) ,
 `bank_code_alpha` varchar(30) ,
 `schedule` varchar(3) ,
 `bank_posting_date` varchar(4) 
)*/;

/*Table structure for table `payroll_atm_register_orig` */

DROP TABLE IF EXISTS `payroll_atm_register_orig`;

/*!50001 DROP VIEW IF EXISTS `payroll_atm_register_orig` */;
/*!50001 DROP TABLE IF EXISTS `payroll_atm_register_orig` */;

/*!50001 CREATE TABLE  `payroll_atm_register_orig`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `bank_id` int(11) ,
 `bank_account` varchar(32) ,
 `payout_schedule` tinyint(4) ,
 `payout_scheme` tinyint(4) ,
 `amount` decimal(12,2) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `transaction_code` varchar(32) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `record_reference` varchar(11) ,
 `address` varchar(128) ,
 `posting_date` date ,
 `account_no` varchar(128) ,
 `batch_no` int(11) ,
 `bank_code_numeric` varchar(20) ,
 `bank_code_alpha` varchar(30) ,
 `schedule` varchar(3) ,
 `bank_posting_date` varchar(4) 
)*/;

/*Table structure for table `payroll_attendance_adjustment` */

DROP TABLE IF EXISTS `payroll_attendance_adjustment`;

/*!50001 DROP VIEW IF EXISTS `payroll_attendance_adjustment` */;
/*!50001 DROP TABLE IF EXISTS `payroll_attendance_adjustment` */;

/*!50001 CREATE TABLE  `payroll_attendance_adjustment`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `department_id` int(1) ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `logo` varchar(128) ,
 `date` date ,
 `payroll_date` date ,
 `original_payroll_date` date ,
 `transaction_id` int(1) ,
 `transaction_code` varchar(32) ,
 `transaction_label` varchar(128) ,
 `quantity` decimal(12,3) ,
 `type` varchar(10) ,
 `type_id` int(0) 
)*/;

/*Table structure for table `payroll_authority_debit` */

DROP TABLE IF EXISTS `payroll_authority_debit`;

/*!50001 DROP VIEW IF EXISTS `payroll_authority_debit` */;
/*!50001 DROP TABLE IF EXISTS `payroll_authority_debit` */;

/*!50001 CREATE TABLE  `payroll_authority_debit`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `amount` varbinary(255) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) unsigned ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `transaction_code` varchar(32) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `city` varchar(32) ,
 `bank_name` varchar(50) ,
 `bank_account_no` varchar(128) ,
 `address1` text ,
 `address2` text ,
 `branch_officer` varchar(64) ,
 `branch_position` varchar(64) ,
 `signatory_1` varchar(64) ,
 `signatory_2` varchar(64) ,
 `account_name` varchar(128) 
)*/;

/*Table structure for table `payroll_bank_details_report` */

DROP TABLE IF EXISTS `payroll_bank_details_report`;

/*!50001 DROP VIEW IF EXISTS `payroll_bank_details_report` */;
/*!50001 DROP TABLE IF EXISTS `payroll_bank_details_report` */;

/*!50001 CREATE TABLE  `payroll_bank_details_report`(
 `account_name` varchar(64) ,
 `id_number` varchar(16) ,
 `bank_id` int(11) ,
 `account_number` varchar(32) ,
 `payout_schedule` tinyint(4) ,
 `payout_scheme` tinyint(4) ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `amount` varbinary(255) ,
 `schedule` varchar(3) ,
 `payroll_date_actuall` varchar(4) 
)*/;

/*Table structure for table `payroll_bir` */

DROP TABLE IF EXISTS `payroll_bir`;

/*!50001 DROP VIEW IF EXISTS `payroll_bir` */;
/*!50001 DROP TABLE IF EXISTS `payroll_bir` */;

/*!50001 CREATE TABLE  `payroll_bir`(
 `user_id` int(11) ,
 `year` int(1) ,
 `month_from` varchar(4) ,
 `month_to` varchar(4) ,
 `emp_tin` varchar(255) ,
 `full_name` varchar(100) ,
 `emp_address` varchar(255) ,
 `emp_zipcode` varchar(4) ,
 `birth_date` date ,
 `company_id` int(11) ,
 `civil_status_id` int(11) ,
 `dep_name1` varchar(128) ,
 `dep_bday1` date ,
 `dep_name2` varchar(128) ,
 `dep_bday2` date ,
 `dep_name3` varchar(128) ,
 `dep_bday3` date ,
 `dep_name4` varchar(128) ,
 `dep_bday4` date ,
 `minwage_day` decimal(12,2) ,
 `minwage_month` decimal(12,2) ,
 `minwageflag` tinyint(1) ,
 `comp_tin` varchar(32) ,
 `company` varchar(64) ,
 `rdo` varchar(4) ,
 `comp_address` varchar(128) ,
 `comp_zipcode` varchar(16) ,
 `prev_tin` varchar(32) ,
 `prev_employer` varchar(64) ,
 `prev_address` varchar(128) ,
 `prev_zip` varchar(4) ,
 `item21` decimal(12,2) ,
 `item22` decimal(12,2) ,
 `item23` decimal(12,2) ,
 `item24` decimal(12,2) ,
 `item25` decimal(14,2) ,
 `item26` decimal(12,2) ,
 `item27` decimal(3,2) ,
 `item28` decimal(12,2) ,
 `item29` decimal(12,2) ,
 `item30A` decimal(12,2) ,
 `item30B` decimal(12,2) ,
 `item31` decimal(14,2) ,
 `item32` decimal(12,2) ,
 `item33` decimal(12,2) ,
 `item34` decimal(12,2) ,
 `item35` decimal(12,2) ,
 `item36` decimal(12,2) ,
 `item37` decimal(12,2) ,
 `item38` decimal(12,2) ,
 `item39` decimal(12,2) ,
 `item40` decimal(12,2) ,
 `item41` decimal(12,2) ,
 `item42` decimal(12,2) ,
 `item43` decimal(12,2) ,
 `item44` decimal(12,2) ,
 `item45` decimal(12,2) ,
 `item46` decimal(12,2) ,
 `nitem47A` char(0) ,
 `item47A` decimal(12,2) ,
 `nitem47B` char(0) ,
 `item47B` decimal(12,2) ,
 `item48` decimal(12,2) ,
 `item49` decimal(12,2) ,
 `item50` decimal(12,2) ,
 `item51` decimal(12,2) ,
 `item52` decimal(12,2) ,
 `item53` decimal(12,2) ,
 `nitem54A` char(0) ,
 `item54A` char(0) ,
 `nitem54B` char(0) ,
 `item54B` char(0) ,
 `item55` decimal(12,2) 
)*/;

/*Table structure for table `payroll_bonus_basis` */

DROP TABLE IF EXISTS `payroll_bonus_basis`;

/*!50001 DROP VIEW IF EXISTS `payroll_bonus_basis` */;
/*!50001 DROP TABLE IF EXISTS `payroll_bonus_basis` */;

/*!50001 CREATE TABLE  `payroll_bonus_basis`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `pay_year` int(4) ,
 `jan_reg` double(19,2) ,
 `jan_saladj` double(19,2) ,
 `jan_deminimis` double(19,2) ,
 `feb_reg` double(19,2) ,
 `feb_saladj` double(19,2) ,
 `feb_deminimis` double(19,2) ,
 `mar_reg` double(19,2) ,
 `mar_saladj` double(19,2) ,
 `mar_deminimis` double(19,2) ,
 `apr_reg` double(19,2) ,
 `apr_saladj` double(19,2) ,
 `apr_deminimis` double(19,2) ,
 `may_reg` double(19,2) ,
 `may_saladj` double(19,2) ,
 `may_deminimis` double(19,2) ,
 `jun_reg` double(19,2) ,
 `jun_saladj` double(19,2) ,
 `jun_deminimis` double(19,2) ,
 `jul_reg` double(19,2) ,
 `jul_saladj` double(19,2) ,
 `jul_deminimis` double(19,2) ,
 `aug_reg` double(19,2) ,
 `aug_saladj` double(19,2) ,
 `aug_deminimis` double(19,2) ,
 `sep_reg` double(19,2) ,
 `sep_saladj` double(19,2) ,
 `sep_deminimis` double(19,2) ,
 `oct_reg` double(19,2) ,
 `oct_saladj` double(19,2) ,
 `oct_deminimis` double(19,2) ,
 `nov_reg` double(19,2) ,
 `nov_saladj` double(19,2) ,
 `nov_deminimis` double(19,2) ,
 `dec_reg` double(19,2) ,
 `dec_saladj` double(19,2) ,
 `dec_deminimis` double(19,2) ,
 `total` double(19,2) ,
 `month_count` decimal(4,2) ,
 `bonus` double(19,2) ,
 `ceiling_amount` decimal(12,2) ,
 `taxable` double(19,2) 
)*/;

/*Table structure for table `payroll_contribution_loan_summary` */

DROP TABLE IF EXISTS `payroll_contribution_loan_summary`;

/*!50001 DROP VIEW IF EXISTS `payroll_contribution_loan_summary` */;
/*!50001 DROP TABLE IF EXISTS `payroll_contribution_loan_summary` */;

/*!50001 CREATE TABLE  `payroll_contribution_loan_summary`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `transaction_label` varchar(128) ,
 `transaction_id` int(11) unsigned ,
 `transaction_code` varchar(32) ,
 `reference_no` bigint(20) ,
 `payroll_date` date ,
 `year` bigint(20) ,
 `month` bigint(20) ,
 `date_from` date ,
 `date_to` date ,
 `amount` double(19,2) ,
 `record_reference` varchar(11) ,
 `address` varchar(128) ,
 `phone_no` varchar(255) ,
 `fax_no` varchar(255) 
)*/;

/*Table structure for table `payroll_deduction` */

DROP TABLE IF EXISTS `payroll_deduction`;

/*!50001 DROP VIEW IF EXISTS `payroll_deduction` */;
/*!50001 DROP TABLE IF EXISTS `payroll_deduction` */;

/*!50001 CREATE TABLE  `payroll_deduction`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `project_id` int(11) unsigned ,
 `project` varchar(64) ,
 `project_code` varchar(16) ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `transaction_label` varchar(128) ,
 `transaction_id` int(11) unsigned ,
 `payroll_rate_type` varchar(64) ,
 `payroll_rate_type_id` int(11) ,
 `reference_no` bigint(20) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `start_date` varbinary(10) ,
 `amount` varbinary(255) ,
 `record_reference` varchar(11) ,
 `address` varchar(128) ,
 `phone_no` varchar(255) ,
 `fax_no` varchar(255) 
)*/;

/*Table structure for table `payroll_deduction_schedule_dtl` */

DROP TABLE IF EXISTS `payroll_deduction_schedule_dtl`;

/*!50001 DROP VIEW IF EXISTS `payroll_deduction_schedule_dtl` */;
/*!50001 DROP TABLE IF EXISTS `payroll_deduction_schedule_dtl` */;

/*!50001 CREATE TABLE  `payroll_deduction_schedule_dtl`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `transaction_label` varchar(128) ,
 `transaction_id` int(11) unsigned ,
 `reference_no` bigint(20) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `amount` varbinary(255) ,
 `record_reference` varchar(11) ,
 `address` varchar(128) 
)*/;

/*Table structure for table `payroll_exit_clearance_report` */

DROP TABLE IF EXISTS `payroll_exit_clearance_report`;

/*!50001 DROP VIEW IF EXISTS `payroll_exit_clearance_report` */;
/*!50001 DROP TABLE IF EXISTS `payroll_exit_clearance_report` */;

/*!50001 CREATE TABLE  `payroll_exit_clearance_report`(
 `user_id` int(11) unsigned ,
 `full_name` varchar(64) ,
 `id_number` varchar(16) ,
 `payroll_date` date ,
 `year` int(4) ,
 `date_from` date ,
 `date_to` date ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `project_id` int(11) unsigned ,
 `project_code` varchar(16) ,
 `project` varchar(64) ,
 `position` varchar(64) ,
 `effectivity_date` date ,
 `regularization_date` date ,
 `resigned_date` date ,
 `remarks` char(0) ,
 `payroll_rate_type_id` int(11) ,
 `payroll_rate_type` varchar(64) ,
 `basic` double ,
 `misc` double ,
 `ot` double ,
 `nd` double ,
 `holiday` double ,
 `other_earnings` double ,
 `gross` double ,
 `sss_ee` double ,
 `sss_er` double(19,2) ,
 `sss_ec` double(19,2) ,
 `phic_ee` double ,
 `phic_er` double ,
 `hdmf_ee` double ,
 `hdmf_er` double ,
 `tax` double ,
 `loan` double ,
 `other_nontax` double(19,2) ,
 `employee_ledger` double ,
 `other_deduction` double ,
 `deduction` double ,
 `net_amount` double 
)*/;

/*Table structure for table `payroll_journal_voucher` */

DROP TABLE IF EXISTS `payroll_journal_voucher`;

/*!50001 DROP VIEW IF EXISTS `payroll_journal_voucher` */;
/*!50001 DROP TABLE IF EXISTS `payroll_journal_voucher` */;

/*!50001 CREATE TABLE  `payroll_journal_voucher`(
 `description` text ,
 `account_name` varchar(255) ,
 `account_code` varchar(32) ,
 `credit` varbinary(23) ,
 `debit` varbinary(23) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `address` varchar(128) ,
 `arrangement` varchar(3) 
)*/;

/*Table structure for table `payroll_journal_voucher_extended` */

DROP TABLE IF EXISTS `payroll_journal_voucher_extended`;

/*!50001 DROP VIEW IF EXISTS `payroll_journal_voucher_extended` */;
/*!50001 DROP TABLE IF EXISTS `payroll_journal_voucher_extended` */;

/*!50001 CREATE TABLE  `payroll_journal_voucher_extended`(
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `company` varchar(64) ,
 `address` varchar(128) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `account` varchar(32) ,
 `description` varchar(255) ,
 `sub_account` varchar(32) ,
 `project` char(0) ,
 `project_task` char(0) ,
 `ref_number` char(0) ,
 `quantity` int(1) ,
 `uom` char(0) ,
 `debit_amount` double ,
 `credit_amount` double ,
 `transaction_description` text ,
 `non_billable` varchar(5) 
)*/;

/*Table structure for table `payroll_manpower_charging` */

DROP TABLE IF EXISTS `payroll_manpower_charging`;

/*!50001 DROP VIEW IF EXISTS `payroll_manpower_charging` */;
/*!50001 DROP TABLE IF EXISTS `payroll_manpower_charging` */;

/*!50001 CREATE TABLE  `payroll_manpower_charging`(
 `date` date ,
 `employee` int(11) ,
 `id_number` varchar(16) ,
 `classification_id` int(1) ,
 `classification` varchar(32) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(1) ,
 `project_code` varchar(16) ,
 `project` varchar(64) ,
 `project_id` int(11) ,
 `payroll_rate_type_id` int(1) ,
 `payroll_rate_type` varchar(64) ,
 `payroll_date` date ,
 `date_to` date ,
 `date_from` date ,
 `num_days` bigint(21) ,
 `num_days_cutoff` int(8) ,
 `percent` decimal(27,4) 
)*/;

/*Table structure for table `payroll_manpower_charging_detail` */

DROP TABLE IF EXISTS `payroll_manpower_charging_detail`;

/*!50001 DROP VIEW IF EXISTS `payroll_manpower_charging_detail` */;
/*!50001 DROP TABLE IF EXISTS `payroll_manpower_charging_detail` */;

/*!50001 CREATE TABLE  `payroll_manpower_charging_detail`(
 `project_code` varchar(16) ,
 `project` varchar(64) ,
 `project_id` int(11) unsigned ,
 `employee` int(11) ,
 `date` date ,
 `id_number` varchar(16) ,
 `classification_id` int(1) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(1) ,
 `payroll_rate_type_id` int(1) ,
 `payroll_rate_type` varchar(64) ,
 `payroll_date` date ,
 `date_to` date ,
 `date_from` date ,
 `P14007` varbinary(52) ,
 `P15024` varbinary(52) ,
 `P16000` varbinary(52) ,
 `P16003` varbinary(52) ,
 `P16004` varbinary(52) ,
 `P16010` varbinary(52) ,
 `P16014` varbinary(52) ,
 `P16015` varbinary(52) ,
 `P16016` varbinary(52) 
)*/;

/*Table structure for table `payroll_manpower_charging_summary` */

DROP TABLE IF EXISTS `payroll_manpower_charging_summary`;

/*!50001 DROP VIEW IF EXISTS `payroll_manpower_charging_summary` */;
/*!50001 DROP TABLE IF EXISTS `payroll_manpower_charging_summary` */;

/*!50001 CREATE TABLE  `payroll_manpower_charging_summary`(
 `employee` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `position` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) unsigned ,
 `project_code` varchar(16) ,
 `project` varchar(64) ,
 `project_id` int(11) unsigned ,
 `payroll_rate_type_id` int(11) ,
 `payroll_rate_type` varchar(64) ,
 `payroll_date` date ,
 `cost_center` text ,
 `total_basic` double(19,2) ,
 `misc` double ,
 `overtime` double(19,2) ,
 `other_tax` bigint(20) ,
 `adjustment` bigint(20) ,
 `gross` double ,
 `tax` double ,
 `sss_ee` double ,
 `other_nontax` double(19,2) ,
 `sss_er` double(19,2) ,
 `sss_ec` double(19,2) ,
 `hdmf_er` double(19,2) ,
 `phic_er` double(19,2) ,
 `meal` bigint(20) ,
 `transpo` bigint(20) ,
 `hardship` bigint(20) ,
 `loan` double ,
 `deduction` double ,
 `net_amount` double ,
 `net_orig` bigint(20) ,
 `percent_allocation` bigint(20) 
)*/;

/*Table structure for table `payroll_monthly_deduction` */

DROP TABLE IF EXISTS `payroll_monthly_deduction`;

/*!50001 DROP VIEW IF EXISTS `payroll_monthly_deduction` */;
/*!50001 DROP TABLE IF EXISTS `payroll_monthly_deduction` */;

/*!50001 CREATE TABLE  `payroll_monthly_deduction`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `transaction_label` varchar(128) ,
 `transaction_id` int(11) unsigned ,
 `loan_id` int(11) unsigned ,
 `loan` varchar(128) ,
 `reference_no` bigint(20) ,
 `year` bigint(20) ,
 `month` bigint(20) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `amount` varbinary(255) ,
 `record_reference` varchar(11) ,
 `address` varchar(128) ,
 `phone_no` varchar(255) ,
 `fax_no` varchar(255) 
)*/;

/*Table structure for table `payroll_non_atm_register` */

DROP TABLE IF EXISTS `payroll_non_atm_register`;

/*!50001 DROP VIEW IF EXISTS `payroll_non_atm_register` */;
/*!50001 DROP TABLE IF EXISTS `payroll_non_atm_register` */;

/*!50001 CREATE TABLE  `payroll_non_atm_register`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `bank_account` varchar(32) ,
 `payout_schedule` tinyint(4) ,
 `payout_scheme` tinyint(4) ,
 `amount` decimal(12,2) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) ,
 `department` varbinary(192) ,
 `branch_id` varbinary(192) ,
 `branch` varchar(64) ,
 `transaction_code` varchar(32) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `record_reference` varchar(11) ,
 `address` varchar(128) ,
 `schedule` varchar(3) 
)*/;

/*Table structure for table `payroll_pagibig_loan_to_disk` */

DROP TABLE IF EXISTS `payroll_pagibig_loan_to_disk`;

/*!50001 DROP VIEW IF EXISTS `payroll_pagibig_loan_to_disk` */;
/*!50001 DROP TABLE IF EXISTS `payroll_pagibig_loan_to_disk` */;

/*!50001 CREATE TABLE  `payroll_pagibig_loan_to_disk`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(1) unsigned ,
 `pagibig_branch_code` varchar(32) ,
 `tin` varchar(16) ,
 `co_sss` varchar(32) ,
 `co_phic` varchar(32) ,
 `co_hdmf` varchar(32) ,
 `co_address` varchar(128) ,
 `zipcode` varchar(16) ,
 `contact_no` varchar(255) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `year` int(4) ,
 `month` int(2) ,
 `birth_date` date ,
 `sss_no` varchar(16) ,
 `phic_no` varchar(16) ,
 `hdmf_no` varchar(16) ,
 `loan_type` varchar(128) ,
 `loan_type_id` int(11) unsigned ,
 `partner_loan_id` int(11) ,
 `description` text ,
 `balance` decimal(12,2) ,
 `loan_principal` varbinary(255) ,
 `amount` double(19,2) ,
 `record` varchar(168) ,
 `document_date` datetime 
)*/;

/*Table structure for table `payroll_pagibig_to_disk` */

DROP TABLE IF EXISTS `payroll_pagibig_to_disk`;

/*!50001 DROP VIEW IF EXISTS `payroll_pagibig_to_disk` */;
/*!50001 DROP TABLE IF EXISTS `payroll_pagibig_to_disk` */;

/*!50001 CREATE TABLE  `payroll_pagibig_to_disk`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `title` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `bcode` varchar(32) ,
 `pagibig_branch_code` varchar(32) ,
 `co_hdmf` varchar(32) ,
 `co_address` varchar(128) ,
 `zipcode` varchar(16) ,
 `contact_no` varchar(255) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `year` int(4) ,
 `month` int(2) ,
 `payroll_date` date ,
 `birth_date` date ,
 `hdmf_no` varchar(16) ,
 `hired_date` date ,
 `resigned_date` date ,
 `sbr_no_hdmf` char(0) ,
 `sbr_date_hdmf` char(0) ,
 `govt_status` varchar(1) ,
 `hdmf_emp` double ,
 `hdmf_com` double ,
 `PagIbigAdd` double ,
 `record` varchar(168) ,
 `document_date` datetime 
)*/;

/*Table structure for table `payroll_partners` */

DROP TABLE IF EXISTS `payroll_partners`;

/*!50001 DROP VIEW IF EXISTS `payroll_partners` */;
/*!50001 DROP TABLE IF EXISTS `payroll_partners` */;

/*!50001 CREATE TABLE  `payroll_partners`(
 `user_id` int(11) unsigned ,
 `company_id` int(11) ,
 `taxcode_id` int(1) ,
 `payroll_rate_type_id` int(1) ,
 `payroll_schedule_id` int(1) ,
 `total_year_days` decimal(5,2) ,
 `salary` varbinary(255) ,
 `minimum_takehome` varbinary(255) ,
 `bank_account` varchar(32) ,
 `quitclaim` tinyint(1) ,
 `location_id` int(11) ,
 `sss_no` varchar(16) ,
 `sss_mode` int(1) ,
 `sss_week` varchar(32) ,
 `sss_amount` varbinary(255) ,
 `hdmf_no` varchar(16) ,
 `hdmf_mode` int(1) ,
 `hdmf_week` varchar(32) ,
 `hdmf_amount` varbinary(255) ,
 `phic_no` varchar(16) ,
 `phic_mode` int(11) ,
 `phic_week` varchar(32) ,
 `phic_amount` varbinary(255) ,
 `ecola_week` varchar(32) ,
 `tin` varchar(16) ,
 `tax_mode` int(1) ,
 `tax_week` varchar(32) ,
 `payment_type_id` int(11) ,
 `fixed_rate` tinyint(1) ,
 `sensitivity` tinyint(1) ,
 `created_by` int(11) ,
 `created_on` timestamp ,
 `modified_by` int(11) ,
 `modified_on` datetime ,
 `remain` int(11) ,
 `deleted` tinyint(1) 
)*/;

/*Table structure for table `payroll_partners_contribution` */

DROP TABLE IF EXISTS `payroll_partners_contribution`;

/*!50001 DROP VIEW IF EXISTS `payroll_partners_contribution` */;
/*!50001 DROP TABLE IF EXISTS `payroll_partners_contribution` */;

/*!50001 CREATE TABLE  `payroll_partners_contribution`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `title` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `tin` varchar(32) ,
 `co_sss` varchar(32) ,
 `co_phic` varchar(32) ,
 `co_hdmf` varchar(32) ,
 `co_address` varchar(128) ,
 `zipcode` varchar(16) ,
 `company_code` varchar(16) ,
 `contact_no` varchar(255) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `year` int(4) ,
 `month` int(2) ,
 `payroll_date` date ,
 `birth_date` date ,
 `sss_no` varchar(16) ,
 `phic_no` varchar(16) ,
 `hdmf_no` varchar(16) ,
 `hired_date` date ,
 `resigned_date` date ,
 `sbr_no_hdmf` varchar(16) ,
 `sbr_no_phic` varchar(16) ,
 `sbr_no_sss` varchar(16) ,
 `sbr_date_hdmf` date ,
 `sbr_date_phic` date ,
 `sbr_date_sss` date ,
 `govt_status` varchar(1) ,
 `sss_emp` double ,
 `sss_com` double ,
 `sss_ecc` double ,
 `hdmf_emp` double ,
 `hdmf_com` double ,
 `phic_emp` double ,
 `phic_com` double 
)*/;

/*Table structure for table `payroll_partners_contribution_current_and_closed` */

DROP TABLE IF EXISTS `payroll_partners_contribution_current_and_closed`;

/*!50001 DROP VIEW IF EXISTS `payroll_partners_contribution_current_and_closed` */;
/*!50001 DROP TABLE IF EXISTS `payroll_partners_contribution_current_and_closed` */;

/*!50001 CREATE TABLE  `payroll_partners_contribution_current_and_closed`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `title` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `tin` varchar(32) ,
 `co_sss` varchar(32) ,
 `co_phic` varchar(32) ,
 `co_hdmf` varchar(32) ,
 `co_address` varchar(128) ,
 `zipcode` varchar(16) ,
 `company_code` varchar(16) ,
 `contact_no` varchar(255) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `year` bigint(20) ,
 `month` bigint(20) ,
 `payroll_date` date ,
 `birth_date` date ,
 `sss_no` varchar(16) ,
 `phic_no` varchar(16) ,
 `hdmf_no` varchar(16) ,
 `hired_date` date ,
 `resigned_date` date ,
 `sbr_no_hdmf` varchar(16) ,
 `sbr_no_phic` varchar(16) ,
 `sbr_no_sss` varchar(16) ,
 `sbr_date_hdmf` date ,
 `sbr_date_phic` date ,
 `sbr_date_sss` date ,
 `govt_status` varchar(1) ,
 `sss_emp` double ,
 `sss_com` double ,
 `sss_ecc` double ,
 `hdmf_emp` double ,
 `hdmf_com` double ,
 `phic_emp` double ,
 `phic_com` double 
)*/;

/*Table structure for table `payroll_partners_contribution_hdmf` */

DROP TABLE IF EXISTS `payroll_partners_contribution_hdmf`;

/*!50001 DROP VIEW IF EXISTS `payroll_partners_contribution_hdmf` */;
/*!50001 DROP TABLE IF EXISTS `payroll_partners_contribution_hdmf` */;

/*!50001 CREATE TABLE  `payroll_partners_contribution_hdmf`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `title` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `bcode` varchar(32) ,
 `pagibig_branch_code` varchar(32) ,
 `co_hdmf` varchar(32) ,
 `co_address` varchar(128) ,
 `zipcode` varchar(16) ,
 `company_code` varchar(16) ,
 `contact_no` varchar(255) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `year` int(4) ,
 `month` int(2) ,
 `payroll_date` date ,
 `birth_date` date ,
 `hdmf_no` varchar(16) ,
 `hired_date` date ,
 `resigned_date` date ,
 `sbr_no_hdmf` char(0) ,
 `sbr_date_hdmf` char(0) ,
 `govt_status` varchar(1) ,
 `hdmf_emp` double ,
 `hdmf_com` double ,
 `PagIbigAdd` double ,
 `record` varchar(168) 
)*/;

/*Table structure for table `payroll_partners_contribution_phic` */

DROP TABLE IF EXISTS `payroll_partners_contribution_phic`;

/*!50001 DROP VIEW IF EXISTS `payroll_partners_contribution_phic` */;
/*!50001 DROP TABLE IF EXISTS `payroll_partners_contribution_phic` */;

/*!50001 CREATE TABLE  `payroll_partners_contribution_phic`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `title` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `tin` varchar(32) ,
 `co_sss` varchar(32) ,
 `co_phic` varchar(32) ,
 `co_hdmf` varchar(32) ,
 `co_address` varchar(128) ,
 `zipcode` varchar(16) ,
 `company_code` varchar(16) ,
 `contact_no` varchar(255) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `year` int(4) ,
 `month` int(2) ,
 `payroll_date` date ,
 `birth_date` date ,
 `sss_no` varchar(16) ,
 `phic_no` varchar(16) ,
 `hdmf_no` varchar(16) ,
 `hired_date` date ,
 `resigned_date` date ,
 `sbr_no_phic` char(0) ,
 `sbr_date_phic` char(0) ,
 `govt_status` varchar(1) ,
 `phic_emp` double ,
 `phic_com` double 
)*/;

/*Table structure for table `payroll_partners_contribution_quarterly` */

DROP TABLE IF EXISTS `payroll_partners_contribution_quarterly`;

/*!50001 DROP VIEW IF EXISTS `payroll_partners_contribution_quarterly` */;
/*!50001 DROP TABLE IF EXISTS `payroll_partners_contribution_quarterly` */;

/*!50001 CREATE TABLE  `payroll_partners_contribution_quarterly`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `tin` varchar(32) ,
 `co_sss` varchar(32) ,
 `co_phic` varchar(32) ,
 `co_hdmf` varchar(32) ,
 `co_address` varchar(128) ,
 `zipcode` varchar(16) ,
 `contact_no` varchar(255) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `birth_date` date ,
 `sss_no` varchar(16) ,
 `phic_no` varchar(16) ,
 `hdmf_no` varchar(16) ,
 `year` int(4) ,
 `period_month` int(0) ,
 `sss_1` double ,
 `sss_2` double ,
 `sss_3` double ,
 `ec_1` double ,
 `ec_2` double ,
 `ec_3` double ,
 `hdmf_e1` double ,
 `hdmf_e2` double ,
 `hdmf_e3` double ,
 `hdmf_c1` double ,
 `hdmf_c2` double ,
 `hdmf_c3` double ,
 `phic_e1` double ,
 `phic_e2` double ,
 `phic_e3` double ,
 `phic_c1` double ,
 `phic_c2` double ,
 `phic_c3` double 
)*/;

/*Table structure for table `payroll_partners_contribution_sss` */

DROP TABLE IF EXISTS `payroll_partners_contribution_sss`;

/*!50001 DROP VIEW IF EXISTS `payroll_partners_contribution_sss` */;
/*!50001 DROP TABLE IF EXISTS `payroll_partners_contribution_sss` */;

/*!50001 CREATE TABLE  `payroll_partners_contribution_sss`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `title` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `tin` varchar(32) ,
 `co_sss` varchar(32) ,
 `co_address` varchar(128) ,
 `zipcode` varchar(16) ,
 `company_code` varchar(16) ,
 `contact_no` varchar(255) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `year` int(4) ,
 `month` int(2) ,
 `payroll_date` date ,
 `birth_date` date ,
 `sss_no` varchar(16) ,
 `phic_no` varchar(16) ,
 `hdmf_no` varchar(16) ,
 `hired_date` date ,
 `resigned_date` date ,
 `sbr_no_sss` char(0) ,
 `sbr_date_sss` char(0) ,
 `govt_status` varchar(1) ,
 `sss_emp` double ,
 `sss_com` double ,
 `sss_ecc` double 
)*/;

/*Table structure for table `payroll_partners_loan` */

DROP TABLE IF EXISTS `payroll_partners_loan`;

/*!50001 DROP VIEW IF EXISTS `payroll_partners_loan` */;
/*!50001 DROP TABLE IF EXISTS `payroll_partners_loan` */;

/*!50001 CREATE TABLE  `payroll_partners_loan`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `tin` varchar(32) ,
 `co_sss` varchar(32) ,
 `co_phic` varchar(32) ,
 `co_hdmf` varchar(32) ,
 `co_address` varchar(128) ,
 `zipcode` varchar(16) ,
 `contact_no` varchar(255) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `year` int(4) ,
 `month` int(2) ,
 `birth_date` date ,
 `sss_no` varchar(16) ,
 `phic_no` varchar(16) ,
 `hdmf_no` varchar(16) ,
 `loan` int(11) ,
 `loan_type` varchar(128) ,
 `loan_type_id` int(11) unsigned ,
 `partner_loan_id` int(11) ,
 `description` text ,
 `balance` double(19,2) ,
 `entry_date` date ,
 `category` varchar(128) ,
 `loan_principal` double(19,2) ,
 `amount` double(19,2) 
)*/;

/*Table structure for table `payroll_partners_loan_hdmf` */

DROP TABLE IF EXISTS `payroll_partners_loan_hdmf`;

/*!50001 DROP VIEW IF EXISTS `payroll_partners_loan_hdmf` */;
/*!50001 DROP TABLE IF EXISTS `payroll_partners_loan_hdmf` */;

/*!50001 CREATE TABLE  `payroll_partners_loan_hdmf`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `tin` varchar(16) ,
 `co_sss` varchar(32) ,
 `co_phic` varchar(32) ,
 `co_hdmf` varchar(32) ,
 `co_address` varchar(128) ,
 `zipcode` varchar(16) ,
 `contact_no` varchar(255) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `year` int(4) ,
 `month` int(2) ,
 `birth_date` date ,
 `sss_no` varchar(16) ,
 `phic_no` varchar(16) ,
 `hdmf_no` varchar(16) ,
 `loan_type` varchar(128) ,
 `loan_type_id` int(11) unsigned ,
 `partner_loan_id` int(11) ,
 `description` text ,
 `balance` decimal(12,2) ,
 `loan_principal` varbinary(255) ,
 `amount` double(19,2) 
)*/;

/*Table structure for table `payroll_partners_loan_sss` */

DROP TABLE IF EXISTS `payroll_partners_loan_sss`;

/*!50001 DROP VIEW IF EXISTS `payroll_partners_loan_sss` */;
/*!50001 DROP TABLE IF EXISTS `payroll_partners_loan_sss` */;

/*!50001 CREATE TABLE  `payroll_partners_loan_sss`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `tin` varchar(32) ,
 `co_sss` varchar(32) ,
 `co_phic` varchar(32) ,
 `co_hdmf` varchar(32) ,
 `co_address` varchar(128) ,
 `zipcode` varchar(16) ,
 `contact_no` varchar(255) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `year` int(4) ,
 `month` int(2) ,
 `birth_date` date ,
 `sss_no` varchar(16) ,
 `phic_no` varchar(16) ,
 `hdmf_no` varchar(16) ,
 `loan_type` varchar(128) ,
 `loan_type_id` int(11) unsigned ,
 `partner_loan_id` int(11) ,
 `description` text ,
 `balance` decimal(12,2) ,
 `loan_principal` varbinary(255) ,
 `amount` varbinary(255) 
)*/;

/*Table structure for table `payroll_payslip` */

DROP TABLE IF EXISTS `payroll_payslip`;

/*!50001 DROP VIEW IF EXISTS `payroll_payslip` */;
/*!50001 DROP TABLE IF EXISTS `payroll_payslip` */;

/*!50001 CREATE TABLE  `payroll_payslip`(
 `employee` int(11) unsigned ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `address` varchar(128) ,
 `city` varchar(32) ,
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `department_id` int(11) ,
 `department_code` varchar(16) ,
 `tin` varchar(16) ,
 `transaction_label` varchar(128) ,
 `transaction_class_code` varchar(32) ,
 `transaction_code` varchar(32) ,
 `qty` varbinary(291) ,
 `amount` double(19,2) ,
 `transaction_type_id` int(11) ,
 `group` varchar(10) ,
 `type` varchar(10) ,
 `record_id` varbinary(11) ,
 `beginning_balance` double(19,2) ,
 `running_balance` double(19,2) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `taxcode` varchar(50) ,
 `phone_no` varchar(255) ,
 `fax_no` varchar(255) 
)*/;

/*Table structure for table `payroll_payslip_abraham` */

DROP TABLE IF EXISTS `payroll_payslip_abraham`;

/*!50001 DROP VIEW IF EXISTS `payroll_payslip_abraham` */;
/*!50001 DROP TABLE IF EXISTS `payroll_payslip_abraham` */;

/*!50001 CREATE TABLE  `payroll_payslip_abraham`(
 `employee` int(11) unsigned ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `address` varchar(128) ,
 `city` varchar(32) ,
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `department_id` int(11) ,
 `department_code` varchar(16) ,
 `project_id` int(11) unsigned ,
 `project_code` varchar(16) ,
 `project` varchar(64) ,
 `payroll_rate_type_id` int(11) ,
 `payroll_rate_type` varchar(64) ,
 `adjustment` bigint(20) ,
 `other_taxable` bigint(20) ,
 `absent_tardy` bigint(20) ,
 `sss` bigint(20) ,
 `philhealth` bigint(20) ,
 `pag_ibig` bigint(20) ,
 `nontax_income` bigint(20) ,
 `nd` bigint(20) ,
 `reg` bigint(20) ,
 `rest` bigint(20) ,
 `rest_x8` bigint(20) ,
 `sp` bigint(20) ,
 `sp_x8` bigint(20) ,
 `rest_sp` bigint(20) ,
 `rest_sp_x8` bigint(20) ,
 `legal` double(19,2) ,
 `legal_x8` bigint(20) ,
 `rest_legal` bigint(20) ,
 `rest_leg_x8` bigint(20) ,
 `nd_otnd` bigint(20) ,
 `reg_otnd` bigint(20) ,
 `rest_otnd` bigint(20) ,
 `rest_x8_otnd` bigint(20) ,
 `sp_otnd` bigint(20) ,
 `sp_x8_otnd` bigint(20) ,
 `rest_sp_otnd` bigint(20) ,
 `rest_sp_x8_otnd` bigint(20) ,
 `legal_otnd` bigint(20) ,
 `legal_x8_otnd` bigint(20) ,
 `rest_legal_otnd` bigint(20) ,
 `rest_leg_x8_otnd` bigint(20) ,
 `nd_hrs` bigint(20) ,
 `reg_hrs` bigint(20) ,
 `rest_hrs` bigint(20) ,
 `rest_x8_hrs` bigint(20) ,
 `sp_hrs` bigint(20) ,
 `sp_x8_hrs` bigint(20) ,
 `rest_sp_hrs` bigint(20) ,
 `rest_sp_x8_hrs` bigint(20) ,
 `legal_hrs` bigint(20) ,
 `legal_x8_hrs` bigint(20) ,
 `rest_legal_hrs` bigint(20) ,
 `rest_leg_x8_hrs` bigint(20) ,
 `health_card` bigint(20) ,
 `other_deduction_one` bigint(20) ,
 `other_deduction_two` bigint(20) ,
 `other_deduction_three` bigint(20) ,
 `sss_sal_loan_payments` bigint(20) ,
 `sss_cal_loan_payments` bigint(20) ,
 `hdmf_sal_loan_payments` bigint(20) ,
 `hdmf_cal_loan_payments` bigint(20) ,
 `company_loan_payments` bigint(20) ,
 `sss_sal_loan_balance` bigint(20) ,
 `sss_cal_loan_balance` bigint(20) ,
 `hdmf_sal_loan_balance` bigint(20) ,
 `hdmf_cal_loan_balance` bigint(20) ,
 `tax_status` bigint(20) ,
 `ytd_sss` bigint(20) ,
 `ytd_philhealth` bigint(20) ,
 `ytd_pag_ibig` bigint(20) ,
 `tin` varchar(16) ,
 `transaction_label` varchar(128) ,
 `transaction_class_code` varchar(32) ,
 `transaction_code` varchar(32) ,
 `qty` varbinary(291) ,
 `amount` double(19,2) ,
 `transaction_type_id` int(11) ,
 `group` varchar(10) ,
 `type` varchar(10) ,
 `record_id` varbinary(11) ,
 `beginning_balance` double(19,2) ,
 `running_balance` double(19,2) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `taxcode` varchar(50) ,
 `phone_no` varchar(255) ,
 `fax_no` varchar(255) 
)*/;

/*Table structure for table `payroll_payslip_riofil` */

DROP TABLE IF EXISTS `payroll_payslip_riofil`;

/*!50001 DROP VIEW IF EXISTS `payroll_payslip_riofil` */;
/*!50001 DROP TABLE IF EXISTS `payroll_payslip_riofil` */;

/*!50001 CREATE TABLE  `payroll_payslip_riofil`(
 `employee` int(11) unsigned ,
 `status` varchar(32) ,
 `position` varchar(64) ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `address` varchar(128) ,
 `city` varchar(32) ,
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `department_id` int(1) ,
 `department_code` varchar(16) ,
 `project_id` int(11) unsigned ,
 `project_code` varchar(16) ,
 `project` varchar(64) ,
 `payroll_rate_type_id` int(11) ,
 `payroll_rate_type` varchar(64) ,
 `adjustment` double(19,2) ,
 `other_taxable` int(1) ,
 `absent` double(19,2) ,
 `late` double(19,2) ,
 `undertime` double(19,2) ,
 `lwop` double(19,2) ,
 `absent_hours` double(19,2) ,
 `late_hours` double(19,2) ,
 `undertime_hours` double(19,2) ,
 `lwop_hours` double(19,2) ,
 `absent_tardy` double(19,2) ,
 `sss` int(1) ,
 `philhealth` int(1) ,
 `pag_ibig` int(1) ,
 `nontax_income` int(1) ,
 `nd` double(19,2) ,
 `reg` double(19,2) ,
 `nd_otnd` double(19,2) ,
 `reg_otnd` double(19,2) ,
 `rest` double(19,2) ,
 `rest_otnd` double(19,2) ,
 `rest_x8_otnd` double(19,2) ,
 `rest_x8` double(19,2) ,
 `doff` double(19,2) ,
 `doff_x8` double(19,2) ,
 `hourly_rate` double(19,2) ,
 `legal` double(19,2) ,
 `legal_x8` double(19,2) ,
 `legal_otnd` double(19,2) ,
 `legal_x8_otnd` double(19,2) ,
 `rest_legal` double(19,2) ,
 `rest_leg_x8` double(19,2) ,
 `rest_legal_otnd` double(19,2) ,
 `rest_leg_x8_otnd` double(19,2) ,
 `sp` double(19,2) ,
 `sp_x8` double(19,2) ,
 `sp_otnd` double(19,2) ,
 `sp_x8_otnd` double(19,2) ,
 `rest_sp` double(19,2) ,
 `rest_sp_x8` double(19,2) ,
 `rest_sp_otnd` double(19,2) ,
 `rest_sp_x8_otnd` double(19,2) ,
 `dobot` double(19,2) ,
 `dobot_x8` double(19,2) ,
 `dobot_otnd` double(19,2) ,
 `dobot_x8_otnd` double(19,2) ,
 `rest_dobot` double(19,2) ,
 `rest_dobot_x8` double(19,2) ,
 `rest_dobot_otnd` double(19,2) ,
 `rest_dobot_x8_otnd` double(19,2) ,
 `reg_hrs` double(19,2) ,
 `nd_hrs` double(19,2) ,
 `rest_hrs` double(19,2) ,
 `rest_otnd_hrs` double(19,2) ,
 `rest_x8_otnd_hrs` double(19,2) ,
 `rest_x8_hrs` double(19,2) ,
 `doff_hrs` double(19,2) ,
 `doff_x8_hrs` double(19,2) ,
 `legal_hrs` double(19,2) ,
 `legal_x8_hrs` double(19,2) ,
 `rest_legal_hrs` double(19,2) ,
 `rest_leg_x8_hrs` double(19,2) ,
 `sp_hrs` double(19,2) ,
 `sp_x8_hrs` double(19,2) ,
 `rest_sp_hrs` double(19,2) ,
 `rest_sp_x8_hrs` double(19,2) ,
 `dobot_hrs` double(19,2) ,
 `dobot_x8_hrs` double(19,2) ,
 `dobot_otnd_hrs` double(19,2) ,
 `dobot_x8_otnd_hrs` double(19,2) ,
 `rest_dobot_hrs` double(19,2) ,
 `rest_dobot_x8_hrs` double(19,2) ,
 `rest_dobot_otnd_hrs` double(19,2) ,
 `rest_dobot_x8_otnd_hrs` double(19,2) ,
 `health_card` int(1) ,
 `other_deduction_one` int(1) ,
 `other_deduction_two` int(1) ,
 `other_deduction_three` int(1) ,
 `sss_sal_loan_payments` int(1) ,
 `sss_cal_loan_payments` int(1) ,
 `hdmf_sal_loan_payments` int(1) ,
 `hdmf_cal_loan_payments` int(1) ,
 `company_loan_payments` int(1) ,
 `sss_sal_loan_balance` int(1) ,
 `sss_cal_loan_balance` int(1) ,
 `hdmf_sal_loan_balance` int(1) ,
 `hdmf_cal_loan_balance` int(1) ,
 `tax_status` int(1) ,
 `ytd_sss` int(1) ,
 `ytd_philhealth` int(1) ,
 `ytd_pag_ibig` int(1) ,
 `tin` varchar(16) ,
 `transaction_label` varchar(128) ,
 `transaction_class_code` varchar(32) ,
 `transaction_code` varchar(32) ,
 `qty` varbinary(291) ,
 `amount` double(19,2) ,
 `transaction_type_id` int(1) ,
 `group` varchar(10) ,
 `type` varchar(10) ,
 `record_id` varbinary(11) ,
 `beginning_balance` double(19,2) ,
 `running_balance` double(19,2) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `date_from_applicable` varchar(10) ,
 `date_to_applicable` varchar(10) ,
 `taxcode` varchar(50) ,
 `phone_no` varchar(255) ,
 `fax_no` varchar(255) 
)*/;

/*Table structure for table `payroll_preliminary_cost_center` */

DROP TABLE IF EXISTS `payroll_preliminary_cost_center`;

/*!50001 DROP VIEW IF EXISTS `payroll_preliminary_cost_center` */;
/*!50001 DROP TABLE IF EXISTS `payroll_preliminary_cost_center` */;

/*!50001 CREATE TABLE  `payroll_preliminary_cost_center`(
 `company` varchar(64) ,
 `company_id` int(1) unsigned ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `payroll_date` date ,
 `payment_type_id` tinyint(1) ,
 `location_id` int(11) ,
 `sensitivity` tinyint(1) ,
 `date_from` date ,
 `date_to` date ,
 `basic` double ,
 `aut` double ,
 `ot` double ,
 `nd` double ,
 `holiday` double ,
 `other_earnings` double ,
 `sss` double ,
 `phic` double ,
 `hdmf` double ,
 `tax` double ,
 `loan` double ,
 `employee_ledger` double ,
 `other_deduction` double ,
 `net_amount` double 
)*/;

/*Table structure for table `payroll_preliminary_deduction` */

DROP TABLE IF EXISTS `payroll_preliminary_deduction`;

/*!50001 DROP VIEW IF EXISTS `payroll_preliminary_deduction` */;
/*!50001 DROP TABLE IF EXISTS `payroll_preliminary_deduction` */;

/*!50001 CREATE TABLE  `payroll_preliminary_deduction`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `payroll_rate_type_id` int(11) ,
 `payroll_rate_type` varchar(64) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `transaction_id` int(1) unsigned ,
 `transaction_label` varchar(128) ,
 `amount` double 
)*/;

/*Table structure for table `payroll_preliminary_earnings` */

DROP TABLE IF EXISTS `payroll_preliminary_earnings`;

/*!50001 DROP VIEW IF EXISTS `payroll_preliminary_earnings` */;
/*!50001 DROP TABLE IF EXISTS `payroll_preliminary_earnings` */;

/*!50001 CREATE TABLE  `payroll_preliminary_earnings`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `transaction_label` varchar(128) ,
 `amount` double ,
 `transaction_type` varchar(32) 
)*/;

/*Table structure for table `payroll_preliminary_report` */

DROP TABLE IF EXISTS `payroll_preliminary_report`;

/*!50001 DROP VIEW IF EXISTS `payroll_preliminary_report` */;
/*!50001 DROP TABLE IF EXISTS `payroll_preliminary_report` */;

/*!50001 CREATE TABLE  `payroll_preliminary_report`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `sensitivity` tinyint(1) ,
 `basic` double ,
 `cola` double ,
 `nd` double ,
 `overtime` double ,
 `transpo` double ,
 `comm` double ,
 `oth_inc_taxable` double(19,2) ,
 `oth_inc_nontax` double ,
 `absences` double ,
 `gross_pay` double ,
 `whtax` double ,
 `sss` double ,
 `Ssser` double ,
 `phic` double ,
 `Phicer` double ,
 `hdmf` double ,
 `Hdmfer` double ,
 `hdmf_add` double ,
 `sss_loan` double ,
 `hdmf_loan` double ,
 `oth_ded` double ,
 `netpay` double 
)*/;

/*Table structure for table `payroll_register_closed_report` */

DROP TABLE IF EXISTS `payroll_register_closed_report`;

/*!50001 DROP VIEW IF EXISTS `payroll_register_closed_report` */;
/*!50001 DROP TABLE IF EXISTS `payroll_register_closed_report` */;

/*!50001 CREATE TABLE  `payroll_register_closed_report`(
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `employee_code` varchar(16) ,
 `employee_name` varchar(64) ,
 `basic` double ,
 `aut` double ,
 `ot` double ,
 `nd` double ,
 `holiday` double ,
 `other_earnings` double ,
 `gross` double ,
 `sss` double ,
 `phic` double ,
 `hdmf` double ,
 `tax` double ,
 `loan` double ,
 `employee_ledger` double ,
 `other_deduction` double ,
 `deduction` double ,
 `net_amount` double 
)*/;

/*Table structure for table `payroll_register_cost_center` */

DROP TABLE IF EXISTS `payroll_register_cost_center`;

/*!50001 DROP VIEW IF EXISTS `payroll_register_cost_center` */;
/*!50001 DROP TABLE IF EXISTS `payroll_register_cost_center` */;

/*!50001 CREATE TABLE  `payroll_register_cost_center`(
 `company` varchar(64) ,
 `company_id` int(1) unsigned ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `payroll_date` date ,
 `payment_type_id` tinyint(1) ,
 `location_id` int(11) ,
 `sensitivity` tinyint(1) ,
 `date_from` date ,
 `date_to` date ,
 `basic` double ,
 `aut` double ,
 `ot` double ,
 `nd` double ,
 `holiday` double ,
 `other_earnings` double ,
 `gross` double ,
 `sss` double ,
 `phic` double ,
 `hdmf` double ,
 `tax` double ,
 `loan` double ,
 `employee_ledger` double ,
 `other_deduction` double ,
 `deduction` double ,
 `net_amount` double 
)*/;

/*Table structure for table `payroll_register_current_report` */

DROP TABLE IF EXISTS `payroll_register_current_report`;

/*!50001 DROP VIEW IF EXISTS `payroll_register_current_report` */;
/*!50001 DROP TABLE IF EXISTS `payroll_register_current_report` */;

/*!50001 CREATE TABLE  `payroll_register_current_report`(
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `employee_code` varchar(16) ,
 `employee_name` varchar(64) ,
 `basic` double ,
 `aut` double ,
 `ot` double ,
 `nd` double ,
 `holiday` double ,
 `other_earnings` double ,
 `gross` double ,
 `sss` double ,
 `phic` double ,
 `hdmf` double ,
 `tax` double ,
 `loan` double ,
 `employee_ledger` double ,
 `other_deduction` double ,
 `deduction` double ,
 `net_amount` double 
)*/;

/*Table structure for table `payroll_register_deduction` */

DROP TABLE IF EXISTS `payroll_register_deduction`;

/*!50001 DROP VIEW IF EXISTS `payroll_register_deduction` */;
/*!50001 DROP TABLE IF EXISTS `payroll_register_deduction` */;

/*!50001 CREATE TABLE  `payroll_register_deduction`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `transaction_label` varchar(128) ,
 `amount` double 
)*/;

/*Table structure for table `payroll_register_earnings` */

DROP TABLE IF EXISTS `payroll_register_earnings`;

/*!50001 DROP VIEW IF EXISTS `payroll_register_earnings` */;
/*!50001 DROP TABLE IF EXISTS `payroll_register_earnings` */;

/*!50001 CREATE TABLE  `payroll_register_earnings`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department` varchar(64) ,
 `department_id` int(11) unsigned ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `payroll_date` date ,
 `transaction_label` varchar(128) ,
 `date_from` date ,
 `date_to` date ,
 `amount` double ,
 `transaction_type` varchar(32) 
)*/;

/*Table structure for table `payroll_register_per_department` */

DROP TABLE IF EXISTS `payroll_register_per_department`;

/*!50001 DROP VIEW IF EXISTS `payroll_register_per_department` */;
/*!50001 DROP TABLE IF EXISTS `payroll_register_per_department` */;

/*!50001 CREATE TABLE  `payroll_register_per_department`(
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `total_dept` int(11) ,
 `basic` double ,
 `cola` double ,
 `nd` double ,
 `overtime` double ,
 `transpo` double ,
 `comm` double ,
 `oth_inc_taxable` double(19,2) ,
 `oth_inc_nontax` double ,
 `absences` double ,
 `gross_pay` double ,
 `whtax` double ,
 `sss` double ,
 `Ssser` double ,
 `phic` double ,
 `Phicer` double ,
 `hdmf` double ,
 `Hdmfer` double ,
 `hdmf_add` double ,
 `sss_loan` double ,
 `hdmf_loan` double ,
 `oth_ded` double ,
 `netpay` double 
)*/;

/*Table structure for table `payroll_register_position` */

DROP TABLE IF EXISTS `payroll_register_position`;

/*!50001 DROP VIEW IF EXISTS `payroll_register_position` */;
/*!50001 DROP TABLE IF EXISTS `payroll_register_position` */;

/*!50001 CREATE TABLE  `payroll_register_position`(
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `project_id` int(11) unsigned ,
 `project` varchar(64) ,
 `department_id` int(11) ,
 `department` varchar(64) ,
 `employee_code` varchar(16) ,
 `position` varchar(64) ,
 `payroll_rate_type_id` int(11) ,
 `payroll_rate_type` varchar(64) ,
 `basic` double ,
 `aut` double ,
 `ot` double ,
 `nd` double ,
 `holiday` double ,
 `other_earnings` double ,
 `gross` double ,
 `sss` double ,
 `phic` double ,
 `hdmf` double ,
 `tax` double ,
 `loan` double ,
 `employee_ledger` double ,
 `other_deduction` double ,
 `deduction` double ,
 `net_amount` double 
)*/;

/*Table structure for table `payroll_register_position_closed_report` */

DROP TABLE IF EXISTS `payroll_register_position_closed_report`;

/*!50001 DROP VIEW IF EXISTS `payroll_register_position_closed_report` */;
/*!50001 DROP TABLE IF EXISTS `payroll_register_position_closed_report` */;

/*!50001 CREATE TABLE  `payroll_register_position_closed_report`(
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `project_id` int(11) unsigned ,
 `project_code` varchar(16) ,
 `project` varchar(64) ,
 `position` varchar(64) ,
 `payroll_rate_type_id` int(11) ,
 `payroll_rate_type` varchar(64) ,
 `ot_percent` int(1) ,
 `other_tax` int(1) ,
 `adjustment` int(1) ,
 `basic` double ,
 `misc` double ,
 `ot` double ,
 `nd` double ,
 `holiday` double ,
 `other_earnings` double ,
 `gross` double ,
 `sss_ee` double ,
 `sss_er` double(19,2) ,
 `sss_ec` double(19,2) ,
 `phic_ee` double ,
 `phic_er` double ,
 `hdmf_ee` double ,
 `hdmf_er` double ,
 `tax` double ,
 `loan` double ,
 `other_nontax` double(19,2) ,
 `employee_ledger` double ,
 `other_deduction` double ,
 `deduction` double ,
 `net_amount` double 
)*/;

/*Table structure for table `payroll_register_position_current_report` */

DROP TABLE IF EXISTS `payroll_register_position_current_report`;

/*!50001 DROP VIEW IF EXISTS `payroll_register_position_current_report` */;
/*!50001 DROP TABLE IF EXISTS `payroll_register_position_current_report` */;

/*!50001 CREATE TABLE  `payroll_register_position_current_report`(
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `project_id` int(11) unsigned ,
 `project_code` varchar(16) ,
 `project` varchar(64) ,
 `position` varchar(64) ,
 `payroll_rate_type_id` int(11) ,
 `payroll_rate_type` varchar(64) ,
 `ot_percent` int(1) ,
 `other_tax` int(1) ,
 `adjustment` int(1) ,
 `basic` double ,
 `misc` double ,
 `ot` double ,
 `nd` double ,
 `holiday` double ,
 `other_earnings` double ,
 `gross` double ,
 `sss_ee` double ,
 `sss_er` double(19,2) ,
 `sss_ec` double(19,2) ,
 `phic_ee` double ,
 `phic_er` double ,
 `hdmf_ee` double ,
 `hdmf_er` double ,
 `tax` double ,
 `loan` double ,
 `other_nontax` double(19,2) ,
 `employee_ledger` double ,
 `other_deduction` double ,
 `deduction` double ,
 `net_amount` double 
)*/;

/*Table structure for table `payroll_register_report` */

DROP TABLE IF EXISTS `payroll_register_report`;

/*!50001 DROP VIEW IF EXISTS `payroll_register_report` */;
/*!50001 DROP TABLE IF EXISTS `payroll_register_report` */;

/*!50001 CREATE TABLE  `payroll_register_report`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `basic` double ,
 `cola` double ,
 `nd` double ,
 `overtime` double ,
 `transpo` double ,
 `comm` double ,
 `oth_inc_taxable` double(19,2) ,
 `oth_inc_nontax` double ,
 `absences` double ,
 `gross_pay` double ,
 `whtax` double ,
 `sss` double ,
 `Ssser` double ,
 `phic` double ,
 `Phicer` double ,
 `hdmf` double ,
 `Hdmfer` double ,
 `hdmf_add` double ,
 `sss_loan` double ,
 `hdmf_loan` double ,
 `oth_ded` double ,
 `netpay` double 
)*/;

/*Table structure for table `payroll_salary_distribution` */

DROP TABLE IF EXISTS `payroll_salary_distribution`;

/*!50001 DROP VIEW IF EXISTS `payroll_salary_distribution` */;
/*!50001 DROP TABLE IF EXISTS `payroll_salary_distribution` */;

/*!50001 CREATE TABLE  `payroll_salary_distribution`(
 `employee` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `position` varchar(64) ,
 `classification_id` int(11) ,
 `classification` varchar(32) ,
 `company` varchar(64) ,
 `company_id` int(11) unsigned ,
 `project_code` varchar(16) ,
 `project` varchar(64) ,
 `project_id` int(11) unsigned ,
 `payroll_rate_type_id` int(11) ,
 `payroll_rate_type` varchar(64) ,
 `payroll_date` date ,
 `cost_center` text ,
 `total_basic` double(19,2) ,
 `overtime` double(19,2) ,
 `other_nontax` double(19,2) ,
 `sss_er` double(19,2) ,
 `sss_ec` double(19,2) ,
 `hdmf_er` double(19,2) ,
 `phic_er` double(19,2) 
)*/;

/*Table structure for table `payroll_salary_per_department` */

DROP TABLE IF EXISTS `payroll_salary_per_department`;

/*!50001 DROP VIEW IF EXISTS `payroll_salary_per_department` */;
/*!50001 DROP TABLE IF EXISTS `payroll_salary_per_department` */;

/*!50001 CREATE TABLE  `payroll_salary_per_department`(
 `Department` varchar(64) ,
 `Payroll` date ,
 `Reg. Sal` double(19,2) ,
 `Overtime` double(19,2) ,
 `Salary Adjustment` double(19,2) ,
 `Absences` double(19,2) ,
 `UT/Tardiness` double(19,2) ,
 `Incentives` double(19,2) ,
 `SIL` double(19,2) ,
 `Leave Conversion` double(19,2) ,
 `BIP/PBB` double(19,2) ,
 `COLA` double(19,2) ,
 `Transportation Allowance` double(19,2) ,
 `Tax Adj` double(19,2) ,
 `Loan Refund` double(19,2) ,
 `SSS` double(19,2) ,
 `Pag-Ibig` double(19,2) ,
 `PhilHealth` double(19,2) 
)*/;

/*Table structure for table `payroll_sss_loan` */

DROP TABLE IF EXISTS `payroll_sss_loan`;

/*!50001 DROP VIEW IF EXISTS `payroll_sss_loan` */;
/*!50001 DROP TABLE IF EXISTS `payroll_sss_loan` */;

/*!50001 CREATE TABLE  `payroll_sss_loan`(
 `company_id` int(1) unsigned ,
 `company` varchar(64) ,
 `sss` varchar(32) ,
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `sss_no` varchar(16) ,
 `year` int(4) ,
 `month_id` int(2) ,
 `month` varchar(16) ,
 `partner_loan_id` int(11) ,
 `employee_name` varchar(195) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `loan_code` varchar(3) ,
 `release_date` date ,
 `loan_type_id` int(11) unsigned ,
 `loan_principal` double(19,2) ,
 `current` double(19,2) ,
 `overdue` decimal(3,2) ,
 `due` double(19,2) ,
 `remarks` char(0) ,
 `resigned_date` varbinary(10) 
)*/;

/*Table structure for table `payroll_sss_loan_to_disk_report` */

DROP TABLE IF EXISTS `payroll_sss_loan_to_disk_report`;

/*!50001 DROP VIEW IF EXISTS `payroll_sss_loan_to_disk_report` */;
/*!50001 DROP TABLE IF EXISTS `payroll_sss_loan_to_disk_report` */;

/*!50001 CREATE TABLE  `payroll_sss_loan_to_disk_report`(
 `company_id` int(1) unsigned ,
 `company` varchar(64) ,
 `sss_branch_code` varchar(32) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `sss` varchar(32) ,
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `sss_no` varchar(16) ,
 `year` int(4) ,
 `month_id` int(2) ,
 `month` varchar(16) ,
 `partner_loan_id` int(11) ,
 `employee_name` varchar(195) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `loan_code` varchar(3) ,
 `release_date` date ,
 `loan_type_id` int(11) unsigned ,
 `loan_principal` double(19,2) ,
 `current` double(19,2) ,
 `overdue` decimal(3,2) ,
 `due` double(19,2) ,
 `remarks` char(0) ,
 `resigned_date` varbinary(10) ,
 `record` varchar(73) ,
 `document_date` datetime 
)*/;

/*Table structure for table `payroll_sss_to_disk_report` */

DROP TABLE IF EXISTS `payroll_sss_to_disk_report`;

/*!50001 DROP VIEW IF EXISTS `payroll_sss_to_disk_report` */;
/*!50001 DROP TABLE IF EXISTS `payroll_sss_to_disk_report` */;

/*!50001 CREATE TABLE  `payroll_sss_to_disk_report`(
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `year` int(4) ,
 `month` int(2) ,
 `contribution` double ,
 `ec` double ,
 `user_id` int(11) unsigned ,
 `department_id` int(11) unsigned ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `company_code` varchar(16) ,
 `co_sss` varchar(32) ,
 `doc_date` date ,
 `doc_no` varchar(16) ,
 `record` varchar(109) ,
 `document_date` datetime 
)*/;

/*Table structure for table `payroll_sssr5_report` */

DROP TABLE IF EXISTS `payroll_sssr5_report`;

/*!50001 DROP VIEW IF EXISTS `payroll_sssr5_report` */;
/*!50001 DROP TABLE IF EXISTS `payroll_sssr5_report` */;

/*!50001 CREATE TABLE  `payroll_sssr5_report`(
 `company` varchar(64) ,
 `company_id` int(11) ,
 `tin` varchar(32) ,
 `co_sss` varchar(32) ,
 `co_phic` varchar(32) ,
 `co_hdmf` varchar(32) ,
 `co_address` varchar(128) ,
 `zipcode` varchar(16) ,
 `contact_no` varchar(255) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `year` int(4) ,
 `month` int(2) ,
 `birth_date` date ,
 `sss_no` varchar(16) ,
 `phic_no` varchar(16) ,
 `hdmf_no` varchar(16) ,
 `sss_emp` double(19,2) ,
 `sss_com` double(19,2) ,
 `sss_ecc` double(19,2) 
)*/;

/*Table structure for table `payroll_summary` */

DROP TABLE IF EXISTS `payroll_summary`;

/*!50001 DROP VIEW IF EXISTS `payroll_summary` */;
/*!50001 DROP TABLE IF EXISTS `payroll_summary` */;

/*!50001 CREATE TABLE  `payroll_summary`(
 `employee_id` int(11) ,
 `full_name` varchar(64) ,
 `company_id` int(11) ,
 `company` varchar(64) ,
 `exempt` double(15,2) ,
 `no_dependent` varchar(1) ,
 `year` int(4) ,
 `tot_basic` double(19,2) ,
 `overtime` double(19,2) ,
 `benefits` double(19,2) ,
 `allowance` double(19,2) ,
 `leave_nt` double(19,2) ,
 `leave_tax` double(19,2) ,
 `bonus_nt` double(19,2) ,
 `bonus_tax` double(19,2) ,
 `contribution` double(19,2) ,
 `wtax` double(19,2) ,
 `sss` double(19,2) ,
 `philhealth` double(19,2) ,
 `pagibig` double(19,2) 
)*/;

/*Table structure for table `payroll_tax` */

DROP TABLE IF EXISTS `payroll_tax`;

/*!50001 DROP VIEW IF EXISTS `payroll_tax` */;
/*!50001 DROP TABLE IF EXISTS `payroll_tax` */;

/*!50001 CREATE TABLE  `payroll_tax`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `tin` varchar(16) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `year` int(4) ,
 `month` int(2) ,
 `sensitivity` tinyint(1) ,
 `gross_pay1` double ,
 `whtax1` double ,
 `gross_pay2` double ,
 `whtax2` double 
)*/;

/*Table structure for table `payroll_tax_contribution` */

DROP TABLE IF EXISTS `payroll_tax_contribution`;

/*!50001 DROP VIEW IF EXISTS `payroll_tax_contribution` */;
/*!50001 DROP TABLE IF EXISTS `payroll_tax_contribution` */;

/*!50001 CREATE TABLE  `payroll_tax_contribution`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `tin` varchar(16) ,
 `company` varchar(64) ,
 `company_id` int(11) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `payroll_date` date ,
 `date_from` date ,
 `date_to` date ,
 `sensitivity` tinyint(1) ,
 `period` int(0) ,
 `gross_pay` double ,
 `whtax` double 
)*/;

/*Table structure for table `play_partner` */

DROP TABLE IF EXISTS `play_partner`;

/*!50001 DROP VIEW IF EXISTS `play_partner` */;
/*!50001 DROP TABLE IF EXISTS `play_partner` */;

/*!50001 CREATE TABLE  `play_partner`(
 `user_id` int(11) unsigned ,
 `alias` varchar(64) ,
 `league_id` int(11) ,
 `league` varchar(64) ,
 `level_no` int(11) ,
 `points` int(11) ,
 `end_point` int(1) ,
 `jars` int(11) ,
 `total_points` int(11) ,
 `used_points` int(11) ,
 `redeemed` int(11) 
)*/;

/*Table structure for table `play_partner_badge` */

DROP TABLE IF EXISTS `play_partner_badge`;

/*!50001 DROP VIEW IF EXISTS `play_partner_badge` */;
/*!50001 DROP TABLE IF EXISTS `play_partner_badge` */;

/*!50001 CREATE TABLE  `play_partner_badge`(
 `user_id` int(11) unsigned ,
 `alias` varchar(64) ,
 `badge_id` int(11) unsigned ,
 `badge` varchar(32) ,
 `badge_points` bigint(11) ,
 `points` int(3) ,
 `image_path` varchar(128) ,
 `description` text 
)*/;

/*Table structure for table `recruitment_request` */

DROP TABLE IF EXISTS `recruitment_request`;

/*!50001 DROP VIEW IF EXISTS `recruitment_request` */;
/*!50001 DROP TABLE IF EXISTS `recruitment_request` */;

/*!50001 CREATE TABLE  `recruitment_request`(
 `document_no` varchar(16) ,
 `position` varchar(64) ,
 `company_id` int(1) unsigned ,
 `company` varchar(64) ,
 `department` varchar(64) ,
 `requested_by` varchar(64) ,
 `recruitment_request_date` varchar(73) ,
 `recruitment_request_date_approved` varchar(50) ,
 `recruit_status` varchar(16) 
)*/;

/*Table structure for table `report_late_monitoring` */

DROP TABLE IF EXISTS `report_late_monitoring`;

/*!50001 DROP VIEW IF EXISTS `report_late_monitoring` */;
/*!50001 DROP TABLE IF EXISTS `report_late_monitoring` */;

/*!50001 CREATE TABLE  `report_late_monitoring`(
 `payroll_date` date ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `project_id` int(11) ,
 `project_code` varchar(16) ,
 `project` varchar(64) ,
 `full_name` varchar(64) ,
 `id_number` varchar(16) ,
 `date` date ,
 `late` decimal(5,2) ,
 `payroll_rate_type_id` int(1) ,
 `payroll_rate_type` varchar(64) ,
 `project_title` varchar(83) 
)*/;

/*Table structure for table `report_leave_summary` */

DROP TABLE IF EXISTS `report_leave_summary`;

/*!50001 DROP VIEW IF EXISTS `report_leave_summary` */;
/*!50001 DROP TABLE IF EXISTS `report_leave_summary` */;

/*!50001 CREATE TABLE  `report_leave_summary`(
 `form_status` varchar(16) ,
 `form_code` varchar(8) ,
 `user_id` int(11) ,
 `full_name` varchar(64) ,
 `day` decimal(5,2) ,
 `date_from` date ,
 `date_to` date ,
 `reason` text ,
 `id_number` varchar(16) ,
 `company_id` int(1) ,
 `company` varchar(64) 
)*/;

/*Table structure for table `report_monthly_overtime` */

DROP TABLE IF EXISTS `report_monthly_overtime`;

/*!50001 DROP VIEW IF EXISTS `report_monthly_overtime` */;
/*!50001 DROP TABLE IF EXISTS `report_monthly_overtime` */;

/*!50001 CREATE TABLE  `report_monthly_overtime`(
 `employee_number` varchar(16) ,
 `name` varchar(129) ,
 `year` int(4) ,
 `month_id` int(2) ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `Jan` decimal(27,2) ,
 `Feb` decimal(27,2) ,
 `Mar` decimal(27,2) ,
 `Apr` decimal(27,2) ,
 `May` decimal(27,2) ,
 `Jun` decimal(27,2) ,
 `Jul` decimal(27,2) ,
 `Aug` decimal(27,2) ,
 `Sep` decimal(27,2) ,
 `Oct` decimal(27,2) ,
 `Nov` decimal(27,2) ,
 `Dec` decimal(27,2) ,
 `number_of_ot_months` char(0) ,
 `total_ot_hours` decimal(27,2) ,
 `average_per_ee` char(0) 
)*/;

/*Table structure for table `report_partners_manpower` */

DROP TABLE IF EXISTS `report_partners_manpower`;

/*!50001 DROP VIEW IF EXISTS `report_partners_manpower` */;
/*!50001 DROP TABLE IF EXISTS `report_partners_manpower` */;

/*!50001 CREATE TABLE  `report_partners_manpower`(
 `company_id` int(1) ,
 `company` varchar(64) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) unsigned ,
 `branch` varchar(64) ,
 `id_number` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `position_id` int(11) unsigned ,
 `position` varchar(64) 
)*/;

/*Table structure for table `report_recruitment_funnel` */

DROP TABLE IF EXISTS `report_recruitment_funnel`;

/*!50001 DROP VIEW IF EXISTS `report_recruitment_funnel` */;
/*!50001 DROP TABLE IF EXISTS `report_recruitment_funnel` */;

/*!50001 CREATE TABLE  `report_recruitment_funnel`(
 `poc` varchar(64) ,
 `status` varchar(64) ,
 `no_of_headcount_required` int(11) ,
 `prf` varchar(16) ,
 `date_opened` date ,
 `date_closed` datetime ,
 `headcount_type` varchar(32) ,
 `position_title` varchar(64) ,
 `hiring_manage` varchar(64) ,
 `department` varchar(64) ,
 `cat_employee_type` varchar(32) ,
 `sourcing_tool` int(1) ,
 `candidates_name` varchar(65) 
)*/;

/*Table structure for table `report_resume_bidding` */

DROP TABLE IF EXISTS `report_resume_bidding`;

/*!50001 DROP VIEW IF EXISTS `report_resume_bidding` */;
/*!50001 DROP TABLE IF EXISTS `report_resume_bidding` */;

/*!50001 CREATE TABLE  `report_resume_bidding`(
 `user_id` int(11) unsigned ,
 `employee_name` int(11) unsigned ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `suffix` varchar(16) ,
 `project` varchar(64) ,
 `project_name` int(11) unsigned ,
 `project_id` int(11) unsigned ,
 `position_display` varchar(64) ,
 `postion_id` int(11) unsigned ,
 `position` int(11) unsigned ,
 `department` varchar(64) ,
 `company` varchar(64) ,
 `company_id` int(1) unsigned ,
 `birth_date` date ,
 `birth_place` text ,
 `civil_status` text ,
 `resigned_date` date ,
 `location` varchar(64) ,
 `effectivity_date` date 
)*/;

/*Table structure for table `report_time_compliance` */

DROP TABLE IF EXISTS `report_time_compliance`;

/*!50001 DROP VIEW IF EXISTS `report_time_compliance` */;
/*!50001 DROP TABLE IF EXISTS `report_time_compliance` */;

/*!50001 CREATE TABLE  `report_time_compliance`(
 `payroll_date` date ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `full_name` varchar(64) ,
 `id_number` varchar(16) ,
 `date` date ,
 `shift` varchar(32) ,
 `time_from` datetime ,
 `time_to` datetime ,
 `aux_time_from` datetime ,
 `aux_time_to` datetime ,
 `particulars` varchar(13) 
)*/;

/*Table structure for table `report_time_daily_time_record` */

DROP TABLE IF EXISTS `report_time_daily_time_record`;

/*!50001 DROP VIEW IF EXISTS `report_time_daily_time_record` */;
/*!50001 DROP TABLE IF EXISTS `report_time_daily_time_record` */;

/*!50001 CREATE TABLE  `report_time_daily_time_record`(
 `user_id` int(11) unsigned ,
 `id_number` varchar(16) ,
 `firstname` varchar(64) ,
 `lastname` varchar(64) ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `department_id` int(1) ,
 `department` varchar(64) ,
 `date` date ,
 `shift` varchar(32) ,
 `time_in` datetime ,
 `time_out` datetime ,
 `hours_work` decimal(5,2) ,
 `late` decimal(5,2) ,
 `ut` decimal(5,2) ,
 `ot` decimal(5,2) ,
 `remarks` char(0) 
)*/;

/*Table structure for table `report_time_daily_time_record_optimum` */

DROP TABLE IF EXISTS `report_time_daily_time_record_optimum`;

/*!50001 DROP VIEW IF EXISTS `report_time_daily_time_record_optimum` */;
/*!50001 DROP TABLE IF EXISTS `report_time_daily_time_record_optimum` */;

/*!50001 CREATE TABLE  `report_time_daily_time_record_optimum`(
 `date` date ,
 `shift` varchar(32) ,
 `time_in` varchar(8) ,
 `time_out` varchar(8) ,
 `hrs_work` decimal(5,2) ,
 `total_ot` decimal(6,2) ,
 `ht` decimal(6,2) ,
 `absent` tinyint(1) ,
 `form_code` varchar(8) ,
 `nd` decimal(12,3) ,
 `status` varbinary(96) ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `firstname` varchar(64) ,
 `lastname` varchar(64) ,
 `middlename` varchar(64) ,
 `employee_code` varchar(16) ,
 `employee` int(11) unsigned 
)*/;

/*Table structure for table `report_time_iar` */

DROP TABLE IF EXISTS `report_time_iar`;

/*!50001 DROP VIEW IF EXISTS `report_time_iar` */;
/*!50001 DROP TABLE IF EXISTS `report_time_iar` */;

/*!50001 CREATE TABLE  `report_time_iar`(
 `payroll_date` date ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `user_id` int(11) unsigned ,
 `full_name` varchar(64) ,
 `id_number` varchar(16) ,
 `date` date ,
 `shift` varchar(32) ,
 `time_from` datetime ,
 `time_to` datetime ,
 `aux_time_from` datetime ,
 `aux_time_to` datetime ,
 `particulars` varchar(35) ,
 `Deduction` varbinary(17) 
)*/;

/*Table structure for table `report_time_overtime` */

DROP TABLE IF EXISTS `report_time_overtime`;

/*!50001 DROP VIEW IF EXISTS `report_time_overtime` */;
/*!50001 DROP TABLE IF EXISTS `report_time_overtime` */;

/*!50001 CREATE TABLE  `report_time_overtime`(
 `company_id` int(1) ,
 `payroll_date` date ,
 `time_period_date_from` date ,
 `time_period_date_to` date ,
 `company` varchar(64) ,
 `id_number` varchar(16) ,
 `full_name` varchar(64) ,
 `HOURS` decimal(12,2) ,
 `ABSENCES` decimal(34,2) ,
 `REGOT` decimal(34,2) ,
 `REGOT_ND` decimal(34,2) ,
 `REGND` decimal(34,2) ,
 `RDOT` decimal(34,2) ,
 `RDOT_ND` decimal(34,2) ,
 `RDOT_EXCESS` decimal(34,2) ,
 `RDOT_ND_EXCESS` decimal(34,2) ,
 `LEGOT` decimal(34,2) ,
 `LEGOT_ND` decimal(34,2) ,
 `LEGOT_EXCESS` decimal(34,2) ,
 `LEGOT_ND_EXCESS` decimal(34,2) ,
 `SPEOT` decimal(34,2) ,
 `SPEOT_ND` decimal(34,2) ,
 `SPEOT_EXCESS` decimal(34,2) ,
 `SPEOT_ND_EXCESS` decimal(34,2) ,
 `DOBOT` decimal(34,2) ,
 `DOBOT_ND` decimal(34,2) ,
 `DOBOT_EXCESS` decimal(34,2) ,
 `DOBOT_ND_EXCESS` decimal(34,2) ,
 `LEGRDOT` decimal(34,2) ,
 `LEGRDOT_ND` decimal(34,2) ,
 `LEGRDOT_EXCESS` decimal(34,2) ,
 `LEGRDOT_ND_EXCESS` decimal(34,2) ,
 `SPERDOT` decimal(34,2) ,
 `SPERDOT_ND` decimal(34,2) ,
 `SPERDOT_EXCESS` decimal(34,2) ,
 `SPERDOT_ND_EXCESS` decimal(34,2) ,
 `DOBRDOT` decimal(34,2) ,
 `DOBRDOT_ND` decimal(34,2) ,
 `DOBRDOT_EXCESS` decimal(34,2) ,
 `DOBRDOT_ND_EXCESS` decimal(34,2) 
)*/;

/*Table structure for table `report_time_overtime_org` */

DROP TABLE IF EXISTS `report_time_overtime_org`;

/*!50001 DROP VIEW IF EXISTS `report_time_overtime_org` */;
/*!50001 DROP TABLE IF EXISTS `report_time_overtime_org` */;

/*!50001 CREATE TABLE  `report_time_overtime_org`(
 `payroll_date` date ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `department_id` int(1) ,
 `full_name` varchar(64) ,
 `id_number` varchar(16) ,
 `user_id` int(11) unsigned ,
 `date` date ,
 `day` varchar(9) ,
 `time_from` datetime ,
 `time_to` datetime ,
 `hrs` decimal(5,2) ,
 `actual` decimal(5,2) ,
 `break` decimal(5,2) ,
 `meal` decimal(5,2) ,
 `transpo` decimal(5,2) ,
 `date_from` date ,
 `date_to` date ,
 `REGOT` decimal(34,3) ,
 `REGOT_ND` decimal(34,3) ,
 `REGND` decimal(34,3) ,
 `RDOT` decimal(34,3) ,
 `RDOT_ND` decimal(34,3) ,
 `RDOT_EXCESS` decimal(34,3) ,
 `RDOT_ND_EXCESS` decimal(34,3) ,
 `LEGOT` decimal(34,3) ,
 `LEGOT_ND` decimal(34,3) ,
 `LEGOT_EXCESS` decimal(34,3) ,
 `LEGOT_ND_EXCESS` decimal(34,3) ,
 `SPEOT` decimal(34,3) ,
 `SPEOT_ND` decimal(34,3) ,
 `SPEOT_EXCESS` decimal(34,3) ,
 `SPEOT_ND_EXCESS` decimal(34,3) ,
 `DOBOT` decimal(34,3) ,
 `DOBOT_ND` decimal(34,3) ,
 `DOBOT_EXCESS` decimal(34,3) ,
 `DOBOT_ND_EXCESS` decimal(34,3) ,
 `LEGRDOT` decimal(34,3) ,
 `LEGRDOT_ND` decimal(34,3) ,
 `LEGRDOT_EXCESS` decimal(34,3) ,
 `LEGRDOT_ND_EXCESS` decimal(34,3) ,
 `SPERDOT` decimal(34,3) ,
 `SPERDOT_ND` decimal(34,3) ,
 `SPERDOT_EXCESS` decimal(34,3) ,
 `SPERDOT_ND_EXCESS` decimal(34,3) ,
 `DOBRDOT` decimal(34,3) ,
 `DOBRDOT_ND` decimal(34,3) ,
 `DOBRDOT_EXCESS` decimal(34,3) ,
 `DOBRDOT_ND_EXCESS` decimal(34,3) 
)*/;

/*Table structure for table `report_time_perfect_attendance` */

DROP TABLE IF EXISTS `report_time_perfect_attendance`;

/*!50001 DROP VIEW IF EXISTS `report_time_perfect_attendance` */;
/*!50001 DROP TABLE IF EXISTS `report_time_perfect_attendance` */;

/*!50001 CREATE TABLE  `report_time_perfect_attendance`(
 `id_number` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `year` int(4) ,
 `month_id` int(2) ,
 `month` varchar(16) ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `sum_lwp_forms` tinyint(1) 
)*/;

/*Table structure for table `report_time_tardiness` */

DROP TABLE IF EXISTS `report_time_tardiness`;

/*!50001 DROP VIEW IF EXISTS `report_time_tardiness` */;
/*!50001 DROP TABLE IF EXISTS `report_time_tardiness` */;

/*!50001 CREATE TABLE  `report_time_tardiness`(
 `payroll_date` date ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `branch_id` int(11) ,
 `branch` varchar(64) ,
 `full_name` varchar(64) ,
 `id_number` varchar(16) ,
 `date` date ,
 `shift` varchar(32) ,
 `time_from` datetime ,
 `time_to` datetime ,
 `aux_shift` varchar(32) ,
 `aux_time_from` datetime ,
 `aux_time_to` datetime ,
 `late` decimal(6,0) ,
 `undertime` decimal(5,2) ,
 `year` int(4) ,
 `month` int(2) 
)*/;

/*Table structure for table `tfb_accrual_final` */

DROP TABLE IF EXISTS `tfb_accrual_final`;

/*!50001 DROP VIEW IF EXISTS `tfb_accrual_final` */;
/*!50001 DROP TABLE IF EXISTS `tfb_accrual_final` */;

/*!50001 CREATE TABLE  `tfb_accrual_final`(
 `user_id` int(11) unsigned ,
 `full_name` varchar(64) ,
 `leave_balance_id` int(11) unsigned ,
 `date` date ,
 `accrual` varbinary(20) ,
 `usage` decimal(18,2) ,
 `form_code` varchar(10) ,
 `form_id` int(11) unsigned ,
 `form` varchar(32) ,
 `company_id` int(11) ,
 `department_id` int(11) 
)*/;

/*Table structure for table `time_form_balance` */

DROP TABLE IF EXISTS `time_form_balance`;

/*!50001 DROP VIEW IF EXISTS `time_form_balance` */;
/*!50001 DROP TABLE IF EXISTS `time_form_balance` */;

/*!50001 CREATE TABLE  `time_form_balance`(
 `id` int(11) unsigned ,
 `year` int(1) ,
 `user_id` int(11) ,
 `form_id` int(1) ,
 `form_code` varchar(8) ,
 `previous` decimal(7,4) ,
 `current` decimal(7,4) ,
 `used` decimal(7,4) ,
 `used_insert` decimal(7,4) ,
 `balance` decimal(7,4) ,
 `paid_unit` decimal(7,4) ,
 `period_from` date ,
 `period_to` date ,
 `period_extension` date ,
 `created_on` timestamp ,
 `created_by` int(11) ,
 `modified_on` datetime ,
 `modified_by` int(11) ,
 `deleted` tinyint(1) ,
 `employee_number` varchar(16) ,
 `partner` varchar(32) ,
 `company_id` int(1) unsigned ,
 `company` varchar(64) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `form` varchar(32) 
)*/;

/*Table structure for table `time_form_code` */

DROP TABLE IF EXISTS `time_form_code`;

/*!50001 DROP VIEW IF EXISTS `time_form_code` */;
/*!50001 DROP TABLE IF EXISTS `time_form_code` */;

/*!50001 CREATE TABLE  `time_form_code`(
 `date` date ,
 `form_code` varchar(8) ,
 `user_id` int(11) 
)*/;

/*Table structure for table `time_form_code_with_blanket` */

DROP TABLE IF EXISTS `time_form_code_with_blanket`;

/*!50001 DROP VIEW IF EXISTS `time_form_code_with_blanket` */;
/*!50001 DROP TABLE IF EXISTS `time_form_code_with_blanket` */;

/*!50001 CREATE TABLE  `time_form_code_with_blanket`(
 `date` date ,
 `form_code` varchar(8) ,
 `user_id` int(11) 
)*/;

/*Table structure for table `time_forms` */

DROP TABLE IF EXISTS `time_forms`;

/*!50001 DROP VIEW IF EXISTS `time_forms` */;
/*!50001 DROP TABLE IF EXISTS `time_forms` */;

/*!50001 CREATE TABLE  `time_forms`(
 `forms_id` int(11) unsigned ,
 `form_status_id` tinyint(1) ,
 `form_id` int(1) ,
 `form_code` varchar(8) ,
 `user_id` int(11) ,
 `display_name` varchar(64) ,
 `day` decimal(5,2) ,
 `hrs` decimal(5,2) ,
 `date_from` date ,
 `date_to` date ,
 `date_approved` datetime ,
 `date_declined` datetime ,
 `date_cancelled` datetime ,
 `date_sent` datetime ,
 `reason` text ,
 `scheduled` enum('YES','NO') ,
 `type` enum('File','Use') ,
 `created_on` timestamp ,
 `created_by` int(11) ,
 `modified_on` datetime ,
 `modified_by` int(11) ,
 `deleted` tinyint(1) ,
 `company_id` int(1) ,
 `focus_date` date 
)*/;

/*Table structure for table `time_forms_admin` */

DROP TABLE IF EXISTS `time_forms_admin`;

/*!50001 DROP VIEW IF EXISTS `time_forms_admin` */;
/*!50001 DROP TABLE IF EXISTS `time_forms_admin` */;

/*!50001 CREATE TABLE  `time_forms_admin`(
 `forms_id` int(11) unsigned ,
 `form_status_id` tinyint(1) ,
 `form_status` varchar(16) ,
 `form_id` int(1) ,
 `form_code` varchar(8) ,
 `form` varchar(32) ,
 `reason` text ,
 `user_id` int(11) ,
 `display_name` varchar(64) ,
 `day` decimal(5,2) ,
 `hrs` decimal(5,2) ,
 `date_range` varchar(140) ,
 `date_from` date ,
 `date_to` date ,
 `createdon` varchar(32) ,
 `created_on` timestamp ,
 `approver_status_id` bigint(11) ,
 `approver_status` varchar(16) ,
 `approver_id` int(11) ,
 `approver_name` varchar(64) ,
 `deleted` tinyint(1) ,
 `type` enum('File','Use') ,
 `focus_date` date 
)*/;

/*Table structure for table `time_forms_blanket` */

DROP TABLE IF EXISTS `time_forms_blanket`;

/*!50001 DROP VIEW IF EXISTS `time_forms_blanket` */;
/*!50001 DROP TABLE IF EXISTS `time_forms_blanket` */;

/*!50001 CREATE TABLE  `time_forms_blanket`(
 `forms_id` int(11) unsigned ,
 `form_code` varchar(8) ,
 `form_status_id` tinyint(1) ,
 `form_id` int(1) ,
 `display_name` varchar(64) ,
 `date` date ,
 `date_from` date ,
 `date_to` date ,
 `date_start` varchar(73) ,
 `date_end` varchar(73) ,
 `date_time_start` varchar(82) ,
 `date_time_end` varchar(82) ,
 `user_id` int(11) ,
 `form_name` varchar(32) ,
 `detail` varbinary(96) ,
 `reason` text ,
 `blanket_name` varchar(97) 
)*/;

/*Table structure for table `time_forms_date` */

DROP TABLE IF EXISTS `time_forms_date`;

/*!50001 DROP VIEW IF EXISTS `time_forms_date` */;
/*!50001 DROP TABLE IF EXISTS `time_forms_date` */;

/*!50001 CREATE TABLE  `time_forms_date`(
 `id` int(11) unsigned ,
 `forms_id` int(11) unsigned ,
 `date` date ,
 `day` decimal(3,2) ,
 `hrs` decimal(5,2) ,
 `duration_id` tinyint(1) ,
 `time_from` datetime ,
 `time_to` datetime ,
 `shift_id` int(1) ,
 `shift_to` int(1) ,
 `credit` decimal(5,2) ,
 `credit_back` decimal(5,2) ,
 `approved_comment` text ,
 `declined_comment` text ,
 `cancelled_comment` text ,
 `deleted` tinyint(1) 
)*/;

/*Table structure for table `time_forms_leave_monitoring` */

DROP TABLE IF EXISTS `time_forms_leave_monitoring`;

/*!50001 DROP VIEW IF EXISTS `time_forms_leave_monitoring` */;
/*!50001 DROP TABLE IF EXISTS `time_forms_leave_monitoring` */;

/*!50001 CREATE TABLE  `time_forms_leave_monitoring`(
 `full_name` varchar(64) ,
 `user_id` int(11) unsigned ,
 `position` varchar(64) ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `project_id` int(11) ,
 `project` varchar(64) ,
 `department_id` int(1) ,
 `department` varchar(64) ,
 `effectivity_date` date ,
 `date_hired` date ,
 `end_date` date ,
 `id_number` varchar(16) ,
 `form_code` varchar(8) ,
 `form_id` int(1) ,
 `year` int(1) ,
 `date_used` date ,
 `credit` decimal(5,2) ,
 `day` decimal(3,2) ,
 `current` decimal(7,4) ,
 `reason` text ,
 `running_balance` decimal(8,4) ,
 `total_bal` decimal(9,4) 
)*/;

/*Table structure for table `time_forms_leave_type_filter` */

DROP TABLE IF EXISTS `time_forms_leave_type_filter`;

/*!50001 DROP VIEW IF EXISTS `time_forms_leave_type_filter` */;
/*!50001 DROP TABLE IF EXISTS `time_forms_leave_type_filter` */;

/*!50001 CREATE TABLE  `time_forms_leave_type_filter`(
 `form_id` int(11) unsigned ,
 `form_code` varchar(8) ,
 `form` varchar(32) 
)*/;

/*Table structure for table `time_forms_logs_monitoring` */

DROP TABLE IF EXISTS `time_forms_logs_monitoring`;

/*!50001 DROP VIEW IF EXISTS `time_forms_logs_monitoring` */;
/*!50001 DROP TABLE IF EXISTS `time_forms_logs_monitoring` */;

/*!50001 CREATE TABLE  `time_forms_logs_monitoring`(
 `date` date ,
 `shift` varchar(32) ,
 `time_in` varchar(8) ,
 `time_out` varchar(8) ,
 `hrs_work` decimal(5,2) ,
 `total_ot` decimal(6,2) ,
 `late` decimal(5,2) ,
 `absent` tinyint(1) ,
 `form_code` varchar(8) ,
 `is_leave` int(4) ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `department_id` int(11) unsigned ,
 `department` varchar(64) ,
 `full_name` varchar(32) ,
 `employee_code` varchar(16) ,
 `user_id` int(11) unsigned ,
 `project_id` int(11) ,
 `project` varchar(64) ,
 `payroll_rate_type_id` int(1) ,
 `payroll_rate_type` varchar(64) ,
 `payroll_date` date ,
 `payroll_date_from` date ,
 `payroll_date_to` date 
)*/;

/*Table structure for table `time_forms_manage` */

DROP TABLE IF EXISTS `time_forms_manage`;

/*!50001 DROP VIEW IF EXISTS `time_forms_manage` */;
/*!50001 DROP TABLE IF EXISTS `time_forms_manage` */;

/*!50001 CREATE TABLE  `time_forms_manage`(
 `forms_id` int(11) unsigned ,
 `form_status_id` tinyint(1) ,
 `form_status` varchar(16) ,
 `form_id` int(1) ,
 `form_code` varchar(8) ,
 `form` varchar(32) ,
 `reason` text ,
 `user_id` int(11) ,
 `display_name` varchar(64) ,
 `day` decimal(5,2) ,
 `hrs` decimal(5,2) ,
 `date_range` varchar(140) ,
 `date_from` date ,
 `date_to` date ,
 `createdon` varchar(32) ,
 `created_on` timestamp ,
 `approver_status_id` int(1) ,
 `approver_status` varchar(16) ,
 `approver_id` int(11) ,
 `approver_name` varchar(64) ,
 `company_id` int(1) ,
 `focus_date` date 
)*/;

/*Table structure for table `time_forms_sl_vl` */

DROP TABLE IF EXISTS `time_forms_sl_vl`;

/*!50001 DROP VIEW IF EXISTS `time_forms_sl_vl` */;
/*!50001 DROP TABLE IF EXISTS `time_forms_sl_vl` */;

/*!50001 CREATE TABLE  `time_forms_sl_vl`(
 `full_name` varchar(64) ,
 `user_id` int(11) unsigned ,
 `position` varchar(64) ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `project_id` int(11) ,
 `project` varchar(64) ,
 `department_id` int(1) ,
 `department` varchar(64) ,
 `effectivity_date` date ,
 `date_hired` date ,
 `id_number` varchar(16) ,
 `current` decimal(7,4) ,
 `form_code` varchar(8) ,
 `year` int(1) ,
 `month` int(2) ,
 `credit` decimal(5,2) ,
 `1` varbinary(29) ,
 `2` varbinary(29) ,
 `3` varbinary(29) ,
 `4` varbinary(29) ,
 `5` varbinary(29) ,
 `6` varbinary(29) ,
 `7` varbinary(29) ,
 `8` varbinary(29) ,
 `9` varbinary(29) ,
 `10` varbinary(29) ,
 `11` varbinary(29) ,
 `12` varbinary(29) ,
 `13` varbinary(29) ,
 `14` varbinary(29) ,
 `15` varbinary(29) ,
 `16` varbinary(29) ,
 `17` varbinary(29) ,
 `18` varbinary(29) ,
 `19` varbinary(29) ,
 `20` varbinary(29) ,
 `21` varbinary(29) ,
 `22` varbinary(29) ,
 `23` varbinary(29) ,
 `24` varbinary(29) ,
 `25` varbinary(29) ,
 `26` varbinary(29) ,
 `27` varbinary(29) ,
 `28` varbinary(29) ,
 `29` varbinary(29) ,
 `30` varbinary(29) ,
 `31` varbinary(29) ,
 `running_balance` decimal(8,4) ,
 `monthly_earning` decimal(3,2) ,
 `used` decimal(24,1) ,
 `total_bal` decimal(28,4) 
)*/;

/*Table structure for table `time_forms_sl_vl_detail` */

DROP TABLE IF EXISTS `time_forms_sl_vl_detail`;

/*!50001 DROP VIEW IF EXISTS `time_forms_sl_vl_detail` */;
/*!50001 DROP TABLE IF EXISTS `time_forms_sl_vl_detail` */;

/*!50001 CREATE TABLE  `time_forms_sl_vl_detail`(
 `user_id` int(11) unsigned ,
 `full_name` varchar(64) ,
 `form_code` varchar(8) ,
 `month` int(11) ,
 `position` varchar(64) ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `project_id` int(11) ,
 `project` varchar(64) ,
 `department_id` int(1) ,
 `department` varchar(64) ,
 `effectivity_date` date ,
 `date_hired` date ,
 `id_number` varchar(16) ,
 `credit` decimal(24,1) ,
 `current` decimal(5,2) ,
 `year` int(1) ,
 `monthly_earning` decimal(3,2) ,
 `1` double ,
 `2` double ,
 `3` double ,
 `4` double ,
 `5` double ,
 `6` double ,
 `7` double ,
 `8` double ,
 `9` double ,
 `10` double ,
 `11` double ,
 `12` double ,
 `13` double ,
 `14` double ,
 `15` double ,
 `16` double ,
 `17` double ,
 `18` double ,
 `19` double ,
 `20` double ,
 `21` double ,
 `22` double ,
 `23` double ,
 `24` double ,
 `25` double ,
 `26` double ,
 `27` double ,
 `28` double ,
 `29` double ,
 `30` double ,
 `31` double ,
 `running_balance` double(19,2) ,
 `used` decimal(46,1) ,
 `total_bal` double(19,2) 
)*/;

/*Table structure for table `time_forms_sl_vl_month` */

DROP TABLE IF EXISTS `time_forms_sl_vl_month`;

/*!50001 DROP VIEW IF EXISTS `time_forms_sl_vl_month` */;
/*!50001 DROP TABLE IF EXISTS `time_forms_sl_vl_month` */;

/*!50001 CREATE TABLE  `time_forms_sl_vl_month`(
 `user_id` int(11) unsigned ,
 `month_id` int(11) ,
 `form_code` varchar(8) 
)*/;

/*Table structure for table `time_forms_validate_if_exist` */

DROP TABLE IF EXISTS `time_forms_validate_if_exist`;

/*!50001 DROP VIEW IF EXISTS `time_forms_validate_if_exist` */;
/*!50001 DROP TABLE IF EXISTS `time_forms_validate_if_exist` */;

/*!50001 CREATE TABLE  `time_forms_validate_if_exist`(
 `forms_id` int(11) unsigned ,
 `user_id` int(11) ,
 `form_status` varchar(16) ,
 `form_id` int(1) ,
 `day` decimal(3,2) ,
 `hrs` decimal(5,2) ,
 `date` date ,
 `time_from` datetime ,
 `time_to` datetime ,
 `duration_id` tinyint(1) ,
 `duration` varchar(32) ,
 `credit` decimal(5,2) 
)*/;

/*Table structure for table `time_forms_validation` */

DROP TABLE IF EXISTS `time_forms_validation`;

/*!50001 DROP VIEW IF EXISTS `time_forms_validation` */;
/*!50001 DROP TABLE IF EXISTS `time_forms_validation` */;

/*!50001 CREATE TABLE  `time_forms_validation`(
 `forms_id` int(11) unsigned ,
 `user_id` int(11) ,
 `form_status` varchar(16) ,
 `form_id` int(1) ,
 `day` decimal(3,2) ,
 `hrs` decimal(5,2) ,
 `date` date ,
 `time_from` datetime ,
 `time_to` datetime ,
 `duration_id` tinyint(1) ,
 `duration` varchar(32) ,
 `credit` decimal(5,2) 
)*/;

/*Table structure for table `time_holiday` */

DROP TABLE IF EXISTS `time_holiday`;

/*!50001 DROP VIEW IF EXISTS `time_holiday` */;
/*!50001 DROP TABLE IF EXISTS `time_holiday` */;

/*!50001 CREATE TABLE  `time_holiday`(
 `holiday_id` int(11) ,
 `holiday` varchar(64) ,
 `holiday_date` date ,
 `status_id` tinyint(1) ,
 `legal` tinyint(1) ,
 `location_count` int(1) ,
 `user_count` int(1) ,
 `deleted` tinyint(1) 
)*/;

/*Table structure for table `time_period_list` */

DROP TABLE IF EXISTS `time_period_list`;

/*!50001 DROP VIEW IF EXISTS `time_period_list` */;
/*!50001 DROP TABLE IF EXISTS `time_period_list` */;

/*!50001 CREATE TABLE  `time_period_list`(
 `record_id` int(11) unsigned ,
 `period_id` int(11) unsigned ,
 `period_year` varchar(4) ,
 `period_month` varchar(32) ,
 `process_count` int(1) ,
 `proces_status` varchar(10) ,
 `payroll_date` varchar(67) ,
 `company` varchar(64) ,
 `date_from` varchar(35) ,
 `date_from_day` varchar(32) ,
 `date_from_year` int(4) ,
 `date_to` varchar(35) ,
 `date_to_day` varchar(32) ,
 `date_to_year` int(4) ,
 `company_id` int(11) ,
 `from` date ,
 `to` date ,
 `created_on` timestamp ,
 `created_by` int(11) ,
 `modified_by` int(11) ,
 `modified_on` datetime ,
 `ww_time_period.deleted` tinyint(1) 
)*/;

/*Table structure for table `time_record` */

DROP TABLE IF EXISTS `time_record`;

/*!50001 DROP VIEW IF EXISTS `time_record` */;
/*!50001 DROP TABLE IF EXISTS `time_record` */;

/*!50001 CREATE TABLE  `time_record`(
 `record_id` int(11) unsigned ,
 `user_id` int(11) ,
 `biometric` varchar(8) ,
 `shift_id` int(1) ,
 `shift` varchar(32) ,
 `date` date ,
 `processed` tinyint(1) ,
 `override` tinyint(1) ,
 `aux_shift_id` int(1) ,
 `aux_shift` varchar(32) ,
 `aux_time_in` datetime ,
 `aux_time_out` datetime ,
 `time_in` datetime ,
 `time_out` datetime ,
 `breaka_in` datetime ,
 `breaka_out` datetime ,
 `breakb_in` datetime ,
 `breakb_out` datetime ,
 `ot_in` datetime ,
 `ot_out` datetime ,
 `created_on` timestamp ,
 `created_by` int(11) ,
 `modified_on` datetime ,
 `modified_by` int(11) 
)*/;

/*Table structure for table `time_record_holiday` */

DROP TABLE IF EXISTS `time_record_holiday`;

/*!50001 DROP VIEW IF EXISTS `time_record_holiday` */;
/*!50001 DROP TABLE IF EXISTS `time_record_holiday` */;

/*!50001 CREATE TABLE  `time_record_holiday`(
 `holiday_id` int(11) ,
 `holiday` varchar(64) ,
 `holiday_date` date ,
 `legal` tinyint(1) ,
 `holiday_type` varchar(15) ,
 `holiday_icon` varchar(11) ,
 `user_id` int(11) 
)*/;

/*Table structure for table `time_record_list` */

DROP TABLE IF EXISTS `time_record_list`;

/*!50001 DROP VIEW IF EXISTS `time_record_list` */;
/*!50001 DROP TABLE IF EXISTS `time_record_list` */;

/*!50001 CREATE TABLE  `time_record_list`(
 `record_id` int(11) unsigned ,
 `user_id` int(11) ,
 `date` date ,
 `date_tag` varchar(35) ,
 `day_tag` varchar(32) ,
 `shift` varchar(32) ,
 `notes_icon` varchar(11) ,
 `notes_title` varchar(32) ,
 `notes` varchar(64) ,
 `remind_icon` varchar(3) ,
 `remind_title` varchar(5) ,
 `remind` varchar(6) ,
 `timein` varchar(5) ,
 `timein_ampm` varchar(2) ,
 `timeout` varchar(5) ,
 `timeout_ampm` varchar(2) ,
 `timeout_date` varchar(35) ,
 `late` decimal(5,2) ,
 `late_tag` varchar(3) ,
 `undertime` decimal(5,2) ,
 `undertime_tag` varchar(3) ,
 `ot` decimal(5,2) ,
 `ot_break` decimal(5,2) ,
 `ot_tag` varchar(2) ,
 `hrs_worked` decimal(5,2) ,
 `awol` tinyint(1) ,
 `biometric` varchar(8) ,
 `shift_id` int(1) ,
 `processed` tinyint(1) ,
 `override` tinyint(1) ,
 `aux_shift_id` int(1) ,
 `aux_shift` varchar(32) ,
 `aux_time_in` datetime ,
 `aux_time_out` datetime ,
 `time_in` datetime ,
 `time_out` datetime ,
 `breaka_in` datetime ,
 `breaka_out` datetime ,
 `breakb_in` datetime ,
 `breakb_out` datetime ,
 `ot_in` datetime ,
 `ot_out` datetime ,
 `created_on` timestamp ,
 `created_by` int(11) ,
 `modified_on` datetime ,
 `modified_by` int(11) ,
 `form_id` int(1) ,
 `forms_id` int(1) ,
 `form_code` char(0) ,
 `blanket_form_id` int(1) ,
 `blanket_forms_id` int(11) unsigned ,
 `blanket_date_from` varchar(73) ,
 `blanket_date_to` varchar(73) ,
 `blanket_date_time_from` varchar(82) ,
 `blanket_date_time_to` varchar(82) ,
 `blanket_name` varchar(97) ,
 `blanket_detail` varbinary(96) ,
 `blanket_reason` text ,
 `non_swipe` tinyint(1) 
)*/;

/*Table structure for table `time_record_list_forms` */

DROP TABLE IF EXISTS `time_record_list_forms`;

/*!50001 DROP VIEW IF EXISTS `time_record_list_forms` */;
/*!50001 DROP TABLE IF EXISTS `time_record_list_forms` */;

/*!50001 CREATE TABLE  `time_record_list_forms`(
 `forms_id` int(11) unsigned ,
 `form_status_id` tinyint(1) ,
 `form_id` int(1) ,
 `form_code` varchar(8) ,
 `user_id` int(11) ,
 `display_name` varchar(64) ,
 `day` decimal(3,2) ,
 `hrs` decimal(5,2) ,
 `date_from` date ,
 `date_to` date ,
 `date_approved` datetime ,
 `date_declined` datetime ,
 `date_cancelled` datetime ,
 `date_sent` datetime ,
 `reason` text ,
 `scheduled` enum('YES','NO') ,
 `created_on` timestamp ,
 `created_by` int(11) ,
 `modified_on` datetime ,
 `modified_by` int(11) ,
 `deleted` tinyint(1) ,
 `color` varchar(8) ,
 `form` varchar(32) ,
 `approver_id` int(11) ,
 `approver_name` varchar(64) ,
 `form_status` varchar(16) ,
 `date` date ,
 `time_from` datetime ,
 `time_to` datetime ,
 `curr_shift` varchar(32) ,
 `to_shift` varchar(32) ,
 `contact_no` varchar(32) ,
 `name` varchar(64) ,
 `position` varchar(64) ,
 `company_to_visit` varchar(64) ,
 `location` varchar(128) 
)*/;

/*Table structure for table `time_record_raw` */

DROP TABLE IF EXISTS `time_record_raw`;

/*!50001 DROP VIEW IF EXISTS `time_record_raw` */;
/*!50001 DROP TABLE IF EXISTS `time_record_raw` */;

/*!50001 CREATE TABLE  `time_record_raw`(
 `raw_id` timestamp ,
 `user_id` int(11) ,
 `biometric` varchar(8) ,
 `date` date ,
 `location_id` int(1) ,
 `device_id` int(1) ,
 `checktime` datetime ,
 `checktype` varchar(8) ,
 `processed` tinyint(1) 
)*/;

/*Table structure for table `time_record_schedule_history` */

DROP TABLE IF EXISTS `time_record_schedule_history`;

/*!50001 DROP VIEW IF EXISTS `time_record_schedule_history` */;
/*!50001 DROP TABLE IF EXISTS `time_record_schedule_history` */;

/*!50001 CREATE TABLE  `time_record_schedule_history`(
 `branch_id` int(11) unsigned ,
 `department_id` int(11) unsigned ,
 `branch` varchar(64) ,
 `department` varchar(64) ,
 `user_id` int(11) ,
 `created_by_user_id` int(11) ,
 `id_number` varchar(16) ,
 `name` varchar(64) ,
 `type` varchar(12) ,
 `new_schedule` varchar(64) ,
 `date_from` varchar(73) ,
 `date_to` varchar(73) ,
 `change_by` varchar(64) ,
 `created_on` timestamp ,
 `date_and_time` varchar(82) 
)*/;

/*Table structure for table `time_record_summary` */

DROP TABLE IF EXISTS `time_record_summary`;

/*!50001 DROP VIEW IF EXISTS `time_record_summary` */;
/*!50001 DROP TABLE IF EXISTS `time_record_summary` */;

/*!50001 CREATE TABLE  `time_record_summary`(
 `record_id` int(11) unsigned ,
 `user_id` int(11) ,
 `id_number` varchar(8) ,
 `date` date ,
 `payroll_date` date ,
 `day_type` varchar(16) ,
 `hrs_rendered` decimal(5,2) ,
 `hrs_actual` decimal(5,2) ,
 `hrs_break` decimal(5,2) ,
 `absent` tinyint(1) ,
 `lwp` decimal(5,2) ,
 `lwop` decimal(5,2) ,
 `late` decimal(5,2) ,
 `undertime` decimal(5,2) ,
 `ot` decimal(5,2) ,
 `ot_break` decimal(5,2) ,
 `resigned` tinyint(1) ,
 `awol` tinyint(1) 
)*/;

/*Table structure for table `time_record_tardiness` */

DROP TABLE IF EXISTS `time_record_tardiness`;

/*!50001 DROP VIEW IF EXISTS `time_record_tardiness` */;
/*!50001 DROP TABLE IF EXISTS `time_record_tardiness` */;

/*!50001 CREATE TABLE  `time_record_tardiness`(
 `period_year` int(1) ,
 `period_month` int(1) ,
 `user_id` int(11) ,
 `id_number` varchar(8) ,
 `instances` decimal(5,2) ,
 `total_minutes` decimal(5,2) ,
 `date` date ,
 `late` decimal(5,2) 
)*/;

/*Table structure for table `time_shift` */

DROP TABLE IF EXISTS `time_shift`;

/*!50001 DROP VIEW IF EXISTS `time_shift` */;
/*!50001 DROP TABLE IF EXISTS `time_shift` */;

/*!50001 CREATE TABLE  `time_shift`(
 `shift_id` int(1) ,
 `shift` varchar(32) ,
 `status_id` tinyint(1) ,
 `time_start` time ,
 `time_end` time ,
 `created_on` timestamp ,
 `created_by` int(11) ,
 `modified_on` datetime ,
 `modified_by` int(11) ,
 `deleted` tinyint(1) 
)*/;

/*Table structure for table `time_shift_class` */

DROP TABLE IF EXISTS `time_shift_class`;

/*!50001 DROP VIEW IF EXISTS `time_shift_class` */;
/*!50001 DROP TABLE IF EXISTS `time_shift_class` */;

/*!50001 CREATE TABLE  `time_shift_class`(
 `id` int(11) unsigned ,
 `shift_id` int(1) ,
 `shift` varchar(32) ,
 `company_id` int(1) ,
 `company` varchar(64) ,
 `class_id` int(1) ,
 `class_code` varchar(32) ,
 `class_value` varchar(64) 
)*/;

/*Table structure for table `time_shift_class_company` */

DROP TABLE IF EXISTS `time_shift_class_company`;

/*!50001 DROP VIEW IF EXISTS `time_shift_class_company` */;
/*!50001 DROP TABLE IF EXISTS `time_shift_class_company` */;

/*!50001 CREATE TABLE  `time_shift_class_company`(
 `shift_id` int(1) ,
 `shift` varchar(32) ,
 `company_id` int(1) ,
 `time_start` time ,
 `time_end` time ,
 `class_id` int(1) unsigned ,
 `class_code` varchar(32) ,
 `class` varchar(64) ,
 `class_value` varchar(64) ,
 `employment_status_id` varchar(32) ,
 `employment_type_id` varchar(32) ,
 `partners_id` varchar(32) 
)*/;

/*Table structure for table `time_shift_logs` */

DROP TABLE IF EXISTS `time_shift_logs`;

/*!50001 DROP VIEW IF EXISTS `time_shift_logs` */;
/*!50001 DROP TABLE IF EXISTS `time_shift_logs` */;

/*!50001 CREATE TABLE  `time_shift_logs`(
 `user_id` int(11) unsigned ,
 `date` date ,
 `shift_id` bigint(11) ,
 `shift_time_start` time ,
 `shift_time_end` time ,
 `logs_time_in` varbinary(19) ,
 `logs_time_out` varbinary(19) 
)*/;

/*Table structure for table `time_shift_rest_days` */

DROP TABLE IF EXISTS `time_shift_rest_days`;

/*!50001 DROP VIEW IF EXISTS `time_shift_rest_days` */;
/*!50001 DROP TABLE IF EXISTS `time_shift_rest_days` */;

/*!50001 CREATE TABLE  `time_shift_rest_days`(
 `user_id` int(11) unsigned ,
 `shift_id` bigint(11) ,
 `rest_day` varchar(9) 
)*/;

/*Table structure for table `time_stats` */

DROP TABLE IF EXISTS `time_stats`;

/*!50001 DROP VIEW IF EXISTS `time_stats` */;
/*!50001 DROP TABLE IF EXISTS `time_stats` */;

/*!50001 CREATE TABLE  `time_stats`(
 `user_id` int(11) ,
 `mandays` decimal(23,0) ,
 `manhours` decimal(29,2) ,
 `late_undertime` decimal(28,2) ,
 `abs_lwop` decimal(28,2) ,
 `attendance` decimal(31,0) ,
 `dispute` decimal(33,1) ,
 `overtime` decimal(27,2) 
)*/;

/*Table structure for table `users` */

DROP TABLE IF EXISTS `users`;

/*!50001 DROP VIEW IF EXISTS `users` */;
/*!50001 DROP TABLE IF EXISTS `users` */;

/*!50001 CREATE TABLE  `users`(
 `user_id` int(11) unsigned ,
 `role_id` int(1) unsigned ,
 `company_id` int(11) ,
 `can_view` tinyint(1) ,
 `can_delete` tinyint(1) ,
 `email` varchar(128) ,
 `full_name` varchar(64) ,
 `login` varchar(64) ,
 `hash` varchar(128) ,
 `last_login` datetime ,
 `display_name` varchar(64) ,
 `timezone` char(64) ,
 `language` enum('en','id') ,
 `active` tinyint(1) ,
 `lastactivity` int(11) ,
 `created_on` timestamp ,
 `created_by` int(11) ,
 `modified_on` timestamp ,
 `modified_by` int(11) ,
 `deleted` tinyint(1) 
)*/;

/*Table structure for table `users_position` */

DROP TABLE IF EXISTS `users_position`;

/*!50001 DROP VIEW IF EXISTS `users_position` */;
/*!50001 DROP TABLE IF EXISTS `users_position` */;

/*!50001 CREATE TABLE  `users_position`(
 `position_id` int(11) unsigned ,
 `position_code` varchar(16) ,
 `position` varchar(64) ,
 `status_id` tinyint(1) ,
 `can_delete` tinyint(1) ,
 `employee_type_id` int(1) ,
 `employee_type` varchar(32) ,
 `immediate_id` int(11) ,
 `immediate` varchar(64) ,
 `created_on` timestamp ,
 `created_by` int(11) ,
 `modified_on` datetime ,
 `modified_by` int(11) ,
 `deleted` tinyint(1) 
)*/;

/*Table structure for table `users_profile` */

DROP TABLE IF EXISTS `users_profile`;

/*!50001 DROP VIEW IF EXISTS `users_profile` */;
/*!50001 DROP TABLE IF EXISTS `users_profile` */;

/*!50001 CREATE TABLE  `users_profile`(
 `user_id` int(11) unsigned ,
 `partner_id` int(11) ,
 `coordinator_id` varchar(64) ,
 `recruit_id` int(11) ,
 `display_name` varchar(64) ,
 `title` varchar(16) ,
 `suffix` varchar(16) ,
 `lastname` varchar(64) ,
 `firstname` varchar(64) ,
 `middlename` varchar(64) ,
 `maidenname` varchar(64) ,
 `nickname` varchar(32) ,
 `project_id` int(11) ,
 `company` varchar(64) ,
 `company_id` int(1) ,
 `group_id` int(1) ,
 `division_id` int(1) ,
 `department_id` int(1) ,
 `branch_id` int(11) ,
 `position_id` int(1) ,
 `reports_to_id` int(11) ,
 `project_hr_id` int(11) ,
 `job_title_id` int(1) ,
 `location_id` int(1) ,
 `photo` varchar(128) ,
 `birth_date` date ,
 `age` tinyint(3) unsigned ,
 `gender` longtext ,
 `active` tinyint(1) 
)*/;

/*View structure for view applicant_details */

/*!50001 DROP TABLE IF EXISTS `applicant_details` */;
/*!50001 DROP VIEW IF EXISTS `applicant_details` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `applicant_details` AS (select `r`.`recruit_id` AS `recruit_id`,`ap`.`position_desired` AS `position_desired`,`ap`.`desired_salary` AS `desired_salary`,concat(`r`.`firstname`,', ',`r`.`lastname`) AS `fullname`,`r`.`firstname` AS `firstname`,`r`.`middlename` AS `middlename`,`r`.`lastname` AS `lastname`,`r`.`birth_date` AS `birthdate`,`r`.`nickname` AS `nickname`,`r`.`gender` AS `gender`,`getage`(`r`.`birth_date`) AS `age`,`ap`.`present_address_no` AS `present_address_no`,`ap`.`present_address_street` AS `present_address_street`,`ap`.`present_address_village` AS `present_address_village`,`ap`.`present_address_barangay` AS `present_address_barangay`,`ap`.`present_address_town` AS `present_address_town`,`ap`.`present_address_city_town` AS `present_address_city_town`,`ap`.`present_address_province` AS `present_address_province`,`ap`.`present_address_country` AS `present_address_country`,concat(`ap`.`present_address_no`,' ',`ap`.`present_address_street`,' ',`ap`.`present_address_village`,' ',`ap`.`present_address_barangay`,' ',`ap`.`present_address_town`,' ',`ap`.`present_address_city_town`) AS `present_address`,concat(`ap`.`present_address_province`,' ',`ap`.`present_address_country`) AS `present_province`,`ap`.`phone` AS `phone`,`ap`.`mobile` AS `mobile`,`ap`.`birth_place` AS `birth_place`,`ap`.`height` AS `height`,`ap`.`weight` AS `weight`,`ap`.`religion` AS `religion`,`ap`.`nationality` AS `citizenship`,`ap`.`civil_status` AS `civil_status`,`ap`.`tin_number` AS `tin_number`,`ap`.`sss_number` AS `sss_number`,`ap`.`pagibig_number` AS `pagibig_number`,`ap`.`philhealth_number` AS `philhealth_number`,`ap`.`present_address_country` AS `emergency_name`,`ap`.`emergency_phone` AS `emergency_phone`,`ap`.`emergency_relationship` AS `emergency_relationship`,`ap`.`language` AS `language`,`ap`.`dialect` AS `dialect`,`ap`.`interests_hobbies` AS `interests_hobbies`,`ap`.`machine_operated` AS `machine_operated`,`ap`.`driver_license` AS `driver_license`,`ap`.`driver_type_license` AS `driver_type_license`,`ap`.`prc_license` AS `prc_license`,`ap`.`prc_type_license` AS `prc_type_license`,`ap`.`prc_license_no` AS `prc_license_no`,`ap`.`prc_date_expiration` AS `prc_date_expiration`,`ap`.`illness_question` AS `illness_question`,`ap`.`illness_yes` AS `illness_yes`,`ap`.`trial_court` AS `trial_court`,`ap`.`how_hiring_heard` AS `how_hiring_heard`,`ap`.`work_start` AS `work_start`,`ap`.`referred_employee` AS `referred_employee`,concat(`ap`.`emergency_address`,' ',`ap`.`emergency_city`,' ',`ap`.`emergency_country`) AS `emergency_ddress`,`r`.`recruitment_date` AS `recruitment_date` from (`ww_recruitment` `r` left join `applicant_personal` `ap` on((`r`.`recruit_id` = `ap`.`recruit_id`)))) */;

/*View structure for view applicant_personal */

/*!50001 DROP TABLE IF EXISTS `applicant_personal` */;
/*!50001 DROP VIEW IF EXISTS `applicant_personal` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `applicant_personal` AS (select `r`.`recruit_id` AS `recruit_id`,max(if((`rp`.`key` = 'position_sought'),`rp`.`key_value`,'')) AS `position_desired`,max(if((`rp`.`key` = 'desired_salary'),`rp`.`key_value`,'')) AS `desired_salary`,max(if((`rp`.`key` = 'presentadd_no'),`rp`.`key_value`,'')) AS `present_address_no`,max(if((`rp`.`key` = 'address_1'),`rp`.`key_value`,'')) AS `present_address_street`,max(if((`rp`.`key` = 'presentadd_village'),`rp`.`key_value`,'')) AS `present_address_village`,max(if((`rp`.`key` = 'address_2'),`rp`.`key_value`,'')) AS `present_address_barangay`,max(if((`rp`.`key` = 'town'),`rp`.`key_value`,'')) AS `present_address_town`,max(if((`rp`.`key` = 'city_town'),`rp`.`key_value`,'')) AS `present_address_city_town`,max(if((`rp`.`key` = 'province'),`rp`.`key_value`,'')) AS `present_address_province`,max(if((`rp`.`key` = 'country'),`rp`.`key_value`,'')) AS `present_address_country`,max(if((`rp`.`key` = 'phone'),`rp`.`key_value`,'')) AS `phone`,max(if((`rp`.`key` = 'mobile'),`rp`.`key_value`,'')) AS `mobile`,max(if((`rp`.`key` = 'birth_place'),`rp`.`key_value`,'')) AS `birth_place`,max(if((`rp`.`key` = 'height'),`rp`.`key_value`,'')) AS `height`,max(if((`rp`.`key` = 'weight'),`rp`.`key_value`,'')) AS `weight`,max(if((`rp`.`key` = 'religion'),`rp`.`key_value`,'')) AS `religion`,max(if((`rp`.`key` = 'nationality'),`rp`.`key_value`,'')) AS `nationality`,max(if((`rp`.`key` = 'civil_status'),`rp`.`key_value`,'')) AS `civil_status`,max(if((`rp`.`key` = 'tin_number'),`rp`.`key_value`,'')) AS `tin_number`,max(if((`rp`.`key` = 'sss_number'),`rp`.`key_value`,'')) AS `sss_number`,max(if((`rp`.`key` = 'philhealth_number'),`rp`.`key_value`,'')) AS `philhealth_number`,max(if((`rp`.`key` = 'pagibig_number'),`rp`.`key_value`,'')) AS `pagibig_number`,max(if((`rp`.`key` = 'emergency_name'),`rp`.`key_value`,'')) AS `emergency_name`,max(if((`rp`.`key` = 'emergency_phone'),`rp`.`key_value`,'')) AS `emergency_phone`,max(if((`rp`.`key` = 'emergency_relationship'),`rp`.`key_value`,'')) AS `emergency_relationship`,max(if((`rp`.`key` = 'emergency_address'),`rp`.`key_value`,'')) AS `emergency_address`,max(if((`rp`.`key` = 'emergency_city'),`rp`.`key_value`,'')) AS `emergency_city`,max(if((`rp`.`key` = 'emergency_country'),`rp`.`key_value`,'')) AS `emergency_country`,max(if((`rp`.`key` = 'language'),`rp`.`key_value`,'')) AS `language`,max(if((`rp`.`key` = 'dialect'),`rp`.`key_value`,'')) AS `dialect`,max(if((`rp`.`key` = 'interests_hobbies'),`rp`.`key_value`,'')) AS `interests_hobbies`,max(if((`rp`.`key` = 'machine_operated'),`rp`.`key_value`,'')) AS `machine_operated`,max(if((`rp`.`key` = 'driver_license'),`rp`.`key_value`,'')) AS `driver_license`,max(if((`rp`.`key` = 'driver_type_license'),`rp`.`key_value`,'')) AS `driver_type_license`,max(if((`rp`.`key` = 'prc_license'),`rp`.`key_value`,'')) AS `prc_license`,max(if((`rp`.`key` = 'prc_type_license'),`rp`.`key_value`,'')) AS `prc_type_license`,max(if((`rp`.`key` = 'prc_license_no'),`rp`.`key_value`,'')) AS `prc_license_no`,max(if((`rp`.`key` = 'prc_date_expiration'),`rp`.`key_value`,'')) AS `prc_date_expiration`,max(if((`rp`.`key` = 'illness_question'),`rp`.`key_value`,'')) AS `illness_question`,max(if((`rp`.`key` = 'illness_yes'),`rp`.`key_value`,'')) AS `illness_yes`,max(if((`rp`.`key` = 'trial_court'),`rp`.`key_value`,'')) AS `trial_court`,max(if((`rp`.`key` = 'how_hiring_heard'),`rp`.`key_value`,'')) AS `how_hiring_heard`,max(if((`rp`.`key` = 'work_start'),`rp`.`key_value`,'')) AS `work_start`,max(if((`rp`.`key` = 'referred_employee'),`rp`.`key_value`,'')) AS `referred_employee` from (`ww_recruitment_personal` `rp` join `ww_recruitment` `r`) where (`r`.`recruit_id` = `rp`.`recruit_id`) group by `r`.`recruit_id`) */;

/*View structure for view applicant_personal_history */

/*!50001 DROP TABLE IF EXISTS `applicant_personal_history` */;
/*!50001 DROP VIEW IF EXISTS `applicant_personal_history` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `applicant_personal_history` AS (select `r`.`recruit_id` AS `recruit_id`,max(if(((`rph`.`key` = 'family-name') and (`rph`.`sequence` = 1)),`rph`.`key_value`,'')) AS `father_name`,max(if(((`rph`.`key` = 'family-name') and (`rph`.`sequence` = 2)),`rph`.`key_value`,'')) AS `mother_name`,max(if(((`rph`.`key` = 'family-name') and (`rph`.`sequence` = 3)),`rph`.`key_value`,'')) AS `brother_name`,max(if(((`rph`.`key` = 'family-name') and (`rph`.`sequence` = 4)),`rph`.`key_value`,'')) AS `sister_name`,max(if(((`rph`.`key` = 'family-name') and (`rph`.`sequence` = 5)),`rph`.`key_value`,'')) AS `son_name`,max(if(((`rph`.`key` = 'family-name') and (`rph`.`sequence` = 6)),`rph`.`key_value`,'')) AS `daughter_name`,max(if(((`rph`.`key` = 'family-name') and (`rph`.`sequence` = 7)),`rph`.`key_value`,'')) AS `guardian_name`,max(if(((`rph`.`key` = 'family-name') and (`rph`.`sequence` = 8)),`rph`.`key_value`,'')) AS `spouse_name`,max(if(((`rph`.`key` = 'family-occupation') and (`rph`.`sequence` = 1)),`rph`.`key_value`,'')) AS `father_occupation`,max(if(((`rph`.`key` = 'family-occupation') and (`rph`.`sequence` = 2)),`rph`.`key_value`,'')) AS `mother_occupation`,max(if(((`rph`.`key` = 'family-occupation') and (`rph`.`sequence` = 3)),`rph`.`key_value`,'')) AS `brother_occupation`,max(if(((`rph`.`key` = 'family-occupation') and (`rph`.`sequence` = 4)),`rph`.`key_value`,'')) AS `sister_occupation`,max(if(((`rph`.`key` = 'family-occupation') and (`rph`.`sequence` = 5)),`rph`.`key_value`,'')) AS `son_occupation`,max(if(((`rph`.`key` = 'family-occupation') and (`rph`.`sequence` = 6)),`rph`.`key_value`,'')) AS `daughter_occupation`,max(if(((`rph`.`key` = 'family-occupation') and (`rph`.`sequence` = 7)),`rph`.`key_value`,'')) AS `guardian_occupation`,max(if(((`rph`.`key` = 'family-occupation') and (`rph`.`sequence` = 8)),`rph`.`key_value`,'')) AS `spouse_occupation`,max(if(((`rph`.`key` = 'family-age') and (`rph`.`sequence` = 1)),`rph`.`key_value`,'')) AS `father_age`,max(if(((`rph`.`key` = 'family-age') and (`rph`.`sequence` = 2)),`rph`.`key_value`,'')) AS `mother_age`,max(if(((`rph`.`key` = 'family-age') and (`rph`.`sequence` = 3)),`rph`.`key_value`,'')) AS `brother_age`,max(if(((`rph`.`key` = 'family-age') and (`rph`.`sequence` = 4)),`rph`.`key_value`,'')) AS `sister_age`,max(if(((`rph`.`key` = 'family-age') and (`rph`.`sequence` = 5)),`rph`.`key_value`,'')) AS `son_age`,max(if(((`rph`.`key` = 'family-age') and (`rph`.`sequence` = 6)),`rph`.`key_value`,'')) AS `daughter_age`,max(if(((`rph`.`key` = 'family-age') and (`rph`.`sequence` = 7)),`rph`.`key_value`,'')) AS `guardian_age`,max(if(((`rph`.`key` = 'family-age') and (`rph`.`sequence` = 8)),`rph`.`key_value`,'')) AS `spouse_age`,`get_relation`('family-relationship',`rph`.`sequence`,'Relationship',`rph`.`recruit_id`) AS `relationship`,`get_relation`('family-name',`rph`.`sequence`,'Name',`rph`.`recruit_id`) AS `name`,`get_relation`('family-birthdate',`rph`.`sequence`,'Birthday',`rph`.`recruit_id`) AS `birthday`,`get_relation`('family-occupation',`rph`.`sequence`,'Occupation',`rph`.`recruit_id`) AS `occupation` from (`ww_recruitment_personal_history` `rph` join `ww_recruitment` `r`) where (`r`.`recruit_id` = `rph`.`recruit_id`) group by `r`.`recruit_id`,`rph`.`sequence`) */;

/*View structure for view approver_class_department */

/*!50001 DROP TABLE IF EXISTS `approver_class_department` */;
/*!50001 DROP VIEW IF EXISTS `approver_class_department` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `approver_class_department` AS (select `up`.`company_id` AS `company_id`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department` from (`ww_users_department` `ud` join `users_profile` `up` on((`ud`.`department_id` = `up`.`department_id`))) group by 1,2 order by 1,3) */;

/*View structure for view approver_class_position */

/*!50001 DROP TABLE IF EXISTS `approver_class_position` */;
/*!50001 DROP VIEW IF EXISTS `approver_class_position` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `approver_class_position` AS (select distinct `profile`.`company_id` AS `company_id`,`profile`.`department_id` AS `department_id`,`position`.`position_id` AS `position_id`,`position`.`position` AS `position` from (`ww_users_position` `position` join `users_profile` `profile` on((`profile`.`position_id` = `position`.`position_id`))) where ((`profile`.`company_id` > 0) and (`profile`.`department_id` > 0)) order by 1,2,4) */;

/*View structure for view approver_position_users */

/*!50001 DROP TABLE IF EXISTS `approver_position_users` */;
/*!50001 DROP VIEW IF EXISTS `approver_position_users` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `approver_position_users` AS (select `a`.`user_id` AS `user_id`,`a`.`full_name` AS `full_name`,`b`.`company_id` AS `company_id`,`b`.`department_id` AS `department_id`,`b`.`position_id` AS `position_id` from (`users` `a` join `users_profile` `b` on(((`b`.`user_id` = `a`.`user_id`) and (`a`.`active` = 1))))) */;

/*View structure for view attrition_report */

/*!50001 DROP TABLE IF EXISTS `attrition_report` */;
/*!50001 DROP VIEW IF EXISTS `attrition_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `attrition_report` AS (select `up`.`company` AS `company`,`up`.`company_id` AS `company_id`,`up`.`division_id` AS `division_id`,`ud`.`division` AS `division`,year(`p`.`effectivity_date`) AS `year`,`get_headcount_within_active`(year(`p`.`effectivity_date`),1,`up`.`company_id`,`up`.`division_id`) AS `jan_headcount`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1',`up`.`company_id`,`up`.`division_id`,'10,11') AS `jan_managed`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1',`up`.`company_id`,`up`.`division_id`,'8') AS `jan_unmanaged`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `jan_total_attrition`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `jan_actual_ytd_attrition`,round((`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1',`up`.`company_id`,`up`.`division_id`,'8,10,11') / `get_headcount_within_active`(year(`p`.`effectivity_date`),1,`up`.`company_id`,`up`.`division_id`)),2) AS `jan_ytd_attrition`,`get_headcount_within_active`(year(`p`.`effectivity_date`),2,`up`.`company_id`,`up`.`division_id`) AS `feb_headcount`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'2',`up`.`company_id`,`up`.`division_id`,'10,11') AS `feb_managed`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'2',`up`.`company_id`,`up`.`division_id`,'8') AS `feb_unmanaged`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'2',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `feb_total_attrition`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `feb_actual_ytd_attrition`,round((`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2',`up`.`company_id`,`up`.`division_id`,'8,10,11') / `get_headcount_within_active`(year(`p`.`effectivity_date`),2,`up`.`company_id`,`up`.`division_id`)),2) AS `feb_ytd_attrition`,`get_headcount_within_active`(year(`p`.`effectivity_date`),3,`up`.`company_id`,`up`.`division_id`) AS `mar_headcount`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'3',`up`.`company_id`,`up`.`division_id`,'10,11') AS `mar_managed`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'3',`up`.`company_id`,`up`.`division_id`,'8') AS `mar_unmanaged`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'3',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `mar_total_attrition`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `mar_actual_ytd_attrition`,round((`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3',`up`.`company_id`,`up`.`division_id`,'8,10,11') / `get_headcount_within_active`(year(`p`.`effectivity_date`),3,`up`.`company_id`,`up`.`division_id`)),2) AS `mar_ytd_attrition`,`get_headcount_within_active`(year(`p`.`effectivity_date`),4,`up`.`company_id`,`up`.`division_id`) AS `apr_headcount`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'4',`up`.`company_id`,`up`.`division_id`,'10,11') AS `apr_managed`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'4',`up`.`company_id`,`up`.`division_id`,'8') AS `apr_unmanaged`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'4',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `apr_total_attrition`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `apr_actual_ytd_attrition`,round((`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4',`up`.`company_id`,`up`.`division_id`,'8,10,11') / `get_headcount_within_active`(year(`p`.`effectivity_date`),4,`up`.`company_id`,`up`.`division_id`)),2) AS `apr_ytd_attrition`,`get_headcount_within_active`(year(`p`.`effectivity_date`),5,`up`.`company_id`,`up`.`division_id`) AS `may_headcount`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'5',`up`.`company_id`,`up`.`division_id`,'10,11') AS `may_managed`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'5',`up`.`company_id`,`up`.`division_id`,'8') AS `may_unmanaged`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'5',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `may_total_attrition`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `may_actual_ytd_attrition`,round((`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5',`up`.`company_id`,`up`.`division_id`,'8,10,11') / `get_headcount_within_active`(year(`p`.`effectivity_date`),5,`up`.`company_id`,`up`.`division_id`)),2) AS `may_ytd_attrition`,`get_headcount_within_active`(year(`p`.`effectivity_date`),6,`up`.`company_id`,`up`.`division_id`) AS `jun_headcount`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'6',`up`.`company_id`,`up`.`division_id`,'10,11') AS `jun_managed`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'6',`up`.`company_id`,`up`.`division_id`,'8') AS `jun_unmanaged`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'6',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `jun_total_attrition`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `jun_actual_ytd_attrition`,round((`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6',`up`.`company_id`,`up`.`division_id`,'8,10,11') / `get_headcount_within_active`(year(`p`.`effectivity_date`),5,`up`.`company_id`,`up`.`division_id`)),2) AS `jun_ytd_attrition`,`get_headcount_within_active`(year(`p`.`effectivity_date`),7,`up`.`company_id`,`up`.`division_id`) AS `jul_headcount`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'7',`up`.`company_id`,`up`.`division_id`,'10,11') AS `jul_managed`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'7',`up`.`company_id`,`up`.`division_id`,'8') AS `jul_unmanaged`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'7',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `jul_total_attrition`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6,7',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `jul_actual_ytd_attrition`,round((`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6,7',`up`.`company_id`,`up`.`division_id`,'8,10,11') / `get_headcount_within_active`(year(`p`.`effectivity_date`),5,`up`.`company_id`,`up`.`division_id`)),2) AS `jul_ytd_attrition`,`get_headcount_within_active`(year(`p`.`effectivity_date`),8,`up`.`company_id`,`up`.`division_id`) AS `aug_headcount`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'8',`up`.`company_id`,`up`.`division_id`,'10,11') AS `aug_managed`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'8',`up`.`company_id`,`up`.`division_id`,'8') AS `aug_unmanaged`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'8',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `aug_total_attrition`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6,7,8',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `aug_actual_ytd_attrition`,round((`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6,7,8',`up`.`company_id`,`up`.`division_id`,'8,10,11') / `get_headcount_within_active`(year(`p`.`effectivity_date`),5,`up`.`company_id`,`up`.`division_id`)),2) AS `aug_ytd_attrition`,`get_headcount_within_active`(year(`p`.`effectivity_date`),9,`up`.`company_id`,`up`.`division_id`) AS `sep_headcount`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'9',`up`.`company_id`,`up`.`division_id`,'10,11') AS `sep_managed`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'9',`up`.`company_id`,`up`.`division_id`,'8') AS `sep_unmanaged`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'9',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `sep_total_attrition`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6,7,8,9',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `sep_actual_ytd_attrition`,round((`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6,7,8,9',`up`.`company_id`,`up`.`division_id`,'8,10,11') / `get_headcount_within_active`(year(`p`.`effectivity_date`),5,`up`.`company_id`,`up`.`division_id`)),2) AS `sep_ytd_attrition`,`get_headcount_within_active`(year(`p`.`effectivity_date`),10,`up`.`company_id`,`up`.`division_id`) AS `oct_headcount`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'10',`up`.`company_id`,`up`.`division_id`,'10,11') AS `oct_managed`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'10',`up`.`company_id`,`up`.`division_id`,'8') AS `oct_unmanaged`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'10',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `oct_total_attrition`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6,7,8,9,10',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `oct_actual_ytd_attrition`,round((`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6,7,8,9,10',`up`.`company_id`,`up`.`division_id`,'8,10,11') / `get_headcount_within_active`(year(`p`.`effectivity_date`),5,`up`.`company_id`,`up`.`division_id`)),2) AS `oct_ytd_attrition`,`get_headcount_within_active`(year(`p`.`effectivity_date`),11,`up`.`company_id`,`up`.`division_id`) AS `nov_headcount`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'11',`up`.`company_id`,`up`.`division_id`,'10,11') AS `nov_managed`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'11',`up`.`company_id`,`up`.`division_id`,'8') AS `nov_unmanaged`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'11',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `nov_total_attrition`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6,7,8,9,10,11',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `nov_actual_ytd_attrition`,round((`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6,7,8,9,10,11',`up`.`company_id`,`up`.`division_id`,'8,10,11') / `get_headcount_within_active`(year(`p`.`effectivity_date`),5,`up`.`company_id`,`up`.`division_id`)),2) AS `nov_ytd_attrition`,`get_headcount_within_active`(year(`p`.`effectivity_date`),12,`up`.`company_id`,`up`.`division_id`) AS `dec_headcount`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'12',`up`.`company_id`,`up`.`division_id`,'10,11') AS `dec_managed`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'12',`up`.`company_id`,`up`.`division_id`,'8') AS `dec_unmanaged`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'12',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `dec_total_attrition`,`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6,7,8,9,10,11,12',`up`.`company_id`,`up`.`division_id`,'8,10,11') AS `dec_actual_ytd_attrition`,round((`get_headcount_within_resigned`(year(`p`.`effectivity_date`),'1,2,3,4,5,6,7,8,9,10,11,12',`up`.`company_id`,`up`.`division_id`,'8,10,11') / `get_headcount_within_active`(year(`p`.`effectivity_date`),5,`up`.`company_id`,`up`.`division_id`)),2) AS `dec_ytd_attrition` from (((`ww_users` `u` join `ww_partners` `p` on((`u`.`user_id` = `p`.`user_id`))) join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) left join `ww_users_division` `ud` on((`up`.`division_id` = `ud`.`division_id`))) where ((`p`.`deleted` = 0) and (`u`.`deleted` = 0)) group by `up`.`division_id`,year(`p`.`effectivity_date`),`up`.`company_id`) */;

/*View structure for view birthday_list_for_the_year */

/*!50001 DROP TABLE IF EXISTS `birthday_list_for_the_year` */;
/*!50001 DROP VIEW IF EXISTS `birthday_list_for_the_year` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `birthday_list_for_the_year` AS (select `u`.`user_id` AS `celebrant_id`,`u`.`display_name` AS `full_name`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`upos`.`position` AS `position`,date_format(concat(year(curdate()),'-',lpad(month(`up`.`birth_date`),2,'0'),'-',lpad(dayofmonth(`up`.`birth_date`),2,'0')),'%b %e, %Y') AS `birth_date` from ((`users` `u` join `users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) left join `users_position` `upos` on((`up`.`position_id` = `upos`.`position_id`))) where ((`u`.`can_view` = 1) and (`u`.`active` = 1) and (`u`.`deleted` = 0)) order by `up`.`birth_date`) */;

/*View structure for view dashboard_birthday */

/*!50001 DROP TABLE IF EXISTS `dashboard_birthday` */;
/*!50001 DROP VIEW IF EXISTS `dashboard_birthday` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `dashboard_birthday` AS (select `u`.`user_id` AS `celebrant_id`,ifnull(`up`.`photo`,'assets/img/avatar.png') AS `photo`,`u`.`display_name` AS `display_name`,`upos`.`position` AS `position`,`nextbday2`(`up`.`birth_date`) AS `birth_date`,`getdaystimeline`(`nextbday2`(`up`.`birth_date`)) AS `time_line`,`nextbday2`(`up`.`birth_date`) AS `datetime` from (((`users` `u` join `users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) join `users_position` `upos` on((`up`.`position_id` = `upos`.`position_id`))) join `partners` `p` on(((`u`.`user_id` = `p`.`user_id`) and (ifnull(`p`.`resigned_date`,0) = 0)))) where ((`u`.`active` = 1) and (`nextbday2`(`up`.`birth_date`) between (curdate() - interval 2 day) and (curdate() + interval 31 day))) order by 5) */;

/*View structure for view dashboard_birthday_greetings */

/*!50001 DROP TABLE IF EXISTS `dashboard_birthday_greetings` */;
/*!50001 DROP VIEW IF EXISTS `dashboard_birthday_greetings` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `dashboard_birthday_greetings` AS (select `sb`.`id` AS `id`,`sb`.`status` AS `status`,`sb`.`user_id` AS `user_id`,`up`.`display_name` AS `display_name`,`sb`.`content` AS `content`,`sb`.`birthday` AS `birthday`,`sb`.`recipient_id` AS `recipient_id`,`upos`.`position` AS `position`,ifnull(`up`.`photo`,'assets/img/avatar.png') AS `photo`,`gettimeline`(`sb`.`createdon`) AS `time_line`,`sb`.`createdon` AS `createdon` from ((`ww_system_birthday` `sb` join `users_profile` `up`) join `ww_users_position` `upos`) where ((`up`.`user_id` = `sb`.`user_id`) and (`upos`.`position_id` = `up`.`position_id`)) order by `sb`.`createdon` desc) */;

/*View structure for view dashboard_birthday_list */

/*!50001 DROP TABLE IF EXISTS `dashboard_birthday_list` */;
/*!50001 DROP VIEW IF EXISTS `dashboard_birthday_list` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `dashboard_birthday_list` AS (select `u`.`user_id` AS `celebrant_id`,ifnull(`up`.`photo`,'assets/img/avatar.png') AS `photo`,`u`.`display_name` AS `display_name`,`upos`.`position` AS `position`,`up`.`birth_date` AS `birth_date`,`getbdaystimeline`(`up`.`birth_date`) AS `time_line` from ((`users` `u` left join `users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) left join `users_position` `upos` on((`up`.`position_id` = `upos`.`position_id`))) where ((`u`.`can_view` = 1) and (`u`.`active` = 1) and (`u`.`deleted` = 0)) order by `up`.`birth_date`) */;

/*View structure for view dashboard_feeds */

/*!50001 DROP TABLE IF EXISTS `dashboard_feeds` */;
/*!50001 DROP VIEW IF EXISTS `dashboard_feeds` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `dashboard_feeds` AS (select `wsf`.`id` AS `id`,`wsf`.`user_id` AS `user_id`,`wsf`.`message_type` AS `message_type`,if((`wsf`.`user_id` = `wsf`.`recipient_id`),'label-default',(case `wsf`.`message_type` when 'Comment' then 'label-default' when 'Time Record' then 'label-danger' when 'System' then 'label-success' else 'label-warning' end)) AS `class`,`wsf`.`display_name` AS `display_name`,`wsf`.`feed_content` AS `feed_content`,if((`wsf`.`recipient_id` = 0),`sfr`.`user_id`,`wsf`.`recipient_id`) AS `recipient_id`,if((`wsf`.`recipient_id` = 0),if((`sfr`.`user_id` = `wsf`.`user_id`),`getrecipients`(`wsf`.`id`,`wsf`.`user_id`),''),'') AS `recipients`,`wsf`.`readon` AS `readon`,`wsf`.`createdon` AS `createdon_datetime`,`gettimeline`(`wsf`.`createdon`) AS `createdon`,ifnull(if((`wsf`.`user_id` = `wsf`.`recipient_id`),`photome`.`photo`,`photoyou`.`photo`),'assets/img/avatar.png') AS `avatar`,`wsf`.`uri` AS `uri`,`wsf`.`record_id` AS `record_id`,`sfr`.`like` AS `like`,`wsf`.`deleted` AS `deleted` from (((`ww_system_feeds` `wsf` left join `users_profile` `photome` on((`photome`.`user_id` = `wsf`.`recipient_id`))) left join `users_profile` `photoyou` on((`photoyou`.`user_id` = `wsf`.`user_id`))) left join `ww_system_feeds_recipient` `sfr` on((`sfr`.`id` = `wsf`.`id`))) where (`wsf`.`deleted` = 0) order by if(isnull(`wsf`.`modifiedon`),`wsf`.`createdon`,`wsf`.`modifiedon`) desc,`wsf`.`createdon` desc) */;

/*View structure for view dashboard_feeds2 */

/*!50001 DROP TABLE IF EXISTS `dashboard_feeds2` */;
/*!50001 DROP VIEW IF EXISTS `dashboard_feeds2` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `dashboard_feeds2` AS (select `wsf`.`id` AS `id`,`wsf`.`user_id` AS `user_id`,`wsf`.`message_type` AS `message_type`,if((`wsf`.`user_id` = `wsf`.`recipient_id`),'label-default',(case `wsf`.`message_type` when 'Comment' then 'label-default' when 'Time Record' then 'label-danger' when 'System' then 'label-success' else 'label-warning' end)) AS `class`,`wsf`.`display_name` AS `display_name`,`wsf`.`feed_content` AS `feed_content`,if((`wsf`.`recipient_id` = 0),`sfr`.`user_id`,`wsf`.`recipient_id`) AS `recipient_id`,`getrecipients`(`wsf`.`id`) AS `recipients`,`wsf`.`readon` AS `readon`,`wsf`.`createdon` AS `createdon_datetime`,`gettimeline`(`wsf`.`createdon`) AS `createdon`,ifnull(if((`wsf`.`user_id` = `wsf`.`recipient_id`),`photome`.`photo`,`photoyou`.`photo`),'assets/img/avatar.png') AS `avatar`,`wsf`.`deleted` AS `deleted` from (((`ww_system_feeds` `wsf` left join `users_profile` `photome` on((`photome`.`user_id` = `wsf`.`recipient_id`))) left join `users_profile` `photoyou` on((`photoyou`.`user_id` = `wsf`.`user_id`))) left join `ww_system_feeds_recipient` `sfr` on((`sfr`.`id` = `wsf`.`id`))) where (`wsf`.`deleted` = 0) order by `wsf`.`createdon` desc) */;

/*View structure for view dashboard_group_notification */

/*!50001 DROP TABLE IF EXISTS `dashboard_group_notification` */;
/*!50001 DROP VIEW IF EXISTS `dashboard_group_notification` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `dashboard_group_notification` AS (select replace(replace(if((length(`f`.`post`) >= 60),concat(left(`f`.`post`,if((locate('<br>',`f`.`post`) > 1),(locate('<br>',`f`.`post`) - 1),60)),'...'),`f`.`post`),'<h4>',''),'</h4>','') AS `post`,`a`.`type_id` AS `type_id`,`a`.`url` AS `url`,`a`.`created_on` AS `created_on`,`a`.`created_by` AS `created_by`,`b`.`user_id` AS `recipient`,`a`.`notif` AS `notif`,`b`.`read` AS `read`,`b`.`read_on` AS `read_on`,`c`.`full_name` AS `full_name`,`d`.`photo` AS `photo`,`gettimeline`(`a`.`created_on`) AS `timeline`,`e`.`type` AS `type` from (((((`ww_groups_notif` `a` left join `ww_groups_notif_recipient` `b` on((`b`.`notif_id` = `a`.`notif_id`))) left join `ww_users` `c` on((`c`.`user_id` = `a`.`created_by`))) left join `ww_users_profile` `d` on((`d`.`user_id` = `c`.`user_id`))) left join `ww_groups_notif_type` `e` on((`e`.`type_id` = `a`.`type_id`))) left join `ww_groups_post` `f` on((`f`.`post_id` = `a`.`post_id`))) where (`f`.`deleted` = 0) order by `a`.`created_on` desc) */;

/*View structure for view dashboard_inbox */

/*!50001 DROP TABLE IF EXISTS `dashboard_inbox` */;
/*!50001 DROP VIEW IF EXISTS `dashboard_inbox` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `dashboard_inbox` AS (select `wsi`.`id` AS `id`,`wsi`.`status` AS `status`,`wsi`.`user_id` AS `user_id`,`wsi`.`display_name` AS `display_name`,ifnull(`photome`.`photo`,'assets/img/avatar.png') AS `avatar`,`wsi`.`recipient_id` AS `recipient_id`,replace(replace(if((length(`wsi`.`content`) >= 60),concat(left(`wsi`.`content`,60),'...'),`wsi`.`content`),'<h4>',''),'</h4>','') AS `content`,`wsi`.`readon` AS `readon`,`gettimeline`(`wsi`.`createdon`) AS `timeline`,`wsi`.`reactedon` AS `reactedon`,`wsi`.`createdon` AS `createdon` from (`ww_system_inbox` `wsi` left join `users_profile` `photome` on((`photome`.`user_id` = `wsi`.`user_id`))) where (`wsi`.`deleted` = 0) order by `wsi`.`createdon` desc) */;

/*View structure for view dashboard_notification */

/*!50001 DROP TABLE IF EXISTS `dashboard_notification` */;
/*!50001 DROP VIEW IF EXISTS `dashboard_notification` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `dashboard_notification` AS (select `wsf`.`id` AS `id`,`wsf`.`status` AS `status`,`wsf`.`message_type` AS `message_type`,if((`wsf`.`recipient_id` = 0),`sfr`.`user_id`,`wsf`.`recipient_id`) AS `recipient_id`,replace(replace(if((length(`wsf`.`feed_content`) >= 60),concat(`wsf`.`display_name`,'<br>',left(`wsf`.`feed_content`,if((locate('<br>',`wsf`.`feed_content`) > 1),(locate('<br>',`wsf`.`feed_content`) - 1),60)),'...'),`wsf`.`feed_content`),'<h4>',''),'</h4>','') AS `feed_content`,`wsf`.`readon` AS `readon`,`gettimeline`(`wsf`.`createdon`) AS `timeline`,`wsf`.`uri` AS `uri`,`wsf`.`record_id` AS `record_id`,`wsf`.`reactedon` AS `reactedon`,`wsf`.`createdon` AS `createdon` from (`ww_system_feeds` `wsf` left join `ww_system_feeds_recipient` `sfr` on((`sfr`.`id` = `wsf`.`id`))) where (`wsf`.`deleted` = 0) order by `wsf`.`createdon` desc) */;

/*View structure for view dashboard_todo */

/*!50001 DROP TABLE IF EXISTS `dashboard_todo` */;
/*!50001 DROP VIEW IF EXISTS `dashboard_todo` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `dashboard_todo` AS (select `forms_submitted`.`forms_id` AS `forms_id`,`forms_submitted`.`form_status_id` AS `form_status_id`,`form_status`.`form_status` AS `form_status`,`forms_submitted`.`form_id` AS `form_id`,`forms`.`form` AS `form`,`forms_submitted`.`form_code` AS `form_code`,`forms_submitted`.`user_id` AS `user_id`,`forms_submitted`.`display_name` AS `display_name`,`forms_submitted`.`date_from` AS `date_from`,`forms_submitted`.`date_to` AS `date_to`,`forms_submitted`.`reason` AS `reason`,`gettimeline`(`forms_submitted`.`created_on`) AS `createdon`,`forms_submitted`.`deleted` AS `deleted` from ((`ww_time_forms` `forms_submitted` join `ww_time_form` `forms`) join `ww_time_form_status` `form_status`) where ((`forms`.`form_id` = `forms_submitted`.`form_id`) and (`forms_submitted`.`form_status_id` = `form_status`.`form_status_id`) and (`forms_submitted`.`deleted` = 0)) order by `forms_submitted`.`created_on` desc) */;

/*View structure for view dashboard_todos */

/*!50001 DROP TABLE IF EXISTS `dashboard_todos` */;
/*!50001 DROP VIEW IF EXISTS `dashboard_todos` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `dashboard_todos` AS (select `tf`.`forms_id` AS `forms_id`,`tf`.`form_status_id` AS `form_status_id`,`status`.`form_status` AS `form_status`,`tf`.`form_id` AS `form_id`,`tf`.`form_code` AS `form_code`,`form`.`form` AS `form`,`tf`.`reason` AS `reason`,`tf`.`user_id` AS `user_id`,`tf`.`display_name` AS `display_name`,`tf`.`day` AS `day`,`tf`.`hrs` AS `hrs`,concat(date_format(`tf`.`date_from`,'%b-%e %a'),if((`tf`.`date_from` = `tf`.`date_to`),'',concat(' To ',date_format(`tf`.`date_to`,'%b-%e %a')))) AS `date_range`,`tf`.`date_from` AS `date_from`,`tf`.`date_to` AS `date_to`,`gettimeline`(`tf`.`created_on`) AS `createdon`,`tf`.`created_on` AS `created_on`,`approver`.`form_status_id` AS `approver_status_id`,`approver_status`.`form_status` AS `approver_status`,`approver`.`user_id` AS `approver_id`,`approver`.`display_name` AS `approver_name`,`getdaystimeline`(`tf`.`created_on`) AS `timeline` from ((((`time_forms` `tf` join `ww_time_forms_approver` `approver` on((`approver`.`forms_id` = `tf`.`forms_id`))) join `ww_time_form_status` `status` on((`status`.`form_status_id` = `tf`.`form_status_id`))) join `ww_time_form` `form` on((`form`.`form_id` = `tf`.`form_id`))) join `ww_time_form_status` `approver_status` on((`approver_status`.`form_status_id` = `approver`.`form_status_id`)))) */;

/*View structure for view incident_report */

/*!50001 DROP TABLE IF EXISTS `incident_report` */;
/*!50001 DROP VIEW IF EXISTS `incident_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `incident_report` AS select `uc`.`company_id` AS `company_id`,`ud`.`department_id` AS `department_id`,`u`.`user_id` AS `user_id`,`i`.`offense_id` AS `offense_id`,`da`.`sanction_id` AS `sanction_id`,`u`.`full_name` AS `name`,`upos`.`position` AS `position`,`uc`.`company` AS `company`,`ud`.`department` AS `department`,`pol`.`offense_level` AS `frequency`,`pos`.`sanction` AS `penalty`,`da`.`damages_payment` AS `payment`,if((`da`.`date_from` <> '1970-01-01'),`da`.`date_from`,'') AS `from`,if((`da`.`date_to` <> '1970-01-01'),`da`.`date_to`,'') AS `to`,cast(`i`.`date_time_of_offense` as date) AS `date_of_offense`,cast(`i`.`date_time_of_offense` as date) AS `date_of_offense_from`,cast(`i`.`date_time_of_offense` as date) AS `date_of_offense_to`,if((`da`.`sanction_id` is not null),`da`.`created_on`,'') AS `date_serve`,`da`.`remarks` AS `remarks`,if(isnull(`da`.`sanction_id`),`i`.`modified_on`,'') AS `ir_closed_date`,`u1`.`full_name` AS `superior`,`po`.`offense` AS `offense`,`i`.`violation_details` AS `details_of_violations` from (((((((((((`ww_partners_incident` `i` left join `ww_partners_disciplinary_action` `da` on((`da`.`incident_id` = `i`.`incident_id`))) left join `ww_partners_incident_immediate` `ii` on((`ii`.`incident_id` = `i`.`incident_id`))) left join `ww_partners_offense_sanction` `pos` on((`da`.`sanction_id` = `pos`.`sanction_id`))) left join `ww_partners_offense` `po` on((`i`.`offense_id` = `po`.`offense_id`))) left join `ww_partners_offense_level` `pol` on((`pos`.`offense_level_id` = `pol`.`offense_level_id`))) left join `ww_users` `u` on((`i`.`involved_partners` = `u`.`user_id`))) left join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) left join `ww_users` `u1` on((`ii`.`user_id` = `u1`.`user_id`))) left join `ww_users_company` `uc` on((`up`.`company_id` = `uc`.`company_id`))) left join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_users_position` `upos` on((`up`.`position_id` = `upos`.`position_id`))) */;

/*View structure for view leave_balance_monitoring */

/*!50001 DROP TABLE IF EXISTS `leave_balance_monitoring` */;
/*!50001 DROP VIEW IF EXISTS `leave_balance_monitoring` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `leave_balance_monitoring` AS select `up`.`company_id` AS `company_id`,`up`.`company` AS `company`,concat(`up`.`firstname`,' ',`up`.`lastname`) AS `full_name`,`tfb`.`year` AS `year`,`tfb`.`form_code` AS `leave_type`,`tfb`.`previous` AS `previous`,`tfb`.`current` AS `current`,`tfb`.`used` AS `used`,`tfb`.`paid_unit` AS `converted`,`tfb`.`forfeited` AS `forfeited`,`tfb`.`balance` AS `balance` from (`ww_time_form_balance` `tfb` left join `ww_users_profile` `up` on((`tfb`.`user_id` = `up`.`user_id`))) where (`tfb`.`form_code` = 'LIP') */;

/*View structure for view manpower_movement_report */

/*!50001 DROP TABLE IF EXISTS `manpower_movement_report` */;
/*!50001 DROP VIEW IF EXISTS `manpower_movement_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `manpower_movement_report` AS (select `pma`.`effectivity_date` AS `effectivity_date`,`pma`.`display_name` AS `display_name`,(case when (`pmt`.`type_code` = 'PROMOTE') then `t`.`from_name` else '' end) AS `from_name_promote`,(case when (`pmt`.`type_code` = 'PROMOTE') then `t`.`to_name` else '' end) AS `to_name_promote`,(case when (`pmt`.`type_code` = 'TRANSFER') then `t`.`from_name` else '' end) AS `from_name_transfer`,(case when (`pmt`.`type_code` = 'TRANSFER') then `t`.`to_name` else '' end) AS `to_name_transfer`,(case when (`pmt`.`type_code` = 'TERMINATE') then 1 else '' end) AS `manage`,(case when (`pmt`.`type_code` = 'RESIGN') then 1 else '' end) AS `unmanaged`,(case when (`pmt`.`type_code` = 'ENDCNTRCT') then 1 else '' end) AS `EOC`,`up`.`company_id` AS `company_id`,`up`.`division_id` AS `division_id`,year(`pma`.`effectivity_date`) AS `year` from (((((`partner_movement` `pm` left join `ww_partners_movement` `wpm` on((`wpm`.`movement_id` = `pm`.`record_id`))) left join `ww_partners_movement_action` `pma` on((`pma`.`movement_id` = `wpm`.`movement_id`))) left join `ww_partners_movement_action_transfer` `t` on((`t`.`movement_id` = `pma`.`movement_id`))) left join `ww_partners_movement_type` `pmt` on((`pmt`.`type_id` = `pma`.`type_id`))) left join `ww_users_profile` `up` on((`up`.`user_id` = `pma`.`user_id`)))) */;

/*View structure for view month */

/*!50001 DROP TABLE IF EXISTS `month` */;
/*!50001 DROP VIEW IF EXISTS `month` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `month` AS select 'January' AS `MONTH` union all select 'February' AS `February` union all select 'March' AS `March` union all select 'April' AS `April` union all select 'May' AS `May` union all select 'June' AS `June` union all select 'July' AS `July` union all select 'August' AS `August` union all select 'September' AS `September` union all select 'October' AS `October` union all select 'November' AS `November` union all select 'December' AS `December` */;

/*View structure for view new_hires_report */

/*!50001 DROP TABLE IF EXISTS `new_hires_report` */;
/*!50001 DROP VIEW IF EXISTS `new_hires_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `new_hires_report` AS (select `rr`.`document_no` AS `prf_no`,`p`.`alias` AS `name`,`p`.`status` AS `status`,`u`.`full_name` AS `recruiter`,`up`.`company_id` AS `company_id`,`up`.`division_id` AS `division_id`,year(`p`.`effectivity_date`) AS `year` from ((((`ww_partners` `p` left join `ww_users_profile` `up` on((`up`.`user_id` = `p`.`user_id`))) left join `ww_recruitment` `r` on((`r`.`partner_id` = `p`.`partner_id`))) left join `ww_recruitment_request` `rr` on((`rr`.`request_id` = `r`.`request_id`))) left join `ww_users` `u` on((`u`.`user_id` = `rr`.`hr_assigned`))) where (`p`.`deleted` = 0)) */;

/*View structure for view night_differential */

/*!50001 DROP TABLE IF EXISTS `night_differential` */;
/*!50001 DROP VIEW IF EXISTS `night_differential` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `night_differential` AS (select `ww_time_record_process`.`user_id` AS `user_id`,`ww_time_record_process`.`date` AS `DATE`,`ww_time_record_process`.`transaction_code` AS `transaction_code`,`ww_time_record_process`.`quantity` AS `quantity` from `ww_time_record_process` where (`ww_time_record_process`.`transaction_code` like '%nd%')) */;

/*View structure for view overtime_checking */

/*!50001 DROP TABLE IF EXISTS `overtime_checking` */;
/*!50001 DROP VIEW IF EXISTS `overtime_checking` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `overtime_checking` AS (select `tf`.`display_name` AS `display_name`,`tfd`.`date` AS `date`,`trs`.`payroll_date` AS `payroll_date`,`tf`.`form_status_id` AS `form_status_id`,if((`tr`.`aux_shift_id` = 0),`tr`.`shift`,`tr`.`aux_shift`) AS `shift`,ifnull(`tr`.`time_in`,`tr`.`aux_time_in`) AS `time_in`,ifnull(`tr`.`time_out`,`tr`.`aux_time_out`) AS `time_out`,`tf`.`focus_date` AS `focus_date`,`tf`.`date_approved` AS `date_approved`,`tfd`.`time_from` AS `time_from`,`tfd`.`time_to` AS `time_to`,`tfd`.`hrs` AS `ot_hours_application`,`trs`.`ot` AS `ot_processed` from (((`ww_time_forms` `tf` left join `ww_time_forms_date` `tfd` on((`tf`.`forms_id` = `tfd`.`forms_id`))) left join `ww_time_record_summary` `trs` on(((`tfd`.`date` = `trs`.`date`) and (`trs`.`user_id` = `tf`.`user_id`)))) left join `ww_time_record` `tr` on(((`tr`.`date` = `trs`.`date`) and (`tr`.`user_id` = `trs`.`user_id`)))) where (`tf`.`form_code` = 'OT')) */;

/*View structure for view overtime_checking_on_approved */

/*!50001 DROP TABLE IF EXISTS `overtime_checking_on_approved` */;
/*!50001 DROP VIEW IF EXISTS `overtime_checking_on_approved` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `overtime_checking_on_approved` AS (select `tf`.`display_name` AS `display_name`,`tfd`.`date` AS `date`,`trs`.`payroll_date` AS `payroll_date`,`tf`.`form_status_id` AS `form_status_id`,if((`tr`.`aux_shift_id` = 0),`tr`.`shift`,`tr`.`aux_shift`) AS `shift`,ifnull(`tr`.`time_in`,`tr`.`aux_time_in`) AS `time_in`,ifnull(`tr`.`time_out`,`tr`.`aux_time_out`) AS `time_out`,`tf`.`date_approved` AS `date_approved`,`tf`.`focus_date` AS `focus_date`,`tfd`.`time_from` AS `time_from`,`tfd`.`time_to` AS `time_to`,`tfd`.`hrs` AS `ot_hours_application`,`trs`.`ot` AS `ot_processed` from (((`ww_time_forms` `tf` left join `ww_time_forms_date` `tfd` on((`tf`.`forms_id` = `tfd`.`forms_id`))) left join `ww_time_record_summary` `trs` on(((`tfd`.`date` = `trs`.`date`) and (`trs`.`user_id` = `tf`.`user_id`)))) left join `ww_time_record` `tr` on(((`tr`.`date` = `trs`.`date`) and (`tr`.`user_id` = `trs`.`user_id`)))) where ((`tf`.`form_code` = 'OT') and (`tf`.`form_status_id` = 6))) */;

/*View structure for view partner_contribution */

/*!50001 DROP TABLE IF EXISTS `partner_contribution` */;
/*!50001 DROP VIEW IF EXISTS `partner_contribution` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partner_contribution` AS select `partner_contribution_view`.`user_id` AS `user_id`,`partner_contribution_view`.`YEAR` AS `year`,`partner_contribution_view`.`MONTH` AS `month`,max((case when (`partner_contribution_view`.`summary_code` = 'SSS_EMP') then `partner_contribution_view`.`VALUE` end)) AS `SSS`,max((case when (`partner_contribution_view`.`summary_code` = 'PHIC_EMP') then `partner_contribution_view`.`VALUE` end)) AS `PhilHealth`,max((case when (`partner_contribution_view`.`summary_code` = 'HDMF_EMP') then `partner_contribution_view`.`VALUE` end)) AS `PagIBIG`,max((case when (`partner_contribution_view`.`summary_code` = 'WHTAX') then `partner_contribution_view`.`VALUE` end)) AS `WTax` from `partner_contribution_view` group by `partner_contribution_view`.`MONTH`,`partner_contribution_view`.`user_id`,`partner_contribution_view`.`YEAR` order by `partner_contribution_view`.`YEAR` desc,field(`partner_contribution_view`.`MONTH`,'January','February','March','April','May','June','July','August','September','October','November','December') */;

/*View structure for view partner_contribution_view */

/*!50001 DROP TABLE IF EXISTS `partner_contribution_view` */;
/*!50001 DROP VIEW IF EXISTS `partner_contribution_view` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partner_contribution_view` AS select `ww_payroll_closed_summary`.`user_id` AS `user_id`,`ww_payroll_closed_summary`.`year` AS `YEAR`,`ww_payroll_closed_summary`.`summary_code` AS `summary_code`,`month`.`MONTH` AS `MONTH`,(case `month`.`MONTH` when 'January' then aes_decrypt(`ww_payroll_closed_summary`.`january`,`encryption_key`()) when 'February' then aes_decrypt(`ww_payroll_closed_summary`.`february`,`encryption_key`()) when 'March' then aes_decrypt(`ww_payroll_closed_summary`.`march`,`encryption_key`()) when 'April' then aes_decrypt(`ww_payroll_closed_summary`.`april`,`encryption_key`()) when 'May' then aes_decrypt(`ww_payroll_closed_summary`.`may`,`encryption_key`()) when 'June' then aes_decrypt(`ww_payroll_closed_summary`.`june`,`encryption_key`()) when 'July' then aes_decrypt(`ww_payroll_closed_summary`.`july`,`encryption_key`()) when 'August' then aes_decrypt(`ww_payroll_closed_summary`.`august`,`encryption_key`()) when 'September' then aes_decrypt(`ww_payroll_closed_summary`.`september`,`encryption_key`()) when 'October' then aes_decrypt(`ww_payroll_closed_summary`.`october`,`encryption_key`()) when 'November' then aes_decrypt(`ww_payroll_closed_summary`.`november`,`encryption_key`()) when 'December' then aes_decrypt(`ww_payroll_closed_summary`.`december`,`encryption_key`()) end) AS `VALUE` from (`ww_payroll_closed_summary` join `month`) */;

/*View structure for view partner_loan_payment */

/*!50001 DROP TABLE IF EXISTS `partner_loan_payment` */;
/*!50001 DROP VIEW IF EXISTS `partner_loan_payment` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partner_loan_payment` AS select `l`.`user_id` AS `user_id`,`p`.`partner_loan_id` AS `partner_loan_id`,sum(if((`p`.`type` = 1),round(aes_decrypt(`p`.`amount`,`encryption_key`()),2),0)) AS `principal`,sum(if((`p`.`type` = 2),round(aes_decrypt(`p`.`amount`,`encryption_key`()),2),0)) AS `interest`,aes_decrypt(`p`.`amount`,`encryption_key`()) AS `amount`,`p`.`date_paid` AS `date_paid`,`pta`.`transaction_label` AS `transaction` from ((((`ww_payroll_partners_loan_payment` `p` left join `ww_payroll_partners_loan` `l` on((`p`.`partner_loan_id` = `l`.`partner_loan_id`))) left join `ww_payroll_loan` `pl` on((`pl`.`loan_id` = `l`.`loan_id`))) left join `ww_payroll_transaction` `pta` on((`pl`.`amortization_transid` = `pta`.`transaction_id`))) left join `ww_payroll_transaction` `ptb` on((`pl`.`interest_transid` = `ptb`.`transaction_id`))) where (`p`.`paid` = 1) group by `l`.`user_id`,`p`.`date_paid`,`p`.`partner_loan_id` order by `p`.`date_paid`,`l`.`user_id`,`pl`.`loan` */;

/*View structure for view partner_manpower_status_position_filter */

/*!50001 DROP TABLE IF EXISTS `partner_manpower_status_position_filter` */;
/*!50001 DROP VIEW IF EXISTS `partner_manpower_status_position_filter` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partner_manpower_status_position_filter` AS (select `u`.`user_id` AS `user_id`,(case when (`upos`.`position` in ('Assistant Vice President','Senior Vice President','Manager','Deputy Manager','Manager-ISO','PGAD Deputy Manager','Senior Procument Manager','Senior Treasury Manager','Treasury Assistant Manager')) then 'Manager and Above' when (`upos`.`position` = 'Assistant Manager') then 'Assistant Manager' when (`upos`.`position` like '%Engineer%') then 'Engineer' else 'Others' end) AS `position` from ((`ww_users` `u` left join `ww_users_profile` `up` on((`up`.`user_id` = `u`.`user_id`))) left join `ww_users_position` `upos` on((`upos`.`position_id` = `up`.`position_id`)))) */;

/*View structure for view partner_manpower_status_report */

/*!50001 DROP TABLE IF EXISTS `partner_manpower_status_report` */;
/*!50001 DROP VIEW IF EXISTS `partner_manpower_status_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partner_manpower_status_report` AS (select `u`.`active` AS `active`,`p`.`status_id` AS `status_id`,`p`.`status` AS `status`,`upos`.`position` AS `position`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`up`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`pp`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,count(`u`.`user_id`) AS `count`,sum((case when (`u`.`active` = 1) then 1 else 0 end)) AS `employed`,sum((case when (`u`.`active` = 0) then 1 else 0 end)) AS `resigned` from ((((((`ww_users` `u` left join `ww_users_profile` `up` on((`up`.`user_id` = `u`.`user_id`))) left join `ww_partners` `p` on((`p`.`user_id` = `u`.`user_id`))) left join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) left join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) left join `ww_payroll_rate_type` `prt` on((`prt`.`payroll_rate_type_id` = `pp`.`payroll_rate_type_id`))) left join `partner_manpower_status_position_filter` `upos` on((`upos`.`user_id` = `u`.`user_id`))) group by `u`.`active`,`p`.`status`,`upos`.`position`,`up`.`company`,`ud`.`department` order by `u`.`active`,`p`.`status`,`up`.`company`,`ud`.`department`) */;

/*View structure for view partner_movement */

/*!50001 DROP TABLE IF EXISTS `partner_movement` */;
/*!50001 DROP VIEW IF EXISTS `partner_movement` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partner_movement` AS (select `pm`.`movement_id` AS `record_id`,group_concat(`pma`.`display_name` separator '<br> ') AS `employee_name`,group_concat(distinct `pma`.`type` separator ',<br> ') AS `movement_type`,`pmc`.`cause` AS `cause`,`pm`.`deleted` AS `deleted`,`pm`.`created_by` AS `created_by` from ((`ww_partners_movement` `pm` left join `ww_partners_movement_action` `pma` on((`pm`.`movement_id` = `pma`.`movement_id`))) left join `ww_partners_movement_cause` `pmc` on((`pm`.`due_to_id` = `pmc`.`cause_id`))) where ((`pm`.`deleted` = 0) and (`pma`.`deleted` = 0)) group by `pm`.`movement_id` order by `pm`.`created_by`) */;

/*View structure for view partner_movement_current */

/*!50001 DROP TABLE IF EXISTS `partner_movement_current` */;
/*!50001 DROP VIEW IF EXISTS `partner_movement_current` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partner_movement_current` AS (select `u`.`role_id` AS `role_id`,`r`.`role` AS `role`,`up`.`company_id` AS `company_id`,`comp`.`company` AS `company`,`up`.`department_id` AS `department_id`,`up`.`branch_id` AS `branch_id`,`branch`.`branch` AS `branch`,concat(`dept`.`department_code`,' - ',`dept`.`department`) AS `department`,`up`.`division_id` AS `division_id`,`di`.`division` AS `division`,`uproj`.`project_id` AS `project_id`,`uproj`.`project` AS `project`,`up`.`location_id` AS `location_id`,`loc`.`location` AS `location`,`up`.`position_id` AS `position_id`,`pos`.`position` AS `position`,`up`.`reports_to_id` AS `reports_to_id`,`rto`.`display_name` AS `reports_to`,`prt`.`status_id` AS `employment_status_id`,`prt`.`status` AS `employment_status`,`prt`.`employment_type_id` AS `employment_type_id`,`pet`.`employment_type` AS `employment_type`,`prt`.`job_grade_id` AS `job_grade_id`,`jgl`.`job_level` AS `job_level`,`u`.`user_id` AS `user_id`,`prt`.`partner_id` AS `partner_id` from (((((((((((((`users` `u` join `ww_roles` `r` on((`u`.`role_id` = `r`.`role_id`))) join `users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) left join `ww_users_company` `comp` on((`up`.`company_id` = `comp`.`company_id`))) left join `ww_users_department` `dept` on((`up`.`department_id` = `dept`.`department_id`))) left join `ww_users_branch` `branch` on((`up`.`branch_id` = `branch`.`branch_id`))) left join `ww_users_project` `uproj` on((`up`.`project_id` = `uproj`.`project_id`))) left join `ww_users_division` `di` on((`up`.`division_id` = `di`.`division_id`))) left join `ww_users_location` `loc` on((`up`.`location_id` = `loc`.`location_id`))) left join `ww_users_position` `pos` on((`up`.`position_id` = `pos`.`position_id`))) left join `ww_users` `rto` on((`up`.`reports_to_id` = `rto`.`user_id`))) join `ww_partners` `prt` on((`u`.`user_id` = `prt`.`user_id`))) join `ww_users_job_grade_level` `jgl` on((`jgl`.`job_grade_id` = `prt`.`job_grade_id`))) left join `ww_partners_employment_type` `pet` on((`prt`.`employment_type_id` = `pet`.`employment_type_id`)))) */;

/*View structure for view partner_payslip */

/*!50001 DROP TABLE IF EXISTS `partner_payslip` */;
/*!50001 DROP VIEW IF EXISTS `partner_payslip` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`emplopad`@`%` SQL SECURITY DEFINER VIEW `partner_payslip` AS select `u`.`user_id` AS `employee`,`p`.`status` AS `status`,`upos`.`position` AS `position`,`pp`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`uc`.`address` AS `address`,`uc`.`city` AS `city`,`u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`up`.`department_id` AS `department_id`,`d`.`department_code` AS `department_code`,`uproj`.`project_id` AS `project_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,((((((((case when (`pct`.`transaction_code` = 'DEDUCTION_LATE_ADJ') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) + (case when (`pct`.`transaction_code` = 'DEDUCTION_UNDERTIME_ADJ') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'SALADJ') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'OTADJ') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'RICEALLOWRETRO') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'MEDALLOWRETRO') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'LAUNDRYALLOWRETRO') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'ABSENCES_ADJ') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) AS `adjustment`,0 AS `other_taxable`,(case when (`pct`.`transaction_code` = 'ABSENCES') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `absent`,(case when (`pct`.`transaction_code` = 'DEDUCTION_LATE') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `late`,(case when (`pct`.`transaction_code` = 'DEDUCTION_UNDERTIME') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `undertime`,(case when (`pct`.`transaction_code` = 'LWOP') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `lwop`,(case when (`pct`.`transaction_code` = 'ABSENCES') then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `absent_hours`,(case when (`pct`.`transaction_code` = 'DEDUCTION_LATE') then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `late_hours`,(case when (`pct`.`transaction_code` = 'DEDUCTION_UNDERTIME') then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `undertime_hours`,(case when (`pct`.`transaction_code` = 'LWOP') then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `lwop_hours`,(((case when (`pct`.`transaction_code` = 'ABSENCES') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) + (case when (`pct`.`transaction_code` = 'DEDUCTION_LATE') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'DEDUCTION_UNDERTIME') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) AS `absent_tardy`,0 AS `sss`,0 AS `philhealth`,0 AS `pag_ibig`,0 AS `nontax_income`,(case when (`pct`.`transaction_code` = 'REGND') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `nd`,(case when (`pct`.`transaction_code` = 'REGOT') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `reg`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'REGOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `nd_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'REGOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `reg_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOFF')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `doff`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOFF_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `doff_x8`,round((((aes_decrypt(`pp`.`salary`,`encryption_key`()) * 12) / `pp`.`total_year_days`) / 8),2) AS `hourly_rate`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_legal`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_leg_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_legal_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_leg_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `dobot`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `dobot_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `dobot_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `dobot_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_dobot`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_dobot_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_dobot_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_dobot_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'REGOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `reg_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'REGOT_ND')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `nd_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_ND')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_otnd_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_x8_otnd_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOFF')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `doff_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOFF_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `doff_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `legal_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `legal_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_legal_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_leg_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `sp_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `sp_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_sp_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_sp_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `dobot_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `dobot_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT_ND')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `dobot_otnd_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `dobot_x8_otnd_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_dobot_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_dobot_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT_ND')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_dobot_otnd_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_dobot_x8_otnd_hrs`,0 AS `health_card`,0 AS `other_deduction_one`,0 AS `other_deduction_two`,0 AS `other_deduction_three`,0 AS `sss_sal_loan_payments`,0 AS `sss_cal_loan_payments`,0 AS `hdmf_sal_loan_payments`,0 AS `hdmf_cal_loan_payments`,0 AS `company_loan_payments`,0 AS `sss_sal_loan_balance`,0 AS `sss_cal_loan_balance`,0 AS `hdmf_sal_loan_balance`,0 AS `hdmf_cal_loan_balance`,0 AS `tax_status`,0 AS `ytd_sss`,0 AS `ytd_philhealth`,0 AS `ytd_pag_ibig`,`pp`.`tin` AS `tin`,`pt`.`transaction_label` AS `transaction_label`,`ptc`.`transaction_class_code` AS `transaction_class_code`,`pt`.`transaction_code` AS `transaction_code`,(case when (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ')) then concat(aes_decrypt(`pct`.`quantity`,`encryption_key`()),' (',`getabsent`(`t`.`payroll_date`,`u`.`user_id`,`pct`.`transaction_code`),') ') else aes_decrypt(`pct`.`quantity`,`encryption_key`()) end) AS `qty`,round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) AS `amount`,`pct`.`transaction_type_id` AS `transaction_type_id`,(case when (`pct`.`transaction_type_id` in (1,2,6,7,8)) then 'Earnings' when (`pct`.`transaction_type_id` in (3,4,5)) then 'Deductions' when (`pct`.`transaction_code` = 'NETPAY') then 'Netpay' else '' end) AS `group`,(case when ((`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) and (`ptc`.`government_mandated` = 0)) then 'Loan' when ((`ptc`.`government_mandated` = 1) or (`ptc`.`transaction_class_code` = 'WHTAX')) then 'government' when (`ptc`.`transaction_class_code` = 'OVERTIME') then 'overtime' when ((`ptc`.`transaction_class_code` in ('ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')) or (`pt`.`transaction_code` = 'LWOP')) then 'attnd_ded' when (`pt`.`transaction_type_id` = 8) then 'Bonus' when (`pt`.`transaction_type_id` in (2,6)) then 'Benefits' when ((`pt`.`transaction_type_id` = 1) and (`pt`.`transaction_id` <> 1)) then 'Earnings' when (`pt`.`transaction_id` = 1) then 'salary' when (`pt`.`transaction_code` = 'NETPAY') then 'Netpay' else (case when (`pt`.`transaction_type_id` in (3,4,5)) then 'Oth_ded' when (`pt`.`transaction_type_id` in (1,2,6,7,8)) then 'Oth_inc' else '' end) end) AS `type`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then `pct`.`record_id` else '' end) AS `record_id`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`beginning_balance`,`encryption_key`()),2) else 0 end) AS `beginning_balance`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`running_balance`,`encryption_key`()),2) else 0 end) AS `running_balance`,`t`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,concat(date_format(if((`ptc`.`transaction_class_code` = 'NETPAY'),`t`.`payroll_date`,`t`.`date_from`),'%Y-%m'),'-',date_format(`t`.`date_from`,'%d')) AS `date_from_applicable`,date_format(if((`ptc`.`transaction_class_code` = 'NETPAY'),last_day(`t`.`payroll_date`),`t`.`date_to`),'%Y-%m-%d') AS `date_to_applicable`,`tc`.`taxcode` AS `taxcode`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from (((((((((((((((`ww_payroll_closed_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_partners` `p` on((`u`.`user_id` = `p`.`user_id`))) join `ww_partners_personal` `ppe` on((`p`.`partner_id` = `ppe`.`partner_id`))) join `ww_taxcode` `tc` on((`tc`.`taxcode_id` = `ppe`.`key_value`))) join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) join `ww_users_position` `upos` on((`up`.`position_id` = `upos`.`position_id`))) join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) join `ww_users_department` `d` on((`d`.`department_id` = `pct`.`department_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pct`.`company_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_partners_loan` `pl` on((`pl`.`partner_loan_id` = `pct`.`record_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) where ((`pct`.`on_hold` = 0) and (`ppe`.`key` = 'taxcode')) */;

/*View structure for view partner_payslip_orig */

/*!50001 DROP TABLE IF EXISTS `partner_payslip_orig` */;
/*!50001 DROP VIEW IF EXISTS `partner_payslip_orig` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partner_payslip_orig` AS select `u`.`user_id` AS `employee`,`pp`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`uc`.`address` AS `address`,`uc`.`city` AS `city`,`u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`up`.`department_id` AS `department_id`,`d`.`department_code` AS `department_code`,`uproj`.`project_id` AS `project_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,0 AS `adjustment`,0 AS `other_taxable`,(case when (`pct`.`transaction_code` = 'ABSENCES') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `absent_tardy`,0 AS `sss`,0 AS `philhealth`,0 AS `pag_ibig`,0 AS `nontax_income`,(case when (`pct`.`transaction_code` = 'REGND') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `nd`,0 AS `reg`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp_x8`,round((((aes_decrypt(`pp`.`salary`,`encryption_key`()) * 12) / `pp`.`total_year_days`) / 8),2) AS `hourly_rate`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_legal`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_leg_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'REGOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `nd_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `reg_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_legal_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_leg_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `nd_hrs`,0 AS `reg_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `sp_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `sp_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_sp_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_sp_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `legal_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `legal_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_legal_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_leg_x8_hrs`,0 AS `health_card`,0 AS `other_deduction_one`,0 AS `other_deduction_two`,0 AS `other_deduction_three`,0 AS `sss_sal_loan_payments`,0 AS `sss_cal_loan_payments`,0 AS `hdmf_sal_loan_payments`,0 AS `hdmf_cal_loan_payments`,0 AS `company_loan_payments`,0 AS `sss_sal_loan_balance`,0 AS `sss_cal_loan_balance`,0 AS `hdmf_sal_loan_balance`,0 AS `hdmf_cal_loan_balance`,0 AS `tax_status`,0 AS `ytd_sss`,0 AS `ytd_philhealth`,0 AS `ytd_pag_ibig`,`pp`.`tin` AS `tin`,`pt`.`transaction_label` AS `transaction_label`,`ptc`.`transaction_class_code` AS `transaction_class_code`,`pt`.`transaction_code` AS `transaction_code`,(case when (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ')) then concat(aes_decrypt(`pct`.`quantity`,`encryption_key`()),' (',`getabsent`(`t`.`payroll_date`,`u`.`user_id`,`pct`.`transaction_code`),') ') else aes_decrypt(`pct`.`quantity`,`encryption_key`()) end) AS `qty`,round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) AS `amount`,`pct`.`transaction_type_id` AS `transaction_type_id`,(case when (`pct`.`transaction_type_id` in (1,2,6,7,8)) then 'Earnings' when (`pct`.`transaction_type_id` in (3,4,5)) then 'Deductions' when (`pct`.`transaction_code` = 'NETPAY') then 'Netpay' else '' end) AS `group`,(case when ((`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) and (`ptc`.`government_mandated` = 0)) then 'Loan' when ((`ptc`.`government_mandated` = 1) or (`ptc`.`transaction_class_code` = 'WHTAX')) then 'government' when (`ptc`.`transaction_class_code` = 'OVERTIME') then 'overtime' when ((`ptc`.`transaction_class_code` in ('ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')) or (`pt`.`transaction_code` = 'LWOP')) then 'attnd_ded' when (`pt`.`transaction_type_id` = 8) then 'Bonus' when (`pt`.`transaction_type_id` in (2,6)) then 'Benefits' when ((`pt`.`transaction_type_id` = 1) and (`pt`.`transaction_id` <> 1)) then 'Earnings' when (`pt`.`transaction_id` = 1) then 'salary' when (`pt`.`transaction_code` = 'NETPAY') then 'Netpay' else (case when (`pt`.`transaction_type_id` in (3,4,5)) then 'Oth_ded' when (`pt`.`transaction_type_id` in (1,2,6,7,8)) then 'Oth_inc' else '' end) end) AS `type`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then `pct`.`record_id` else '' end) AS `record_id`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`beginning_balance`,`encryption_key`()),2) else 0 end) AS `beginning_balance`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`running_balance`,`encryption_key`()),2) else 0 end) AS `running_balance`,`t`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,`tc`.`taxcode` AS `taxcode`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from ((((((((((((((`ww_payroll_current_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_partners` `p` on((`u`.`user_id` = `p`.`user_id`))) join `ww_partners_personal` `ppe` on((`p`.`partner_id` = `ppe`.`partner_id`))) join `ww_taxcode` `tc` on((`tc`.`taxcode_id` = `ppe`.`key_value`))) join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) join `ww_users_department` `d` on((`d`.`department_id` = `up`.`department_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_partners_loan` `pl` on((`pl`.`partner_loan_id` = `pct`.`record_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) where ((`pct`.`on_hold` = 0) and (`ppe`.`key` = 'taxcode')) union all select `u`.`user_id` AS `employee`,`pp`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`uc`.`address` AS `address`,`uc`.`city` AS `city`,`u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`up`.`department_id` AS `department_id`,`d`.`department_code` AS `department_code`,`uproj`.`project_id` AS `project_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,0 AS `adjustment`,0 AS `other_taxable`,(case when (`pct`.`transaction_code` = 'ABSENCES') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `absent_tardy`,0 AS `sss`,0 AS `philhealth`,0 AS `pag_ibig`,0 AS `nontax_income`,(case when (`pct`.`transaction_code` = 'REGND') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `nd`,0 AS `reg`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp_x8`,round((((aes_decrypt(`pp`.`salary`,`encryption_key`()) * 12) / `pp`.`total_year_days`) / 8),2) AS `hourly_rate`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_legal`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_leg_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'REGOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `nd_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `reg_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_legal_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_leg_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `nd_hrs`,0 AS `reg_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `sp_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `sp_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_sp_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_sp_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `legal_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `legal_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_legal_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_leg_x8_hrs`,0 AS `health_card`,0 AS `other_deduction_one`,0 AS `other_deduction_two`,0 AS `other_deduction_three`,0 AS `sss_sal_loan_payments`,0 AS `sss_cal_loan_payments`,0 AS `hdmf_sal_loan_payments`,0 AS `hdmf_cal_loan_payments`,0 AS `company_loan_payments`,0 AS `sss_sal_loan_balance`,0 AS `sss_cal_loan_balance`,0 AS `hdmf_sal_loan_balance`,0 AS `hdmf_cal_loan_balance`,0 AS `tax_status`,0 AS `ytd_sss`,0 AS `ytd_philhealth`,0 AS `ytd_pag_ibig`,`pp`.`tin` AS `tin`,`pt`.`transaction_label` AS `transaction_label`,`ptc`.`transaction_class_code` AS `transaction_class_code`,`pt`.`transaction_code` AS `transaction_code`,(case when (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ')) then concat(aes_decrypt(`pct`.`quantity`,`encryption_key`()),' (',`getabsent`(`t`.`payroll_date`,`u`.`user_id`,`pct`.`transaction_code`),') ') else aes_decrypt(`pct`.`quantity`,`encryption_key`()) end) AS `qty`,round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) AS `amount`,`pct`.`transaction_type_id` AS `transaction_type_id`,(case when (`pct`.`transaction_type_id` in (1,2,6,7,8)) then 'Earnings' when (`pct`.`transaction_type_id` in (3,4,5)) then 'Deductions' when (`pct`.`transaction_code` = 'NETPAY') then 'Netpay' else '' end) AS `group`,(case when ((`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) and (`ptc`.`government_mandated` = 0)) then 'Loan' when ((`ptc`.`government_mandated` = 1) or (`ptc`.`transaction_class_code` = 'WHTAX')) then 'government' when (`ptc`.`transaction_class_code` = 'OVERTIME') then 'overtime' when ((`ptc`.`transaction_class_code` in ('ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')) or (`pt`.`transaction_code` = 'LWOP')) then 'attnd_ded' when (`pt`.`transaction_type_id` = 8) then 'Bonus' when (`pt`.`transaction_type_id` in (2,6)) then 'Benefits' when ((`pt`.`transaction_type_id` = 1) and (`pt`.`transaction_id` <> 1)) then 'Earnings' when (`pt`.`transaction_id` = 1) then 'salary' when (`pt`.`transaction_code` = 'NETPAY') then 'Netpay' else (case when (`pt`.`transaction_type_id` in (3,4,5)) then 'Oth_ded' when (`pt`.`transaction_type_id` in (1,2,6,7,8)) then 'Oth_inc' else '' end) end) AS `type`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then `pct`.`record_id` else '' end) AS `record_id`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`beginning_balance`,`encryption_key`()),2) else 0 end) AS `beginning_balance`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`running_balance`,`encryption_key`()),2) else 0 end) AS `running_balance`,`t`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,`tc`.`taxcode` AS `taxcode`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from ((((((((((((((`ww_payroll_closed_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_partners` `p` on((`u`.`user_id` = `p`.`user_id`))) join `ww_partners_personal` `ppe` on((`p`.`partner_id` = `ppe`.`partner_id`))) join `ww_taxcode` `tc` on((`tc`.`taxcode_id` = `ppe`.`key_value`))) join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) join `ww_users_department` `d` on((`d`.`department_id` = `up`.`department_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_partners_loan` `pl` on((`pl`.`partner_loan_id` = `pct`.`record_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) where ((`pct`.`on_hold` = 0) and (`ppe`.`key` = 'taxcode')) */;

/*View structure for view partners */

/*!50001 DROP TABLE IF EXISTS `partners` */;
/*!50001 DROP VIEW IF EXISTS `partners` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partners` AS (select `t0`.`user_id` AS `user_id`,`t1`.`id_number` AS `id_number`,`t1`.`biometric` AS `biometric`,`t1`.`partner_id` AS `partner_id`,`t1`.`deleted` AS `deleted`,`t1`.`shift_id` AS `shift_id`,`t1`.`shift` AS `shift`,`t1`.`calendar_id` AS `calendar_id`,`t1`.`calendar` AS `calendar`,`t2`.`full_name` AS `full_name`,`t1`.`alias` AS `alias`,`t1`.`status_id` AS `status_id`,`t1`.`status` AS `status`,`t1`.`employment_type_id` AS `employment_type_id`,`t1`.`employment_type` AS `employment_type`,`t0`.`company_id` AS `company_id`,format(aes_decrypt(`t0`.`salary`,`encryption_key`()),2) AS `salary`,`t0`.`sss_no` AS `sss_no`,`t0`.`phic_no` AS `phic_no`,`t0`.`hdmf_no` AS `hdmf_no`,`t1`.`resigned_date` AS `resigned_date`,`t2`.`email` AS `email`,year(`t1`.`effectivity_date`) AS `year`,month(`t1`.`effectivity_date`) AS `month`,`t1`.`effectivity_date` AS `effectivity_date`,`t1`.`regularization_date` AS `regularization_date`,`t1`.`created_on` AS `created_on`,`t1`.`created_by` AS `created_by`,`t1`.`modified_on` AS `modified_on`,`t1`.`modified_by` AS `modified_by`,`t3`.`company` AS `company`,`t3`.`sss` AS `sss`,`t3`.`tin` AS `tin`,`t3`.`phic` AS `phic`,`t3`.`hdmf` AS `hdmf`,`t3`.`address` AS `address`,`t4`.`birth_date` AS `birth_date`,`t4`.`position_id` AS `position_id`,`t5`.`position` AS `position` from (((((`ww_payroll_partners` `t0` left join `ww_partners` `t1` on((`t1`.`user_id` = `t0`.`user_id`))) left join `ww_users` `t2` on((`t2`.`user_id` = `t0`.`user_id`))) left join `ww_users_company` `t3` on((`t3`.`company_id` = `t0`.`company_id`))) left join `ww_users_profile` `t4` on((`t4`.`partner_id` = `t1`.`partner_id`))) left join `ww_users_position` `t5` on((`t5`.`position_id` = `t4`.`position_id`)))) */;

/*View structure for view partners_details */

/*!50001 DROP TABLE IF EXISTS `partners_details` */;
/*!50001 DROP VIEW IF EXISTS `partners_details` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partners_details` AS (select `t0`.`user_id` AS `user_id`,`t1`.`id_number` AS `id_number`,`t1`.`status` AS `status`,`t2`.`full_name` AS `full_name`,`t2`.`active` AS `active`,`t4`.`company_id` AS `company_id`,`t4`.`division_id` AS `division_id`,`t4`.`department_id` AS `department_id`,`t4`.`project_id` AS `project_id`,`t4`.`lastname` AS `lastname`,`t4`.`firstname` AS `firstname`,`t4`.`middlename` AS `middlename`,format(aes_decrypt(`t0`.`salary`,`encryption_key`()),2) AS `salary`,`t0`.`sss_no` AS `sss_no`,`t0`.`phic_no` AS `phic_no`,`t0`.`hdmf_no` AS `hdmf_no`,`t0`.`tin` AS `tin`,`t1`.`resigned_date` AS `resigned_date`,`t2`.`email` AS `email`,year(`t1`.`effectivity_date`) AS `year`,month(`t1`.`effectivity_date`) AS `month`,`t1`.`effectivity_date` AS `date_hired`,`t3`.`address` AS `address`,`t4`.`position_id` AS `position_id`,`t4`.`end_date` AS `end_date`,`t4`.`birth_date` AS `birthdate`,`t5`.`position` AS `position`,`t6`.`project` AS `project`,`t6`.`project_code` AS `project_code`,`t7`.`address_1` AS `address1`,`getage`(`t4`.`birth_date`) AS `age`,`t7`.`birth_place` AS `birth_place`,`t7`.`gender` AS `gender`,`t7`.`civil_status` AS `civil_status` from (((((((`ww_payroll_partners` `t0` left join `ww_partners` `t1` on((`t1`.`user_id` = `t0`.`user_id`))) left join `ww_users` `t2` on((`t2`.`user_id` = `t0`.`user_id`))) left join `ww_users_company` `t3` on((`t3`.`company_id` = `t0`.`company_id`))) left join `ww_users_profile` `t4` on((`t4`.`partner_id` = `t1`.`partner_id`))) left join `ww_users_project` `t6` on((`t6`.`project_id` = `t4`.`project_id`))) left join `ww_users_position` `t5` on((`t5`.`position_id` = `t4`.`position_id`))) left join `partners_personal` `t7` on((`t7`.`user_id` = `t1`.`user_id`)))) */;

/*View structure for view partners_gender_age */

/*!50001 DROP TABLE IF EXISTS `partners_gender_age` */;
/*!50001 DROP VIEW IF EXISTS `partners_gender_age` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partners_gender_age` AS (select `up`.`gender` AS `gender`,(case when (`up`.`age` between 18 and 24) then '18-24' when (`up`.`age` between 25 and 34) then '25-34' when (`up`.`age` between 35 and 44) then '35-44' when (`up`.`age` between 45 and 54) then '45-54' when (`up`.`age` between 55 and 64) then '55-64' when (`up`.`age` between 65 and 99) then '65 and Over' else '' end) AS `edad`,sum((case when (`up`.`age` between 18 and 24) then 1 when (`up`.`age` between 25 and 34) then 1 when (`up`.`age` between 35 and 44) then 1 when (`up`.`age` between 45 and 54) then 1 when (`up`.`age` between 55 and 64) then 1 when (`up`.`age` between 65 and 99) then 1 else 0 end)) AS `bilang` from (`partners` `p` join `users_profile` `up`) where ((`p`.`user_id` = `up`.`user_id`) and (`up`.`gender` <> ''))) */;

/*View structure for view partners_personal */

/*!50001 DROP TABLE IF EXISTS `partners_personal` */;
/*!50001 DROP VIEW IF EXISTS `partners_personal` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partners_personal` AS (select `p`.`user_id` AS `user_id`,`p`.`alias` AS `alias`,max(if((`wp`.`key` = 'address_1'),`wp`.`key_value`,'')) AS `address_1`,max(if((`wp`.`key` = 'birth_place'),`wp`.`key_value`,'')) AS `birth_place`,max(if((`wp`.`key` = 'gender'),`wp`.`key_value`,'')) AS `gender`,max(if((`wp`.`key` = 'civil_status'),`wp`.`key_value`,'')) AS `civil_status` from (`ww_partners_personal` `wp` join `ww_partners` `p`) where (`wp`.`partner_id` = `p`.`partner_id`) group by `p`.`partner_id`) */;

/*View structure for view partners_personal_history_accountabilities */

/*!50001 DROP TABLE IF EXISTS `partners_personal_history_accountabilities` */;
/*!50001 DROP VIEW IF EXISTS `partners_personal_history_accountabilities` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partners_personal_history_accountabilities` AS (select `p`.`user_id` AS `user_id`,`p`.`alias` AS `alias`,max(if((`pph`.`key` = 'accountabilities-name'),`pph`.`key_value`,'')) AS `name`,max(if((`pph`.`key` = 'accountabilities-code'),`pph`.`key_value`,'')) AS `code`,max(if((`pph`.`key` = 'accountabilities-quantity'),`pph`.`key_value`,'')) AS `qty`,max(if((`pph`.`key` = 'accountabilities-date-issued'),`pph`.`key_value`,'')) AS `date_issued`,max(if((`pph`.`key` = 'accountabilities-date-returned'),`pph`.`key_value`,'')) AS `date_returned`,max(if((`pph`.`key` = 'accountabilities-remarks'),`pph`.`key_value`,'')) AS `remarks`,max(if((`pph`.`key` = 'accountabilities-attachment'),`pph`.`key_value`,'')) AS `photo` from (`ww_partners_personal_history` `pph` join `ww_partners` `p`) where ((`pph`.`partner_id` = `p`.`partner_id`) and (`pph`.`key` like 'accountabilities%')) group by `p`.`partner_id`,`pph`.`sequence`) */;

/*View structure for view partners_report */

/*!50001 DROP TABLE IF EXISTS `partners_report` */;
/*!50001 DROP VIEW IF EXISTS `partners_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partners_report` AS (select `t0`.`user_id` AS `user_id`,`t1`.`id_number` AS `id_number`,`t2`.`full_name` AS `full_name`,`t0`.`company_id` AS `company_id`,format(aes_decrypt(`t0`.`salary`,`encryption_key`()),2) AS `salary`,`t0`.`sss_no` AS `sss_no`,`t0`.`phic_no` AS `phic_no`,`t0`.`hdmf_no` AS `hdmf_no`,`t1`.`resigned_date` AS `resigned_date`,`t2`.`email` AS `email`,year(`t1`.`effectivity_date`) AS `year`,month(`t1`.`effectivity_date`) AS `month`,`t1`.`effectivity_date` AS `effectivity_date`,`t3`.`company` AS `company`,`t3`.`sss` AS `sss`,`t3`.`tin` AS `tin`,`t3`.`phic` AS `phic`,`t3`.`hdmf` AS `hdmf`,`t3`.`address` AS `address`,`t4`.`birth_date` AS `birth_date`,`t4`.`position_id` AS `position_id`,`t5`.`position` AS `position` from (((((`ww_payroll_partners` `t0` left join `ww_partners` `t1` on((`t1`.`user_id` = `t0`.`user_id`))) left join `ww_users` `t2` on((`t2`.`user_id` = `t0`.`user_id`))) left join `ww_users_company` `t3` on((`t3`.`company_id` = `t0`.`company_id`))) left join `ww_users_profile` `t4` on((`t4`.`partner_id` = `t1`.`partner_id`))) left join `ww_users_position` `t5` on((`t5`.`position_id` = `t4`.`position_id`)))) */;

/*View structure for view partners_termination_letter_view */

/*!50001 DROP TABLE IF EXISTS `partners_termination_letter_view` */;
/*!50001 DROP VIEW IF EXISTS `partners_termination_letter_view` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `partners_termination_letter_view` AS (select `u`.`full_name` AS `full_name`,`u`.`user_id` AS `user_id`,`upos`.`position` AS `position`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`up`.`project_id` AS `project_id`,`uproj`.`project` AS `project`,`up`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`end_date` AS `end_date` from (((((`ww_users` `u` left join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) left join `ww_users_position` `upos` on((`up`.`position_id` = `upos`.`position_id`))) left join `ww_partners` `p` on((`p`.`user_id` = `u`.`user_id`))) left join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) left join `ww_users_project` `uproj` on((`uproj`.`project_id` = `up`.`project_id`))) where (`u`.`active` = 1)) */;

/*View structure for view payroll_1601c */

/*!50001 DROP TABLE IF EXISTS `payroll_1601c` */;
/*!50001 DROP VIEW IF EXISTS `payroll_1601c` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_1601c` AS (select `pct`.`company_id` AS `company_id`,`uc`.`company` AS `company`,year(`pct`.`payroll_date`) AS `year`,month(`pct`.`payroll_date`) AS `month`,`uc`.`address` AS `address`,`uc`.`vat` AS `tin`,`uc`.`rdo` AS `rdo`,`ucc`.`contact_no` AS `contact_no`,`uc`.`zipcode` AS `zipcode`,'Business' AS `line_business`,round(sum((((case when ((`pt`.`transaction_type_id` in (2,6,7,8)) and (`ptc`.`transaction_class_code` <> 'BONUS_TAXABLE')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())) + ((case when ((`pt`.`transaction_type_id` = 5) and (`ptc`.`government_mandated` = 1)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))),2) AS `other_nontax_compensation`,round(sum((((case when (`pt`.`transaction_type_id` in (1,2,6,7,8)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())) - ((case when ((`pt`.`transaction_type_id` = 5) and (`ptc`.`government_mandated` = 0)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))),2) AS `total_compensation`,round(sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `wtax`,round(sum(((case when ((`ptc`.`transaction_class_code` = 'SALARY') and (`pct`.`minwageflag` = 1)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `statutory_minimum`,round(sum(((case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`minwageflag` = 1)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `overtime` from (((((`ww_payroll_closed_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_transaction_type` `ptt` on((`ptt`.`transaction_type_id` = `pt`.`transaction_type_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_users_company_contact` `ucc` on(((`uc`.`company_id` = `ucc`.`company_id`) and (`ucc`.`contact_type` = 'Phone') and (`ucc`.`deleted` = 0)))) where ((`pct`.`deleted` = 0) and (`pt`.`deleted` = 0)) group by `pct`.`company_id`,year(`pct`.`payroll_date`),month(`pct`.`payroll_date`)) */;

/*View structure for view payroll_1604cf_7_1 */

/*!50001 DROP TABLE IF EXISTS `payroll_1604cf_7_1` */;
/*!50001 DROP VIEW IF EXISTS `payroll_1604cf_7_1` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_1604cf_7_1` AS select `pb`.`user_id` AS `user_id`,`pb`.`pay_year` AS `year`,`pb`.`company_id` AS `company_id`,`uc`.`company` AS `company`,'D7.1' AS `schedule_num`,'1604CF' AS `ftype_code`,`uc`.`vat` AS `comp_tin`,'0000' AS `branch_code_employer`,now() AS `return_period`,'' AS `seq_num`,`pb`.`tin` AS `emp_tin`,'0000' AS `branch_code_employees`,`pb`.`lastname` AS `lastname`,`pb`.`firstname` AS `firstname`,`pb`.`middlename` AS `middlename`,`pb`.`employed_date` AS `employment_from`,ifnull(`pb`.`resigned_date`,now()) AS `employment_to`,`pb`.`gross_compensation` AS `gross_compensation`,`pb`.`bonus_nontax` AS `pres_nontax_13th_month`,`pb`.`min_deminimis` AS `pres_nontax_de_minimis`,`pb`.`govt_contri` AS `pres_nontax_sss_etc`,`pb`.`benefit` AS `pres_nontax_salaries`,`pb`.`total_non_tax` AS `total_nontax_comp_income`,`pb`.`tax_basic` AS `pres_taxable_basic_salary`,`pb`.`bonus_tax` AS `pres_taxable_13th_month`,(ifnull(`pb`.`tempo_allowance`,0) + ifnull(`pb`.`service_allowance`,0)) AS `pres_taxable_salaries`,`pb`.`total_taxable` AS `total_taxable_comp_income`,`pb`.`exempt_code` AS `exmpn_code`,`pb`.`exempt` AS `exmpn_amt`,0.00 AS `premium_paid`,`pb`.`net_taxable` AS `net_table_comp_income`,`pb`.`taxdue` AS `tax_due`,`pb`.`wtax` AS `pres_tax_wthld`,0.00 AS `amt_wthld_dec`,0.00 AS `over_wthld`,((ifnull(`pb`.`taxdue`,0) - ifnull(`pb`.`wtax`,0)) - ifnull(`pb`.`prev_wtax`,0)) AS `actual_amt_wthld`,'N' AS `subs_filing`,`pb`.`resigned_date` AS `resigned_date` from (`ww_payroll_bir` `pb` join `ww_users_company` `uc` on(((`pb`.`company_id` = `uc`.`company_id`) and (`pb`.`resigned_date` <> '0000-00-00')))) */;

/*View structure for view payroll_1604cf_7_3 */

/*!50001 DROP TABLE IF EXISTS `payroll_1604cf_7_3` */;
/*!50001 DROP VIEW IF EXISTS `payroll_1604cf_7_3` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_1604cf_7_3` AS select `pb`.`user_id` AS `user_id`,`pb`.`pay_year` AS `year`,`pb`.`company_id` AS `company_id`,`uc`.`company` AS `company`,'D7.3' AS `schedule_num`,'1604CF' AS `ftype_code`,`uc`.`vat` AS `comp_tin`,'0000' AS `branch_code_employer`,now() AS `return_period`,'' AS `seq_num`,`pb`.`tin` AS `emp_tin`,'0000' AS `branch_code_employees`,`pb`.`lastname` AS `lastname`,`pb`.`firstname` AS `firstname`,`pb`.`middlename` AS `middlename`,`pb`.`employed_date` AS `employment_from`,ifnull(`pb`.`resigned_date`,now()) AS `employment_to`,`pb`.`gross_compensation` AS `gross_compensation`,`pb`.`bonus_nontax` AS `pres_nontax_13th_month`,`pb`.`min_deminimis` AS `pres_nontax_de_minimis`,`pb`.`govt_contri` AS `pres_nontax_sss_etc`,`pb`.`benefit` AS `pres_nontax_salaries`,`pb`.`total_non_tax` AS `total_nontax_comp_income`,`pb`.`tax_basic` AS `pres_taxable_basic_salary`,`pb`.`bonus_tax` AS `pres_taxable_13th_month`,(ifnull(`pb`.`tempo_allowance`,0) + ifnull(`pb`.`service_allowance`,0)) AS `pres_taxable_salaries`,`pb`.`total_taxable` AS `total_taxable_comp_income`,`pb`.`exempt_code` AS `exmpn_code`,`pb`.`exempt` AS `exmpn_amt`,0.00 AS `premium_paid`,`pb`.`net_taxable` AS `net_table_comp_income`,`pb`.`taxdue` AS `tax_due`,`pb`.`wtax` AS `pres_tax_wthld`,0.00 AS `amt_wthld_dec`,0.00 AS `over_wthld`,((ifnull(`pb`.`taxdue`,0) - ifnull(`pb`.`wtax`,0)) - ifnull(`pb`.`prev_wtax`,0)) AS `actual_amt_wthld`,'Y' AS `subs_filing`,`pb`.`resigned_date` AS `resigned_date` from (`ww_payroll_bir` `pb` join `ww_users_company` `uc` on(((`pb`.`company_id` = `uc`.`company_id`) and (`pb`.`resigned_date` = '0000-00-00') and (`pb`.`prev_employer` = '')))) */;

/*View structure for view payroll_1604cf_7_4 */

/*!50001 DROP TABLE IF EXISTS `payroll_1604cf_7_4` */;
/*!50001 DROP VIEW IF EXISTS `payroll_1604cf_7_4` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_1604cf_7_4` AS select `pb`.`user_id` AS `user_id`,`pb`.`pay_year` AS `year`,`pb`.`company_id` AS `company_id`,`uc`.`company` AS `company`,'D7.4' AS `schedule_num`,'1604CF' AS `ftype_code`,`uc`.`vat` AS `comp_tin`,'0000' AS `branch_code_employer`,now() AS `return_period`,'' AS `seq_num`,`pb`.`tin` AS `emp_tin`,'0000' AS `branch_code_employees`,`pb`.`lastname` AS `lastname`,`pb`.`firstname` AS `firstname`,`pb`.`middlename` AS `middlename`,`pb`.`employed_date` AS `employment_from`,ifnull(`pb`.`resigned_date`,now()) AS `employment_to`,`pb`.`gross_compensation` AS `gross_compensation`,`prev`.`prev_nontax_thirten_month` AS `prev_nontax_13th_month`,`prev`.`prev_nontax_deminimis` AS `prev_nontax_de_minimis`,`prev`.`prev_nontax_sss_etc` AS `prev_nontax_sss_etc`,`prev`.`prev_nontax_salaries` AS `prev_nontax_salaries`,`prev`.`prev_nontax_comp_income` AS `prev_total_nontax_comp_income`,`prev`.`prev_taxable_basic_salary` AS `prev_taxable_basic_salary`,`prev`.`prev_taxable_thirten_month` AS `prev_taxable_13th_month`,`prev`.`prev_taxable_salaries` AS `prev_taxable_salaries`,`prev`.`prev_total_taxable` AS `prev_total_taxable`,`pb`.`bonus_nontax` AS `pres_nontax_13th_month`,`pb`.`min_deminimis` AS `pres_nontax_de_minimis`,`pb`.`govt_contri` AS `pres_nontax_sss_etc`,`pb`.`benefit` AS `pres_nontax_salaries`,`pb`.`total_non_tax` AS `total_nontax_comp_income`,`pb`.`tax_basic` AS `pres_taxable_basic_salary`,`pb`.`bonus_tax` AS `pres_taxable_13th_month`,(ifnull(`pb`.`tempo_allowance`,0) + ifnull(`pb`.`service_allowance`,0)) AS `pres_taxable_salaries`,`pb`.`gross_compensation` AS `pres_total_comp`,`pb`.`total_taxable` AS `total_taxable_comp_income`,`pb`.`exempt_code` AS `exmpn_code`,`pb`.`exempt` AS `exmpn_amt`,0.00 AS `premium_paid`,`pb`.`net_taxable` AS `net_table_comp_income`,`pb`.`taxdue` AS `tax_due`,`pb`.`wtax` AS `pres_tax_wthld`,`prev`.`prev_tax_w_held` AS `prev_tax_wthld`,0.00 AS `amt_wthld_dec`,0.00 AS `over_wthld`,((ifnull(`pb`.`taxdue`,0) - ifnull(`pb`.`wtax`,0)) - ifnull(`pb`.`prev_wtax`,0)) AS `actual_amt_wthld`,'Y' AS `subs_filing`,`pb`.`resigned_date` AS `resigned_date` from ((`ww_payroll_bir` `pb` join `ww_payroll_partners_previous_employer` `prev` on((`pb`.`user_id` = `prev`.`user_id`))) join `ww_users_company` `uc` on((`pb`.`company_id` = `uc`.`company_id`))) */;

/*View structure for view payroll_1604cf_7_5 */

/*!50001 DROP TABLE IF EXISTS `payroll_1604cf_7_5` */;
/*!50001 DROP VIEW IF EXISTS `payroll_1604cf_7_5` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_1604cf_7_5` AS select `pb`.`user_id` AS `user_id`,`pb`.`pay_year` AS `year`,`pb`.`company_id` AS `company_id`,`uc`.`company` AS `company`,'D7.1' AS `schedule_num`,'1604CF' AS `ftype_code`,`uc`.`vat` AS `comp_tin`,'0000' AS `branch_code_employer`,now() AS `return_period`,'' AS `seq_num`,`pb`.`tin` AS `emp_tin`,'0000' AS `branch_code_employees`,`pb`.`lastname` AS `lastname`,`pb`.`firstname` AS `firstname`,`pb`.`middlename` AS `middlename`,`pb`.`employed_date` AS `employment_from`,ifnull(`pb`.`resigned_date`,now()) AS `employment_to`,`pb`.`gross_compensation` AS `gross_compensation`,`pb`.`bonus_nontax` AS `pres_nontax_13th_month`,`pb`.`min_deminimis` AS `pres_nontax_de_minimis`,`pb`.`govt_contri` AS `pres_nontax_sss_etc`,`pb`.`benefit` AS `pres_nontax_salaries`,`pb`.`total_non_tax` AS `total_nontax_comp_income`,`pb`.`tax_basic` AS `pres_taxable_basic_salary`,`pb`.`bonus_tax` AS `pres_taxable_13th_month`,(ifnull(`pb`.`tempo_allowance`,0) + ifnull(`pb`.`service_allowance`,0)) AS `pres_taxable_salaries`,`pb`.`total_taxable` AS `total_taxable_comp_income`,`pb`.`exempt_code` AS `exmpn_code`,`pb`.`exempt` AS `exmpn_amt`,0.00 AS `premium_paid`,`pb`.`net_taxable` AS `net_table_comp_income`,`pb`.`taxdue` AS `tax_due`,`pb`.`wtax` AS `pres_tax_wthld`,0.00 AS `amt_wthld_dec`,0.00 AS `over_wthld`,((ifnull(`pb`.`taxdue`,0) - ifnull(`pb`.`wtax`,0)) - ifnull(`pb`.`prev_wtax`,0)) AS `actual_amt_wthld`,'Y' AS `subs_filing`,`pb`.`resigned_date` AS `resigned_date` from (`ww_payroll_bir` `pb` join `ww_users_company` `uc` on(((`pb`.`company_id` = `uc`.`company_id`) and (`pb`.`resigned_date` <> '0000-00-00')))) */;

/*View structure for view payroll_account_report */

/*!50001 DROP TABLE IF EXISTS `payroll_account_report` */;
/*!50001 DROP VIEW IF EXISTS `payroll_account_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_account_report` AS select if((`pas`.`account_sub_code` <> NULL),convert(`pa`.`account_code` using utf8),`pas`.`account_sub_code`) AS `account_code`,if((`pas`.`account_sub` <> NULL),convert(`pa`.`account_name` using utf8),`pas`.`account_sub`) AS `account_name`,`pat`.`account_type` AS `account_type` from ((`ww_payroll_account` `pa` join `ww_payroll_account_sub` `pas` on((`pa`.`account_id` = `pas`.`account_id`))) join `ww_payroll_account_type` `pat` on((`pa`.`account_type_id` = `pat`.`account_type_id`))) */;

/*View structure for view payroll_alpha_breakdown */

/*!50001 DROP TABLE IF EXISTS `payroll_alpha_breakdown` */;
/*!50001 DROP VIEW IF EXISTS `payroll_alpha_breakdown` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_alpha_breakdown` AS select `u`.`full_name` AS `full_name`,year(`pct`.`payroll_date`) AS `year`,`pct`.`payroll_date` AS `payroll_date`,(ifnull(`get_paydate_tax_basic`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00) - ((ifnull(`get_paydate_sss`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00) + ifnull(`get_paydate_hdmf`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00)) + ifnull(`get_paydate_phic`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00))) AS `tax_basic`,ifnull(`get_paydate_tax_income`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00) AS `tax_income`,ifnull(`get_paydate_tax_basic_min`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00) AS `min_basic`,ifnull(`get_paydate_nontax_income`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00) AS `min_income`,ifnull(`get_paydate_bonus`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00) AS `bonus`,ifnull(`get_paydate_deminimis`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00) AS `deminimis`,ifnull(`get_paydate_wtax`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00) AS `wtax`,ifnull(`get_paydate_sss`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00) AS `sss`,ifnull(`get_paydate_hdmf`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00) AS `hdmf`,ifnull(`get_paydate_phic`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00) AS `phic`,((ifnull(`get_paydate_sss`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00) + ifnull(`get_paydate_hdmf`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00)) + ifnull(`get_paydate_phic`(`pct`.`payroll_date`,`pct`.`employee_id`),0.00)) AS `tot_contri`,`u`.`user_id` AS `employee`,`pct`.`company_id` AS `company` from ((`ww_payroll_closed_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) where ((`pct`.`deleted` = 0) and (`pt`.`deleted` = 0) and (`u`.`deleted` = 0)) group by `pct`.`payroll_date`,`pct`.`employee_id` */;

/*View structure for view payroll_alpha_minimum_wage_earner */

/*!50001 DROP TABLE IF EXISTS `payroll_alpha_minimum_wage_earner` */;
/*!50001 DROP VIEW IF EXISTS `payroll_alpha_minimum_wage_earner` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_alpha_minimum_wage_earner` AS select ifnull(`ww_payroll_bir`.`tin`,'') AS `tin`,concat(`ww_payroll_bir`.`lastname`,if(((`ww_payroll_bir`.`suffix` <> NULL) or (`ww_payroll_bir`.`suffix` <> '')),concat(' ',`ww_payroll_bir`.`suffix`),''),', ',`ww_payroll_bir`.`firstname`,' ',`ww_payroll_bir`.`middlename`) AS `employee_name`,`ww_payroll_bir`.`location` AS `location`,`ww_payroll_bir`.`employed_date` AS `hired_date`,if(((`ww_payroll_bir`.`resigned_date` = '0000-00-00') or isnull(`ww_payroll_bir`.`resigned_date`)),concat(`ww_payroll_bir`.`pay_year`,'-12-31'),`ww_payroll_bir`.`resigned_date`) AS `resigned_date`,`ww_payroll_bir`.`minwage_day` AS `minwage_day`,`ww_payroll_bir`.`minwage_month` AS `minwage_month`,`ww_payroll_bir`.`total_year_days` AS `total_year_days`,0.00 AS `col_5a`,((((((((`ww_payroll_bir`.`min_basic` + `ww_payroll_bir`.`min_holpay`) + `ww_payroll_bir`.`min_overtime`) + `ww_payroll_bir`.`min_ndiff`) + `ww_payroll_bir`.`min_hazardpay`) + `ww_payroll_bir`.`bonus_nontax`) + `ww_payroll_bir`.`min_deminimis`) + `ww_payroll_bir`.`govt_contri`) + `ww_payroll_bir`.`benefit`) AS `col_5q`,0.00 AS `col_5b`,`ww_payroll_bir`.`min_basic` AS `col_5t`,0.00 AS `col_5c`,`ww_payroll_bir`.`min_holpay` AS `col_5v`,0.00 AS `col_5d`,`ww_payroll_bir`.`min_overtime` AS `col_5w`,0.00 AS `col_5e`,`ww_payroll_bir`.`min_ndiff` AS `col_5x`,0.00 AS `col_5f`,`ww_payroll_bir`.`min_hazardpay` AS `col_5y`,0.00 AS `col_5g`,`ww_payroll_bir`.`bonus_nontax` AS `col_5z`,0.00 AS `col_5h`,`ww_payroll_bir`.`min_deminimis` AS `col_5aa`,0.00 AS `col_5i`,`ww_payroll_bir`.`govt_contri` AS `col_5ab`,0.00 AS `col_5j`,`ww_payroll_bir`.`benefit` AS `col_5ac`,((((((((`ww_payroll_bir`.`min_basic` + `ww_payroll_bir`.`min_holpay`) + `ww_payroll_bir`.`min_overtime`) + `ww_payroll_bir`.`min_ndiff`) + `ww_payroll_bir`.`min_hazardpay`) + `ww_payroll_bir`.`bonus_nontax`) + `ww_payroll_bir`.`min_deminimis`) + `ww_payroll_bir`.`govt_contri`) + `ww_payroll_bir`.`benefit`) AS `col_5k`,0.00 AS `col_5l`,0.00 AS `col_5ad`,0.00 AS `col_5m`,0.00 AS `col_5ae`,0.00 AS `col_5n`,0.00 AS `col_5af`,0.00 AS `col_5ag`,`ww_payroll_bir`.`exempt_code` AS `exempt_code`,`ww_payroll_bir`.`exempt` AS `exempt_amount`,0.00 AS `premium`,0.00 AS `net_taxable`,`ww_payroll_bir`.`taxdue` AS `taxdue`,`ww_payroll_bir`.`wtax` AS `wtax`,if((`ww_payroll_bir`.`taxdue` > `ww_payroll_bir`.`wtax`),(`ww_payroll_bir`.`taxdue` - `ww_payroll_bir`.`wtax`),0) AS `payable`,if((`ww_payroll_bir`.`wtax` > `ww_payroll_bir`.`taxdue`),(`ww_payroll_bir`.`wtax` - `ww_payroll_bir`.`taxdue`),0) AS `refund`,`ww_payroll_bir`.`taxdue` AS `total_tax`,`ww_payroll_bir`.`sub_filing` AS `sub_filing`,`ww_payroll_bir`.`company_id` AS `company`,`ww_users_company`.`company` AS `company_name`,`ww_users_company`.`address` AS `company_address`,`ww_payroll_bir`.`user_id` AS `employee`,`ww_payroll_bir`.`pay_year` AS `pay_year` from (`ww_payroll_bir` left join `ww_users_company` on((`ww_payroll_bir`.`company_id` = `ww_users_company`.`company_id`))) where ((`ww_payroll_bir`.`deleted` = 0) and (`ww_payroll_bir`.`minwageflag` = 1) and (year(`ww_payroll_bir`.`resigned_date`) < `ww_payroll_bir`.`pay_year`)) */;

/*View structure for view payroll_alpha_terminated */

/*!50001 DROP TABLE IF EXISTS `payroll_alpha_terminated` */;
/*!50001 DROP VIEW IF EXISTS `payroll_alpha_terminated` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_alpha_terminated` AS select ifnull(`ww_payroll_bir`.`tin`,'') AS `tin`,concat(`ww_payroll_bir`.`lastname`,if(((`ww_payroll_bir`.`suffix` <> NULL) or (`ww_payroll_bir`.`suffix` <> '')),concat(' ',`ww_payroll_bir`.`suffix`),''),', ',`ww_payroll_bir`.`firstname`,' ',`ww_payroll_bir`.`middlename`) AS `employee_name`,`ww_payroll_bir`.`employed_date` AS `hired_date`,`ww_payroll_bir`.`resigned_date` AS `resigned_date`,`ww_payroll_bir`.`gross_compensation` AS `col_4a`,`ww_payroll_bir`.`bonus_nontax` AS `col_4b`,`ww_payroll_bir`.`min_deminimis` AS `col_4c`,`ww_payroll_bir`.`govt_contri` AS `col_4d`,`ww_payroll_bir`.`benefit` AS `col_4e`,`ww_payroll_bir`.`total_non_tax` AS `col_4f`,`ww_payroll_bir`.`tax_basic` AS `col_4g`,`ww_payroll_bir`.`bonus_tax` AS `col_4h`,(((((((((`ww_payroll_bir`.`tax_overtime` + `ww_payroll_bir`.`allow`) + `ww_payroll_bir`.`representation`) + `ww_payroll_bir`.`transportation`) + `ww_payroll_bir`.`cost_living`) + `ww_payroll_bir`.`fixed_housing`) + `ww_payroll_bir`.`commission`) + `ww_payroll_bir`.`profit_sharing`) + `ww_payroll_bir`.`fees`) + `ww_payroll_bir`.`tax_hazardpay`) AS `col_4i`,`ww_payroll_bir`.`total_taxable` AS `col_4j`,`ww_payroll_bir`.`exempt_code` AS `exempt_code`,`ww_payroll_bir`.`exempt` AS `exempt_amount`,`ww_payroll_bir`.`net_taxable` AS `net_taxable`,`ww_payroll_bir`.`taxdue` AS `taxdue`,`ww_payroll_bir`.`wtax` AS `wtax`,if((`ww_payroll_bir`.`taxdue` > `ww_payroll_bir`.`wtax`),(`ww_payroll_bir`.`taxdue` - `ww_payroll_bir`.`wtax`),0) AS `payable`,if((`ww_payroll_bir`.`wtax` > `ww_payroll_bir`.`taxdue`),(`ww_payroll_bir`.`wtax` - `ww_payroll_bir`.`taxdue`),0) AS `refund`,`ww_payroll_bir`.`taxdue` AS `total_tax`,`ww_payroll_bir`.`sub_filing` AS `sub_filing`,`ww_payroll_bir`.`company_id` AS `company`,`ww_users_company`.`company` AS `company_name`,`ww_users_company`.`address` AS `company_address`,`ww_payroll_bir`.`user_id` AS `employee`,`ww_payroll_bir`.`pay_year` AS `pay_year` from (`ww_payroll_bir` left join `ww_users_company` on((`ww_payroll_bir`.`company_id` = `ww_users_company`.`company_id`))) where ((`ww_payroll_bir`.`deleted` = 0) and (`ww_payroll_bir`.`minwageflag` = 0) and (`ww_payroll_bir`.`resigned_date` is not null) and (year(`ww_payroll_bir`.`resigned_date`) = `ww_payroll_bir`.`pay_year`)) */;

/*View structure for view payroll_alpha_without_previous */

/*!50001 DROP TABLE IF EXISTS `payroll_alpha_without_previous` */;
/*!50001 DROP VIEW IF EXISTS `payroll_alpha_without_previous` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_alpha_without_previous` AS select ifnull(`ww_payroll_bir`.`tin`,'') AS `tin`,concat(`ww_payroll_bir`.`lastname`,if(((`ww_payroll_bir`.`suffix` <> NULL) or (`ww_payroll_bir`.`suffix` <> '')),concat(' ',`ww_payroll_bir`.`suffix`),''),', ',`ww_payroll_bir`.`firstname`,' ',`ww_payroll_bir`.`middlename`) AS `employee_name`,`ww_payroll_bir`.`employed_date` AS `hired_date`,if(((`ww_payroll_bir`.`resigned_date` = '0000-00-00') or isnull(`ww_payroll_bir`.`resigned_date`)),concat(`ww_payroll_bir`.`pay_year`,'-12-31'),`ww_payroll_bir`.`resigned_date`) AS `resigned_date`,`ww_payroll_bir`.`gross_compensation` AS `col_4a`,`ww_payroll_bir`.`bonus_nontax` AS `col_4b`,`ww_payroll_bir`.`min_deminimis` AS `col_4c`,`ww_payroll_bir`.`govt_contri` AS `col_4d`,`ww_payroll_bir`.`benefit` AS `col_4e`,`ww_payroll_bir`.`total_non_tax` AS `col_4f`,`ww_payroll_bir`.`tax_basic` AS `col_4g`,`ww_payroll_bir`.`bonus_tax` AS `col_4h`,(((((((((`ww_payroll_bir`.`tax_overtime` + `ww_payroll_bir`.`allow`) + `ww_payroll_bir`.`representation`) + `ww_payroll_bir`.`transportation`) + `ww_payroll_bir`.`cost_living`) + `ww_payroll_bir`.`fixed_housing`) + `ww_payroll_bir`.`commission`) + `ww_payroll_bir`.`profit_sharing`) + `ww_payroll_bir`.`fees`) + `ww_payroll_bir`.`tax_hazardpay`) AS `col_4i`,`ww_payroll_bir`.`total_taxable` AS `col_4j`,`ww_payroll_bir`.`exempt_code` AS `exempt_code`,`ww_payroll_bir`.`exempt` AS `exempt_amount`,`ww_payroll_bir`.`net_taxable` AS `net_taxable`,`ww_payroll_bir`.`taxdue` AS `taxdue`,`ww_payroll_bir`.`wtax` AS `wtax`,if((`ww_payroll_bir`.`taxdue` > `ww_payroll_bir`.`wtax`),(`ww_payroll_bir`.`taxdue` - `ww_payroll_bir`.`wtax`),0) AS `payable`,if((`ww_payroll_bir`.`wtax` > `ww_payroll_bir`.`taxdue`),(`ww_payroll_bir`.`wtax` - `ww_payroll_bir`.`taxdue`),0) AS `refund`,`ww_payroll_bir`.`taxdue` AS `total_tax`,`ww_payroll_bir`.`sub_filing` AS `sub_filing`,`ww_payroll_bir`.`company_id` AS `company`,`ww_users_company`.`company` AS `company_name`,`ww_users_company`.`address` AS `company_address`,`ww_payroll_bir`.`user_id` AS `employee`,`ww_payroll_bir`.`pay_year` AS `pay_year` from (`ww_payroll_bir` left join `ww_users_company` on((`ww_payroll_bir`.`company_id` = `ww_users_company`.`company_id`))) where ((`ww_payroll_bir`.`deleted` = 0) and (`ww_payroll_bir`.`minwageflag` = 0) and (year(`ww_payroll_bir`.`resigned_date`) < `ww_payroll_bir`.`pay_year`)) */;

/*View structure for view payroll_atm_register */

/*!50001 DROP TABLE IF EXISTS `payroll_atm_register` */;
/*!50001 DROP VIEW IF EXISTS `payroll_atm_register` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_atm_register` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`pp`.`bank_id` AS `bank_id`,`pp`.`bank_account` AS `bank_account`,`pp`.`payout_schedule` AS `payout_schedule`,`pp`.`whole_half` AS `payout_scheme`,`set_2_decimal`(if((`pp`.`whole_half` = 0),aes_decrypt(`pct`.`amount`,`encryption_key`()),(aes_decrypt(`pct`.`amount`,`encryption_key`()) / if((`t`.`bonus_tag` = 1),1,2)))) AS `amount`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`transaction_code` AS `transaction_code`,`pct`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,'PRELIMINARY' AS `record_reference`,`c`.`address` AS `address`,`t`.`posting_date` AS `posting_date`,`pb`.`account_no` AS `account_no`,`pb`.`batch_no` AS `batch_no`,`pb`.`bank_code_numeric` AS `bank_code_numeric`,`pb`.`bank_code_alpha` AS `bank_code_alpha`,'tmp' AS `schedule`,'tmp1' AS `bank_posting_date` from (((((((((`ww_payroll_current_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) left join `ww_payroll_partners` `pp` on((`pct`.`employee_id` = `pp`.`user_id`))) left join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) left join `ww_users_branch` `b` on((`up`.`branch_id` = `b`.`branch_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_bank` `pb` on((`pb`.`bank_id` = `pp`.`bank_id`))) where ((`pct`.`deleted` = 0) and (`pct`.`on_hold` = 0) and (`pp`.`on_hold` = 0) and (`u`.`active` = 1) and (`pp`.`bank_account` <> '') and (`pp`.`bank_account` <> 0) and (`pct`.`transaction_code` = 'NETPAY')) union select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`pp`.`bank_id` AS `bank_id`,`pp`.`bank_account` AS `bank_account`,`pp`.`payout_schedule` AS `payout_schedule`,`pp`.`whole_half` AS `payout_scheme`,`set_2_decimal`(if((`pp`.`whole_half` = 0),aes_decrypt(`pct`.`amount`,`encryption_key`()),(aes_decrypt(`pct`.`amount`,`encryption_key`()) / if((`t`.`bonus_tag` = 1),1,2)))) AS `amount`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`transaction_code` AS `transaction_code`,`pct`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,'HISTORICAL' AS `record_reference`,`c`.`address` AS `address`,`t`.`posting_date` AS `posting_date`,`pb`.`account_no` AS `account_no`,`pb`.`batch_no` AS `batch_no`,`pb`.`bank_code_numeric` AS `bank_code_numeric`,`pb`.`bank_code_alpha` AS `bank_code_alpha`,'tmp' AS `schedule`,'tmp1' AS `bank_posting_date` from (((((((((`ww_payroll_closed_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) left join `ww_payroll_partners` `pp` on((`pct`.`employee_id` = `pp`.`user_id`))) left join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) left join `ww_users_branch` `b` on((`up`.`branch_id` = `b`.`branch_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_bank` `pb` on((`pb`.`bank_id` = `pp`.`bank_id`))) where ((`pct`.`deleted` = 0) and (`pct`.`on_hold` = 0) and (`pp`.`on_hold` = 0) and (`u`.`active` = 1) and (`pp`.`bank_account` <> '') and (`pp`.`bank_account` <> 0) and (`pct`.`transaction_code` = 'NETPAY')) */;

/*View structure for view payroll_atm_register_orig */

/*!50001 DROP TABLE IF EXISTS `payroll_atm_register_orig` */;
/*!50001 DROP VIEW IF EXISTS `payroll_atm_register_orig` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_atm_register_orig` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`pp`.`bank_id` AS `bank_id`,`pp`.`bank_account` AS `bank_account`,`pp`.`payout_schedule` AS `payout_schedule`,`pp`.`whole_half` AS `payout_scheme`,`set_2_decimal`(if((`pp`.`whole_half` = 0),aes_decrypt(`pct`.`amount`,`encryption_key`()),(aes_decrypt(`pct`.`amount`,`encryption_key`()) / 2))) AS `amount`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`transaction_code` AS `transaction_code`,`pct`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,'PRELIMINARY' AS `record_reference`,`c`.`address` AS `address`,`t`.`posting_date` AS `posting_date`,`pb`.`account_no` AS `account_no`,`pb`.`batch_no` AS `batch_no`,`pb`.`bank_code_numeric` AS `bank_code_numeric`,`pb`.`bank_code_alpha` AS `bank_code_alpha`,'tmp' AS `schedule`,'tmp1' AS `bank_posting_date` from (((((((((`ww_payroll_current_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) left join `ww_payroll_partners` `pp` on((`pct`.`employee_id` = `pp`.`user_id`))) left join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) left join `ww_users_branch` `b` on((`up`.`branch_id` = `b`.`branch_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_bank` `pb` on((`pb`.`bank_id` = `pp`.`bank_id`))) where ((`pct`.`deleted` = 0) and (`pct`.`on_hold` = 0) and (`pp`.`on_hold` = 0) and (`u`.`active` = 1) and (`pp`.`bank_account` <> '') and (`pp`.`bank_account` <> 0) and (`pct`.`transaction_code` = 'NETPAY')) union select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`pp`.`bank_id` AS `bank_id`,`pp`.`bank_account` AS `bank_account`,`pp`.`payout_schedule` AS `payout_schedule`,`pp`.`whole_half` AS `payout_scheme`,`set_2_decimal`(if((`pp`.`whole_half` = 0),aes_decrypt(`pct`.`amount`,`encryption_key`()),(aes_decrypt(`pct`.`amount`,`encryption_key`()) / 2))) AS `amount`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`transaction_code` AS `transaction_code`,`pct`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,'HISTORICAL' AS `record_reference`,`c`.`address` AS `address`,`t`.`posting_date` AS `posting_date`,`pb`.`account_no` AS `account_no`,`pb`.`batch_no` AS `batch_no`,`pb`.`bank_code_numeric` AS `bank_code_numeric`,`pb`.`bank_code_alpha` AS `bank_code_alpha`,'tmp' AS `schedule`,'tmp1' AS `bank_posting_date` from (((((((((`ww_payroll_closed_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) left join `ww_payroll_partners` `pp` on((`pct`.`employee_id` = `pp`.`user_id`))) left join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) left join `ww_users_branch` `b` on((`up`.`branch_id` = `b`.`branch_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_bank` `pb` on((`pb`.`bank_id` = `pp`.`bank_id`))) where ((`pct`.`deleted` = 0) and (`pct`.`on_hold` = 0) and (`pp`.`on_hold` = 0) and (`u`.`active` = 1) and (`pp`.`bank_account` <> '') and (`pp`.`bank_account` <> 0) and (`pct`.`transaction_code` = 'NETPAY')) */;

/*View structure for view payroll_attendance_adjustment */

/*!50001 DROP TABLE IF EXISTS `payroll_attendance_adjustment` */;
/*!50001 DROP VIEW IF EXISTS `payroll_attendance_adjustment` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_attendance_adjustment` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`pp`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`uc`.`logo` AS `logo`,`t`.`date` AS `date`,`t`.`payroll_date` AS `payroll_date`,if((ifnull(`t`.`original_payroll_date`,'0000-00-00') = '0000-00-00'),`t`.`payroll_date`,`t`.`original_payroll_date`) AS `original_payroll_date`,`t`.`transaction_id` AS `transaction_id`,`t`.`transaction_code` AS `transaction_code`,`pt`.`transaction_label` AS `transaction_label`,`t`.`quantity` AS `quantity`,(case when (`t`.`latefile` = 1) then 'Adjustment' when ((`t`.`latefile` = 0) and (`t`.`transaction_code` in ('LWOP','ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME'))) then 'Deduction' when ((`t`.`latefile` = 0) and (`ptc`.`transaction_class_code` = 'OVERTIME')) then 'Overtime' when ((`t`.`latefile` = 0) and (`ptc`.`transaction_class_code` = 'LEAVES')) then 'Leaves' end) AS `type`,(case when (`t`.`latefile` = 1) then 1 when ((`t`.`latefile` = 0) and (`t`.`transaction_code` in ('LWOP','ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME'))) then 2 when ((`t`.`latefile` = 0) and (`ptc`.`transaction_class_code` = 'OVERTIME')) then 3 when ((`t`.`latefile` = 0) and (`ptc`.`transaction_class_code` = 'LEAVES')) then 4 end) AS `type_id` from (((((((((`ww_time_record_process` `t` join `ww_users_profile` `up` on((`t`.`user_id` = `up`.`user_id`))) join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) join `ww_users` `u` on((`t`.`user_id` = `u`.`user_id`))) join `ww_partners` `p` on((`p`.`user_id` = `u`.`user_id`))) join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) left join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `t`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`ptc`.`transaction_class_id` = `pt`.`transaction_class_id`))) where (`t`.`deleted` = 0) */;

/*View structure for view payroll_authority_debit */

/*!50001 DROP TABLE IF EXISTS `payroll_authority_debit` */;
/*!50001 DROP VIEW IF EXISTS `payroll_authority_debit` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_authority_debit` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,aes_decrypt(`pct`.`amount`,`encryption_key`()) AS `amount`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`c`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`pct`.`transaction_code` AS `transaction_code`,`pct`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,`c`.`city` AS `city`,`pb`.`bank` AS `bank_name`,`pb`.`account_no` AS `bank_account_no`,`pb`.`address` AS `address1`,`pb`.`address_2` AS `address2`,`pb`.`branch_officer` AS `branch_officer`,`pb`.`branch_position` AS `branch_position`,`pb`.`signatory_1` AS `signatory_1`,`pb`.`signatory_2` AS `signatory_2`,`pb`.`account_name` AS `account_name` from ((((((((`ww_payroll_current_transaction` `pct` left join `ww_payroll_partners` `pp` on((`pct`.`employee_id` = `pp`.`user_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_bank` `pb` on((`pb`.`bank_id` = `c`.`bank_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) left join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) left join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) where ((`pct`.`deleted` = 0) and (`pct`.`transaction_code` = 'NETPAY') and (aes_decrypt(`pct`.`amount`,`encryption_key`()) > 0)) union all select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,aes_decrypt(`pct`.`amount`,`encryption_key`()) AS `amount`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`c`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`pct`.`transaction_code` AS `transaction_code`,`pct`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,`c`.`city` AS `city`,`pb`.`bank` AS `bank_name`,`pb`.`account_no` AS `bank_account_no`,`pb`.`address` AS `address1`,`pb`.`address_2` AS `address2`,`pb`.`branch_officer` AS `branch_officer`,`pb`.`branch_position` AS `branch_position`,`pb`.`signatory_1` AS `signatory_1`,`pb`.`signatory_2` AS `signatory_2`,`pb`.`account_name` AS `account_name` from ((((((((`ww_payroll_closed_transaction` `pct` left join `ww_payroll_partners` `pp` on((`pct`.`employee_id` = `pp`.`user_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_bank` `pb` on((`pb`.`bank_id` = `c`.`bank_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) left join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) left join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) where ((`pct`.`deleted` = 0) and (`pct`.`transaction_code` = 'NETPAY') and (aes_decrypt(`pct`.`amount`,`encryption_key`()) > 0)) */;

/*View structure for view payroll_bank_details_report */

/*!50001 DROP TABLE IF EXISTS `payroll_bank_details_report` */;
/*!50001 DROP VIEW IF EXISTS `payroll_bank_details_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_bank_details_report` AS select `u`.`full_name` AS `account_name`,`par`.`id_number` AS `id_number`,`pp`.`bank_id` AS `bank_id`,`pp`.`bank_account` AS `account_number`,`pp`.`payout_schedule` AS `payout_schedule`,`pp`.`whole_half` AS `payout_scheme`,`pct`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`payroll_date` AS `payroll_date`,`pay`.`date_from` AS `date_from`,`pay`.`date_to` AS `date_to`,if((`pp`.`whole_half` = 0),aes_decrypt(`pct`.`amount`,`encryption_key`()),(aes_decrypt(`pct`.`amount`,`encryption_key`()) / if((`pay`.`bonus_tag` = 1),1,2))) AS `amount`,'tmp' AS `schedule`,'tmp1' AS `payroll_date_actuall` from (((((((`ww_payroll_closed_transaction` `pct` left join `ww_users` `u` on((`u`.`user_id` = `pct`.`employee_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) left join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `pct`.`employee_id`))) left join `ww_partners` `par` on((`par`.`user_id` = `pct`.`employee_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_payroll_period` `pay` on((`pct`.`period_id` = `pay`.`payroll_period_id`))) where ((`pct`.`transaction_code` = 'NETPAY') and (`pct`.`on_hold` = 0) and (`pp`.`on_hold` = 0) and (`u`.`active` = 1) and (`pp`.`bank_account` <> '') and (`pp`.`bank_account` <> 0) and (`pct`.`deleted` = 0)) union all select `u`.`full_name` AS `account_name`,`par`.`id_number` AS `id_number`,`pp`.`bank_id` AS `bank_id`,`pp`.`bank_account` AS `account_number`,`pp`.`payout_schedule` AS `payout_schedule`,`pp`.`whole_half` AS `payout_scheme`,`pct`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`payroll_date` AS `payroll_date`,`pay`.`date_from` AS `date_from`,`pay`.`date_to` AS `date_to`,if((`pp`.`whole_half` = 0),aes_decrypt(`pct`.`amount`,`encryption_key`()),(aes_decrypt(`pct`.`amount`,`encryption_key`()) / if((`pay`.`bonus_tag` = 1),1,2))) AS `amount`,'tmp' AS `schedule`,'tmp1' AS `payroll_date_actuall` from (((((((`ww_payroll_current_transaction` `pct` left join `ww_users` `u` on((`u`.`user_id` = `pct`.`employee_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) left join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `pct`.`employee_id`))) left join `ww_partners` `par` on((`par`.`user_id` = `pct`.`employee_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_payroll_period` `pay` on((`pct`.`period_id` = `pay`.`payroll_period_id`))) where ((`pct`.`transaction_code` = 'NETPAY') and (`pct`.`on_hold` = 0) and (`pp`.`on_hold` = 0) and (`u`.`active` = 1) and (`pp`.`bank_account` <> '') and (`pp`.`bank_account` <> 0) and (`pct`.`deleted` = 0)) */;

/*View structure for view payroll_bir */

/*!50001 DROP TABLE IF EXISTS `payroll_bir` */;
/*!50001 DROP VIEW IF EXISTS `payroll_bir` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_bir` AS select `pb`.`user_id` AS `user_id`,`pb`.`pay_year` AS `year`,if((year(`pb`.`employed_date`) < `pb`.`pay_year`),'0101',date_format(`pb`.`employed_date`,'%m%d')) AS `month_from`,ifnull(date_format(`pb`.`resigned_date`,'%m%d'),'1231') AS `month_to`,`pb`.`tin` AS `emp_tin`,concat(`pb`.`lastname`,', ',`pb`.`firstname`,if((`pb`.`suffix` <> ''),concat(' ',`pb`.`suffix`,' '),' '),if(((`pb`.`middlename` <> '') and (`pb`.`middlename` is not null)),concat(' ',`pb`.`middlename`,' '),' ')) AS `full_name`,`pb`.`address` AS `emp_address`,`get_zipcode`(`pb`.`user_id`) AS `emp_zipcode`,`pb`.`birth_date` AS `birth_date`,`pb`.`company_id` AS `company_id`,`pb`.`civil_status_id` AS `civil_status_id`,`pb`.`dep_name1` AS `dep_name1`,`pb`.`dep_bday1` AS `dep_bday1`,`pb`.`dep_name2` AS `dep_name2`,`pb`.`dep_bday2` AS `dep_bday2`,`pb`.`dep_name3` AS `dep_name3`,`pb`.`dep_bday3` AS `dep_bday3`,`pb`.`dep_name4` AS `dep_name4`,`pb`.`dep_bday4` AS `dep_bday4`,`pb`.`minwage_day` AS `minwage_day`,`pb`.`minwage_month` AS `minwage_month`,`pb`.`minwageflag` AS `minwageflag`,`uc`.`vat` AS `comp_tin`,`uc`.`company` AS `company`,`uc`.`rdo` AS `rdo`,`uc`.`address` AS `comp_address`,`uc`.`zipcode` AS `comp_zipcode`,`pb`.`prev_tin` AS `prev_tin`,`pb`.`prev_employer` AS `prev_employer`,`pb`.`prev_address` AS `prev_address`,`pb`.`prev_zip` AS `prev_zip`,`pb`.`gross_compensation` AS `item21`,`pb`.`total_non_tax` AS `item22`,`pb`.`total_taxable` AS `item23`,`pb`.`prev_gross_tax` AS `item24`,((ifnull(`pb`.`gross_compensation`,0) + ifnull(`pb`.`prev_gross_tax`,0)) - ifnull(`pb`.`total_non_tax`,0)) AS `item25`,`pb`.`exempt` AS `item26`,0.00 AS `item27`,`pb`.`net_taxable` AS `item28`,`pb`.`taxdue` AS `item29`,`pb`.`wtax` AS `item30A`,`pb`.`prev_wtax` AS `item30B`,((ifnull(`pb`.`taxdue`,0) - ifnull(`pb`.`wtax`,0)) - ifnull(`pb`.`prev_wtax`,0)) AS `item31`,`pb`.`min_basic` AS `item32`,`pb`.`min_holpay` AS `item33`,`pb`.`min_overtime` AS `item34`,`pb`.`min_ndiff` AS `item35`,`pb`.`min_hazardpay` AS `item36`,`pb`.`bonus_nontax` AS `item37`,`pb`.`min_deminimis` AS `item38`,`pb`.`govt_contri` AS `item39`,`pb`.`benefit` AS `item40`,`pb`.`total_non_tax` AS `item41`,`pb`.`tax_basic` AS `item42`,`pb`.`representation` AS `item43`,`pb`.`transportation` AS `item44`,`pb`.`cost_living` AS `item45`,`pb`.`fixed_housing` AS `item46`,'' AS `nitem47A`,`pb`.`tempo_allowance` AS `item47A`,'' AS `nitem47B`,`pb`.`service_allowance` AS `item47B`,`pb`.`commission` AS `item48`,`pb`.`profit_sharing` AS `item49`,`pb`.`tax_basic` AS `item50`,`pb`.`bonus_tax` AS `item51`,`pb`.`tax_hazardpay` AS `item52`,`pb`.`tax_overtime` AS `item53`,'' AS `nitem54A`,'' AS `item54A`,'' AS `nitem54B`,'' AS `item54B`,`pb`.`total_taxable` AS `item55` from (`ww_payroll_bir` `pb` join `ww_users_company` `uc` on((`pb`.`company_id` = `uc`.`company_id`))) */;

/*View structure for view payroll_bonus_basis */

/*!50001 DROP TABLE IF EXISTS `payroll_bonus_basis` */;
/*!50001 DROP VIEW IF EXISTS `payroll_bonus_basis` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_bonus_basis` AS (select `up`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`up`.`middlename` AS `middlename`,`pct`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`pct`.`department_id` AS `department_id`,`ud`.`department` AS `department`,year(`pct`.`payroll_date`) AS `pay_year`,round(sum(((case when ((month(`pct`.`payroll_date`) = 1) and (`pct`.`transaction_code` = 'SALARY')) then 1 when ((month(`pct`.`payroll_date`) = 1) and (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ'))) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `jan_reg`,round(sum(((case when ((month(`pct`.`payroll_date`) = 1) and (`pct`.`transaction_code` = 'SALADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `jan_saladj`,round(sum(((case when ((month(`pct`.`payroll_date`) = 1) and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `jan_deminimis`,round(sum(((case when ((month(`pct`.`payroll_date`) = 2) and (`pct`.`transaction_code` = 'SALARY')) then 1 when ((month(`pct`.`payroll_date`) = 2) and (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ'))) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `feb_reg`,round(sum(((case when ((month(`pct`.`payroll_date`) = 2) and (`pct`.`transaction_code` = 'SALADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `feb_saladj`,round(sum(((case when ((month(`pct`.`payroll_date`) = 2) and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `feb_deminimis`,round(sum(((case when ((month(`pct`.`payroll_date`) = 3) and (`pct`.`transaction_code` = 'SALARY')) then 1 when ((month(`pct`.`payroll_date`) = 3) and (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ'))) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `mar_reg`,round(sum(((case when ((month(`pct`.`payroll_date`) = 3) and (`pct`.`transaction_code` = 'SALADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `mar_saladj`,round(sum(((case when ((month(`pct`.`payroll_date`) = 3) and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `mar_deminimis`,round(sum(((case when ((month(`pct`.`payroll_date`) = 4) and (`pct`.`transaction_code` = 'SALARY')) then 1 when ((month(`pct`.`payroll_date`) = 4) and (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ'))) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `apr_reg`,round(sum(((case when ((month(`pct`.`payroll_date`) = 4) and (`pct`.`transaction_code` = 'SALADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `apr_saladj`,round(sum(((case when ((month(`pct`.`payroll_date`) = 4) and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `apr_deminimis`,round(sum(((case when ((month(`pct`.`payroll_date`) = 5) and (`pct`.`transaction_code` = 'SALARY')) then 1 when ((month(`pct`.`payroll_date`) = 5) and (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ'))) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `may_reg`,round(sum(((case when ((month(`pct`.`payroll_date`) = 5) and (`pct`.`transaction_code` = 'SALADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `may_saladj`,round(sum(((case when ((month(`pct`.`payroll_date`) = 5) and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `may_deminimis`,round(sum(((case when ((month(`pct`.`payroll_date`) = 6) and (`pct`.`transaction_code` = 'SALARY')) then 1 when ((month(`pct`.`payroll_date`) = 6) and (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ'))) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `jun_reg`,round(sum(((case when ((month(`pct`.`payroll_date`) = 6) and (`pct`.`transaction_code` = 'SALADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `jun_saladj`,round(sum(((case when ((month(`pct`.`payroll_date`) = 6) and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `jun_deminimis`,round(sum(((case when ((month(`pct`.`payroll_date`) = 7) and (`pct`.`transaction_code` = 'SALARY')) then 1 when ((month(`pct`.`payroll_date`) = 7) and (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ'))) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `jul_reg`,round(sum(((case when ((month(`pct`.`payroll_date`) = 7) and (`pct`.`transaction_code` = 'SALADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `jul_saladj`,round(sum(((case when ((month(`pct`.`payroll_date`) = 7) and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `jul_deminimis`,round(sum(((case when ((month(`pct`.`payroll_date`) = 8) and (`pct`.`transaction_code` = 'SALARY')) then 1 when ((month(`pct`.`payroll_date`) = 8) and (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ'))) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `aug_reg`,round(sum(((case when ((month(`pct`.`payroll_date`) = 8) and (`pct`.`transaction_code` = 'SALADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `aug_saladj`,round(sum(((case when ((month(`pct`.`payroll_date`) = 8) and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `aug_deminimis`,round(sum(((case when ((month(`pct`.`payroll_date`) = 9) and (`pct`.`transaction_code` = 'SALARY')) then 1 when ((month(`pct`.`payroll_date`) = 9) and (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ'))) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sep_reg`,round(sum(((case when ((month(`pct`.`payroll_date`) = 9) and (`pct`.`transaction_code` = 'SALADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sep_saladj`,round(sum(((case when ((month(`pct`.`payroll_date`) = 9) and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sep_deminimis`,round(sum(((case when ((month(`pct`.`payroll_date`) = 10) and (`pct`.`transaction_code` = 'SALARY')) then 1 when ((month(`pct`.`payroll_date`) = 10) and (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ'))) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `oct_reg`,round(sum(((case when ((month(`pct`.`payroll_date`) = 10) and (`pct`.`transaction_code` = 'SALADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `oct_saladj`,round(sum(((case when ((month(`pct`.`payroll_date`) = 10) and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `oct_deminimis`,round(sum(((case when ((month(`pct`.`payroll_date`) = 11) and (`pct`.`transaction_code` = 'SALARY')) then 1 when ((month(`pct`.`payroll_date`) = 11) and (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ'))) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `nov_reg`,round(sum(((case when ((month(`pct`.`payroll_date`) = 11) and (`pct`.`transaction_code` = 'SALADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `nov_saladj`,round(sum(((case when ((month(`pct`.`payroll_date`) = 11) and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `nov_deminimis`,round(sum(((case when ((month(`pct`.`payroll_date`) = 12) and (`pct`.`transaction_code` = 'SALARY')) then 1 when ((month(`pct`.`payroll_date`) = 12) and (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ'))) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `dec_reg`,round(sum(((case when ((month(`pct`.`payroll_date`) = 12) and (`pct`.`transaction_code` = 'SALADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `dec_saladj`,round(sum(((case when ((month(`pct`.`payroll_date`) = 12) and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `dec_deminimis`,round(sum(((case when ((`pct`.`transaction_code` in ('SALARY','SALADJ')) or (`pct`.`transaction_type_id` = 6)) then 1 when (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ')) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `total`,12.00 AS `month_count`,round((sum(((case when ((`pct`.`transaction_code` in ('SALARY','SALADJ')) or (`pct`.`transaction_type_id` = 6)) then 1 when (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ')) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) / 12),2) AS `bonus`,`get_max_bonus`() AS `ceiling_amount`,if((((sum(((case when ((`pct`.`transaction_code` in ('SALARY','SALADJ')) or (`pct`.`transaction_type_id` = 6)) then 1 when (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ')) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) / 12) - `get_max_bonus`()) < 0),0,round(((sum(((case when ((`pct`.`transaction_code` in ('SALARY','SALADJ')) or (`pct`.`transaction_type_id` = 6)) then 1 when (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ','DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ')) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) / 12) - `get_max_bonus`()),2)) AS `taxable` from ((((`ww_payroll_closed_transaction` `pct` left join `ww_users_profile` `up` on((`pct`.`employee_id` = `up`.`user_id`))) left join `ww_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) left join `ww_users_department` `ud` on((`pct`.`department_id` = `ud`.`department_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) group by `up`.`user_id`,year(`pct`.`payroll_date`)) */;

/*View structure for view payroll_contribution_loan_summary */

/*!50001 DROP TABLE IF EXISTS `payroll_contribution_loan_summary` */;
/*!50001 DROP VIEW IF EXISTS `payroll_contribution_loan_summary` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_contribution_loan_summary` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`pt`.`transaction_label` AS `transaction_label`,`pt`.`transaction_id` AS `transaction_id`,`pt`.`transaction_code` AS `transaction_code`,extract(year_month from `pct`.`payroll_date`) AS `reference_no`,`pct`.`payroll_date` AS `payroll_date`,year(`pct`.`payroll_date`) AS `year`,month(`pct`.`payroll_date`) AS `month`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,round(sum(aes_decrypt(`pct`.`amount`,`encryption_key`())),2) AS `amount`,'PRELIMINARY' AS `record_reference`,`c`.`address` AS `address`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from (((((((((`ww_payroll_current_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `pct`.`employee_id`))) left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `wpp`.`company_id`))) where ((`pct`.`deleted` = 0) and (`pt`.`deleted` = 0) and ((`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) or (`pt`.`transaction_code` in ('SSS_EMP','PHIC_EMP','HDMF_EMP')))) group by `pct`.`employee_id`,`pt`.`transaction_label` union select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`pt`.`transaction_label` AS `transaction_label`,`pt`.`transaction_id` AS `transaction_id`,`pt`.`transaction_code` AS `transaction_code`,extract(year_month from `pct`.`payroll_date`) AS `reference_no`,`pct`.`payroll_date` AS `payroll_date`,year(`pct`.`payroll_date`) AS `year`,month(`pct`.`payroll_date`) AS `month`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,round(sum(aes_decrypt(`pct`.`amount`,`encryption_key`())),2) AS `amount`,'HISTORICAL' AS `record_reference`,`c`.`address` AS `address`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from (((((((((`ww_payroll_closed_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `pct`.`employee_id`))) left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `wpp`.`company_id`))) where ((`pct`.`deleted` = 0) and (`pt`.`deleted` = 0) and ((`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) or (`pt`.`transaction_code` in ('SSS_EMP','PHIC_EMP','HDMF_EMP')))) group by `pct`.`employee_id`,`pt`.`transaction_label` */;

/*View structure for view payroll_deduction */

/*!50001 DROP TABLE IF EXISTS `payroll_deduction` */;
/*!50001 DROP VIEW IF EXISTS `payroll_deduction` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_deduction` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`c`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`uproj`.`project_id` AS `project_id`,`uproj`.`project` AS `project`,`uproj`.`project_code` AS `project_code`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pt`.`transaction_label` AS `transaction_label`,`pt`.`transaction_id` AS `transaction_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,extract(year_month from `pct`.`payroll_date`) AS `reference_no`,`pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,(case when (`pct`.`record_from` = 'employee_loan') then `get_loan_started`(`pct`.`record_id`) else '' end) AS `start_date`,aes_decrypt(`pct`.`amount`,`encryption_key`()) AS `amount`,'PRELIMINARY' AS `record_reference`,`c`.`address` AS `address`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from (((((((((((`ww_payroll_current_transaction` `pct` left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) left join `ww_users_project` `uproj` on((`uproj`.`project_id` = `up`.`project_id`))) left join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) left join `ww_users_branch` `b` on((`up`.`branch_id` = `b`.`branch_id`))) left join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) left join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `pct`.`employee_id`))) left join `ww_payroll_rate_type` `prt` on((`prt`.`payroll_rate_type_id` = `wpp`.`payroll_rate_type_id`))) left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `wpp`.`company_id`))) where ((`pct`.`deleted` = 0) and (`pt`.`deleted` = 0) and (`pt`.`transaction_type_id` = 3) and (`pt`.`transaction_code` <> 'WHTAX')) union select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`c`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`uproj`.`project_id` AS `project_id`,`uproj`.`project` AS `project`,`uproj`.`project_code` AS `project_code`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pt`.`transaction_label` AS `transaction_label`,`pt`.`transaction_id` AS `transaction_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,extract(year_month from `pct`.`payroll_date`) AS `reference_no`,`pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,(case when (`pct`.`record_from` = 'employee_loan') then `get_loan_started`(`pct`.`record_id`) else '' end) AS `start_date`,aes_decrypt(`pct`.`amount`,`encryption_key`()) AS `amount`,'HISTORICAL' AS `record_reference`,`c`.`address` AS `address`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from (((((((((((`ww_payroll_closed_transaction` `pct` left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) left join `ww_users_project` `uproj` on((`uproj`.`project_id` = `up`.`project_id`))) left join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) left join `ww_users_branch` `b` on((`up`.`branch_id` = `b`.`branch_id`))) left join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) left join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_rate_type` `prt` on((`prt`.`payroll_rate_type_id` = `wpp`.`payroll_rate_type_id`))) left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `wpp`.`company_id`))) where ((`pct`.`deleted` = 0) and (`pt`.`deleted` = 0) and (`pt`.`transaction_type_id` = 3) and (`pt`.`transaction_code` <> 'WHTAX')) */;

/*View structure for view payroll_deduction_schedule_dtl */

/*!50001 DROP TABLE IF EXISTS `payroll_deduction_schedule_dtl` */;
/*!50001 DROP VIEW IF EXISTS `payroll_deduction_schedule_dtl` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_deduction_schedule_dtl` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pt`.`transaction_label` AS `transaction_label`,`pt`.`transaction_id` AS `transaction_id`,extract(year_month from `pct`.`payroll_date`) AS `reference_no`,`pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,aes_decrypt(`pct`.`amount`,`encryption_key`()) AS `amount`,'PRELIMINARY' AS `record_reference`,`c`.`address` AS `address` from (((((((((`ww_payroll_current_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `pct`.`employee_id`))) left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `wpp`.`company_id`))) where ((`pct`.`deleted` = 0) and (`pt`.`deleted` = 0) and (`pt`.`transaction_type_id` = 3) and (`pt`.`transaction_code` <> 'WHTAX') and (`pt`.`transaction_code` <> 'PagIbigAdd')) union select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pt`.`transaction_label` AS `transaction_label`,`pt`.`transaction_id` AS `transaction_id`,extract(year_month from `pct`.`payroll_date`) AS `reference_no`,`pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,aes_decrypt(`pct`.`amount`,`encryption_key`()) AS `amount`,'HISTORICAL' AS `record_reference`,`c`.`address` AS `address` from (((((((((`ww_payroll_closed_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `pct`.`employee_id`))) left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `wpp`.`company_id`))) where ((`pct`.`deleted` = 0) and (`pt`.`deleted` = 0) and (`pt`.`transaction_type_id` = 3) and (`pt`.`transaction_code` <> 'WHTAX') and (`pt`.`transaction_code` <> 'PagIbigAdd')) */;

/*View structure for view payroll_exit_clearance_report */

/*!50001 DROP TABLE IF EXISTS `payroll_exit_clearance_report` */;
/*!50001 DROP VIEW IF EXISTS `payroll_exit_clearance_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_exit_clearance_report` AS select `u`.`user_id` AS `user_id`,`u`.`full_name` AS `full_name`,`par`.`id_number` AS `id_number`,`pct`.`payroll_date` AS `payroll_date`,year(`pct`.`payroll_date`) AS `year`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,`pct`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`uproj`.`project_id` AS `project_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`po`.`position` AS `position`,`par`.`effectivity_date` AS `effectivity_date`,`par`.`regularization_date` AS `regularization_date`,`par`.`resigned_date` AS `resigned_date`,'' AS `remarks`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `basic`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `misc`,sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `ot`,sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `nd`,sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `holiday`,sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_earnings`,(((((sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `gross`,sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_ee`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_er`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_ec`,sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_ee`,sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_er`,sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_ee`,sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_er`,sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `tax`,sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `loan`,round(sum(((case when (`pt`.`transaction_type_id` in (2,6,7)) then 1 when ((`pt`.`transaction_type_id` = 6) and (`ptc`.`transaction_class_code` <> 'BONUS_TAXABLE')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `other_nontax`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `employee_ledger`,sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_deduction`,((((((sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `deduction`,sum(((case when (`pt`.`transaction_code` = 'NETPAY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `net_amount` from ((((((((((`ww_payroll_current_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_type` `ptt` on((`ptt`.`transaction_type_id` = `pt`.`transaction_type_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_period` `pp` on((`pct`.`period_id` = `pp`.`payroll_period_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_partners` `par` on((`pct`.`employee_id` = `par`.`user_id`))) left join `ww_users_position` `po` on((`pct`.`position_id` = `po`.`position_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) group by `pct`.`employee_id`,`pct`.`payroll_date` order by `pct`.`project_id` */;

/*View structure for view payroll_journal_voucher */

/*!50001 DROP TABLE IF EXISTS `payroll_journal_voucher` */;
/*!50001 DROP VIEW IF EXISTS `payroll_journal_voucher` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_journal_voucher` AS select if((`t`.`credit_account_id` > 0),`pb`.`description`,`pa`.`description`) AS `description`,if((`t`.`credit_account_id` > 0),`pb`.`account_name`,`pa`.`account_name`) AS `account_name`,if((`t`.`credit_account_id` > 0),`pb`.`account_code`,`pa`.`account_code`) AS `account_code`,if((`t`.`credit_account_id` > 0),sum(aes_decrypt(`pct`.`amount`,`encryption_key`())),'') AS `credit`,if((`t`.`debit_account_id` > 0),sum((case when (`pct`.`transaction_type_id` in (3,4,5)) then (-(1) * aes_decrypt(`pct`.`amount`,`encryption_key`())) else aes_decrypt(`pct`.`amount`,`encryption_key`()) end)),'') AS `debit`,`uc`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`u`.`department_id` AS `department_id`,`d`.`department` AS `department`,`pct`.`payroll_date` AS `payroll_date`,`p`.`date_from` AS `date_from`,`p`.`date_to` AS `date_to`,`uc`.`address` AS `address`,ifnull(`pa`.`arrangement`,`pb`.`arrangement`) AS `arrangement` from (((((((((`ww_payroll_current_transaction` `pct` join `ww_users_profile` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_department` `d` on((`u`.`department_id` = `d`.`department_id`))) join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) left join `ww_payroll_transaction` `t` on((`pct`.`transaction_id` = `t`.`transaction_id`))) left join `ww_payroll_transaction_class` `c` on((`t`.`transaction_class_id` = `c`.`transaction_class_id`))) left join `ww_payroll_period` `p` on((`pct`.`period_id` = `p`.`payroll_period_id`))) left join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_account` `pb` on((`t`.`credit_account_id` = `pb`.`account_id`))) left join `ww_payroll_account` `pa` on((`t`.`debit_account_id` = `pa`.`account_id`))) where ((`pct`.`deleted` = 0) and ((`t`.`credit_account_id` > 0) or (`t`.`debit_account_id` > 0)) and (`pct`.`on_hold` = 0)) group by `u`.`company_id`,`pct`.`payroll_date`,if((`t`.`credit_account_id` > 0),`pb`.`account_name`,`pa`.`account_name`) union select if((`t`.`credit_account_id` > 0),`pb`.`description`,`pa`.`description`) AS `description`,if((`t`.`credit_account_id` > 0),`pb`.`account_name`,`pa`.`account_name`) AS `account_name`,if((`t`.`credit_account_id` > 0),`pb`.`account_code`,`pa`.`account_code`) AS `account_code`,if((`t`.`credit_account_id` > 0),sum(aes_decrypt(`pct`.`amount`,`encryption_key`())),'') AS `credit`,if((`t`.`debit_account_id` > 0),sum((case when (`pct`.`transaction_type_id` in (3,4,5)) then (-(1) * aes_decrypt(`pct`.`amount`,`encryption_key`())) else aes_decrypt(`pct`.`amount`,`encryption_key`()) end)),'') AS `debit`,`uc`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`u`.`department_id` AS `department_id`,`d`.`department` AS `department`,`pct`.`payroll_date` AS `payroll_date`,`p`.`date_from` AS `date_from`,`p`.`date_to` AS `date_to`,`uc`.`address` AS `address`,ifnull(`pa`.`arrangement`,`pb`.`arrangement`) AS `arrangement` from (((((((((`ww_payroll_closed_transaction` `pct` join `ww_users_profile` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_department` `d` on((`u`.`department_id` = `d`.`department_id`))) join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) left join `ww_payroll_transaction` `t` on((`pct`.`transaction_id` = `t`.`transaction_id`))) left join `ww_payroll_transaction_class` `c` on((`t`.`transaction_class_id` = `c`.`transaction_class_id`))) left join `ww_payroll_period` `p` on((`pct`.`period_id` = `p`.`payroll_period_id`))) left join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_account` `pb` on((`t`.`credit_account_id` = `pb`.`account_id`))) left join `ww_payroll_account` `pa` on((`t`.`debit_account_id` = `pa`.`account_id`))) where ((`pct`.`deleted` = 0) and ((`t`.`credit_account_id` > 0) or (`t`.`debit_account_id` > 0)) and (`pct`.`on_hold` = 0)) group by `u`.`company_id`,`pct`.`payroll_date`,if((`t`.`credit_account_id` > 0),`pb`.`account_name`,`pa`.`account_name`) */;

/*View structure for view payroll_journal_voucher_extended */

/*!50001 DROP TABLE IF EXISTS `payroll_journal_voucher_extended` */;
/*!50001 DROP VIEW IF EXISTS `payroll_journal_voucher_extended` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`emplopad`@`%` SQL SECURITY DEFINER VIEW `payroll_journal_voucher_extended` AS select `pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,`uc`.`company` AS `company`,`uc`.`address` AS `address`,`pct`.`branch_id` AS `branch_id`,if((ifnull(`pas`.`category_value`,'') = ''),`ub`.`branch_code`,`pas`.`category_value`) AS `branch`,if((ifnull(`pas`.`account_code`,'') = ''),convert(`pa`.`account_code` using utf8),`pas`.`account_code`) AS `account`,if((ifnull(`pas`.`account_code`,'') = ''),convert(`pa`.`account_name` using utf8),`pas`.`account_sub`) AS `description`,if((ifnull(`pas`.`account_code`,'') = ''),if((`pa`.`department_breakdown` = 0),'000-000-000',`ud`.`department_code`),`pas`.`account_sub_code`) AS `sub_account`,'' AS `project`,'' AS `project_task`,'' AS `ref_number`,1 AS `quantity`,'' AS `uom`,sum(if((if((`pa`.`department_breakdown` = 0),1,((`pct`.`department_id` = `ud`.`department_id`) and (`pa`.`department_breakdown` = `ud`.`category_id`))) and find_in_set(`pa`.`account_id`,`pt`.`debit_account`)),(if(((`pt`.`transaction_type_id` = 5) and (`ptc`.`government_mandated` = 0)),-(1),1) * aes_decrypt(`pct`.`amount`,`encryption_key`())),0)) AS `debit_amount`,sum(if((if((`pa`.`department_breakdown` = 0),1,((`pct`.`department_id` = `ud`.`department_id`) and (`ud`.`category_id` = `pa`.`department_breakdown`))) and find_in_set(`pa`.`account_id`,`pt`.`credit_account`)),aes_decrypt(`pct`.`amount`,`encryption_key`()),0)) AS `credit_amount`,`pp`.`remarks` AS `transaction_description`,'FALSE' AS `non_billable` from ((((((((((`ww_payroll_closed_transaction` `pct` join `ww_payroll_account` `pa`) left join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_users_company` `uc` on((`uc`.`company_id` = `pct`.`company_id`))) left join `ww_users_branch` `ub` on((`ub`.`branch_id` = `pct`.`branch_id`))) left join `ww_users_department` `ud` on((`ud`.`department_id` = `pct`.`department_id`))) left join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`ptc`.`transaction_class_id` = `pt`.`transaction_class_id`))) left join `ww_payroll_account_type` `pat` on((`pat`.`account_type_id` = `pa`.`account_type_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_payroll_account_sub` `pas` on(((`pas`.`deleted` = 0) and (`pas`.`account_id` = `pa`.`account_id`) and (`pas`.`category_val_id` = `ub`.`branch_id`) and if((`pas`.`sub_category_id` = 0),1,(`pas`.`sub_category_id` = `ud`.`department_id`))))) where (`pa`.`deleted` = 0) group by `pct`.`payroll_date`,`pct`.`branch_id`,`pa`.`account_code`,if((`pa`.`department_breakdown` = 0),1,`ud`.`department_id`) having (((`debit_amount` = 0) and (`credit_amount` = 0)) = 0) order by `pct`.`payroll_date`,`pct`.`branch_id`,`pa`.`account_code`,`ud`.`department_code` */;

/*View structure for view payroll_manpower_charging */

/*!50001 DROP TABLE IF EXISTS `payroll_manpower_charging` */;
/*!50001 DROP VIEW IF EXISTS `payroll_manpower_charging` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_manpower_charging` AS select `trs`.`date` AS `date`,`trs`.`user_id` AS `employee`,`p`.`id_number` AS `id_number`,`p`.`classification_id` AS `classification_id`,`p`.`classification` AS `classification`,`u`.`full_name` AS `full_name`,`up`.`company` AS `company`,`up`.`company_id` AS `company_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`trs`.`project_id` AS `project_id`,`pp`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,`trs`.`payroll_date` AS `payroll_date`,`tp`.`date_to` AS `date_to`,`tp`.`date_from` AS `date_from`,count(`trs`.`project_id`) AS `num_days`,((to_days(`tp`.`date_to`) - to_days(`tp`.`date_from`)) + 1) AS `num_days_cutoff`,((count(`trs`.`project_id`) / ((to_days(`tp`.`date_to`) - to_days(`tp`.`date_from`)) + 1)) * 100) AS `percent` from (((((((`ww_time_record_summary` `trs` left join `ww_users` `u` on((`u`.`user_id` = `trs`.`user_id`))) left join `ww_users_profile` `up` on((`up`.`user_id` = `trs`.`user_id`))) left join `ww_partners` `p` on((`p`.`user_id` = `trs`.`user_id`))) left join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `trs`.`user_id`))) left join `ww_payroll_rate_type` `prt` on((`prt`.`payroll_rate_type_id` = `pp`.`payroll_rate_type_id`))) left join `ww_users_project` `uproj` on((`uproj`.`project_id` = `trs`.`project_id`))) left join `ww_time_period` `tp` on(((`tp`.`payroll_date` = `trs`.`payroll_date`) and (`tp`.`company_id` = `u`.`company_id`)))) group by `trs`.`user_id`,`trs`.`project_id` order by `trs`.`project_id` */;

/*View structure for view payroll_manpower_charging_detail */

/*!50001 DROP TABLE IF EXISTS `payroll_manpower_charging_detail` */;
/*!50001 DROP VIEW IF EXISTS `payroll_manpower_charging_detail` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_manpower_charging_detail` AS select `proj`.`project_code` AS `project_code`,`proj`.`project` AS `project`,`proj`.`project_id` AS `project_id`,`pmc`.`employee` AS `employee`,`pmc`.`date` AS `date`,`pmc`.`id_number` AS `id_number`,`pmc`.`classification_id` AS `classification_id`,`pmc`.`full_name` AS `full_name`,`pmc`.`company` AS `company`,`pmc`.`company_id` AS `company_id`,`pmc`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`pmc`.`payroll_rate_type` AS `payroll_rate_type`,`pmc`.`payroll_date` AS `payroll_date`,`pmc`.`date_to` AS `date_to`,`pmc`.`date_from` AS `date_from`,ifnull(sum(((case when (`pmc`.`project_code` = 'P14007') then 1 else 0 end) * `pmc`.`percent`)),'') AS `P14007`,ifnull(sum(((case when (`pmc`.`project_code` = 'P15024') then 1 else 0 end) * `pmc`.`percent`)),'') AS `P15024`,ifnull(sum(((case when (`pmc`.`project_code` = 'P16000') then 1 else 0 end) * `pmc`.`percent`)),'') AS `P16000`,ifnull(sum(((case when (`pmc`.`project_code` = 'P16003') then 1 else 0 end) * `pmc`.`percent`)),'') AS `P16003`,ifnull(sum(((case when (`pmc`.`project_code` = 'P16004') then 1 else 0 end) * `pmc`.`percent`)),'') AS `P16004`,ifnull(sum(((case when (`pmc`.`project_code` = 'P16010') then 1 else 0 end) * `pmc`.`percent`)),'') AS `P16010`,ifnull(sum(((case when (`pmc`.`project_code` = 'P16014') then 1 else 0 end) * `pmc`.`percent`)),'') AS `P16014`,ifnull(sum(((case when (`pmc`.`project_code` = 'P16015') then 1 else 0 end) * `pmc`.`percent`)),'') AS `P16015`,ifnull(sum(((case when (`pmc`.`project_code` = 'P16016') then 1 else 0 end) * `pmc`.`percent`)),'') AS `P16016` from ((`payroll_manpower_charging` `pmc` join `ww_users_profile` `up` on((`up`.`user_id` = `pmc`.`employee`))) left join `ww_users_project` `proj` on((`proj`.`project_id` = `up`.`project_id`))) group by `pmc`.`employee` order by `proj`.`project_code` */;

/*View structure for view payroll_manpower_charging_summary */

/*!50001 DROP TABLE IF EXISTS `payroll_manpower_charging_summary` */;
/*!50001 DROP VIEW IF EXISTS `payroll_manpower_charging_summary` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_manpower_charging_summary` AS select `u`.`user_id` AS `employee`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`po`.`position` AS `position`,`uc`.`company` AS `company`,`uc`.`company_id` AS `company_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`uproj`.`project_id` AS `project_id`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,`pct`.`payroll_date` AS `payroll_date`,ifnull(trim(`pp`.`key_value`),'') AS `cost_center`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 when (`ptc`.`transaction_class_code` in ('ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')) then -(1) when (`pct`.`transaction_code` in ('LWOP','LWOP_ADJ')) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `total_basic`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `misc`,round(sum(((case when (`ptc`.`transaction_class_code` = 'OVERTIME') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `overtime`,0 AS `other_tax`,0 AS `adjustment`,(((((sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `gross`,sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `tax`,sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_ee`,round(sum(((case when (`pt`.`transaction_type_id` in (2,6,7)) then 1 when ((`pt`.`transaction_type_id` = 6) and (`ptc`.`transaction_class_code` <> 'BONUS_TAXABLE')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `other_nontax`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_er`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_ec`,round(sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `hdmf_er`,round(sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `phic_er`,0 AS `meal`,0 AS `transpo`,0 AS `hardship`,sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `loan`,((((((sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `deduction`,sum(((case when (`pt`.`transaction_code` = 'NETPAY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `net_amount`,0 AS `net_orig`,0 AS `percent_allocation` from ((((((((((`ww_payroll_current_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_type` `ptt` on((`ptt`.`transaction_type_id` = `pt`.`transaction_type_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) left join `ww_partners_personal` `pp` on(((`pp`.`deleted` = 0) and (`pp`.`partner_id` = `p`.`partner_id`) and (`pp`.`key` = 'cost_center-cost_center')))) left join `ww_users_position` `po` on((`pct`.`position_id` = `po`.`position_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) where ((`pct`.`deleted` = 0) and (`pct`.`on_hold` = 0) and (`pt`.`deleted` = 0) and (`u`.`deleted` = 0)) group by `pct`.`employee_id`,`pp`.`key_value` union all select `u`.`user_id` AS `employee`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`po`.`position` AS `position`,`uc`.`company` AS `company`,`uc`.`company_id` AS `company_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`uproj`.`project_id` AS `project_id`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,`pct`.`payroll_date` AS `payroll_date`,ifnull(trim(`pp`.`key_value`),'') AS `cost_center`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 when (`ptc`.`transaction_class_code` in ('ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')) then -(1) when (`pct`.`transaction_code` in ('LWOP','LWOP_ADJ')) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `total_basic`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `misc`,round(sum(((case when (`ptc`.`transaction_class_code` = 'OVERTIME') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `overtime`,0 AS `other_tax`,0 AS `adjustment`,(((((sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `gross`,sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `tax`,sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_ee`,round(sum(((case when (`pt`.`transaction_type_id` in (2,6,7)) then 1 when ((`pt`.`transaction_type_id` = 6) and (`ptc`.`transaction_class_code` <> 'BONUS_TAXABLE')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `other_nontax`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_er`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_ec`,round(sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `hdmf_er`,round(sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `phic_er`,0 AS `meal`,0 AS `transpo`,0 AS `hardship`,sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `loan`,((((((sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `deduction`,sum(((case when (`pt`.`transaction_code` = 'NETPAY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `net_amount`,0 AS `net_orig`,0 AS `percent_allocation` from ((((((((((`ww_payroll_closed_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_type` `ptt` on((`ptt`.`transaction_type_id` = `pt`.`transaction_type_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) left join `ww_partners_personal` `pp` on(((`pp`.`deleted` = 0) and (`pp`.`partner_id` = `p`.`partner_id`) and (`pp`.`key` = 'cost_center-cost_center')))) left join `ww_users_position` `po` on((`pct`.`position_id` = `po`.`position_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) where ((`pct`.`deleted` = 0) and (`pt`.`deleted` = 0) and (`u`.`deleted` = 0)) group by `pct`.`employee_id`,`pp`.`key_value` order by `cost_center`,`project_id` */;

/*View structure for view payroll_monthly_deduction */

/*!50001 DROP TABLE IF EXISTS `payroll_monthly_deduction` */;
/*!50001 DROP VIEW IF EXISTS `payroll_monthly_deduction` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_monthly_deduction` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`pt`.`transaction_label` AS `transaction_label`,`pt`.`transaction_id` AS `transaction_id`,`pl`.`loan_id` AS `loan_id`,`pl`.`loan` AS `loan`,extract(year_month from `pct`.`payroll_date`) AS `reference_no`,year(`pct`.`payroll_date`) AS `year`,month(`pct`.`payroll_date`) AS `month`,`pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,aes_decrypt(`pct`.`amount`,`encryption_key`()) AS `amount`,'PRELIMINARY' AS `record_reference`,`c`.`address` AS `address`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from ((((((((((`ww_payroll_current_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `pct`.`employee_id`))) left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_loan` `pl` on((`pct`.`transaction_id` = `pl`.`amortization_transid`))) left join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `wpp`.`company_id`))) where ((`pct`.`deleted` = 0) and (`pt`.`deleted` = 0) and (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST'))) union select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`pt`.`transaction_label` AS `transaction_label`,`pt`.`transaction_id` AS `transaction_id`,`pl`.`loan_id` AS `loan_id`,`pl`.`loan` AS `loan`,extract(year_month from `pct`.`payroll_date`) AS `reference_no`,year(`pct`.`payroll_date`) AS `year`,month(`pct`.`payroll_date`) AS `month`,`pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,aes_decrypt(`pct`.`amount`,`encryption_key`()) AS `amount`,'HISTORICAL' AS `record_reference`,`c`.`address` AS `address`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from ((((((((((`ww_payroll_closed_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `pct`.`employee_id`))) left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_loan` `pl` on((`pct`.`transaction_id` = `pl`.`amortization_transid`))) left join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_users_company` `c` on((`c`.`company_id` = `wpp`.`company_id`))) where ((`pct`.`deleted` = 0) and (`pt`.`deleted` = 0) and (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST'))) */;

/*View structure for view payroll_non_atm_register */

/*!50001 DROP TABLE IF EXISTS `payroll_non_atm_register` */;
/*!50001 DROP VIEW IF EXISTS `payroll_non_atm_register` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_non_atm_register` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`pp`.`bank_account` AS `bank_account`,`pp`.`payout_schedule` AS `payout_schedule`,`pp`.`whole_half` AS `payout_scheme`,`set_2_decimal`(if((`pp`.`whole_half` = 0),aes_decrypt(`pct`.`amount`,`encryption_key`()),(aes_decrypt(`pct`.`amount`,`encryption_key`()) / 2))) AS `amount`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`d`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`transaction_code` AS `transaction_code`,`pct`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,'PRELIMINARY' AS `record_reference`,`c`.`address` AS `address`,'tmp' AS `schedule` from ((((((((`ww_payroll_current_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_partners` `pp` on((`pct`.`employee_id` = `pp`.`user_id`))) join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) left join `ww_users_branch` `b` on((`up`.`branch_id` = `b`.`branch_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) join `ww_users_company` `c` on((`c`.`company_id` = `up`.`company_id`))) where ((`pct`.`deleted` = 0) and (`pct`.`transaction_code` = 'NETPAY') and (`pct`.`on_hold` = 0) and (`pp`.`on_hold` = 0) and (`u`.`active` = 1) and (aes_decrypt(`pct`.`amount`,`encryption_key`()) > 0) and (`pp`.`payment_type_id` > 1)) union select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`pp`.`bank_account` AS `bank_account`,`pp`.`payout_schedule` AS `payout_schedule`,`pp`.`whole_half` AS `payout_scheme`,`set_2_decimal`(if((`pp`.`whole_half` = 0),aes_decrypt(`pct`.`amount`,`encryption_key`()),(aes_decrypt(`pct`.`amount`,`encryption_key`()) / 2))) AS `amount`,`u`.`full_name` AS `full_name`,`c`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`d`.`department` AS `department`,`pct`.`transaction_code` AS `transaction_code`,`pct`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,'HISTORICAL' AS `record_reference`,`c`.`address` AS `address`,'tmp' AS `schedule` from ((((((((`ww_payroll_closed_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_partners` `pp` on((`pct`.`employee_id` = `pp`.`user_id`))) join `ww_users_department` `d` on((`up`.`department_id` = `d`.`department_id`))) left join `ww_users_branch` `b` on((`up`.`branch_id` = `b`.`branch_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) join `ww_users_company` `c` on((`c`.`company_id` = `up`.`company_id`))) where ((`pct`.`deleted` = 0) and (`pct`.`transaction_code` = 'NETPAY') and (`pct`.`on_hold` = 0) and (`pp`.`on_hold` = 0) and (`u`.`active` = 1) and (aes_decrypt(`pct`.`amount`,`encryption_key`()) > 0) and (`pp`.`payment_type_id` > 1)) */;

/*View structure for view payroll_pagibig_loan_to_disk */

/*!50001 DROP TABLE IF EXISTS `payroll_pagibig_loan_to_disk` */;
/*!50001 DROP VIEW IF EXISTS `payroll_pagibig_loan_to_disk` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_pagibig_loan_to_disk` AS (select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`up`.`middlename` AS `middlename`,`up`.`suffix` AS `suffix`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`uc`.`company_id` AS `company_id`,ifnull(`uc`.`hdmf_branch_code`,'00') AS `pagibig_branch_code`,`pp`.`tin` AS `tin`,`uc`.`sss` AS `co_sss`,`uc`.`phic` AS `co_phic`,`uc`.`hdmf` AS `co_hdmf`,`uc`.`address` AS `co_address`,`uc`.`zipcode` AS `zipcode`,`getcompany_contact`(`pp`.`company_id`,'phone') AS `contact_no`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,year(`lp`.`date_paid`) AS `year`,month(`lp`.`date_paid`) AS `month`,`up`.`birth_date` AS `birth_date`,`pp`.`sss_no` AS `sss_no`,`pp`.`phic_no` AS `phic_no`,`pp`.`hdmf_no` AS `hdmf_no`,`plt`.`loan_type` AS `loan_type`,`plt`.`loan_type_id` AS `loan_type_id`,`pl`.`partner_loan_id` AS `partner_loan_id`,`pl`.`description` AS `description`,`lp`.`balance` AS `balance`,aes_decrypt(`pl`.`loan_principal`,`encryption_key`()) AS `loan_principal`,round(sum(aes_decrypt(`lp`.`amount`,`encryption_key`())),2) AS `amount`,concat('DT',rpad(`pp`.`hdmf_no`,12,' '),rpad(`p`.`id_number`,15,' '),(case when (locate('ñ',`up`.`lastname`) <> 'false') then rpad(replace(`up`.`lastname`,' *',''),30,' ') else rpad(replace(`up`.`lastname`,' *',''),30,' ') end),(case when (locate('ñ',`up`.`firstname`) <> 'false') then rpad(`up`.`firstname`,30,' ') else rpad(`up`.`firstname`,30,' ') end),(case when ((`up`.`middlename` <> '') and (`up`.`middlename` is not null)) then rpad(`up`.`middlename`,30,' ') else rpad('',30,' ') end),rpad(round(sum(aes_decrypt(`lp`.`amount`,`encryption_key`())),2),13,' '),rpad('0',13,' '),rpad(ifnull(replace(`pp`.`tin`,'-',''),''),15,' '),rpad(if((`up`.`birth_date` is not null),date_format(`up`.`birth_date`,'%Y%m%d'),''),8,'0')) AS `record`,now() AS `document_date` from ((((((((((`ww_payroll_partners_loan` `pl` left join `ww_payroll_partners_loan_payment` `lp` on((`pl`.`partner_loan_id` = `lp`.`partner_loan_id`))) left join `ww_payroll_partners` `pp` on((`pl`.`user_id` = `pp`.`user_id`))) left join `ww_partners` `p` on((`pl`.`user_id` = `p`.`user_id`))) left join `ww_users` `u` on((`pl`.`user_id` = `u`.`user_id`))) left join `ww_users_profile` `up` on((`pl`.`user_id` = `up`.`user_id`))) left join `ww_users_company` `uc` on((`pp`.`company_id` = `uc`.`company_id`))) left join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) left join `ww_payroll_loan` `pln` on((`pl`.`loan_id` = `pln`.`loan_id`))) left join `ww_payroll_loan_type` `plt` on((`pln`.`loan_type_id` = `plt`.`loan_type_id`))) where ((`plt`.`loan_type` like '%Pag-Ibig%') and (`lp`.`paid` = 1)) group by `u`.`user_id`,`p`.`id_number`,`up`.`lastname`,`up`.`firstname`,`up`.`middlename`,`up`.`suffix`,`u`.`full_name`,`uc`.`company`,`pp`.`company_id`,`uc`.`tin`,`uc`.`sss`,`uc`.`phic`,`uc`.`hdmf`,`uc`.`address`,`uc`.`zipcode`,`getcompany_contact`(`pp`.`company_id`,'phone'),`ud`.`department_id`,`ud`.`department`,year(`lp`.`date_paid`),month(`lp`.`date_paid`),`up`.`birth_date`,`pp`.`sss_no`,`pp`.`phic_no`,`pp`.`hdmf_no`,`plt`.`loan_type`,`plt`.`loan_type_id`,`pl`.`partner_loan_id`,`pl`.`description`) */;

/*View structure for view payroll_pagibig_to_disk */

/*!50001 DROP TABLE IF EXISTS `payroll_pagibig_to_disk` */;
/*!50001 DROP VIEW IF EXISTS `payroll_pagibig_to_disk` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_pagibig_to_disk` AS select `payroll_partners_contribution_hdmf`.`user_id` AS `user_id`,`payroll_partners_contribution_hdmf`.`id_number` AS `id_number`,`payroll_partners_contribution_hdmf`.`title` AS `title`,`payroll_partners_contribution_hdmf`.`lastname` AS `lastname`,`payroll_partners_contribution_hdmf`.`firstname` AS `firstname`,`payroll_partners_contribution_hdmf`.`middlename` AS `middlename`,`payroll_partners_contribution_hdmf`.`suffix` AS `suffix`,`payroll_partners_contribution_hdmf`.`full_name` AS `full_name`,`payroll_partners_contribution_hdmf`.`company` AS `company`,`payroll_partners_contribution_hdmf`.`company_id` AS `company_id`,`payroll_partners_contribution_hdmf`.`pagibig_branch_code` AS `bcode`,`payroll_partners_contribution_hdmf`.`pagibig_branch_code` AS `pagibig_branch_code`,`payroll_partners_contribution_hdmf`.`co_hdmf` AS `co_hdmf`,`payroll_partners_contribution_hdmf`.`co_address` AS `co_address`,`payroll_partners_contribution_hdmf`.`zipcode` AS `zipcode`,`payroll_partners_contribution_hdmf`.`contact_no` AS `contact_no`,`payroll_partners_contribution_hdmf`.`department_id` AS `department_id`,`payroll_partners_contribution_hdmf`.`department` AS `department`,`payroll_partners_contribution_hdmf`.`branch_id` AS `branch_id`,`payroll_partners_contribution_hdmf`.`branch` AS `branch`,`payroll_partners_contribution_hdmf`.`year` AS `year`,`payroll_partners_contribution_hdmf`.`month` AS `month`,`payroll_partners_contribution_hdmf`.`payroll_date` AS `payroll_date`,`payroll_partners_contribution_hdmf`.`birth_date` AS `birth_date`,`payroll_partners_contribution_hdmf`.`hdmf_no` AS `hdmf_no`,`payroll_partners_contribution_hdmf`.`hired_date` AS `hired_date`,`payroll_partners_contribution_hdmf`.`resigned_date` AS `resigned_date`,`payroll_partners_contribution_hdmf`.`sbr_no_hdmf` AS `sbr_no_hdmf`,`payroll_partners_contribution_hdmf`.`sbr_date_hdmf` AS `sbr_date_hdmf`,`payroll_partners_contribution_hdmf`.`govt_status` AS `govt_status`,`payroll_partners_contribution_hdmf`.`hdmf_emp` AS `hdmf_emp`,`payroll_partners_contribution_hdmf`.`hdmf_com` AS `hdmf_com`,`payroll_partners_contribution_hdmf`.`PagIbigAdd` AS `PagIbigAdd`,`payroll_partners_contribution_hdmf`.`record` AS `record`,now() AS `document_date` from `payroll_partners_contribution_hdmf` */;

/*View structure for view payroll_partners */

/*!50001 DROP TABLE IF EXISTS `payroll_partners` */;
/*!50001 DROP VIEW IF EXISTS `payroll_partners` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_partners` AS (select `ww_payroll_partners`.`user_id` AS `user_id`,`ww_payroll_partners`.`company_id` AS `company_id`,`ww_payroll_partners`.`taxcode_id` AS `taxcode_id`,`ww_payroll_partners`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`ww_payroll_partners`.`payroll_schedule_id` AS `payroll_schedule_id`,`ww_payroll_partners`.`total_year_days` AS `total_year_days`,`ww_payroll_partners`.`salary` AS `salary`,`ww_payroll_partners`.`minimum_takehome` AS `minimum_takehome`,`ww_payroll_partners`.`bank_account` AS `bank_account`,`ww_payroll_partners`.`quitclaim` AS `quitclaim`,`ww_payroll_partners`.`location_id` AS `location_id`,`ww_payroll_partners`.`sss_no` AS `sss_no`,`ww_payroll_partners`.`sss_mode` AS `sss_mode`,`ww_payroll_partners`.`sss_week` AS `sss_week`,`ww_payroll_partners`.`sss_amount` AS `sss_amount`,`ww_payroll_partners`.`hdmf_no` AS `hdmf_no`,`ww_payroll_partners`.`hdmf_mode` AS `hdmf_mode`,`ww_payroll_partners`.`hdmf_week` AS `hdmf_week`,`ww_payroll_partners`.`hdmf_amount` AS `hdmf_amount`,`ww_payroll_partners`.`phic_no` AS `phic_no`,`ww_payroll_partners`.`phic_mode` AS `phic_mode`,`ww_payroll_partners`.`phic_week` AS `phic_week`,`ww_payroll_partners`.`phic_amount` AS `phic_amount`,`ww_payroll_partners`.`ecola_week` AS `ecola_week`,`ww_payroll_partners`.`tin` AS `tin`,`ww_payroll_partners`.`tax_mode` AS `tax_mode`,`ww_payroll_partners`.`tax_week` AS `tax_week`,`ww_payroll_partners`.`payment_type_id` AS `payment_type_id`,`ww_payroll_partners`.`fixed_rate` AS `fixed_rate`,`ww_payroll_partners`.`sensitivity` AS `sensitivity`,`ww_payroll_partners`.`created_by` AS `created_by`,`ww_payroll_partners`.`created_on` AS `created_on`,`ww_payroll_partners`.`modified_by` AS `modified_by`,`ww_payroll_partners`.`modified_on` AS `modified_on`,`ww_payroll_partners`.`remain` AS `remain`,`ww_payroll_partners`.`deleted` AS `deleted` from `ww_payroll_partners` where (`ww_payroll_partners`.`deleted` = 0)) */;

/*View structure for view payroll_partners_contribution */

/*!50001 DROP TABLE IF EXISTS `payroll_partners_contribution` */;
/*!50001 DROP VIEW IF EXISTS `payroll_partners_contribution` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_partners_contribution` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`up`.`title` AS `title`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`up`.`middlename` AS `middlename`,`up`.`suffix` AS `suffix`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`uc`.`tin` AS `tin`,`uc`.`sss` AS `co_sss`,`uc`.`phic` AS `co_phic`,`uc`.`hdmf` AS `co_hdmf`,`uc`.`address` AS `co_address`,`uc`.`zipcode` AS `zipcode`,`uc`.`company_code` AS `company_code`,`getcompany_contact`(`pp`.`company_id`,'phone') AS `contact_no`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,year(`pct`.`payroll_date`) AS `year`,month(`pct`.`payroll_date`) AS `month`,`pct`.`payroll_date` AS `payroll_date`,`up`.`birth_date` AS `birth_date`,`pp`.`sss_no` AS `sss_no`,`pp`.`phic_no` AS `phic_no`,`pp`.`hdmf_no` AS `hdmf_no`,`p`.`effectivity_date` AS `hired_date`,`p`.`resigned_date` AS `resigned_date`,`get_sbr_no`(`pct`.`employee_id`,`pct`.`payroll_date`,'HDMF_EMP') AS `sbr_no_hdmf`,`get_sbr_no`(`pct`.`employee_id`,`pct`.`payroll_date`,'PHIC_EMP') AS `sbr_no_phic`,`get_sbr_no`(`pct`.`employee_id`,`pct`.`payroll_date`,'SSS_EMP') AS `sbr_no_sss`,`get_sbr_date`(`pct`.`employee_id`,`pct`.`payroll_date`,'HDMF_EMP') AS `sbr_date_hdmf`,`get_sbr_date`(`pct`.`employee_id`,`pct`.`payroll_date`,'PHIC_EMP') AS `sbr_date_phic`,`get_sbr_date`(`pct`.`employee_id`,`pct`.`payroll_date`,'SSS_EMP') AS `sbr_date_sss`,(case when ((year(`p`.`effectivity_date`) = year(`pct`.`payroll_date`)) and (month(`p`.`effectivity_date`) = month(`pct`.`payroll_date`))) then '1' when ((year(`p`.`resigned_date`) = year(`pct`.`payroll_date`)) and (month(`p`.`resigned_date`) = month(`pct`.`payroll_date`))) then '2' else 'N' end) AS `govt_status`,sum(((case when (`pct`.`transaction_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_emp`,sum(((case when (`pct`.`transaction_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_com`,sum(((case when (`pct`.`transaction_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_ecc`,(sum(((case when (`pct`.`transaction_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pct`.`transaction_code` = 'PagIbigAdd') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `hdmf_emp`,sum(((case when (`pct`.`transaction_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_com`,sum(((case when (`pct`.`transaction_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_emp`,sum(((case when (`pct`.`transaction_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_com` from (((((((`ww_payroll_closed_transaction` `pct` join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `pct`.`employee_id`))) join `ww_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`pct`.`employee_id` = `up`.`user_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) where ((`pct`.`transaction_code` in ('SSS_EMP','SSS_COM','SSS_ECC','HDMF_EMP','HDMF_COM','PHIC_EMP','PHIC_COM','PagIbigAdd')) and (`pct`.`deleted` = 0) and (`pct`.`on_hold` = 0)) group by `u`.`user_id`,`p`.`id_number`,`u`.`full_name`,`up`.`company`,`up`.`company_id`,`uc`.`sss`,`uc`.`phic`,`uc`.`hdmf`,`uc`.`address`,`ud`.`department_id`,`ud`.`department`,year(`pct`.`payroll_date`),month(`pct`.`payroll_date`),`up`.`birth_date`,`pp`.`sss_no`,`pp`.`phic_no`,`pp`.`hdmf_no` */;

/*View structure for view payroll_partners_contribution_current_and_closed */

/*!50001 DROP TABLE IF EXISTS `payroll_partners_contribution_current_and_closed` */;
/*!50001 DROP VIEW IF EXISTS `payroll_partners_contribution_current_and_closed` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_partners_contribution_current_and_closed` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`up`.`title` AS `title`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`up`.`middlename` AS `middlename`,`up`.`suffix` AS `suffix`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`uc`.`tin` AS `tin`,`uc`.`sss` AS `co_sss`,`uc`.`phic` AS `co_phic`,`uc`.`hdmf` AS `co_hdmf`,`uc`.`address` AS `co_address`,`uc`.`zipcode` AS `zipcode`,`uc`.`company_code` AS `company_code`,`getcompany_contact`(`pp`.`company_id`,'phone') AS `contact_no`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,year(`pct`.`payroll_date`) AS `year`,month(`pct`.`payroll_date`) AS `month`,`pct`.`payroll_date` AS `payroll_date`,`up`.`birth_date` AS `birth_date`,`pp`.`sss_no` AS `sss_no`,`pp`.`phic_no` AS `phic_no`,`pp`.`hdmf_no` AS `hdmf_no`,`p`.`effectivity_date` AS `hired_date`,`p`.`resigned_date` AS `resigned_date`,`get_sbr_no`(`pct`.`employee_id`,`pct`.`payroll_date`,'HDMF_EMP') AS `sbr_no_hdmf`,`get_sbr_no`(`pct`.`employee_id`,`pct`.`payroll_date`,'PHIC_EMP') AS `sbr_no_phic`,`get_sbr_no`(`pct`.`employee_id`,`pct`.`payroll_date`,'SSS_EMP') AS `sbr_no_sss`,`get_sbr_date`(`pct`.`employee_id`,`pct`.`payroll_date`,'HDMF_EMP') AS `sbr_date_hdmf`,`get_sbr_date`(`pct`.`employee_id`,`pct`.`payroll_date`,'PHIC_EMP') AS `sbr_date_phic`,`get_sbr_date`(`pct`.`employee_id`,`pct`.`payroll_date`,'SSS_EMP') AS `sbr_date_sss`,(case when ((year(`p`.`effectivity_date`) = year(`pct`.`payroll_date`)) and (month(`p`.`effectivity_date`) = month(`pct`.`payroll_date`))) then '1' when ((year(`p`.`resigned_date`) = year(`pct`.`payroll_date`)) and (month(`p`.`resigned_date`) = month(`pct`.`payroll_date`))) then '2' else 'N' end) AS `govt_status`,sum(((case when (`pct`.`transaction_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_emp`,sum(((case when (`pct`.`transaction_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_com`,sum(((case when (`pct`.`transaction_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_ecc`,(sum(((case when (`pct`.`transaction_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pct`.`transaction_code` = 'PagIbigAdd') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `hdmf_emp`,sum(((case when (`pct`.`transaction_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_com`,sum(((case when (`pct`.`transaction_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_emp`,sum(((case when (`pct`.`transaction_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_com` from (((((((`ww_payroll_current_transaction` `pct` join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `pct`.`employee_id`))) join `ww_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`pct`.`employee_id` = `up`.`user_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) where ((`pct`.`transaction_code` in ('SSS_EMP','SSS_COM','SSS_ECC','HDMF_EMP','HDMF_COM','PHIC_EMP','PHIC_COM','PagIbigAdd')) and (`pct`.`deleted` = 0) and (`pct`.`on_hold` = 0)) group by `u`.`user_id`,`p`.`id_number`,`u`.`full_name`,`up`.`company`,`up`.`company_id`,`uc`.`sss`,`uc`.`phic`,`uc`.`hdmf`,`uc`.`address`,`ud`.`department_id`,`ud`.`department`,year(`pct`.`payroll_date`),month(`pct`.`payroll_date`),`up`.`birth_date`,`pp`.`sss_no`,`pp`.`phic_no`,`pp`.`hdmf_no` union select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`up`.`title` AS `title`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`up`.`middlename` AS `middlename`,`up`.`suffix` AS `suffix`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`uc`.`tin` AS `tin`,`uc`.`sss` AS `co_sss`,`uc`.`phic` AS `co_phic`,`uc`.`hdmf` AS `co_hdmf`,`uc`.`address` AS `co_address`,`uc`.`zipcode` AS `zipcode`,`uc`.`company_code` AS `company_code`,`getcompany_contact`(`pp`.`company_id`,'phone') AS `contact_no`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,year(`pct`.`payroll_date`) AS `year`,month(`pct`.`payroll_date`) AS `month`,`pct`.`payroll_date` AS `payroll_date`,`up`.`birth_date` AS `birth_date`,`pp`.`sss_no` AS `sss_no`,`pp`.`phic_no` AS `phic_no`,`pp`.`hdmf_no` AS `hdmf_no`,`p`.`effectivity_date` AS `hired_date`,`p`.`resigned_date` AS `resigned_date`,`get_sbr_no`(`pct`.`employee_id`,`pct`.`payroll_date`,'HDMF_EMP') AS `sbr_no_hdmf`,`get_sbr_no`(`pct`.`employee_id`,`pct`.`payroll_date`,'PHIC_EMP') AS `sbr_no_phic`,`get_sbr_no`(`pct`.`employee_id`,`pct`.`payroll_date`,'SSS_EMP') AS `sbr_no_sss`,`get_sbr_date`(`pct`.`employee_id`,`pct`.`payroll_date`,'HDMF_EMP') AS `sbr_date_hdmf`,`get_sbr_date`(`pct`.`employee_id`,`pct`.`payroll_date`,'PHIC_EMP') AS `sbr_date_phic`,`get_sbr_date`(`pct`.`employee_id`,`pct`.`payroll_date`,'SSS_EMP') AS `sbr_date_sss`,(case when ((year(`p`.`effectivity_date`) = year(`pct`.`payroll_date`)) and (month(`p`.`effectivity_date`) = month(`pct`.`payroll_date`))) then '1' when ((year(`p`.`resigned_date`) = year(`pct`.`payroll_date`)) and (month(`p`.`resigned_date`) = month(`pct`.`payroll_date`))) then '2' else 'N' end) AS `govt_status`,sum(((case when (`pct`.`transaction_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_emp`,sum(((case when (`pct`.`transaction_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_com`,sum(((case when (`pct`.`transaction_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_ecc`,(sum(((case when (`pct`.`transaction_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pct`.`transaction_code` = 'PagIbigAdd') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `hdmf_emp`,sum(((case when (`pct`.`transaction_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_com`,sum(((case when (`pct`.`transaction_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_emp`,sum(((case when (`pct`.`transaction_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_com` from (((((((`ww_payroll_closed_transaction` `pct` join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `pct`.`employee_id`))) join `ww_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`pct`.`employee_id` = `up`.`user_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) where ((`pct`.`transaction_code` in ('SSS_EMP','SSS_COM','SSS_ECC','HDMF_EMP','HDMF_COM','PHIC_EMP','PHIC_COM','PagIbigAdd')) and (`pct`.`deleted` = 0) and (`pct`.`on_hold` = 0)) group by `u`.`user_id`,`p`.`id_number`,`u`.`full_name`,`up`.`company`,`up`.`company_id`,`uc`.`sss`,`uc`.`phic`,`uc`.`hdmf`,`uc`.`address`,`ud`.`department_id`,`ud`.`department`,year(`pct`.`payroll_date`),month(`pct`.`payroll_date`),`up`.`birth_date`,`pp`.`sss_no`,`pp`.`phic_no`,`pp`.`hdmf_no` */;

/*View structure for view payroll_partners_contribution_hdmf */

/*!50001 DROP TABLE IF EXISTS `payroll_partners_contribution_hdmf` */;
/*!50001 DROP VIEW IF EXISTS `payroll_partners_contribution_hdmf` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_partners_contribution_hdmf` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`up`.`title` AS `title`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`up`.`middlename` AS `middlename`,`up`.`suffix` AS `suffix`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`b`.`hdmf_branch_code` AS `bcode`,if(((`b`.`hdmf_branch_code` <> '00') and (`b`.`hdmf_branch_code` is not null)),`b`.`hdmf_branch_code`,ifnull(`uc`.`hdmf_branch_code`,'00')) AS `pagibig_branch_code`,`uc`.`hdmf` AS `co_hdmf`,`uc`.`address` AS `co_address`,`uc`.`zipcode` AS `zipcode`,`uc`.`company_code` AS `company_code`,`getcompany_contact`(`pp`.`company_id`,'phone') AS `contact_no`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,year(`pct`.`payroll_date`) AS `year`,month(`pct`.`payroll_date`) AS `month`,`pct`.`payroll_date` AS `payroll_date`,`up`.`birth_date` AS `birth_date`,`pp`.`hdmf_no` AS `hdmf_no`,`p`.`effectivity_date` AS `hired_date`,`p`.`resigned_date` AS `resigned_date`,'' AS `sbr_no_hdmf`,'' AS `sbr_date_hdmf`,(case when ((year(`p`.`effectivity_date`) = year(`pct`.`payroll_date`)) and (month(`p`.`effectivity_date`) = month(`pct`.`payroll_date`))) then '1' when ((year(`p`.`resigned_date`) = year(`pct`.`payroll_date`)) and (month(`p`.`resigned_date`) = month(`pct`.`payroll_date`))) then '2' else 'N' end) AS `govt_status`,(sum(((case when (`pct`.`transaction_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pct`.`transaction_code` = 'PagIbigAdd') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `hdmf_emp`,sum(((case when (`pct`.`transaction_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_com`,sum(((case when (`pct`.`transaction_code` = 'PagIbigAdd') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `PagIbigAdd`,concat('DT',rpad(`pp`.`hdmf_no`,12,' '),rpad(`p`.`id_number`,15,' '),(case when (locate('ñ',`up`.`lastname`) <> 'false') then rpad(replace(`up`.`lastname`,' *',''),30,' ') else rpad(replace(`up`.`lastname`,' *',''),30,' ') end),(case when (locate('ñ',`up`.`firstname`) <> 'false') then rpad(`up`.`firstname`,30,' ') else rpad(`up`.`firstname`,30,' ') end),(case when ((`up`.`middlename` <> '') and (`up`.`middlename` is not null)) then rpad(`up`.`middlename`,30,' ') else rpad('',30,' ') end),rpad(round((sum(((case when (`pct`.`transaction_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pct`.`transaction_code` = 'PagIbigAdd') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))),2),13,' '),rpad(round(sum(((case when (`pct`.`transaction_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2),13,' '),rpad(ifnull(replace(`pp`.`tin`,'-',''),''),15,' '),rpad(if((`up`.`birth_date` is not null),date_format(`up`.`birth_date`,'%Y%m%d'),''),8,'0')) AS `record` from (((((((`ww_payroll_closed_transaction` `pct` join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `pct`.`employee_id`))) join `ww_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`pct`.`employee_id` = `up`.`user_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) where ((`pct`.`transaction_code` in ('HDMF_EMP','HDMF_COM','PagIbigAdd')) and (`pct`.`deleted` = 0) and (`pct`.`on_hold` = 0)) group by `u`.`user_id`,`p`.`id_number`,`u`.`full_name`,`up`.`company`,`up`.`company_id`,`uc`.`hdmf`,`uc`.`address`,`ud`.`department_id`,`ud`.`department`,year(`pct`.`payroll_date`),month(`pct`.`payroll_date`),`up`.`birth_date`,`pp`.`hdmf_no` */;

/*View structure for view payroll_partners_contribution_phic */

/*!50001 DROP TABLE IF EXISTS `payroll_partners_contribution_phic` */;
/*!50001 DROP VIEW IF EXISTS `payroll_partners_contribution_phic` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_partners_contribution_phic` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`up`.`title` AS `title`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`up`.`middlename` AS `middlename`,`up`.`suffix` AS `suffix`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`uc`.`tin` AS `tin`,`uc`.`sss` AS `co_sss`,`uc`.`phic` AS `co_phic`,`uc`.`hdmf` AS `co_hdmf`,`uc`.`address` AS `co_address`,`uc`.`zipcode` AS `zipcode`,`uc`.`company_code` AS `company_code`,`getcompany_contact`(`pp`.`company_id`,'phone') AS `contact_no`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,year(`pct`.`payroll_date`) AS `year`,month(`pct`.`payroll_date`) AS `month`,`pct`.`payroll_date` AS `payroll_date`,`up`.`birth_date` AS `birth_date`,`pp`.`sss_no` AS `sss_no`,`pp`.`phic_no` AS `phic_no`,`pp`.`hdmf_no` AS `hdmf_no`,`p`.`effectivity_date` AS `hired_date`,`p`.`resigned_date` AS `resigned_date`,'' AS `sbr_no_phic`,'' AS `sbr_date_phic`,(case when ((year(`p`.`effectivity_date`) = year(`pct`.`payroll_date`)) and (month(`p`.`effectivity_date`) = month(`pct`.`payroll_date`))) then '1' when ((year(`p`.`resigned_date`) = year(`pct`.`payroll_date`)) and (month(`p`.`resigned_date`) = month(`pct`.`payroll_date`))) then '2' else 'N' end) AS `govt_status`,sum(((case when (`pct`.`transaction_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_emp`,sum(((case when (`pct`.`transaction_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_com` from (((((((`ww_payroll_closed_transaction` `pct` join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `pct`.`employee_id`))) join `ww_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`pct`.`employee_id` = `up`.`user_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) where ((`pct`.`transaction_code` in ('PHIC_EMP','PHIC_COM')) and (`pct`.`deleted` = 0) and (`pct`.`on_hold` = 0)) group by `u`.`user_id`,`p`.`id_number`,`u`.`full_name`,`up`.`company`,`up`.`company_id`,`uc`.`phic`,`uc`.`address`,`ud`.`department_id`,`ud`.`department`,year(`pct`.`payroll_date`),month(`pct`.`payroll_date`),`up`.`birth_date`,`pp`.`phic_no` */;

/*View structure for view payroll_partners_contribution_quarterly */

/*!50001 DROP TABLE IF EXISTS `payroll_partners_contribution_quarterly` */;
/*!50001 DROP VIEW IF EXISTS `payroll_partners_contribution_quarterly` */;

/*!50001 CREATE ALGORITHM=TEMPTABLE DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_partners_contribution_quarterly` AS (select `payroll_partners_contribution`.`user_id` AS `user_id`,`payroll_partners_contribution`.`id_number` AS `id_number`,`payroll_partners_contribution`.`lastname` AS `lastname`,`payroll_partners_contribution`.`firstname` AS `firstname`,`payroll_partners_contribution`.`middlename` AS `middlename`,`payroll_partners_contribution`.`suffix` AS `suffix`,`payroll_partners_contribution`.`full_name` AS `full_name`,`payroll_partners_contribution`.`company` AS `company`,`payroll_partners_contribution`.`company_id` AS `company_id`,`payroll_partners_contribution`.`tin` AS `tin`,`payroll_partners_contribution`.`co_sss` AS `co_sss`,`payroll_partners_contribution`.`co_phic` AS `co_phic`,`payroll_partners_contribution`.`co_hdmf` AS `co_hdmf`,`payroll_partners_contribution`.`co_address` AS `co_address`,`payroll_partners_contribution`.`zipcode` AS `zipcode`,`payroll_partners_contribution`.`contact_no` AS `contact_no`,`payroll_partners_contribution`.`department_id` AS `department_id`,`payroll_partners_contribution`.`department` AS `department`,`payroll_partners_contribution`.`birth_date` AS `birth_date`,`payroll_partners_contribution`.`sss_no` AS `sss_no`,`payroll_partners_contribution`.`phic_no` AS `phic_no`,`payroll_partners_contribution`.`hdmf_no` AS `hdmf_no`,extract(year from `payroll_partners_contribution`.`payroll_date`) AS `year`,(case when (extract(month from `payroll_partners_contribution`.`payroll_date`) in (1,2,3)) then 1 when (extract(month from `payroll_partners_contribution`.`payroll_date`) in (4,5,6)) then 2 when (extract(month from `payroll_partners_contribution`.`payroll_date`) in (7,8,9)) then 3 when (extract(month from `payroll_partners_contribution`.`payroll_date`) in (10,11,12)) then 4 end) AS `period_month`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 1 then 1 when 4 then 1 when 7 then 1 when 10 then 1 else 0 end) * (`payroll_partners_contribution`.`sss_emp` + `payroll_partners_contribution`.`sss_com`))) AS `sss_1`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 2 then 1 when 5 then 1 when 8 then 1 when 11 then 1 else 0 end) * (`payroll_partners_contribution`.`sss_emp` + `payroll_partners_contribution`.`sss_com`))) AS `sss_2`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 3 then 1 when 6 then 1 when 9 then 1 when 12 then 1 else 0 end) * (`payroll_partners_contribution`.`sss_emp` + `payroll_partners_contribution`.`sss_com`))) AS `sss_3`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 1 then 1 when 4 then 1 when 7 then 1 when 10 then 1 else 0 end) * `payroll_partners_contribution`.`sss_ecc`)) AS `ec_1`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 2 then 1 when 5 then 1 when 8 then 1 when 11 then 1 else 0 end) * `payroll_partners_contribution`.`sss_ecc`)) AS `ec_2`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 3 then 1 when 6 then 1 when 9 then 1 when 12 then 1 else 0 end) * `payroll_partners_contribution`.`sss_ecc`)) AS `ec_3`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 1 then 1 when 4 then 1 when 7 then 1 when 10 then 1 else 0 end) * `payroll_partners_contribution`.`hdmf_emp`)) AS `hdmf_e1`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 2 then 1 when 5 then 1 when 8 then 1 when 11 then 1 else 0 end) * `payroll_partners_contribution`.`hdmf_emp`)) AS `hdmf_e2`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 3 then 1 when 6 then 1 when 9 then 1 when 12 then 1 else 0 end) * `payroll_partners_contribution`.`hdmf_emp`)) AS `hdmf_e3`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 1 then 1 when 4 then 1 when 7 then 1 when 10 then 1 else 0 end) * `payroll_partners_contribution`.`hdmf_com`)) AS `hdmf_c1`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 2 then 1 when 5 then 1 when 8 then 1 when 11 then 1 else 0 end) * `payroll_partners_contribution`.`hdmf_com`)) AS `hdmf_c2`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 3 then 1 when 6 then 1 when 9 then 1 when 12 then 1 else 0 end) * `payroll_partners_contribution`.`hdmf_com`)) AS `hdmf_c3`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 1 then 1 when 4 then 1 when 7 then 1 when 10 then 1 else 0 end) * `payroll_partners_contribution`.`phic_emp`)) AS `phic_e1`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 2 then 1 when 5 then 1 when 8 then 1 when 11 then 1 else 0 end) * `payroll_partners_contribution`.`phic_emp`)) AS `phic_e2`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 3 then 1 when 6 then 1 when 9 then 1 when 12 then 1 else 0 end) * `payroll_partners_contribution`.`phic_emp`)) AS `phic_e3`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 1 then 1 when 4 then 1 when 7 then 1 when 10 then 1 else 0 end) * `payroll_partners_contribution`.`phic_com`)) AS `phic_c1`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 2 then 1 when 5 then 1 when 8 then 1 when 11 then 1 else 0 end) * `payroll_partners_contribution`.`phic_com`)) AS `phic_c2`,sum(((case extract(month from `payroll_partners_contribution`.`payroll_date`) when 3 then 1 when 6 then 1 when 9 then 1 when 12 then 1 else 0 end) * `payroll_partners_contribution`.`phic_com`)) AS `phic_c3` from `payroll_partners_contribution` group by `payroll_partners_contribution`.`user_id`,`payroll_partners_contribution`.`id_number`,`payroll_partners_contribution`.`full_name`,`payroll_partners_contribution`.`company`,`payroll_partners_contribution`.`company_id`,`payroll_partners_contribution`.`co_sss`,`payroll_partners_contribution`.`co_phic`,`payroll_partners_contribution`.`co_hdmf`,`payroll_partners_contribution`.`co_address`,`payroll_partners_contribution`.`contact_no`,`payroll_partners_contribution`.`department_id`,`payroll_partners_contribution`.`department`,`payroll_partners_contribution`.`birth_date`,`payroll_partners_contribution`.`sss_no`,`payroll_partners_contribution`.`phic_no`,`payroll_partners_contribution`.`hdmf_no`,extract(year from `payroll_partners_contribution`.`payroll_date`),(case when (extract(month from `payroll_partners_contribution`.`payroll_date`) in (1,2,3)) then 1 when (extract(month from `payroll_partners_contribution`.`payroll_date`) in (4,5,6)) then 2 when (extract(month from `payroll_partners_contribution`.`payroll_date`) in (7,8,9)) then 3 when (extract(month from `payroll_partners_contribution`.`payroll_date`) in (10,11,12)) then 4 end)) */;

/*View structure for view payroll_partners_contribution_sss */

/*!50001 DROP TABLE IF EXISTS `payroll_partners_contribution_sss` */;
/*!50001 DROP VIEW IF EXISTS `payroll_partners_contribution_sss` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_partners_contribution_sss` AS select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`up`.`title` AS `title`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`up`.`middlename` AS `middlename`,`up`.`suffix` AS `suffix`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`uc`.`tin` AS `tin`,`uc`.`sss` AS `co_sss`,`uc`.`address` AS `co_address`,`uc`.`zipcode` AS `zipcode`,`uc`.`company_code` AS `company_code`,`getcompany_contact`(`pp`.`company_id`,'phone') AS `contact_no`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,year(`pct`.`payroll_date`) AS `year`,month(`pct`.`payroll_date`) AS `month`,`pct`.`payroll_date` AS `payroll_date`,`up`.`birth_date` AS `birth_date`,`pp`.`sss_no` AS `sss_no`,`pp`.`phic_no` AS `phic_no`,`pp`.`hdmf_no` AS `hdmf_no`,`p`.`effectivity_date` AS `hired_date`,`p`.`resigned_date` AS `resigned_date`,'' AS `sbr_no_sss`,'' AS `sbr_date_sss`,(case when ((year(`p`.`effectivity_date`) = year(`pct`.`payroll_date`)) and (month(`p`.`effectivity_date`) = month(`pct`.`payroll_date`))) then '1' when ((year(`p`.`resigned_date`) = year(`pct`.`payroll_date`)) and (month(`p`.`resigned_date`) = month(`pct`.`payroll_date`))) then '2' else 'N' end) AS `govt_status`,sum(((case when (`pct`.`transaction_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_emp`,sum(((case when (`pct`.`transaction_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_com`,sum(((case when (`pct`.`transaction_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_ecc` from (((((((`ww_payroll_closed_transaction` `pct` join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `pct`.`employee_id`))) join `ww_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`pct`.`employee_id` = `up`.`user_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) where ((`pct`.`transaction_code` in ('SSS_EMP','SSS_COM','SSS_ECC')) and (`pct`.`deleted` = 0) and (`pct`.`on_hold` = 0)) group by `u`.`user_id`,`p`.`id_number`,`u`.`full_name`,`up`.`company`,`up`.`company_id`,`uc`.`sss`,`uc`.`address`,`ud`.`department_id`,`ud`.`department`,year(`pct`.`payroll_date`),month(`pct`.`payroll_date`),`up`.`birth_date`,`pp`.`sss_no` */;

/*View structure for view payroll_partners_loan */

/*!50001 DROP TABLE IF EXISTS `payroll_partners_loan` */;
/*!50001 DROP VIEW IF EXISTS `payroll_partners_loan` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_partners_loan` AS (select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`up`.`middlename` AS `middlename`,`up`.`suffix` AS `suffix`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`uc`.`tin` AS `tin`,`uc`.`sss` AS `co_sss`,`uc`.`phic` AS `co_phic`,`uc`.`hdmf` AS `co_hdmf`,`uc`.`address` AS `co_address`,`uc`.`zipcode` AS `zipcode`,`getcompany_contact`(`pp`.`company_id`,'phone') AS `contact_no`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,year(`lp`.`date_paid`) AS `year`,month(`lp`.`date_paid`) AS `month`,`up`.`birth_date` AS `birth_date`,`pp`.`sss_no` AS `sss_no`,`pp`.`phic_no` AS `phic_no`,`pp`.`hdmf_no` AS `hdmf_no`,`pl`.`loan_id` AS `loan`,`plt`.`loan_type` AS `loan_type`,`plt`.`loan_type_id` AS `loan_type_id`,`pl`.`partner_loan_id` AS `partner_loan_id`,`pl`.`description` AS `description`,round(aes_decrypt(`pl`.`running_balance`,`encryption_key`()),2) AS `balance`,`pl`.`entry_date` AS `entry_date`,(case when (`plt`.`loan_type` like '%SSS%') then 'SSS' when (`plt`.`loan_type` like '%Pag-ibig%') then 'HDMF' else `plt`.`loan_type` end) AS `category`,round(aes_decrypt(`pl`.`loan_principal`,`encryption_key`()),2) AS `loan_principal`,round(sum(aes_decrypt(`lp`.`amount`,`encryption_key`())),2) AS `amount` from ((((((((((`ww_payroll_partners_loan` `pl` left join `ww_payroll_partners_loan_payment` `lp` on((`pl`.`partner_loan_id` = `lp`.`partner_loan_id`))) left join `ww_payroll_partners` `pp` on((`pl`.`user_id` = `pp`.`user_id`))) left join `ww_partners` `p` on((`pl`.`user_id` = `p`.`user_id`))) left join `ww_users` `u` on((`pl`.`user_id` = `u`.`user_id`))) left join `ww_users_profile` `up` on((`pl`.`user_id` = `up`.`user_id`))) left join `ww_users_company` `uc` on((`pp`.`company_id` = `uc`.`company_id`))) left join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) left join `ww_payroll_loan` `pln` on((`pl`.`loan_id` = `pln`.`loan_id`))) left join `ww_payroll_loan_type` `plt` on((`pln`.`loan_type_id` = `plt`.`loan_type_id`))) where (`lp`.`paid` = 1) group by `u`.`user_id`,`p`.`id_number`,`up`.`lastname`,`up`.`firstname`,`up`.`middlename`,`up`.`suffix`,`u`.`full_name`,`uc`.`company`,`pp`.`company_id`,`uc`.`tin`,`uc`.`sss`,`uc`.`phic`,`uc`.`hdmf`,`uc`.`address`,`uc`.`zipcode`,`getcompany_contact`(`pp`.`company_id`,'phone'),`ud`.`department_id`,`ud`.`department`,year(`lp`.`date_paid`),month(`lp`.`date_paid`),`up`.`birth_date`,`pp`.`sss_no`,`pp`.`phic_no`,`pp`.`hdmf_no`,`plt`.`loan_type`,`plt`.`loan_type_id`,`pl`.`partner_loan_id`,`pl`.`description`) */;

/*View structure for view payroll_partners_loan_hdmf */

/*!50001 DROP TABLE IF EXISTS `payroll_partners_loan_hdmf` */;
/*!50001 DROP VIEW IF EXISTS `payroll_partners_loan_hdmf` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_partners_loan_hdmf` AS (select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`up`.`middlename` AS `middlename`,`up`.`suffix` AS `suffix`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`pp`.`tin` AS `tin`,`uc`.`sss` AS `co_sss`,`uc`.`phic` AS `co_phic`,`uc`.`hdmf` AS `co_hdmf`,`uc`.`address` AS `co_address`,`uc`.`zipcode` AS `zipcode`,`getcompany_contact`(`pp`.`company_id`,'phone') AS `contact_no`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,year(`lp`.`date_paid`) AS `year`,month(`lp`.`date_paid`) AS `month`,`up`.`birth_date` AS `birth_date`,`pp`.`sss_no` AS `sss_no`,`pp`.`phic_no` AS `phic_no`,`pp`.`hdmf_no` AS `hdmf_no`,`plt`.`loan_type` AS `loan_type`,`plt`.`loan_type_id` AS `loan_type_id`,`pl`.`partner_loan_id` AS `partner_loan_id`,`pl`.`description` AS `description`,`lp`.`balance` AS `balance`,aes_decrypt(`pl`.`loan_principal`,`encryption_key`()) AS `loan_principal`,round(sum(aes_decrypt(`lp`.`amount`,`encryption_key`())),2) AS `amount` from (((((((((`ww_payroll_partners_loan` `pl` left join `ww_payroll_partners_loan_payment` `lp` on((`pl`.`partner_loan_id` = `lp`.`partner_loan_id`))) left join `ww_payroll_partners` `pp` on((`pl`.`user_id` = `pp`.`user_id`))) left join `ww_partners` `p` on((`pl`.`user_id` = `p`.`user_id`))) left join `ww_users` `u` on((`pl`.`user_id` = `u`.`user_id`))) left join `ww_users_profile` `up` on((`pl`.`user_id` = `up`.`user_id`))) left join `ww_users_company` `uc` on((`pp`.`company_id` = `uc`.`company_id`))) left join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_payroll_loan` `pln` on((`pl`.`loan_id` = `pln`.`loan_id`))) left join `ww_payroll_loan_type` `plt` on((`pln`.`loan_type_id` = `plt`.`loan_type_id`))) where ((`plt`.`loan_type` like '%Pag-Ibig%') and (`lp`.`paid` = 1)) group by `u`.`user_id`,`p`.`id_number`,`up`.`lastname`,`up`.`firstname`,`up`.`middlename`,`up`.`suffix`,`u`.`full_name`,`uc`.`company`,`pp`.`company_id`,`uc`.`tin`,`uc`.`sss`,`uc`.`phic`,`uc`.`hdmf`,`uc`.`address`,`uc`.`zipcode`,`getcompany_contact`(`pp`.`company_id`,'phone'),`ud`.`department_id`,`ud`.`department`,year(`lp`.`date_paid`),month(`lp`.`date_paid`),`up`.`birth_date`,`pp`.`sss_no`,`pp`.`phic_no`,`pp`.`hdmf_no`,`plt`.`loan_type`,`plt`.`loan_type_id`,`pl`.`partner_loan_id`,`pl`.`description`) */;

/*View structure for view payroll_partners_loan_sss */

/*!50001 DROP TABLE IF EXISTS `payroll_partners_loan_sss` */;
/*!50001 DROP VIEW IF EXISTS `payroll_partners_loan_sss` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_partners_loan_sss` AS (select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`up`.`middlename` AS `middlename`,`up`.`suffix` AS `suffix`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`uc`.`tin` AS `tin`,`uc`.`sss` AS `co_sss`,`uc`.`phic` AS `co_phic`,`uc`.`hdmf` AS `co_hdmf`,`uc`.`address` AS `co_address`,`uc`.`zipcode` AS `zipcode`,`getcompany_contact`(`pp`.`company_id`,'phone') AS `contact_no`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,year(`lp`.`payroll_date`) AS `year`,month(`lp`.`payroll_date`) AS `month`,`up`.`birth_date` AS `birth_date`,`pp`.`sss_no` AS `sss_no`,`pp`.`phic_no` AS `phic_no`,`pp`.`hdmf_no` AS `hdmf_no`,`plt`.`loan_type` AS `loan_type`,`plt`.`loan_type_id` AS `loan_type_id`,`pl`.`partner_loan_id` AS `partner_loan_id`,`pl`.`description` AS `description`,`lp`.`balance` AS `balance`,aes_decrypt(`pl`.`loan_principal`,`encryption_key`()) AS `loan_principal`,aes_decrypt(`lp`.`amount`,`encryption_key`()) AS `amount` from (((((((((`ww_payroll_partners_loan` `pl` left join `ww_payroll_partners_loan_payment` `lp` on((`pl`.`partner_loan_id` = `lp`.`partner_loan_id`))) left join `ww_payroll_partners` `pp` on((`pl`.`user_id` = `pp`.`user_id`))) left join `ww_partners` `p` on((`pl`.`user_id` = `p`.`user_id`))) left join `ww_users` `u` on((`pl`.`user_id` = `u`.`user_id`))) left join `ww_users_profile` `up` on((`pl`.`user_id` = `up`.`user_id`))) left join `ww_users_company` `uc` on((`pp`.`company_id` = `uc`.`company_id`))) left join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_payroll_loan` `pln` on((`pl`.`loan_id` = `pln`.`loan_id`))) left join `ww_payroll_loan_type` `plt` on((`pln`.`loan_type_id` = `plt`.`loan_type_id`))) where ((`plt`.`loan_type` like '%SSS%') and (`lp`.`paid` = 1)) group by `u`.`user_id`,`p`.`id_number`,`up`.`lastname`,`up`.`firstname`,`up`.`middlename`,`up`.`suffix`,`u`.`full_name`,`uc`.`company`,`pp`.`company_id`,`uc`.`tin`,`uc`.`sss`,`uc`.`phic`,`uc`.`hdmf`,`uc`.`address`,`uc`.`zipcode`,`getcompany_contact`(`pp`.`company_id`,'phone'),`ud`.`department_id`,`ud`.`department`,year(`lp`.`payroll_date`),month(`lp`.`payroll_date`),`up`.`birth_date`,`pp`.`sss_no`,`pp`.`phic_no`,`pp`.`hdmf_no`,`plt`.`loan_type`,`plt`.`loan_type_id`,`pl`.`partner_loan_id`,`pl`.`description`) */;

/*View structure for view payroll_payslip */

/*!50001 DROP TABLE IF EXISTS `payroll_payslip` */;
/*!50001 DROP VIEW IF EXISTS `payroll_payslip` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_payslip` AS select `u`.`user_id` AS `employee`,`pp`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`uc`.`address` AS `address`,`uc`.`city` AS `city`,`u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`up`.`department_id` AS `department_id`,`d`.`department_code` AS `department_code`,`pp`.`tin` AS `tin`,`pt`.`transaction_label` AS `transaction_label`,`ptc`.`transaction_class_code` AS `transaction_class_code`,`pt`.`transaction_code` AS `transaction_code`,(case when (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ')) then concat(aes_decrypt(`pct`.`quantity`,`encryption_key`()),' (',`getabsent`(`t`.`payroll_date`,`u`.`user_id`,`pct`.`transaction_code`),') ') else aes_decrypt(`pct`.`quantity`,`encryption_key`()) end) AS `qty`,round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) AS `amount`,`pct`.`transaction_type_id` AS `transaction_type_id`,(case when (`pct`.`transaction_type_id` in (1,2,6,7,8)) then 'Earnings' when (`pct`.`transaction_type_id` in (3,4,5)) then 'Deductions' when (`pct`.`transaction_code` = 'NETPAY') then 'Netpay' else '' end) AS `group`,(case when ((`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) and (`ptc`.`government_mandated` = 0)) then 'Loan' when ((`ptc`.`government_mandated` = 1) or (`ptc`.`transaction_class_code` = 'WHTAX')) then 'government' when (`ptc`.`transaction_class_code` = 'OVERTIME') then 'overtime' when ((`ptc`.`transaction_class_code` in ('ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')) or (`pt`.`transaction_code` = 'LWOP')) then 'attnd_ded' when (`pt`.`transaction_type_id` = 8) then 'Bonus' when (`pt`.`transaction_type_id` in (2,6)) then 'Benefits' when ((`pt`.`transaction_type_id` = 1) and (`pt`.`transaction_id` <> 1)) then 'Earnings' when (`pt`.`transaction_id` = 1) then 'salary' when (`pt`.`transaction_code` = 'NETPAY') then 'Netpay' else (case when (`pt`.`transaction_type_id` in (3,4,5)) then 'Oth_ded' when (`pt`.`transaction_type_id` in (1,2,6,7,8)) then 'Oth_inc' else '' end) end) AS `type`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then `pct`.`record_id` else '' end) AS `record_id`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`beginning_balance`,`encryption_key`()),2) else 0 end) AS `beginning_balance`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`running_balance`,`encryption_key`()),2) else 0 end) AS `running_balance`,`t`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,`tc`.`taxcode` AS `taxcode`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from ((((((((((((`ww_payroll_current_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_partners` `p` on((`u`.`user_id` = `p`.`user_id`))) join `ww_partners_personal` `ppe` on((`p`.`partner_id` = `ppe`.`partner_id`))) join `ww_taxcode` `tc` on((`tc`.`taxcode_id` = `ppe`.`key_value`))) join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) join `ww_users_department` `d` on((`d`.`department_id` = `up`.`department_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_partners_loan` `pl` on((`pl`.`partner_loan_id` = `pct`.`record_id`))) where ((`pct`.`on_hold` = 0) and (`ppe`.`key` = 'taxcode')) union all select `u`.`user_id` AS `employee`,`pp`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`uc`.`address` AS `address`,`uc`.`city` AS `city`,`u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`up`.`department_id` AS `department_id`,`d`.`department_code` AS `department_code`,`pp`.`tin` AS `tin`,`pt`.`transaction_label` AS `transaction_label`,`ptc`.`transaction_class_code` AS `transaction_class_code`,`pt`.`transaction_code` AS `transaction_code`,(case when (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ')) then concat(aes_decrypt(`pct`.`quantity`,`encryption_key`()),' (',`getabsent`(`t`.`payroll_date`,`u`.`user_id`,`pct`.`transaction_code`),') ') else aes_decrypt(`pct`.`quantity`,`encryption_key`()) end) AS `qty`,round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) AS `amount`,`pct`.`transaction_type_id` AS `transaction_type_id`,(case when (`pct`.`transaction_type_id` in (1,2,6,7,8)) then 'Earnings' when (`pct`.`transaction_type_id` in (3,4,5)) then 'Deductions' when (`pct`.`transaction_code` = 'NETPAY') then 'Netpay' else '' end) AS `group`,(case when ((`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) and (`ptc`.`government_mandated` = 0)) then 'Loan' when ((`ptc`.`government_mandated` = 1) or (`ptc`.`transaction_class_code` = 'WHTAX')) then 'government' when (`ptc`.`transaction_class_code` = 'OVERTIME') then 'overtime' when ((`ptc`.`transaction_class_code` in ('ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')) or (`pt`.`transaction_code` = 'LWOP')) then 'attnd_ded' when (`pt`.`transaction_type_id` = 8) then 'Bonus' when (`pt`.`transaction_type_id` in (2,6)) then 'Benefits' when ((`pt`.`transaction_type_id` = 1) and (`pt`.`transaction_id` <> 1)) then 'Earnings' when (`pt`.`transaction_id` = 1) then 'salary' when (`pt`.`transaction_code` = 'NETPAY') then 'Netpay' else (case when (`pt`.`transaction_type_id` in (3,4,5)) then 'Oth_ded' when (`pt`.`transaction_type_id` in (1,2,6,7,8)) then 'Oth_inc' else '' end) end) AS `type`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then `pct`.`record_id` else '' end) AS `record_id`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`beginning_balance`,`encryption_key`()),2) else 0 end) AS `beginning_balance`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`running_balance`,`encryption_key`()),2) else 0 end) AS `running_balance`,`t`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,`tc`.`taxcode` AS `taxcode`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from ((((((((((((`ww_payroll_closed_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_partners` `p` on((`u`.`user_id` = `p`.`user_id`))) join `ww_partners_personal` `ppe` on((`p`.`partner_id` = `ppe`.`partner_id`))) join `ww_taxcode` `tc` on((`tc`.`taxcode_id` = `ppe`.`key_value`))) join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) join `ww_users_department` `d` on((`d`.`department_id` = `up`.`department_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_partners_loan` `pl` on((`pl`.`partner_loan_id` = `pct`.`record_id`))) where ((`pct`.`on_hold` = 0) and (`ppe`.`key` = 'taxcode')) */;

/*View structure for view payroll_payslip_abraham */

/*!50001 DROP TABLE IF EXISTS `payroll_payslip_abraham` */;
/*!50001 DROP VIEW IF EXISTS `payroll_payslip_abraham` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_payslip_abraham` AS select `u`.`user_id` AS `employee`,`pp`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`uc`.`address` AS `address`,`uc`.`city` AS `city`,`u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`up`.`department_id` AS `department_id`,`d`.`department_code` AS `department_code`,`uproj`.`project_id` AS `project_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,0 AS `adjustment`,0 AS `other_taxable`,0 AS `absent_tardy`,0 AS `sss`,0 AS `philhealth`,0 AS `pag_ibig`,0 AS `nontax_income`,0 AS `nd`,0 AS `reg`,0 AS `rest`,0 AS `rest_x8`,0 AS `sp`,0 AS `sp_x8`,0 AS `rest_sp`,0 AS `rest_sp_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal`,0 AS `legal_x8`,0 AS `rest_legal`,0 AS `rest_leg_x8`,0 AS `nd_otnd`,0 AS `reg_otnd`,0 AS `rest_otnd`,0 AS `rest_x8_otnd`,0 AS `sp_otnd`,0 AS `sp_x8_otnd`,0 AS `rest_sp_otnd`,0 AS `rest_sp_x8_otnd`,0 AS `legal_otnd`,0 AS `legal_x8_otnd`,0 AS `rest_legal_otnd`,0 AS `rest_leg_x8_otnd`,0 AS `nd_hrs`,0 AS `reg_hrs`,0 AS `rest_hrs`,0 AS `rest_x8_hrs`,0 AS `sp_hrs`,0 AS `sp_x8_hrs`,0 AS `rest_sp_hrs`,0 AS `rest_sp_x8_hrs`,0 AS `legal_hrs`,0 AS `legal_x8_hrs`,0 AS `rest_legal_hrs`,0 AS `rest_leg_x8_hrs`,0 AS `health_card`,0 AS `other_deduction_one`,0 AS `other_deduction_two`,0 AS `other_deduction_three`,0 AS `sss_sal_loan_payments`,0 AS `sss_cal_loan_payments`,0 AS `hdmf_sal_loan_payments`,0 AS `hdmf_cal_loan_payments`,0 AS `company_loan_payments`,0 AS `sss_sal_loan_balance`,0 AS `sss_cal_loan_balance`,0 AS `hdmf_sal_loan_balance`,0 AS `hdmf_cal_loan_balance`,0 AS `tax_status`,0 AS `ytd_sss`,0 AS `ytd_philhealth`,0 AS `ytd_pag_ibig`,`pp`.`tin` AS `tin`,`pt`.`transaction_label` AS `transaction_label`,`ptc`.`transaction_class_code` AS `transaction_class_code`,`pt`.`transaction_code` AS `transaction_code`,(case when (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ')) then concat(aes_decrypt(`pct`.`quantity`,`encryption_key`()),' (',`getabsent`(`t`.`payroll_date`,`u`.`user_id`,`pct`.`transaction_code`),') ') else aes_decrypt(`pct`.`quantity`,`encryption_key`()) end) AS `qty`,round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) AS `amount`,`pct`.`transaction_type_id` AS `transaction_type_id`,(case when (`pct`.`transaction_type_id` in (1,2,6,7,8)) then 'Earnings' when (`pct`.`transaction_type_id` in (3,4,5)) then 'Deductions' when (`pct`.`transaction_code` = 'NETPAY') then 'Netpay' else '' end) AS `group`,(case when ((`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) and (`ptc`.`government_mandated` = 0)) then 'Loan' when ((`ptc`.`government_mandated` = 1) or (`ptc`.`transaction_class_code` = 'WHTAX')) then 'government' when (`ptc`.`transaction_class_code` = 'OVERTIME') then 'overtime' when ((`ptc`.`transaction_class_code` in ('ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')) or (`pt`.`transaction_code` = 'LWOP')) then 'attnd_ded' when (`pt`.`transaction_type_id` = 8) then 'Bonus' when (`pt`.`transaction_type_id` in (2,6)) then 'Benefits' when ((`pt`.`transaction_type_id` = 1) and (`pt`.`transaction_id` <> 1)) then 'Earnings' when (`pt`.`transaction_id` = 1) then 'salary' when (`pt`.`transaction_code` = 'NETPAY') then 'Netpay' else (case when (`pt`.`transaction_type_id` in (3,4,5)) then 'Oth_ded' when (`pt`.`transaction_type_id` in (1,2,6,7,8)) then 'Oth_inc' else '' end) end) AS `type`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then `pct`.`record_id` else '' end) AS `record_id`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`beginning_balance`,`encryption_key`()),2) else 0 end) AS `beginning_balance`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`running_balance`,`encryption_key`()),2) else 0 end) AS `running_balance`,`t`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,`tc`.`taxcode` AS `taxcode`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from ((((((((((((((`ww_payroll_current_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_partners` `p` on((`u`.`user_id` = `p`.`user_id`))) join `ww_partners_personal` `ppe` on((`p`.`partner_id` = `ppe`.`partner_id`))) join `ww_taxcode` `tc` on((`tc`.`taxcode_id` = `ppe`.`key_value`))) join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) join `ww_users_department` `d` on((`d`.`department_id` = `up`.`department_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_partners_loan` `pl` on((`pl`.`partner_loan_id` = `pct`.`record_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) where ((`pct`.`on_hold` = 0) and (`ppe`.`key` = 'taxcode')) union all select `u`.`user_id` AS `employee`,`pp`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`uc`.`address` AS `address`,`uc`.`city` AS `city`,`u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`up`.`department_id` AS `department_id`,`d`.`department_code` AS `department_code`,`uproj`.`project_id` AS `project_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,0 AS `adjustment`,0 AS `other_taxable`,0 AS `absent_tardy`,0 AS `sss`,0 AS `philhealth`,0 AS `pag_ibig`,0 AS `nontax_income`,0 AS `nd`,0 AS `reg`,0 AS `rest`,0 AS `rest_x8`,0 AS `sp`,0 AS `sp_x8`,0 AS `rest_sp`,0 AS `rest_sp_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal`,0 AS `legal_x8`,0 AS `rest_legal`,0 AS `rest_leg_x8`,0 AS `nd_otnd`,0 AS `reg_otnd`,0 AS `rest_otnd`,0 AS `rest_x8_otnd`,0 AS `sp_otnd`,0 AS `sp_x8_otnd`,0 AS `rest_sp_otnd`,0 AS `rest_sp_x8_otnd`,0 AS `legal_otnd`,0 AS `legal_x8_otnd`,0 AS `rest_legal_otnd`,0 AS `rest_leg_x8_otnd`,0 AS `nd_hrs`,0 AS `reg_hrs`,0 AS `rest_hrs`,0 AS `rest_x8_hrs`,0 AS `sp_hrs`,0 AS `sp_x8_hrs`,0 AS `rest_sp_hrs`,0 AS `rest_sp_x8_hrs`,0 AS `legal_hrs`,0 AS `legal_x8_hrs`,0 AS `rest_legal_hrs`,0 AS `rest_leg_x8_hrs`,0 AS `health_card`,0 AS `other_deduction_one`,0 AS `other_deduction_two`,0 AS `other_deduction_three`,0 AS `sss_sal_loan_payments`,0 AS `sss_cal_loan_payments`,0 AS `hdmf_sal_loan_payments`,0 AS `hdmf_cal_loan_payments`,0 AS `company_loan_payments`,0 AS `sss_sal_loan_balance`,0 AS `sss_cal_loan_balance`,0 AS `hdmf_sal_loan_balance`,0 AS `hdmf_cal_loan_balance`,0 AS `tax_status`,0 AS `ytd_sss`,0 AS `ytd_philhealth`,0 AS `ytd_pag_ibig`,`pp`.`tin` AS `tin`,`pt`.`transaction_label` AS `transaction_label`,`ptc`.`transaction_class_code` AS `transaction_class_code`,`pt`.`transaction_code` AS `transaction_code`,(case when (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ')) then concat(aes_decrypt(`pct`.`quantity`,`encryption_key`()),' (',`getabsent`(`t`.`payroll_date`,`u`.`user_id`,`pct`.`transaction_code`),') ') else aes_decrypt(`pct`.`quantity`,`encryption_key`()) end) AS `qty`,round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) AS `amount`,`pct`.`transaction_type_id` AS `transaction_type_id`,(case when (`pct`.`transaction_type_id` in (1,2,6,7,8)) then 'Earnings' when (`pct`.`transaction_type_id` in (3,4,5)) then 'Deductions' when (`pct`.`transaction_code` = 'NETPAY') then 'Netpay' else '' end) AS `group`,(case when ((`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) and (`ptc`.`government_mandated` = 0)) then 'Loan' when ((`ptc`.`government_mandated` = 1) or (`ptc`.`transaction_class_code` = 'WHTAX')) then 'government' when (`ptc`.`transaction_class_code` = 'OVERTIME') then 'overtime' when ((`ptc`.`transaction_class_code` in ('ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')) or (`pt`.`transaction_code` = 'LWOP')) then 'attnd_ded' when (`pt`.`transaction_type_id` = 8) then 'Bonus' when (`pt`.`transaction_type_id` in (2,6)) then 'Benefits' when ((`pt`.`transaction_type_id` = 1) and (`pt`.`transaction_id` <> 1)) then 'Earnings' when (`pt`.`transaction_id` = 1) then 'salary' when (`pt`.`transaction_code` = 'NETPAY') then 'Netpay' else (case when (`pt`.`transaction_type_id` in (3,4,5)) then 'Oth_ded' when (`pt`.`transaction_type_id` in (1,2,6,7,8)) then 'Oth_inc' else '' end) end) AS `type`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then `pct`.`record_id` else '' end) AS `record_id`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`beginning_balance`,`encryption_key`()),2) else 0 end) AS `beginning_balance`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`running_balance`,`encryption_key`()),2) else 0 end) AS `running_balance`,`t`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,`tc`.`taxcode` AS `taxcode`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from ((((((((((((((`ww_payroll_closed_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_partners` `p` on((`u`.`user_id` = `p`.`user_id`))) join `ww_partners_personal` `ppe` on((`p`.`partner_id` = `ppe`.`partner_id`))) join `ww_taxcode` `tc` on((`tc`.`taxcode_id` = `ppe`.`key_value`))) join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) join `ww_users_department` `d` on((`d`.`department_id` = `up`.`department_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_partners_loan` `pl` on((`pl`.`partner_loan_id` = `pct`.`record_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) where ((`pct`.`on_hold` = 0) and (`ppe`.`key` = 'taxcode')) */;

/*View structure for view payroll_payslip_riofil */

/*!50001 DROP TABLE IF EXISTS `payroll_payslip_riofil` */;
/*!50001 DROP VIEW IF EXISTS `payroll_payslip_riofil` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`emplopad`@`%` SQL SECURITY DEFINER VIEW `payroll_payslip_riofil` AS select `u`.`user_id` AS `employee`,`p`.`status` AS `status`,`upos`.`position` AS `position`,`pp`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`uc`.`address` AS `address`,`uc`.`city` AS `city`,`u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`up`.`department_id` AS `department_id`,`d`.`department_code` AS `department_code`,`uproj`.`project_id` AS `project_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,((((((((case when (`pct`.`transaction_code` = 'DEDUCTION_LATE_ADJ') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) + (case when (`pct`.`transaction_code` = 'DEDUCTION_UNDERTIME_ADJ') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'SALADJ') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'OTADJ') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'RICEALLOWRETRO') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'MEDALLOWRETRO') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'LAUNDRYALLOWRETRO') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'ABSENCES_ADJ') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) AS `adjustment`,0 AS `other_taxable`,(case when (`pct`.`transaction_code` = 'ABSENCES') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `absent`,(case when (`pct`.`transaction_code` = 'DEDUCTION_LATE') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `late`,(case when (`pct`.`transaction_code` = 'DEDUCTION_UNDERTIME') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `undertime`,(case when (`pct`.`transaction_code` = 'LWOP') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `lwop`,(case when (`pct`.`transaction_code` = 'ABSENCES') then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `absent_hours`,(case when (`pct`.`transaction_code` = 'DEDUCTION_LATE') then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `late_hours`,(case when (`pct`.`transaction_code` = 'DEDUCTION_UNDERTIME') then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `undertime_hours`,(case when (`pct`.`transaction_code` = 'LWOP') then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `lwop_hours`,(((case when (`pct`.`transaction_code` = 'ABSENCES') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) + (case when (`pct`.`transaction_code` = 'DEDUCTION_LATE') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) + (case when (`pct`.`transaction_code` = 'DEDUCTION_UNDERTIME') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end)) AS `absent_tardy`,0 AS `sss`,0 AS `philhealth`,0 AS `pag_ibig`,0 AS `nontax_income`,(case when (`pct`.`transaction_code` = 'REGND') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `nd`,(case when (`pct`.`transaction_code` = 'REGOT') then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `reg`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'REGOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `nd_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'REGOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `reg_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOFF')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `doff`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOFF_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `doff_x8`,round((((aes_decrypt(`pp`.`salary`,`encryption_key`()) * 12) / `pp`.`total_year_days`) / 8),2) AS `hourly_rate`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `legal_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_legal`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_leg_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_legal_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_leg_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `sp_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_sp_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `dobot`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `dobot_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `dobot_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `dobot_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_dobot`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_dobot_x8`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT_ND')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_dobot_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) else 0 end) AS `rest_dobot_x8_otnd`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'REGOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `reg_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'REGOT_ND')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `nd_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_ND')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_otnd_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_x8_otnd_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'RDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOFF')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `doff_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOFF_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `doff_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `legal_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `legal_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_legal_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'LEGRDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_leg_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `sp_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPEOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `sp_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_sp_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'SPERDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_sp_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `dobot_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `dobot_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT_ND')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `dobot_otnd_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `dobot_x8_otnd_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_dobot_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_dobot_x8_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT_ND')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_dobot_otnd_hrs`,(case when ((`ptc`.`transaction_class_code` = 'OVERTIME') and (`pct`.`transaction_code` = 'DOBRDOT_ND_EXCESS')) then round(aes_decrypt(`pct`.`quantity`,`encryption_key`()),2) else 0 end) AS `rest_dobot_x8_otnd_hrs`,0 AS `health_card`,0 AS `other_deduction_one`,0 AS `other_deduction_two`,0 AS `other_deduction_three`,0 AS `sss_sal_loan_payments`,0 AS `sss_cal_loan_payments`,0 AS `hdmf_sal_loan_payments`,0 AS `hdmf_cal_loan_payments`,0 AS `company_loan_payments`,0 AS `sss_sal_loan_balance`,0 AS `sss_cal_loan_balance`,0 AS `hdmf_sal_loan_balance`,0 AS `hdmf_cal_loan_balance`,0 AS `tax_status`,0 AS `ytd_sss`,0 AS `ytd_philhealth`,0 AS `ytd_pag_ibig`,`pp`.`tin` AS `tin`,`pt`.`transaction_label` AS `transaction_label`,`ptc`.`transaction_class_code` AS `transaction_class_code`,`pt`.`transaction_code` AS `transaction_code`,(case when (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ')) then concat(aes_decrypt(`pct`.`quantity`,`encryption_key`()),' (',`getabsent`(`t`.`payroll_date`,`u`.`user_id`,`pct`.`transaction_code`),') ') else aes_decrypt(`pct`.`quantity`,`encryption_key`()) end) AS `qty`,round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2) AS `amount`,`pct`.`transaction_type_id` AS `transaction_type_id`,(case when (`pct`.`transaction_type_id` in (1,2,6,7,8)) then 'Earnings' when (`pct`.`transaction_type_id` in (3,4,5)) then 'Deductions' when (`pct`.`transaction_code` = 'NETPAY') then 'Netpay' else '' end) AS `group`,(case when ((`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) and (`ptc`.`government_mandated` = 0)) then 'Loan' when ((`ptc`.`government_mandated` = 1) or (`ptc`.`transaction_class_code` = 'WHTAX')) then 'government' when (`ptc`.`transaction_class_code` = 'OVERTIME') then 'overtime' when ((`ptc`.`transaction_class_code` in ('ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')) or (`pt`.`transaction_code` = 'LWOP')) then 'attnd_ded' when (`pt`.`transaction_type_id` = 8) then 'Bonus' when (`pt`.`transaction_type_id` in (2,6)) then 'Benefits' when ((`pt`.`transaction_type_id` = 1) and (`pt`.`transaction_id` <> 1)) then 'Earnings' when (`pt`.`transaction_id` = 1) then 'salary' when (`pt`.`transaction_code` = 'NETPAY') then 'Netpay' else (case when (`pt`.`transaction_type_id` in (3,4,5)) then 'Oth_ded' when (`pt`.`transaction_type_id` in (1,2,6,7,8)) then 'Oth_inc' else '' end) end) AS `type`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then `pct`.`record_id` else '' end) AS `record_id`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`beginning_balance`,`encryption_key`()),2) else 0 end) AS `beginning_balance`,(case when (`ptc`.`transaction_class_code` = 'LOAN_AMORTIZATION') then round(aes_decrypt(`pl`.`running_balance`,`encryption_key`()),2) else 0 end) AS `running_balance`,`t`.`payroll_date` AS `payroll_date`,`t`.`date_from` AS `date_from`,`t`.`date_to` AS `date_to`,concat(date_format(if((`ptc`.`transaction_class_code` = 'NETPAY'),`t`.`payroll_date`,`t`.`date_from`),'%Y-%m'),'-',date_format(`t`.`date_from`,'%d')) AS `date_from_applicable`,date_format(if((`ptc`.`transaction_class_code` = 'NETPAY'),last_day(`t`.`payroll_date`),`t`.`date_to`),'%Y-%m-%d') AS `date_to_applicable`,`tc`.`taxcode` AS `taxcode`,`getcompany_contact`(`pct`.`company_id`,'Phone') AS `phone_no`,`getcompany_contact`(`pct`.`company_id`,'Fax') AS `fax_no` from (((((((((((((((`ww_payroll_closed_transaction` `pct` join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_partners` `p` on((`u`.`user_id` = `p`.`user_id`))) join `ww_partners_personal` `ppe` on((`p`.`partner_id` = `ppe`.`partner_id`))) join `ww_taxcode` `tc` on((`tc`.`taxcode_id` = `ppe`.`key_value`))) join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) join `ww_users_position` `upos` on((`up`.`position_id` = `upos`.`position_id`))) join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) join `ww_users_department` `d` on((`d`.`department_id` = `pct`.`department_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pct`.`company_id`))) left join `ww_payroll_period` `t` on((`t`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_partners_loan` `pl` on((`pl`.`partner_loan_id` = `pct`.`record_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) where ((`pct`.`on_hold` = 0) and (`ppe`.`key` = 'taxcode')) */;

/*View structure for view payroll_preliminary_cost_center */

/*!50001 DROP TABLE IF EXISTS `payroll_preliminary_cost_center` */;
/*!50001 DROP VIEW IF EXISTS `payroll_preliminary_cost_center` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_preliminary_cost_center` AS select `uc`.`company` AS `company`,`uc`.`company_id` AS `company_id`,`pct`.`department_id` AS `department_id`,`d`.`department` AS `department`,`pct`.`payroll_date` AS `payroll_date`,`pct`.`payment_type_id` AS `payment_type_id`,`pct`.`location_id` AS `location_id`,`p`.`sensitivity` AS `sensitivity`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `basic`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `aut`,sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `ot`,sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `nd`,sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `holiday`,sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_earnings`,sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss`,sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic`,sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf`,sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `tax`,sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `loan`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `employee_ledger`,sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_deduction`,sum(((case when (`pt`.`transaction_code` = 'NETPAY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `net_amount` from (((((((`ww_payroll_current_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_type` `ptt` on((`ptt`.`transaction_type_id` = `pt`.`transaction_type_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_users_department` `d` on((`pct`.`department_id` = `d`.`department_id`))) left join `ww_payroll_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) left join `ww_payroll_period` `pp` on((`pct`.`period_id` = `pp`.`payroll_period_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) group by `pct`.`department_id`,`pct`.`payroll_date`,`pct`.`company_id` */;

/*View structure for view payroll_preliminary_deduction */

/*!50001 DROP TABLE IF EXISTS `payroll_preliminary_deduction` */;
/*!50001 DROP VIEW IF EXISTS `payroll_preliminary_deduction` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_preliminary_deduction` AS (select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,`pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,`pt`.`transaction_id` AS `transaction_id`,`pt`.`transaction_label` AS `transaction_label`,sum(aes_decrypt(`pct`.`amount`,`encryption_key`())) AS `amount` from (((((((((((`ww_payroll_current_transaction` `pct` left join `ww_payroll_transaction_class` `ptc` on((`ptc`.`transaction_class_id` = `pct`.`transaction_class_id`))) left join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `pct`.`employee_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `wpp`.`company_id`))) left join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) left join `ww_payroll_rate_type` `prt` on((`wpp`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) where ((`pct`.`on_hold` = 0) and (`pct`.`deleted` = 0) and (`ptc`.`deleted` = 0) and (`pt`.`deleted` = 0) and (`pt`.`transaction_type_id` in (3,4,5)) and (`ptc`.`government_mandated` <> 1)) group by `u`.`user_id`,`pct`.`payroll_date`,`pt`.`transaction_label`) */;

/*View structure for view payroll_preliminary_earnings */

/*!50001 DROP TABLE IF EXISTS `payroll_preliminary_earnings` */;
/*!50001 DROP VIEW IF EXISTS `payroll_preliminary_earnings` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_preliminary_earnings` AS (select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,`pt`.`transaction_label` AS `transaction_label`,sum(aes_decrypt(`pct`.`amount`,`encryption_key`())) AS `amount`,`t`.`transaction_type` AS `transaction_type` from (((((((((((`ww_payroll_current_transaction` `pct` left join `ww_payroll_transaction_class` `ptc` on((`ptc`.`transaction_class_id` = `pct`.`transaction_class_id`))) left join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) left join `ww_payroll_transaction_type` `t` on((`t`.`transaction_type_id` = `pct`.`transaction_type_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `pct`.`employee_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `wpp`.`company_id`))) left join `ww_payroll_period` `pp` on((`pct`.`period_id` = `pp`.`payroll_period_id`))) where ((`pct`.`on_hold` = 0) and (`pct`.`deleted` = 0) and (`ptc`.`deleted` = 0) and (`pt`.`deleted` = 0) and (`pt`.`transaction_type_id` in (1,2,6,7,8)) and (`ptc`.`transaction_class_code` <> 'SALARY')) group by `pct`.`employee_id`,`pct`.`transaction_id`,`pct`.`payroll_date`) */;

/*View structure for view payroll_preliminary_report */

/*!50001 DROP TABLE IF EXISTS `payroll_preliminary_report` */;
/*!50001 DROP VIEW IF EXISTS `payroll_preliminary_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_preliminary_report` AS (select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,`wpp`.`sensitivity` AS `sensitivity`,sum(((case when (`pct`.`transaction_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `basic`,sum(((case when (`pt`.`transaction_code` = 'E-COLA') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `cola`,sum(((case when (`pt`.`transaction_code` = 'REGND') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `nd`,sum(((case when (`ptc`.`transaction_class_code` = 'OVERTIME') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `overtime`,sum(((case when (`pct`.`transaction_code` = 'ALLOWANCE_TRANSPO') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `transpo`,sum(((case when (`pct`.`transaction_code` = 'ALLOWANCE_COMMUNICATION') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `comm`,((((((sum(((case when (`pct`.`transaction_type_id` in (1,6)) then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2))) + sum(((case when ((`pct`.`transaction_type_id` = 8) and (`ptc`.`transaction_class_code` = 'BONUS_TAXABLE')) then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when (`pct`.`transaction_code` = 'SALARY') then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when ((`pt`.`transaction_code` = 'ECOLA') and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when (`ptc`.`transaction_class_code` = 'OVERTIME') then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when (`pct`.`transaction_code` = 'ALLOWANCE_TRANSPO') then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when (`pct`.`transaction_code` = 'ALLOWANCE_COMMUNICATION') then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) AS `oth_inc_taxable`,((sum(((case when (`pct`.`transaction_type_id` in (2,7,8)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) - sum(((case when ((`pct`.`transaction_type_id` = 8) and (`ptc`.`transaction_class_code` = 'BONUS_TAXABLE')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum(((case when ((`pt`.`transaction_code` = 'ECOLA') and (`pct`.`transaction_type_id` = 1)) then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) AS `oth_inc_nontax`,sum(((case when ((`pt`.`transaction_type_id` = 5) and (`ptc`.`government_mandated` = 0)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `absences`,(sum(((case when (`pct`.`transaction_type_id` in (1,2,6,7,8)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) - sum(((case when ((`pt`.`transaction_type_id` = 5) and (`ptc`.`government_mandated` = 0)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `gross_pay`,sum(((case when (`pct`.`transaction_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `whtax`,sum(((case when (`pct`.`transaction_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss`,(sum(((case when (`pct`.`transaction_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pct`.`transaction_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `Ssser`,sum(((case when (`pct`.`transaction_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic`,sum(((case when (`pct`.`transaction_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `Phicer`,sum(((case when (`pct`.`transaction_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf`,sum(((case when (`pct`.`transaction_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `Hdmfer`,sum(((case when (`pct`.`transaction_code` = 'PagIbigAdd') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_add`,sum(((case when (`pct`.`transaction_code` = 'SSSLN_SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_loan`,sum(((case when (`pct`.`transaction_code` = 'HDMFLNA') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_loan`,((((sum(((case when (`pct`.`transaction_type_id` = 3) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) - sum(((case when (`pct`.`transaction_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum(((case when (`pct`.`transaction_code` = 'PagIbigAdd') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum(((case when (`pct`.`transaction_code` = 'SSSLN_SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum(((case when (`pct`.`transaction_code` = 'HDMFLNA') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `oth_ded`,sum(((case when (`pct`.`transaction_code` = 'NETPAY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `netpay` from ((((((((((`ww_payroll_current_transaction` `pct` join `ww_payroll_transaction_class` `ptc` on((`ptc`.`transaction_class_id` = `pct`.`transaction_class_id`))) join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `up`.`user_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `wpp`.`company_id`))) where ((`pct`.`on_hold` = 0) and (`pct`.`deleted` = 0) and (`ptc`.`deleted` = 0) and (`pt`.`deleted` = 0)) group by `pct`.`employee_id`,`pct`.`payroll_date`) */;

/*View structure for view payroll_register_closed_report */

/*!50001 DROP TABLE IF EXISTS `payroll_register_closed_report` */;
/*!50001 DROP VIEW IF EXISTS `payroll_register_closed_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_register_closed_report` AS select `pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,`pct`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`pct`.`department_id` AS `department_id`,`d`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`par`.`id_number` AS `employee_code`,`u`.`full_name` AS `employee_name`,sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `basic`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `aut`,sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `ot`,sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `nd`,sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `holiday`,sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME','NIGHT DIFF'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_earnings`,(((((sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME','NIGHT DIFF'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `gross`,sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss`,sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic`,sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf`,sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `tax`,sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `loan`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `employee_ledger`,sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_deduction`,((((((sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `deduction`,sum(((case when (`pt`.`transaction_code` = 'NETPAY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `net_amount` from (((((((((((`ww_payroll_closed_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_type` `ptt` on((`ptt`.`transaction_type_id` = `pt`.`transaction_type_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_users_department` `d` on((`pct`.`department_id` = `d`.`department_id`))) left join `ww_payroll_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) left join `ww_payroll_period` `pp` on((`pct`.`period_id` = `pp`.`payroll_period_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) left join `ww_users_branch` `b` on((`up`.`branch_id` = `b`.`branch_id`))) left join `ww_partners` `par` on((`pct`.`employee_id` = `par`.`user_id`))) group by `pct`.`department_id`,`pct`.`employee_id`,`pct`.`payroll_date` */;

/*View structure for view payroll_register_cost_center */

/*!50001 DROP TABLE IF EXISTS `payroll_register_cost_center` */;
/*!50001 DROP VIEW IF EXISTS `payroll_register_cost_center` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_register_cost_center` AS (select `uc`.`company` AS `company`,`uc`.`company_id` AS `company_id`,`pct`.`department_id` AS `department_id`,`d`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`payroll_date` AS `payroll_date`,`pct`.`payment_type_id` AS `payment_type_id`,`pct`.`location_id` AS `location_id`,`p`.`sensitivity` AS `sensitivity`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `basic`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `aut`,sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `ot`,sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `nd`,sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `holiday`,sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_earnings`,(((((sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `gross`,sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss`,sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic`,sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf`,sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `tax`,sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `loan`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `employee_ledger`,sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_deduction`,((((((sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `deduction`,sum(((case when (`pt`.`transaction_code` = 'NETPAY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `net_amount` from ((((((((((`ww_payroll_closed_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_type` `ptt` on((`ptt`.`transaction_type_id` = `pt`.`transaction_type_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_users_department` `d` on((`pct`.`department_id` = `d`.`department_id`))) left join `ww_payroll_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) left join `ww_payroll_period` `pp` on((`pct`.`period_id` = `pp`.`payroll_period_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) left join `ww_users_branch` `b` on((`up`.`branch_id` = `b`.`branch_id`))) group by `pct`.`department_id`,`pct`.`payroll_date`,`pct`.`company_id`) */;

/*View structure for view payroll_register_current_report */

/*!50001 DROP TABLE IF EXISTS `payroll_register_current_report` */;
/*!50001 DROP VIEW IF EXISTS `payroll_register_current_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_register_current_report` AS select `pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,`pct`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`pct`.`department_id` AS `department_id`,`d`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`par`.`id_number` AS `employee_code`,`u`.`full_name` AS `employee_name`,sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `basic`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `aut`,sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `ot`,sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `nd`,sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `holiday`,sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME','NIGHT DIFF'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_earnings`,(((((sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME','NIGHT DIFF'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `gross`,sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss`,sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic`,sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf`,sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `tax`,sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `loan`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `employee_ledger`,sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_deduction`,((((((sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `deduction`,sum(((case when (`pt`.`transaction_code` = 'NETPAY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `net_amount` from (((((((((((`ww_payroll_current_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_type` `ptt` on((`ptt`.`transaction_type_id` = `pt`.`transaction_type_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_users_department` `d` on((`pct`.`department_id` = `d`.`department_id`))) left join `ww_payroll_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) left join `ww_payroll_period` `pp` on((`pct`.`period_id` = `pp`.`payroll_period_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) left join `ww_users_branch` `b` on((`up`.`branch_id` = `b`.`branch_id`))) left join `ww_partners` `par` on((`pct`.`employee_id` = `par`.`user_id`))) group by `pct`.`department_id`,`pct`.`employee_id`,`pct`.`payroll_date` */;

/*View structure for view payroll_register_deduction */

/*!50001 DROP TABLE IF EXISTS `payroll_register_deduction` */;
/*!50001 DROP VIEW IF EXISTS `payroll_register_deduction` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_register_deduction` AS (select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,`pt`.`transaction_label` AS `transaction_label`,sum(aes_decrypt(`pct`.`amount`,`encryption_key`())) AS `amount` from ((((((((((`ww_payroll_closed_transaction` `pct` join `ww_payroll_transaction_class` `ptc` on((`ptc`.`transaction_class_id` = `pct`.`transaction_class_id`))) join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `pct`.`employee_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `wpp`.`company_id`))) join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) where ((`pct`.`on_hold` = 0) and (`pct`.`deleted` = 0) and (`ptc`.`deleted` = 0) and (`pt`.`deleted` = 0) and (`pt`.`transaction_type_id` in (3,4,5)) and (`ptc`.`government_mandated` <> 1)) group by `u`.`user_id`,`pct`.`payroll_date`,`pt`.`transaction_label`) */;

/*View structure for view payroll_register_earnings */

/*!50001 DROP TABLE IF EXISTS `payroll_register_earnings` */;
/*!50001 DROP VIEW IF EXISTS `payroll_register_earnings` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_register_earnings` AS (select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`ud`.`department` AS `department`,`ud`.`department_id` AS `department_id`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`payroll_date` AS `payroll_date`,(case when (`pt`.`transaction_label` = 'Salaries and Wages') then 'Basic Pay' else `pt`.`transaction_label` end) AS `transaction_label`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,sum(aes_decrypt(`pct`.`amount`,`encryption_key`())) AS `amount`,`t`.`transaction_type` AS `transaction_type` from (((((((((((`ww_payroll_closed_transaction` `pct` join `ww_payroll_transaction_class` `ptc` on((`ptc`.`transaction_class_id` = `pct`.`transaction_class_id`))) join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) join `ww_payroll_transaction_type` `t` on((`t`.`transaction_type_id` = `pct`.`transaction_type_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `pct`.`employee_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `wpp`.`company_id`))) join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) where ((`pct`.`on_hold` = 0) and (`pct`.`deleted` = 0) and (`ptc`.`deleted` = 0) and (`pt`.`deleted` = 0) and (`pt`.`transaction_type_id` in (1,2,6,7,8))) group by `pct`.`employee_id`,`pct`.`transaction_id`,`pct`.`payroll_date`) */;

/*View structure for view payroll_register_per_department */

/*!50001 DROP TABLE IF EXISTS `payroll_register_per_department` */;
/*!50001 DROP VIEW IF EXISTS `payroll_register_per_department` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_register_per_department` AS (select `uc`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,`get_headcount_per_dept`(`ud`.`department_id`,`pct`.`company_id`,`up`.`branch_id`,`pct`.`payroll_date`) AS `total_dept`,sum(((case when (`pct`.`transaction_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `basic`,sum(((case when (`pt`.`transaction_code` = 'E-COLA') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `cola`,sum(((case when (`pt`.`transaction_code` = 'REGND') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `nd`,sum(((case when (`ptc`.`transaction_class_code` = 'OVERTIME') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `overtime`,sum(((case when (`pct`.`transaction_code` = 'ALLOWANCE_TRANSPO') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `transpo`,sum(((case when (`pct`.`transaction_code` = 'ALLOWANCE_COMMUNICATION') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `comm`,((((((sum(((case when (`pct`.`transaction_type_id` in (1,6)) then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2))) + sum(((case when ((`pct`.`transaction_type_id` = 8) and (`ptc`.`transaction_class_code` = 'BONUS_TAXABLE')) then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when (`pct`.`transaction_code` = 'SALARY') then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when ((`pt`.`transaction_code` = 'ECOLA') and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when (`ptc`.`transaction_class_code` = 'OVERTIME') then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when (`pct`.`transaction_code` = 'ALLOWANCE_TRANSPO') then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when (`pct`.`transaction_code` = 'ALLOWANCE_COMMUNICATION') then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) AS `oth_inc_taxable`,((sum(((case when (`pct`.`transaction_type_id` in (2,7,8)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) - sum(((case when ((`pct`.`transaction_type_id` = 8) and (`ptc`.`transaction_class_code` = 'BONUS_TAXABLE')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum(((case when ((`pt`.`transaction_code` = 'ECOLA') and (`pct`.`transaction_type_id` = 1)) then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) AS `oth_inc_nontax`,sum(((case when ((`pt`.`transaction_type_id` = 5) and (`ptc`.`government_mandated` = 0)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `absences`,(sum(((case when (`pct`.`transaction_type_id` in (1,2,6,7,8)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) - sum(((case when ((`pt`.`transaction_type_id` = 5) and (`ptc`.`government_mandated` = 0)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `gross_pay`,sum(((case when (`pct`.`transaction_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `whtax`,sum(((case when (`pct`.`transaction_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss`,(sum(((case when (`pct`.`transaction_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pct`.`transaction_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `Ssser`,sum(((case when (`pct`.`transaction_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic`,sum(((case when (`pct`.`transaction_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `Phicer`,sum(((case when (`pct`.`transaction_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf`,sum(((case when (`pct`.`transaction_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `Hdmfer`,sum(((case when (`pct`.`transaction_code` = 'PagIbigAdd') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_add`,sum(((case when (`pct`.`transaction_code` = 'SSSLN_SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_loan`,sum(((case when (`pct`.`transaction_code` = 'HDMFLNA') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_loan`,((((sum(((case when (`pct`.`transaction_type_id` = 3) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) - sum(((case when (`pct`.`transaction_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum(((case when (`pct`.`transaction_code` = 'PagIbigAdd') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum(((case when (`pct`.`transaction_code` = 'SSSLN_SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum(((case when (`pct`.`transaction_code` = 'HDMFLNA') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `oth_ded`,sum(((case when (`pct`.`transaction_code` = 'NETPAY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `netpay` from ((((((((((`ww_payroll_closed_transaction` `pct` join `ww_payroll_transaction_class` `ptc` on((`ptc`.`transaction_class_id` = `pct`.`transaction_class_id`))) join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) left join `ww_users_branch` `b` on((`up`.`branch_id` = `b`.`branch_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `up`.`user_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `wpp`.`company_id`))) where ((`pct`.`on_hold` = 0) and (`u`.`active` = 1) and (`pct`.`deleted` = 0) and (`ptc`.`deleted` = 0) and (`pt`.`deleted` = 0)) group by `pct`.`department_id`,`pct`.`payroll_date`,`pct`.`company_id`,`up`.`branch_id`) */;

/*View structure for view payroll_register_position */

/*!50001 DROP TABLE IF EXISTS `payroll_register_position` */;
/*!50001 DROP VIEW IF EXISTS `payroll_register_position` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_register_position` AS select `pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,`pct`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`uproj`.`project_id` AS `project_id`,`uproj`.`project` AS `project`,`pct`.`department_id` AS `department_id`,`d`.`department` AS `department`,`par`.`id_number` AS `employee_code`,`po`.`position` AS `position`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `basic`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `aut`,sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `ot`,sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `nd`,sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `holiday`,sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_earnings`,(((((sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `gross`,sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss`,sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic`,sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf`,sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `tax`,sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `loan`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `employee_ledger`,sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_deduction`,((((((sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `deduction`,sum(((case when (`pt`.`transaction_code` = 'NETPAY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `net_amount` from ((((((((((((`ww_payroll_current_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_type` `ptt` on((`ptt`.`transaction_type_id` = `pt`.`transaction_type_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_users_department` `d` on((`pct`.`department_id` = `d`.`department_id`))) left join `ww_payroll_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) left join `ww_payroll_period` `pp` on((`pct`.`period_id` = `pp`.`payroll_period_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_partners` `par` on((`pct`.`employee_id` = `par`.`user_id`))) left join `ww_users_position` `po` on((`pct`.`position_id` = `po`.`position_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) group by `pct`.`department_id`,`pct`.`employee_id`,`pct`.`payroll_date` */;

/*View structure for view payroll_register_position_closed_report */

/*!50001 DROP TABLE IF EXISTS `payroll_register_position_closed_report` */;
/*!50001 DROP VIEW IF EXISTS `payroll_register_position_closed_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_register_position_closed_report` AS select `pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,`pct`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`uproj`.`project_id` AS `project_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`po`.`position` AS `position`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,0 AS `ot_percent`,0 AS `other_tax`,0 AS `adjustment`,sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `basic`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `misc`,sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `ot`,sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `nd`,sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `holiday`,sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_earnings`,(((((sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `gross`,sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_ee`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_er`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_ec`,sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_ee`,sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_er`,sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_ee`,sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_er`,sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `tax`,sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `loan`,round(sum(((case when (`pt`.`transaction_type_id` in (2,6,7)) then 1 when ((`pt`.`transaction_type_id` = 6) and (`ptc`.`transaction_class_code` <> 'BONUS_TAXABLE')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `other_nontax`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `employee_ledger`,sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_deduction`,((((((sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `deduction`,sum(((case when (`pt`.`transaction_code` = 'NETPAY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `net_amount` from ((((((((((`ww_payroll_closed_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_type` `ptt` on((`ptt`.`transaction_type_id` = `pt`.`transaction_type_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_period` `pp` on((`pct`.`period_id` = `pp`.`payroll_period_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_partners` `par` on((`pct`.`employee_id` = `par`.`user_id`))) left join `ww_users_position` `po` on((`pct`.`position_id` = `po`.`position_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) group by `pct`.`position_id`,`pct`.`payroll_date` order by `pct`.`project_id` */;

/*View structure for view payroll_register_position_current_report */

/*!50001 DROP TABLE IF EXISTS `payroll_register_position_current_report` */;
/*!50001 DROP VIEW IF EXISTS `payroll_register_position_current_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_register_position_current_report` AS select `pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,`pct`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`uproj`.`project_id` AS `project_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`po`.`position` AS `position`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,0 AS `ot_percent`,0 AS `other_tax`,0 AS `adjustment`,sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `basic`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `misc`,sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `ot`,sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `nd`,sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `holiday`,sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_earnings`,(((((sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pt`.`transaction_code` in ('REGOT','REGOT_ADJ','RDOT','RDOT_ADJ','RDOT_EXCESS','RDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('REGND','REGND_ADJ','REGOT_ND','REGOT_ND_ADJ','LEGOT_ND','LEGOT_ND_ADJ','LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ','LEGRDOT_ND','LEGRDOT_ND_ADJ','LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ','RDOT_ND','RDOT_ND_ADJ','RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ','SPEOT_ND','SPEOT_ND_ADJ','SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ','SPERDOT_ND','SPERDOT_ND_ADJ','SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ','DOBOT_ND','DOBOT_ND_ADJ','DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ','DOBRDOT_ND','DOBRDOT_ND_ADJ','DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`pt`.`transaction_code` in ('LEGOT','LEGOT_ADJ','LEGOT_EXCESS','LEGOT_EXCESS_ADJ','LEGRDOT','LEGRDOT_ADJ','LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ','SPEOT','SPEOT_ADJ','SPEOT_EXCESS','SPEOT_EXCESS_ADJ','SPERDOT','SPERDOT_ADJ','SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ','DOBOT','DOBOT_ADJ','DOBOT_EXCESS','DOBOT_EXCESS_ADJ','DOBRDOT','DOBRDOT_ADJ','DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '+') and (`ptc`.`transaction_class_code` not in ('SALARY','OVERTIME'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `gross`,sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_ee`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_er`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_ec`,sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_ee`,sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic_er`,sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_ee`,sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_er`,sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `tax`,sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `loan`,round(sum(((case when (`pt`.`transaction_type_id` in (2,6,7)) then 1 when ((`pt`.`transaction_type_id` = 6) and (`ptc`.`transaction_class_code` <> 'BONUS_TAXABLE')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `other_nontax`,sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `employee_ledger`,sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `other_deduction`,((((((sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when (`ptc`.`transaction_class_code` in ('LOAN_AMORTIZATION','LOAN_INTEREST')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum((0.00 * aes_decrypt(`pct`.`amount`,`encryption_key`())))) + sum(((case when ((`ptt`.`operation` = '-') and (`ptc`.`transaction_class_code` not in ('SSS_EMP','PHIC_EMP','HDMF_EMP','WHTAX','LOAN_AMORTIZATION','LOAN_INTEREST'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `deduction`,sum(((case when (`pt`.`transaction_code` = 'NETPAY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `net_amount` from ((((((((((`ww_payroll_current_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_type` `ptt` on((`ptt`.`transaction_type_id` = `pt`.`transaction_type_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_payroll_period` `pp` on((`pct`.`period_id` = `pp`.`payroll_period_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_partners` `par` on((`pct`.`employee_id` = `par`.`user_id`))) left join `ww_users_position` `po` on((`pct`.`position_id` = `po`.`position_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) group by `pct`.`position_id`,`pct`.`payroll_date` order by `pct`.`project_id` */;

/*View structure for view payroll_register_report */

/*!50001 DROP TABLE IF EXISTS `payroll_register_report` */;
/*!50001 DROP VIEW IF EXISTS `payroll_register_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_register_report` AS (select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`uc`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,sum(((case when (`pct`.`transaction_code` = 'SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `basic`,sum(((case when (`pt`.`transaction_code` = 'E-COLA') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `cola`,sum(((case when (`pt`.`transaction_code` = 'REGND') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `nd`,sum(((case when (`ptc`.`transaction_class_code` = 'OVERTIME') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `overtime`,sum(((case when (`pct`.`transaction_code` = 'ALLOWANCE_TRANSPO') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `transpo`,sum(((case when (`pct`.`transaction_code` = 'ALLOWANCE_COMMUNICATION') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `comm`,((((((sum(((case when (`pct`.`transaction_type_id` in (1,6)) then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2))) + sum(((case when ((`pct`.`transaction_type_id` = 8) and (`ptc`.`transaction_class_code` = 'BONUS_TAXABLE')) then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when (`pct`.`transaction_code` = 'SALARY') then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when ((`pt`.`transaction_code` = 'ECOLA') and (`pct`.`transaction_type_id` = 6)) then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when (`ptc`.`transaction_class_code` = 'OVERTIME') then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when (`pct`.`transaction_code` = 'ALLOWANCE_TRANSPO') then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) - sum(((case when (`pct`.`transaction_code` = 'ALLOWANCE_COMMUNICATION') then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) AS `oth_inc_taxable`,((sum(((case when (`pct`.`transaction_type_id` in (2,7,8)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) - sum(((case when ((`pct`.`transaction_type_id` = 8) and (`ptc`.`transaction_class_code` = 'BONUS_TAXABLE')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum(((case when ((`pt`.`transaction_code` = 'ECOLA') and (`pct`.`transaction_type_id` = 1)) then 1 else 0 end) * round(aes_decrypt(`pct`.`amount`,`encryption_key`()),2)))) AS `oth_inc_nontax`,sum(((case when ((`pt`.`transaction_type_id` = 5) and (`ptc`.`government_mandated` = 0)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `absences`,(sum(((case when (`pct`.`transaction_type_id` in (1,2,6,7,8)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) - sum(((case when ((`pt`.`transaction_type_id` = 5) and (`ptc`.`government_mandated` = 0)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `gross_pay`,sum(((case when (`pct`.`transaction_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `whtax`,sum(((case when (`pct`.`transaction_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss`,(sum(((case when (`pct`.`transaction_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) + sum(((case when (`pct`.`transaction_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `Ssser`,sum(((case when (`pct`.`transaction_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `phic`,sum(((case when (`pct`.`transaction_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `Phicer`,sum(((case when (`pct`.`transaction_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf`,sum(((case when (`pct`.`transaction_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `Hdmfer`,sum(((case when (`pct`.`transaction_code` = 'PagIbigAdd') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_add`,sum(((case when (`pct`.`transaction_code` = 'SSSLN_SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `sss_loan`,sum(((case when (`pct`.`transaction_code` = 'HDMFLNA') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `hdmf_loan`,((((sum(((case when (`pct`.`transaction_type_id` = 3) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) - sum(((case when (`pct`.`transaction_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum(((case when (`pct`.`transaction_code` = 'PagIbigAdd') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum(((case when (`pct`.`transaction_code` = 'SSSLN_SALARY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) - sum(((case when (`pct`.`transaction_code` = 'HDMFLNA') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `oth_ded`,sum(((case when (`pct`.`transaction_code` = 'NETPAY') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `netpay` from ((((((((((`ww_payroll_closed_transaction` `pct` join `ww_payroll_transaction_class` `ptc` on((`ptc`.`transaction_class_id` = `pct`.`transaction_class_id`))) join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `up`.`user_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `wpp`.`company_id`))) where ((`pct`.`on_hold` = 0) and ((`u`.`active` = 1) or ((`u`.`active` = 0) and (`p`.`resigned_date` <= now()))) and (`pct`.`deleted` = 0) and (`ptc`.`deleted` = 0) and (`pt`.`deleted` = 0)) group by `pct`.`employee_id`,`pct`.`payroll_date` order by `ud`.`department_id`) */;

/*View structure for view payroll_salary_distribution */

/*!50001 DROP TABLE IF EXISTS `payroll_salary_distribution` */;
/*!50001 DROP VIEW IF EXISTS `payroll_salary_distribution` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_salary_distribution` AS select `u`.`user_id` AS `employee`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`po`.`position` AS `position`,`p`.`classification_id` AS `classification_id`,`p`.`classification` AS `classification`,`uc`.`company` AS `company`,`uc`.`company_id` AS `company_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`uproj`.`project_id` AS `project_id`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,`pct`.`payroll_date` AS `payroll_date`,ifnull(trim(`pp`.`key_value`),'') AS `cost_center`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 when (`ptc`.`transaction_class_code` in ('ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')) then -(1) when (`pct`.`transaction_code` in ('LWOP','LWOP_ADJ')) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `total_basic`,round(sum(((case when (`ptc`.`transaction_class_code` = 'OVERTIME') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `overtime`,round(sum(((case when (`pt`.`transaction_type_id` in (2,6,7)) then 1 when ((`pt`.`transaction_type_id` = 6) and (`ptc`.`transaction_class_code` <> 'BONUS_TAXABLE')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `other_nontax`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_er`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_ec`,round(sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `hdmf_er`,round(sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `phic_er` from (((((((((`ww_payroll_current_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) left join `ww_partners_personal` `pp` on(((`pp`.`deleted` = 0) and (`pp`.`partner_id` = `p`.`partner_id`) and (`pp`.`key` = 'cost_center-cost_center')))) left join `ww_users_position` `po` on((`pct`.`position_id` = `po`.`position_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) where ((`pct`.`deleted` = 0) and (`pct`.`on_hold` = 0) and (`pt`.`deleted` = 0) and (`u`.`deleted` = 0)) group by `pct`.`employee_id`,`pp`.`key_value` union all select `u`.`user_id` AS `employee`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`po`.`position` AS `position`,`p`.`classification_id` AS `classification_id`,`p`.`classification` AS `classification`,`uc`.`company` AS `company`,`uc`.`company_id` AS `company_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`uproj`.`project_id` AS `project_id`,`prt`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,`pct`.`payroll_date` AS `payroll_date`,ifnull(trim(`pp`.`key_value`),'') AS `cost_center`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SALARY') then 1 when (`ptc`.`transaction_class_code` in ('ABSENCES','DEDUCTION_LATE','DEDUCTION_UNDERTIME')) then -(1) when (`pct`.`transaction_code` in ('LWOP','LWOP_ADJ')) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `total_basic`,round(sum(((case when (`ptc`.`transaction_class_code` = 'OVERTIME') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `overtime`,round(sum(((case when (`pt`.`transaction_type_id` in (2,6,7)) then 1 when ((`pt`.`transaction_type_id` = 6) and (`ptc`.`transaction_class_code` <> 'BONUS_TAXABLE')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `other_nontax`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_er`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_ec`,round(sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `hdmf_er`,round(sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `phic_er` from (((((((((`ww_payroll_closed_transaction` `pct` left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) left join `ww_users_company` `uc` on((`pct`.`company_id` = `uc`.`company_id`))) left join `ww_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) left join `ww_partners_personal` `pp` on(((`pp`.`deleted` = 0) and (`pp`.`partner_id` = `p`.`partner_id`) and (`pp`.`key` = 'cost_center-cost_center')))) left join `ww_users_position` `po` on((`pct`.`position_id` = `po`.`position_id`))) left join `ww_users_project` `uproj` on((`pct`.`project_id` = `uproj`.`project_id`))) left join `ww_payroll_rate_type` `prt` on((`pct`.`payroll_rate_type_id` = `prt`.`payroll_rate_type_id`))) where ((`pct`.`deleted` = 0) and (`pt`.`deleted` = 0) and (`u`.`deleted` = 0)) group by `pct`.`employee_id`,`pp`.`key_value` order by `cost_center`,`project_id` */;

/*View structure for view payroll_salary_per_department */

/*!50001 DROP TABLE IF EXISTS `payroll_salary_per_department` */;
/*!50001 DROP VIEW IF EXISTS `payroll_salary_per_department` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_salary_per_department` AS select `d`.`department` AS `Department`,`pct`.`payroll_date` AS `Payroll`,round(aes_decrypt(`p`.`salary`,`encryption_key`()),2) AS `Reg. Sal`,round(sum(((case when (`ptc`.`transaction_class_code` = 'OVERTIME') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `Overtime`,round(sum(((case when (`pct`.`transaction_code` = 'SALADJ') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `Salary Adjustment`,round(sum(((case when (`pct`.`transaction_code` in ('ABSENCES','ABSENCES_ADJ','LWOP','LWOP_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `Absences`,round(sum(((case when (`pct`.`transaction_code` in ('DEDUCTION_LATE','DEDUCTION_LATE_ADJ','DEDUCTION_UNDERTIME','DEDUCTION_UNDERTIME_ADJ')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `UT/Tardiness`,round(sum(((case when (`pct`.`transaction_code` = 'INCENTIVES') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `Incentives`,round(sum(((case when (`pct`.`transaction_code` = 'SIL') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `SIL`,round(sum(((case when (`pct`.`transaction_code` in ('VLSLNT','VLSLTAX')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `Leave Conversion`,round(sum(((case when (`pct`.`transaction_code` in ('BIP','PBBPA','PBBSB')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `BIP/PBB`,round(sum(((case when (`pct`.`transaction_code` like 'ECOLA') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `COLA`,round(sum(((case when (`pct`.`transaction_code` = 'TRANSPO') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `Transportation Allowance`,round(sum(((case when (`pct`.`transaction_code` = 'TAXREF') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `Tax Adj`,round(sum(((case when (`pct`.`transaction_code` = 'LNREF') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `Loan Refund`,round(sum(((case when (`pct`.`transaction_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `SSS`,round(sum(((case when (`pct`.`transaction_code` = 'HDMF_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `Pag-Ibig`,round(sum(((case when (`pct`.`transaction_code` = 'PHIC_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `PhilHealth` from (((`ww_payroll_closed_transaction` `pct` left join `ww_payroll_transaction_class` `ptc` on((`ptc`.`transaction_class_id` = `pct`.`transaction_class_id`))) left join `ww_payroll_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) left join `ww_users_department` `d` on((`d`.`department_id` = `pct`.`department_id`))) group by `d`.`department` */;

/*View structure for view payroll_sss_loan */

/*!50001 DROP TABLE IF EXISTS `payroll_sss_loan` */;
/*!50001 DROP VIEW IF EXISTS `payroll_sss_loan` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_sss_loan` AS select `uc`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`uc`.`sss` AS `sss`,`u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`pp`.`sss_no` AS `sss_no`,year(`lp`.`payroll_date`) AS `year`,month(`lp`.`payroll_date`) AS `month_id`,`m`.`month` AS `month`,`pl`.`partner_loan_id` AS `partner_loan_id`,concat(replace(`u`.`lastname`,' *',''),', ',`u`.`firstname`,' ',`u`.`middlename`) AS `employee_name`,`u`.`lastname` AS `lastname`,`u`.`firstname` AS `firstname`,`u`.`middlename` AS `middlename`,`u`.`suffix` AS `suffix`,`lt`.`loan_code` AS `loan_code`,`pl`.`entry_date` AS `release_date`,`lt`.`loan_type_id` AS `loan_type_id`,ifnull(round(aes_decrypt(`pl`.`loan_principal`,`encryption_key`()),2),0) AS `loan_principal`,round(sum(aes_decrypt(`lp`.`amount`,`encryption_key`())),2) AS `current`,0.00 AS `overdue`,round(sum(aes_decrypt(`lp`.`amount`,`encryption_key`())),2) AS `due`,'' AS `remarks`,if((isnull(`p`.`resigned_date`) or (`p`.`resigned_date` = '0000-00-00')),'/ /',`p`.`resigned_date`) AS `resigned_date` from ((((((((`ww_payroll_partners_loan` `pl` left join `ww_payroll_partners_loan_payment` `lp` on((`pl`.`partner_loan_id` = `lp`.`partner_loan_id`))) left join `ww_users_profile` `u` on((`pl`.`user_id` = `u`.`user_id`))) left join `ww_partners` `p` on((`pl`.`user_id` = `p`.`user_id`))) left join `ww_payroll_partners` `pp` on((`pl`.`user_id` = `pp`.`user_id`))) left join `ww_users_company` `uc` on((`u`.`company_id` = `uc`.`company_id`))) left join `ww_payroll_loan` `l` on((`pl`.`loan_id` = `l`.`loan_id`))) left join `ww_payroll_loan_type` `lt` on((`l`.`loan_type_id` = `lt`.`loan_type_id`))) left join `ww_month` `m` on((month(`lp`.`date_paid`) = `m`.`month_id`))) where ((`lt`.`loan_type` like '%SSS%') and (`lt`.`deleted` = 0) and (`pl`.`deleted` = 0) and (`lp`.`deleted` = 0)) group by `uc`.`company_id`,`uc`.`company`,`uc`.`sss`,`u`.`user_id`,`p`.`id_number`,`pp`.`sss_no`,year(`lp`.`date_paid`),month(`lp`.`date_paid`),`m`.`month`,`pl`.`partner_loan_id`,`lt`.`loan_code`,`pl`.`release_date` */;

/*View structure for view payroll_sss_loan_to_disk_report */

/*!50001 DROP TABLE IF EXISTS `payroll_sss_loan_to_disk_report` */;
/*!50001 DROP VIEW IF EXISTS `payroll_sss_loan_to_disk_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_sss_loan_to_disk_report` AS select `uc`.`company_id` AS `company_id`,`uc`.`company` AS `company`,ifnull(`uc`.`sss_branch_code`,'00') AS `sss_branch_code`,`d`.`department_id` AS `department_id`,`d`.`department` AS `department`,`u`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,replace(`uc`.`sss`,'-','') AS `sss`,`u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`pp`.`sss_no` AS `sss_no`,year(`lp`.`payroll_date`) AS `year`,month(`lp`.`payroll_date`) AS `month_id`,`m`.`month` AS `month`,`pl`.`partner_loan_id` AS `partner_loan_id`,concat(replace(`u`.`lastname`,' *',''),', ',`u`.`firstname`,' ',`u`.`middlename`) AS `employee_name`,`u`.`lastname` AS `lastname`,`u`.`firstname` AS `firstname`,`u`.`middlename` AS `middlename`,`u`.`suffix` AS `suffix`,`lt`.`loan_code` AS `loan_code`,`pl`.`entry_date` AS `release_date`,`lt`.`loan_type_id` AS `loan_type_id`,ifnull(round(aes_decrypt(`pl`.`loan_principal`,`encryption_key`()),2),0) AS `loan_principal`,round(sum(aes_decrypt(`lp`.`amount`,`encryption_key`())),2) AS `current`,0.00 AS `overdue`,round(sum(aes_decrypt(`lp`.`amount`,`encryption_key`())),2) AS `due`,'' AS `remarks`,if((isnull(`p`.`resigned_date`) or (`p`.`resigned_date` = '0000-00-00')),'/ /',`p`.`resigned_date`) AS `resigned_date`,concat('10',lpad(replace(`pp`.`sss_no`,'-',''),10,'0'),(case when (locate('ñ',`u`.`lastname`) <> 'false') then rpad(replace(`u`.`lastname`,' *',''),15,' ') else rpad(replace(`u`.`lastname`,' *',''),15,' ') end),(case when (locate('ñ',`u`.`firstname`) <> 'false') then rpad(`u`.`firstname`,15,' ') else rpad(`u`.`firstname`,15,' ') end),(case when (`u`.`middlename` <> '') then rpad(substr(`u`.`middlename`,1,1),2,' ') else rpad('',2,' ') end),`lt`.`loan_code`,date_format(`pl`.`entry_date`,'%y%m%d'),'0',rpad(ifnull(round(aes_decrypt(`pl`.`loan_principal`,`encryption_key`()),0),0),13,'0'),lpad(replace(round(sum(aes_decrypt(`lp`.`amount`,`encryption_key`())),2),'.',''),6,'0')) AS `record`,now() AS `document_date` from ((((((((((`ww_payroll_partners_loan` `pl` left join `ww_payroll_partners_loan_payment` `lp` on((`pl`.`partner_loan_id` = `lp`.`partner_loan_id`))) left join `ww_users_profile` `u` on((`pl`.`user_id` = `u`.`user_id`))) left join `ww_partners` `p` on((`pl`.`user_id` = `p`.`user_id`))) left join `ww_payroll_partners` `pp` on((`pl`.`user_id` = `pp`.`user_id`))) left join `ww_users_company` `uc` on((`u`.`company_id` = `uc`.`company_id`))) left join `ww_users_department` `d` on((`u`.`department_id` = `d`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `u`.`branch_id`))) left join `ww_payroll_loan` `l` on((`pl`.`loan_id` = `l`.`loan_id`))) left join `ww_payroll_loan_type` `lt` on((`l`.`loan_type_id` = `lt`.`loan_type_id`))) left join `ww_month` `m` on((month(`lp`.`date_paid`) = `m`.`month_id`))) where ((`lt`.`loan_type` like '%SSS%') and (`lt`.`deleted` = 0) and (`pl`.`deleted` = 0) and (`lp`.`deleted` = 0)) group by `uc`.`company_id`,`uc`.`company`,`uc`.`sss`,`u`.`user_id`,`p`.`id_number`,`pp`.`sss_no`,year(`lp`.`date_paid`),month(`lp`.`date_paid`),`m`.`month`,`pl`.`partner_loan_id`,`lt`.`loan_code`,`pl`.`release_date` */;

/*View structure for view payroll_sss_to_disk_report */

/*!50001 DROP TABLE IF EXISTS `payroll_sss_to_disk_report` */;
/*!50001 DROP VIEW IF EXISTS `payroll_sss_to_disk_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_sss_to_disk_report` AS (select `payroll_partners_contribution_sss`.`lastname` AS `lastname`,`payroll_partners_contribution_sss`.`firstname` AS `firstname`,`payroll_partners_contribution_sss`.`middlename` AS `middlename`,`payroll_partners_contribution_sss`.`year` AS `year`,`payroll_partners_contribution_sss`.`month` AS `month`,(`payroll_partners_contribution_sss`.`sss_emp` + `payroll_partners_contribution_sss`.`sss_com`) AS `contribution`,`payroll_partners_contribution_sss`.`sss_ecc` AS `ec`,`payroll_partners_contribution_sss`.`user_id` AS `user_id`,`payroll_partners_contribution_sss`.`department_id` AS `department_id`,`payroll_partners_contribution_sss`.`branch_id` AS `branch_id`,`payroll_partners_contribution_sss`.`branch` AS `branch`,`payroll_partners_contribution_sss`.`company_id` AS `company_id`,`payroll_partners_contribution_sss`.`company` AS `company`,`payroll_partners_contribution_sss`.`company_code` AS `company_code`,`payroll_partners_contribution_sss`.`co_sss` AS `co_sss`,`get_sbr_date`(`payroll_partners_contribution_sss`.`user_id`,`payroll_partners_contribution_sss`.`payroll_date`,'SSS_EMP') AS `doc_date`,`get_sbr_no`(`payroll_partners_contribution_sss`.`user_id`,`payroll_partners_contribution_sss`.`payroll_date`,'SSS_EMP') AS `doc_no`,concat(rpad('20',5,' '),(case when (locate('ñ',`payroll_partners_contribution_sss`.`lastname`) <> 'false') then rpad(replace(`payroll_partners_contribution_sss`.`lastname`,' *',''),21,' ') else rpad(replace(`payroll_partners_contribution_sss`.`lastname`,' *',''),20,' ') end),(case when (locate('ñ',`payroll_partners_contribution_sss`.`firstname`) <> 'false') then rpad(`payroll_partners_contribution_sss`.`firstname`,21,' ') else rpad(`payroll_partners_contribution_sss`.`firstname`,20,' ') end),(case when (`payroll_partners_contribution_sss`.`middlename` <> '') then rpad(replace(`payroll_partners_contribution_sss`.`middlename`,'.',''),1,'') else ' ' end),rpad(replace(`payroll_partners_contribution_sss`.`sss_no`,'-',''),11,'0'),round((`payroll_partners_contribution_sss`.`sss_emp` + `payroll_partners_contribution_sss`.`sss_com`),2),'000',round(`payroll_partners_contribution_sss`.`sss_ecc`,2),lpad(if((`payroll_partners_contribution_sss`.`govt_status` = 1),date_format(`payroll_partners_contribution_sss`.`hired_date`,'%Y%m%d'),''),8,' '),`payroll_partners_contribution_sss`.`govt_status`) AS `record`,now() AS `document_date` from `payroll_partners_contribution_sss`) */;

/*View structure for view payroll_sssr5_report */

/*!50001 DROP TABLE IF EXISTS `payroll_sssr5_report` */;
/*!50001 DROP VIEW IF EXISTS `payroll_sssr5_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_sssr5_report` AS (select `uc`.`company` AS `company`,`pp`.`company_id` AS `company_id`,`uc`.`tin` AS `tin`,`uc`.`sss` AS `co_sss`,`uc`.`phic` AS `co_phic`,`uc`.`hdmf` AS `co_hdmf`,`uc`.`address` AS `co_address`,`uc`.`zipcode` AS `zipcode`,`getcompany_contact`(`pp`.`company_id`,'phone') AS `contact_no`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,year(`pct`.`payroll_date`) AS `year`,month(`pct`.`payroll_date`) AS `month`,`up`.`birth_date` AS `birth_date`,`pp`.`sss_no` AS `sss_no`,`pp`.`phic_no` AS `phic_no`,`pp`.`hdmf_no` AS `hdmf_no`,round(sum(((case when (`pct`.`transaction_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_emp`,round(sum(((case when (`pct`.`transaction_code` = 'SSS_COM') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_com`,round(sum(((case when (`pct`.`transaction_code` = 'SSS_ECC') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss_ecc` from ((((((`ww_payroll_closed_transaction` `pct` join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `pct`.`employee_id`))) join `ww_partners` `p` on((`pct`.`employee_id` = `p`.`user_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`pct`.`employee_id` = `up`.`user_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `pp`.`company_id`))) join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) group by `pct`.`company_id`,year(`pct`.`payroll_date`),month(`pct`.`payroll_date`)) */;

/*View structure for view payroll_summary */

/*!50001 DROP TABLE IF EXISTS `payroll_summary` */;
/*!50001 DROP VIEW IF EXISTS `payroll_summary` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_summary` AS select `pct`.`employee_id` AS `employee_id`,`u`.`full_name` AS `full_name`,`pct`.`company_id` AS `company_id`,`uc`.`company` AS `company`,`t`.`amount` AS `exempt`,`t`.`dependent` AS `no_dependent`,year(`pct`.`payroll_date`) AS `year`,round(sum(((case when (`pt`.`transaction_code` in ('SALARY','SALADJ')) then 1 when ((`pt`.`transaction_type_id` = 5) and (`ptc`.`government_mandated` = 0)) then -(1) else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `tot_basic`,round(sum(((case when (`ptc`.`transaction_class_code` = 'OVERTIME') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `overtime`,round(sum(((case when ((`pt`.`transaction_type_id` = 2) and (`ptc`.`transaction_class_code` not in ('BONUS','LEAVES','BONUS_TAXABLE'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `benefits`,round(sum(((case when ((`pt`.`transaction_type_id` = 1) and (`pt`.`transaction_code` not in ('SALARY','SALADJ')) and (`ptc`.`transaction_class_code` not in ('OVERTIME','BONUS','LEAVES','BONUS_TAXABLE'))) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `allowance`,round(sum(((case when ((`pt`.`transaction_type_id` = 2) and (`ptc`.`transaction_class_code` = 'LEAVES')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `leave_nt`,round(sum(((case when ((`pt`.`transaction_type_id` = 1) and (`ptc`.`transaction_class_code` = 'LEAVES')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `leave_tax`,round(sum(((case when ((`pt`.`transaction_type_id` = 2) and (`ptc`.`transaction_class_code` = 'BONUS')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `bonus_nt`,round(sum(((case when ((`pt`.`transaction_type_id` = 1) and (`ptc`.`transaction_class_code` = 'BONUS_TAXABLE')) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `bonus_tax`,round(sum(((case when ((`pt`.`transaction_type_id` = 5) and (`ptc`.`government_mandated` = 1)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `contribution`,round(sum(((case when (`ptc`.`transaction_class_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `wtax`,round(sum(((case when (`ptc`.`transaction_class_code` = 'SSS_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `sss`,round(sum(((case when (`ptc`.`transaction_class_code` = 'PHIC_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `philhealth`,round(sum(((case when (`ptc`.`transaction_class_code` = 'HDMF_EMP') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))),2) AS `pagibig` from (((((((`ww_payroll_closed_transaction` `pct` left join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `pct`.`employee_id`))) left join `ww_users` `u` on((`u`.`user_id` = `pct`.`employee_id`))) left join `ww_users_profile` `up` on((`up`.`user_id` = `u`.`user_id`))) left join `ww_payroll_transaction` `pt` on((`pct`.`transaction_id` = `pt`.`transaction_id`))) left join `ww_payroll_transaction_class` `ptc` on((`pt`.`transaction_class_id` = `ptc`.`transaction_class_id`))) left join `ww_taxcode` `t` on((`t`.`taxcode_id` = `pp`.`taxcode_id`))) left join `ww_users_company` `uc` on((`uc`.`company_id` = `pct`.`company_id`))) group by `pct`.`employee_id`,year(`pct`.`payroll_date`) */;

/*View structure for view payroll_tax */

/*!50001 DROP TABLE IF EXISTS `payroll_tax` */;
/*!50001 DROP VIEW IF EXISTS `payroll_tax` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_tax` AS (select `payroll_tax_contribution`.`user_id` AS `user_id`,`payroll_tax_contribution`.`id_number` AS `id_number`,`payroll_tax_contribution`.`full_name` AS `full_name`,`payroll_tax_contribution`.`tin` AS `tin`,`payroll_tax_contribution`.`company` AS `company`,`payroll_tax_contribution`.`company_id` AS `company_id`,`payroll_tax_contribution`.`department_id` AS `department_id`,`payroll_tax_contribution`.`department` AS `department`,year(`payroll_tax_contribution`.`payroll_date`) AS `year`,month(`payroll_tax_contribution`.`payroll_date`) AS `month`,`payroll_tax_contribution`.`sensitivity` AS `sensitivity`,sum(((case `payroll_tax_contribution`.`period` when 1 then 1 else 0 end) * `payroll_tax_contribution`.`gross_pay`)) AS `gross_pay1`,sum(((case `payroll_tax_contribution`.`period` when 1 then 1 else 0 end) * `payroll_tax_contribution`.`whtax`)) AS `whtax1`,sum(((case `payroll_tax_contribution`.`period` when 2 then 1 else 0 end) * `payroll_tax_contribution`.`gross_pay`)) AS `gross_pay2`,sum(((case `payroll_tax_contribution`.`period` when 2 then 1 else 0 end) * `payroll_tax_contribution`.`whtax`)) AS `whtax2` from `payroll_tax_contribution` group by `payroll_tax_contribution`.`user_id`,year(`payroll_tax_contribution`.`payroll_date`),month(`payroll_tax_contribution`.`payroll_date`)) */;

/*View structure for view payroll_tax_contribution */

/*!50001 DROP TABLE IF EXISTS `payroll_tax_contribution` */;
/*!50001 DROP VIEW IF EXISTS `payroll_tax_contribution` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `payroll_tax_contribution` AS (select `u`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`wpp`.`tin` AS `tin`,`uc`.`company` AS `company`,`wpp`.`company_id` AS `company_id`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`pct`.`payroll_date` AS `payroll_date`,`pp`.`date_from` AS `date_from`,`pp`.`date_to` AS `date_to`,`wpp`.`sensitivity` AS `sensitivity`,(case `pp`.`week` when 1 then 1 when 2 then 1 when 3 then 2 when 4 then 2 else 0 end) AS `period`,(sum(((case when (`pct`.`transaction_type_id` in (1,6)) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) - sum(((case when (`pt`.`transaction_type_id` = 5) then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`())))) AS `gross_pay`,sum(((case when (`pct`.`transaction_code` = 'WHTAX') then 1 else 0 end) * aes_decrypt(`pct`.`amount`,`encryption_key`()))) AS `whtax` from (((((((((`ww_payroll_closed_transaction` `pct` join `ww_payroll_transaction_class` `ptc` on((`ptc`.`transaction_class_id` = `pct`.`transaction_class_id`))) join `ww_payroll_transaction` `pt` on((`pt`.`transaction_id` = `pct`.`transaction_id`))) join `ww_users` `u` on((`pct`.`employee_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `pct`.`employee_id`))) join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) join `ww_partners` `p` on((`p`.`user_id` = `pct`.`employee_id`))) join `ww_payroll_period` `pp` on((`pp`.`payroll_period_id` = `pct`.`period_id`))) join `ww_payroll_partners` `wpp` on((`wpp`.`user_id` = `up`.`user_id`))) join `ww_users_company` `uc` on((`uc`.`company_id` = `wpp`.`company_id`))) where ((`pct`.`on_hold` = 0) and (`pct`.`deleted` = 0) and (`ptc`.`deleted` = 0) and (`pt`.`deleted` = 0)) group by `pct`.`employee_id`,`pct`.`payroll_date`) */;

/*View structure for view play_partner */

/*!50001 DROP TABLE IF EXISTS `play_partner` */;
/*!50001 DROP VIEW IF EXISTS `play_partner` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `play_partner` AS (select `ww_users`.`user_id` AS `user_id`,`ww_users`.`display_name` AS `alias`,`ww_play_partner_points`.`league_id` AS `league_id`,`ww_play_league`.`league` AS `league`,`ww_play_partner_points`.`level_no` AS `level_no`,`ww_play_partner_points`.`points` AS `points`,`ww_play_level`.`points_to` AS `end_point`,`ww_play_partner_points`.`jars` AS `jars`,`ww_play_partner_points`.`total_points` AS `total_points`,`ww_play_partner_points`.`used_points` AS `used_points`,`ww_play_partner_points`.`redeemed` AS `redeemed` from (((`ww_users` left join `ww_play_partner_points` on((`ww_play_partner_points`.`user_id` = `ww_users`.`user_id`))) left join `ww_play_league` on((`ww_play_league`.`league_id` = `ww_play_partner_points`.`league_id`))) left join `ww_play_level` on((`ww_play_level`.`level_id` = `ww_play_partner_points`.`level_no`))) where ((`ww_users`.`deleted` = 0) and (`ww_users`.`active` = 1))) */;

/*View structure for view play_partner_badge */

/*!50001 DROP TABLE IF EXISTS `play_partner_badge` */;
/*!50001 DROP VIEW IF EXISTS `play_partner_badge` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `play_partner_badge` AS (select `ww_users`.`user_id` AS `user_id`,`ww_users`.`display_name` AS `alias`,`ww_play_badges`.`badge_id` AS `badge_id`,`ww_play_badges`.`badge` AS `badge`,ifnull(`ww_play_partner_badge`.`badge_points`,0) AS `badge_points`,`ww_play_badges`.`points` AS `points`,`ww_play_badges`.`image_path` AS `image_path`,`ww_play_badges`.`description` AS `description` from ((`ww_users` join `ww_play_badges` on((`ww_play_badges`.`deleted` = 0))) left join `ww_play_partner_badge` on(((`ww_play_partner_badge`.`user_id` = `ww_users`.`user_id`) and (`ww_play_badges`.`badge_id` = `ww_play_partner_badge`.`badge_id`)))) where ((`ww_users`.`deleted` = 0) and (`ww_users`.`active` = 1))) */;

/*View structure for view recruitment_request */

/*!50001 DROP TABLE IF EXISTS `recruitment_request` */;
/*!50001 DROP VIEW IF EXISTS `recruitment_request` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `recruitment_request` AS (select `rq`.`document_no` AS `document_no`,`p`.`position` AS `position`,`c`.`company_id` AS `company_id`,`c`.`company` AS `company`,`d`.`department` AS `department`,`u`.`full_name` AS `requested_by`,date_format(`rq`.`date_needed`,'%M %d, %Y') AS `recruitment_request_date`,date_format(`ra`.`modified_on`,'%b %d, %Y %h:%i %p') AS `recruitment_request_date_approved`,`rs`.`recruit_status` AS `recruit_status` from ((((((`ww_recruitment_request` `rq` left join `ww_users_department` `d` on((`rq`.`department_id` = `d`.`department_id`))) left join `ww_users_company` `c` on((`rq`.`company_id` = `c`.`company_id`))) left join `ww_users_position` `p` on((`rq`.`position_id` = `p`.`position_id`))) left join `ww_recruitment_request_status` `rs` on((`rq`.`status_id` = `rs`.`recruit_status_id`))) left join `ww_recruitment_request_approver` `ra` on((`rq`.`request_id` = `ra`.`request_id`))) left join `ww_users` `u` on((`rq`.`user_id` = `u`.`user_id`))) where (`rq`.`deleted` = 0)) */;

/*View structure for view report_late_monitoring */

/*!50001 DROP TABLE IF EXISTS `report_late_monitoring` */;
/*!50001 DROP VIEW IF EXISTS `report_late_monitoring` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_late_monitoring` AS (select `tp`.`payroll_date` AS `payroll_date`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`up`.`project_id` AS `project_id`,`uproj`.`project_code` AS `project_code`,`uproj`.`project` AS `project`,`u`.`full_name` AS `full_name`,`p`.`id_number` AS `id_number`,`tr`.`date` AS `date`,`trs`.`late` AS `late`,`pp`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,concat(`uproj`.`project_code`,' - ',`uproj`.`project`) AS `project_title` from ((((((((`ww_time_period` `tp` join `time_record` `tr` on((`tr`.`date` between `tp`.`date_from` and `tp`.`date_to`))) join `time_record_summary` `trs` on(((`trs`.`date` = `tr`.`date`) and (`trs`.`user_id` = `tr`.`user_id`)))) join `users` `u` on((`u`.`user_id` = `tr`.`user_id`))) join `users_profile` `up` on(((`up`.`user_id` = `u`.`user_id`) and (`up`.`company_id` = `tp`.`company_id`)))) join `partners` `p` on((`p`.`user_id` = `u`.`user_id`))) left join `ww_users_project` `uproj` on((`uproj`.`project_id` = `up`.`project_id`))) left join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) left join `ww_payroll_rate_type` `prt` on((`prt`.`payroll_rate_type_id` = `pp`.`payroll_rate_type_id`))) order by `uproj`.`project`,`u`.`full_name`,`tr`.`date`) */;

/*View structure for view report_leave_summary */

/*!50001 DROP TABLE IF EXISTS `report_leave_summary` */;
/*!50001 DROP VIEW IF EXISTS `report_leave_summary` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_leave_summary` AS (select `tfs`.`form_status` AS `form_status`,`tf`.`form_code` AS `form_code`,`tf`.`user_id` AS `user_id`,`u`.`full_name` AS `full_name`,`tf`.`day` AS `day`,`tf`.`date_from` AS `date_from`,`tf`.`date_to` AS `date_to`,`tf`.`reason` AS `reason`,`p`.`id_number` AS `id_number`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company` from ((((`ww_time_forms` `tf` join `users` `u` on((`u`.`user_id` = `tf`.`user_id`))) join `users_profile` `up` on((`up`.`user_id` = `u`.`user_id`))) join `partners` `p` on((`p`.`user_id` = `u`.`user_id`))) join `ww_time_form_status` `tfs` on((`tfs`.`form_status_id` = `tf`.`form_status_id`))) where ((`tf`.`form_code` in ('SL','VL')) and (`tf`.`deleted` = 0)) order by `u`.`full_name`) */;

/*View structure for view report_monthly_overtime */

/*!50001 DROP TABLE IF EXISTS `report_monthly_overtime` */;
/*!50001 DROP VIEW IF EXISTS `report_monthly_overtime` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_monthly_overtime` AS (select `p`.`id_number` AS `employee_number`,concat(`up`.`firstname`,' ',`up`.`lastname`) AS `name`,year(`trs`.`date`) AS `year`,month(`trs`.`date`) AS `month_id`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,sum((case when (`m`.`month_id` = 1) then `trs`.`ot` else 0 end)) AS `Jan`,sum((case when (`m`.`month_id` = 2) then `trs`.`ot` else 0 end)) AS `Feb`,sum((case when (`m`.`month_id` = 3) then `trs`.`ot` else 0 end)) AS `Mar`,sum((case when (`m`.`month_id` = 4) then `trs`.`ot` else 0 end)) AS `Apr`,sum((case when (`m`.`month_id` = 5) then `trs`.`ot` else 0 end)) AS `May`,sum((case when (`m`.`month_id` = 6) then `trs`.`ot` else 0 end)) AS `Jun`,sum((case when (`m`.`month_id` = 7) then `trs`.`ot` else 0 end)) AS `Jul`,sum((case when (`m`.`month_id` = 8) then `trs`.`ot` else 0 end)) AS `Aug`,sum((case when (`m`.`month_id` = 9) then `trs`.`ot` else 0 end)) AS `Sep`,sum((case when (`m`.`month_id` = 10) then `trs`.`ot` else 0 end)) AS `Oct`,sum((case when (`m`.`month_id` = 11) then `trs`.`ot` else 0 end)) AS `Nov`,sum((case when (`m`.`month_id` = 12) then `trs`.`ot` else 0 end)) AS `Dec`,'' AS `number_of_ot_months`,sum(`trs`.`ot`) AS `total_ot_hours`,'' AS `average_per_ee` from (((((((`ww_users` `u` join `ww_partners` `p` on((`u`.`user_id` = `p`.`user_id`))) join `ww_payroll_partners` `pp` on((`u`.`user_id` = `pp`.`user_id`))) join `ww_users_profile` `up` on((`p`.`user_id` = `up`.`user_id`))) join `ww_time_record_summary` `trs` on((`u`.`user_id` = `trs`.`user_id`))) join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) join `ww_month` `m` on((month(`trs`.`date`) = `m`.`month_id`))) where (`u`.`active` = 1) group by `u`.`user_id`,year(`trs`.`date`) order by `up`.`company`,`ud`.`department`,`up`.`lastname`,`up`.`firstname`) */;

/*View structure for view report_partners_manpower */

/*!50001 DROP TABLE IF EXISTS `report_partners_manpower` */;
/*!50001 DROP VIEW IF EXISTS `report_partners_manpower` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_partners_manpower` AS (select `up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`ub`.`branch_id` AS `branch_id`,`ub`.`branch` AS `branch`,`p`.`id_number` AS `id_number`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`up`.`middlename` AS `middlename`,`upo`.`position_id` AS `position_id`,`upo`.`position` AS `position` from (((((`ww_users` `u` join `ww_partners` `p` on((`p`.`user_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `p`.`user_id`))) left join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) left join `ww_users_branch` `ub` on((`ub`.`branch_id` = `up`.`branch_id`))) join `ww_users_position` `upo` on((`upo`.`position_id` = `up`.`position_id`))) where (`u`.`active` = 1) order by `up`.`company`,`ud`.`department`,`up`.`lastname`,`up`.`firstname`) */;

/*View structure for view report_recruitment_funnel */

/*!50001 DROP TABLE IF EXISTS `report_recruitment_funnel` */;
/*!50001 DROP VIEW IF EXISTS `report_recruitment_funnel` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_recruitment_funnel` AS (select `up`.`firstname` AS `poc`,`rs`.`recruit_status` AS `status`,`rr`.`quantity` AS `no_of_headcount_required`,`rr`.`document_no` AS `prf`,`rr`.`date_needed` AS `date_opened`,`rr`.`closed_on` AS `date_closed`,`rrn`.`nature` AS `headcount_type`,`upo`.`position` AS `position_title`,`u`.`full_name` AS `hiring_manage`,`ud`.`department` AS `department`,`pes`.`employment_status` AS `cat_employee_type`,`r`.`source_id` AS `sourcing_tool`,concat(`r`.`firstname`,' ',`r`.`lastname`) AS `candidates_name` from (((((((((`ww_recruitment` `r` left join `ww_recruitment_request` `rr` on((`rr`.`request_id` = `r`.`request_id`))) left join `ww_users` `u` on((`u`.`user_id` = `rr`.`hr_remarks_by`))) left join `ww_users_profile` `up` on((`up`.`user_id` = `rr`.`hr_assigned`))) left join `ww_recruitment_request_nature` `rrn` on((`rrn`.`nature_id` = `rr`.`nature_id`))) left join `ww_users_position` `upo` on((`upo`.`position_id` = `rr`.`position_id`))) left join `ww_users_department` `ud` on((`ud`.`department_id` = `rr`.`department_id`))) left join `ww_partners_employment_status` `pes` on((`pes`.`employment_status_id` = `rr`.`employment_status_id`))) left join `ww_recruitment_status` `rs` on((`rs`.`recruit_status_id` = `r`.`status_id`))) left join `ww_partners` `p` on((`p`.`partner_id` = `r`.`partner_id`))) order by `r`.`status_id`,`rr`.`document_no`) */;

/*View structure for view report_resume_bidding */

/*!50001 DROP TABLE IF EXISTS `report_resume_bidding` */;
/*!50001 DROP VIEW IF EXISTS `report_resume_bidding` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_resume_bidding` AS (select `u`.`user_id` AS `user_id`,`u`.`user_id` AS `employee_name`,`u_prof`.`lastname` AS `lastname`,`u_prof`.`firstname` AS `firstname`,`u_prof`.`middlename` AS `middlename`,`u_prof`.`suffix` AS `suffix`,`u_proj`.`project` AS `project`,`u_proj`.`project_id` AS `project_name`,`u_proj`.`project_id` AS `project_id`,`u_pos`.`position` AS `position_display`,`u_pos`.`position_id` AS `postion_id`,`u_pos`.`position_id` AS `position`,`u_dept`.`department` AS `department`,`u_comp`.`company` AS `company`,`u_comp`.`company_id` AS `company_id`,`u_prof`.`birth_date` AS `birth_date`,`part_per`.`key_value` AS `birth_place`,`part_status`.`key_value` AS `civil_status`,`p`.`resigned_date` AS `resigned_date`,`u_loc`.`location` AS `location`,`p`.`effectivity_date` AS `effectivity_date` from (((((((((((((`ww_users` `u` left join `ww_users_profile` `u_prof` on((`u`.`user_id` = `u_prof`.`user_id`))) left join `ww_users_project` `u_proj` on((`u_prof`.`project_id` = `u_proj`.`project_id`))) left join `ww_users_position` `u_pos` on((`u_prof`.`position_id` = `u_pos`.`position_id`))) left join `ww_users_department` `u_dept` on((`u_prof`.`department_id` = `u_dept`.`department_id`))) left join `ww_users_company` `u_comp` on((`u_prof`.`company_id` = `u_comp`.`company_id`))) left join `ww_users_location` `u_loc` on((`u_prof`.`location_id` = `u_loc`.`location_id`))) left join `ww_partners` `p` on((`u_prof`.`user_id` = `p`.`user_id`))) left join `ww_partners_employment_type` `p_emp_type` on((`p`.`employment_type_id` = `p_emp_type`.`employment_type_id`))) left join `ww_partners_personal` `part_per` on(((`p`.`partner_id` = `part_per`.`partner_id`) and (`part_per`.`key` = 'birth_place')))) left join `ww_partners_personal` `part_status` on(((`p`.`partner_id` = `part_status`.`partner_id`) and (`part_status`.`key` = 'civil_status')))) left join `ww_users_division` `u_div` on((`u_prof`.`division_id` = `u_div`.`division_id`))) left join `ww_users_group` `u_group` on((`u_prof`.`group_id` = `u_group`.`group_id`))) left join `ww_roles` `r` on((`u`.`role_id` = `r`.`role_id`)))) */;

/*View structure for view report_time_compliance */

/*!50001 DROP TABLE IF EXISTS `report_time_compliance` */;
/*!50001 DROP VIEW IF EXISTS `report_time_compliance` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_time_compliance` AS (select `tp`.`payroll_date` AS `payroll_date`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`u`.`full_name` AS `full_name`,`p`.`id_number` AS `id_number`,`tr`.`date` AS `date`,`tr`.`shift` AS `shift`,`tr`.`time_in` AS `time_from`,`tr`.`time_out` AS `time_to`,`tr`.`aux_time_in` AS `aux_time_from`,`tr`.`aux_time_out` AS `aux_time_to`,concat(if(((`trs`.`absent` > 0) or (`trs`.`awol` > 0)),'AWOL',''),if((`trs`.`lwop` > 0),'LWOP',''),if(((`trs`.`late` > 0) or (`trs`.`undertime` > 0)),'TARDY','')) AS `particulars` from (((((`ww_time_period` `tp` join `time_record_summary` `trs` on((`trs`.`date` < `tp`.`date_from`))) join `time_record` `tr` on(((`tr`.`date` < `tp`.`date_from`) and (`trs`.`user_id` = `tr`.`user_id`)))) join `users` `u` on((`u`.`user_id` = `tr`.`user_id`))) join `users_profile` `up` on(((`up`.`user_id` = `u`.`user_id`) and (`up`.`company_id` = `tp`.`company_id`)))) join `partners` `p` on((`p`.`user_id` = `u`.`user_id`))) where ((`tp`.`deleted` = 0) and ((`trs`.`absent` > 0) or (`trs`.`awol` > 0) or (`trs`.`lwop` > 0) or (`trs`.`late` > 0) or (`trs`.`undertime` > 0))) order by `tp`.`payroll_date`,`u`.`full_name`,`tr`.`date`) */;

/*View structure for view report_time_daily_time_record */

/*!50001 DROP TABLE IF EXISTS `report_time_daily_time_record` */;
/*!50001 DROP VIEW IF EXISTS `report_time_daily_time_record` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_time_daily_time_record` AS (select `up`.`user_id` AS `user_id`,`p`.`id_number` AS `id_number`,`up`.`firstname` AS `firstname`,`up`.`lastname` AS `lastname`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`up`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`tr`.`date` AS `date`,if((`tr`.`aux_shift_id` = 0),`tr`.`shift`,`tr`.`aux_shift`) AS `shift`,ifnull(`tr`.`time_in`,`tr`.`aux_time_in`) AS `time_in`,ifnull(`tr`.`time_out`,`tr`.`aux_time_out`) AS `time_out`,`trs`.`hrs_rendered` AS `hours_work`,`trs`.`late` AS `late`,`trs`.`undertime` AS `ut`,`trs`.`ot` AS `ot`,'' AS `remarks` from ((((`ww_time_record` `tr` join `ww_time_record_summary` `trs` on(((`trs`.`user_id` = `tr`.`user_id`) and (`trs`.`date` = `tr`.`date`)))) left join `ww_users_profile` `up` on((`up`.`user_id` = `tr`.`user_id`))) left join `ww_partners` `p` on((`p`.`user_id` = `up`.`user_id`))) left join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) where (`trs`.`resigned` = 0)) */;

/*View structure for view report_time_daily_time_record_optimum */

/*!50001 DROP TABLE IF EXISTS `report_time_daily_time_record_optimum` */;
/*!50001 DROP VIEW IF EXISTS `report_time_daily_time_record_optimum` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_time_daily_time_record_optimum` AS (select `s`.`date` AS `date`,`t`.`shift` AS `shift`,time_format(ifnull(cast(`t`.`time_in` as time),0),'%h:%i %p') AS `time_in`,time_format(ifnull(cast(`t`.`time_out` as time),0),'%h:%i %p') AS `time_out`,`s`.`hrs_actual` AS `hrs_work`,(`s`.`ot` - `s`.`ot_break`) AS `total_ot`,(`s`.`late` + `s`.`undertime`) AS `ht`,`s`.`absent` AS `absent`,ifnull(`tf`.`form_code`,0) AS `form_code`,ifnull(`p`.`quantity`,0) AS `nd`,(case when ((`tf`.`form_code` <> 'OT') and (`s`.`lwop` <> 0)) then concat(`s`.`lwop`,' ',`tf`.`form_code`) when ((`tf`.`form_code` <> 'OT') and (`s`.`lwp` <> 0)) then concat(`s`.`lwp`,' ',`tf`.`form_code`) when (`s`.`absent` = 1) then 'ABSENT' when ((`t`.`shift` = 'restday') and (`s`.`ot` = 0)) then `t`.`shift` when ((`t`.`shift` = 'restday') and (`s`.`ot` <> 0)) then concat((`s`.`ot` - `s`.`ot_break`),' HR/S OT') when (`s`.`ot` <> 0) then concat(`s`.`hrs_actual`,' HR/S WORK ',(`s`.`ot` - `s`.`ot_break`),' HR/S OT') else concat(`s`.`hrs_actual`,' HR/S WORK') end) AS `status`,`u`.`company_id` AS `company_id`,`u`.`company` AS `company`,`d`.`department_id` AS `department_id`,`d`.`department` AS `department`,`u`.`firstname` AS `firstname`,`u`.`lastname` AS `lastname`,`u`.`middlename` AS `middlename`,`pa`.`id_number` AS `employee_code`,`u`.`user_id` AS `employee` from ((((((`ww_time_record` `t` left join `ww_time_record_summary` `s` on((`s`.`record_id` = `t`.`record_id`))) left join `night_differential` `p` on((`p`.`DATE` = `s`.`date`))) join `ww_users_profile` `u` on((`u`.`user_id` = `t`.`user_id`))) join `ww_partners` `pa` on((`pa`.`user_id` = `u`.`user_id`))) join `ww_users_department` `d` on((`d`.`department_id` = `u`.`department_id`))) left join `time_form_code` `tf` on((`tf`.`date` = `s`.`date`)))) */;

/*View structure for view report_time_iar */

/*!50001 DROP TABLE IF EXISTS `report_time_iar` */;
/*!50001 DROP VIEW IF EXISTS `report_time_iar` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_time_iar` AS (select `tp`.`payroll_date` AS `payroll_date`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`u`.`user_id` AS `user_id`,`u`.`full_name` AS `full_name`,`p`.`id_number` AS `id_number`,`tr`.`date` AS `date`,if((`tr`.`aux_shift_id` = 0),`tr`.`shift`,`tr`.`aux_shift`) AS `shift`,ifnull(`tr`.`time_in`,`tr`.`aux_time_in`) AS `time_from`,ifnull(`tr`.`time_out`,`tr`.`aux_time_out`) AS `time_to`,`tr`.`aux_time_in` AS `aux_time_from`,`tr`.`aux_time_out` AS `aux_time_to`,concat_ws(', ',if((`trs`.`awol` > 0),'AWOL',NULL),if((`trs`.`absent` > 0),'ABSENT',NULL),if((`trs`.`lwop` > 0),'LWOP',NULL),if((`trs`.`late` > 0),'LATE',NULL),if((`trs`.`undertime` > 0),'UNDERTIME',NULL)) AS `particulars`,concat(if((`trs`.`awol` > 0),'8',''),if((`trs`.`absent` > 0),'8',''),if((`trs`.`lwop` > 0),'8',''),if((`trs`.`late` > 0),`trs`.`late`,''),if((`trs`.`undertime` > 0),`trs`.`undertime`,'')) AS `Deduction` from (((((`ww_time_period` `tp` join `time_record` `tr` on((`tr`.`date` between `tp`.`date_from` and `tp`.`date_to`))) join `time_record_summary` `trs` on(((`trs`.`date` = `tr`.`date`) and (`trs`.`user_id` = `tr`.`user_id`)))) join `users` `u` on((`u`.`user_id` = `tr`.`user_id`))) join `users_profile` `up` on(((`up`.`user_id` = `u`.`user_id`) and (`up`.`company_id` = `tp`.`company_id`)))) join `partners` `p` on((`p`.`user_id` = `u`.`user_id`))) where ((`tp`.`deleted` = 0) and ((`trs`.`absent` > 0) or (`trs`.`awol` > 0) or (`trs`.`lwop` > 0) or (`trs`.`late` > 0) or (`trs`.`undertime` > 0)) and if((ifnull(`p`.`resigned_date`,'0000-00-00') = '0000-00-00'),1,(`tr`.`date` <= `p`.`resigned_date`))) order by `tp`.`payroll_date`,`u`.`full_name`,`tr`.`date`) */;

/*View structure for view report_time_overtime */

/*!50001 DROP TABLE IF EXISTS `report_time_overtime` */;
/*!50001 DROP VIEW IF EXISTS `report_time_overtime` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_time_overtime` AS (select `up`.`company_id` AS `company_id`,`trp`.`payroll_date` AS `payroll_date`,`tp`.`date_from` AS `time_period_date_from`,`tp`.`date_to` AS `time_period_date_to`,`up`.`company` AS `company`,`p`.`id_number` AS `id_number`,`u`.`full_name` AS `full_name`,`get_total_hours`(`trp`.`user_id`,`trp`.`payroll_date`) AS `HOURS`,round(sum(if((`trp`.`transaction_code` = 'ABSENCES'),`trp`.`quantity`,0)),2) AS `ABSENCES`,round(sum(if((`trp`.`transaction_code` in ('REGOT','REGOT_ADJ')),`trp`.`quantity`,0)),2) AS `REGOT`,round(sum(if((`trp`.`transaction_code` in ('REGOT_ND','REGOT_ND_ADJ')),`trp`.`quantity`,0)),2) AS `REGOT_ND`,round(sum(if((`trp`.`transaction_code` in ('REGND','REGND_ADJ')),`trp`.`quantity`,0)),2) AS `REGND`,round(sum(if((`trp`.`transaction_code` in ('RDOT','RDOT_ADJ')),`trp`.`quantity`,0)),2) AS `RDOT`,round(sum(if((`trp`.`transaction_code` in ('RDOT_ND','RDOT_ND_ADJ')),`trp`.`quantity`,0)),2) AS `RDOT_ND`,round(sum(if((`trp`.`transaction_code` in ('RDOT_EXCESS','RDOT_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `RDOT_EXCESS`,round(sum(if((`trp`.`transaction_code` in ('RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `RDOT_ND_EXCESS`,round(sum(if((`trp`.`transaction_code` in ('LEGOT','LEGOT_ADJ')),`trp`.`quantity`,0)),2) AS `LEGOT`,round(sum(if((`trp`.`transaction_code` in ('LEGOT_ND','LEGOT_ND_ADJ')),`trp`.`quantity`,0)),2) AS `LEGOT_ND`,round(sum(if((`trp`.`transaction_code` in ('LEGOT_EXCESS','LEGOT_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `LEGOT_EXCESS`,round(sum(if((`trp`.`transaction_code` in ('LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `LEGOT_ND_EXCESS`,round(sum(if((`trp`.`transaction_code` in ('SPEOT','SPEOT_ADJ')),`trp`.`quantity`,0)),2) AS `SPEOT`,round(sum(if((`trp`.`transaction_code` in ('SPEOT_ND','SPEOT_ND_ADJ')),`trp`.`quantity`,0)),2) AS `SPEOT_ND`,round(sum(if((`trp`.`transaction_code` in ('SPEOT_EXCESS','SPEOT_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `SPEOT_EXCESS`,round(sum(if((`trp`.`transaction_code` in ('SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `SPEOT_ND_EXCESS`,round(sum(if((`trp`.`transaction_code` in ('DOBOT','DOBOT_ADJ')),`trp`.`quantity`,0)),2) AS `DOBOT`,round(sum(if((`trp`.`transaction_code` in ('DOBOT_ND','DOBOT_ND_ADJ')),`trp`.`quantity`,0)),2) AS `DOBOT_ND`,round(sum(if((`trp`.`transaction_code` in ('DOBOT_EXCESS','DOBOT_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `DOBOT_EXCESS`,round(sum(if((`trp`.`transaction_code` in ('DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `DOBOT_ND_EXCESS`,round(sum(if((`trp`.`transaction_code` in ('LEGRDOT','LEGRDOT_ADJ')),`trp`.`quantity`,0)),2) AS `LEGRDOT`,round(sum(if((`trp`.`transaction_code` in ('LEGRDOT_ND','LEGRDOT_ND_ADJ')),`trp`.`quantity`,0)),2) AS `LEGRDOT_ND`,round(sum(if((`trp`.`transaction_code` in ('LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `LEGRDOT_EXCESS`,round(sum(if((`trp`.`transaction_code` in ('LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `LEGRDOT_ND_EXCESS`,round(sum(if((`trp`.`transaction_code` in ('SPERDOT','SPERDOT_ADJ')),`trp`.`quantity`,0)),2) AS `SPERDOT`,round(sum(if((`trp`.`transaction_code` in ('SPERDOT_ND','SPERDOT_ND_ADJ')),`trp`.`quantity`,0)),2) AS `SPERDOT_ND`,round(sum(if((`trp`.`transaction_code` in ('SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `SPERDOT_EXCESS`,round(sum(if((`trp`.`transaction_code` in ('SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `SPERDOT_ND_EXCESS`,round(sum(if((`trp`.`transaction_code` in ('DOBRDOT','DOBRDOT_ADJ')),`trp`.`quantity`,0)),2) AS `DOBRDOT`,round(sum(if((`trp`.`transaction_code` in ('DOBRDOT_ND','DOBRDOT_ND_ADJ')),`trp`.`quantity`,0)),2) AS `DOBRDOT_ND`,round(sum(if((`trp`.`transaction_code` in ('DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `DOBRDOT_EXCESS`,round(sum(if((`trp`.`transaction_code` in ('DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)),2) AS `DOBRDOT_ND_EXCESS` from (((((((`ww_time_record_process` `trp` join `ww_time_forms_date` `tfd` on(((`tfd`.`date` = `trp`.`date`) and (`trp`.`deleted` = 0)))) join `ww_time_period` `tp` on((`trp`.`time_period_id` = `tp`.`period_id`))) join `ww_time_forms` `tf` on(((`tf`.`forms_id` = `tfd`.`forms_id`) and (`tf`.`form_code` = 'OT') and (`tf`.`form_status_id` = 6) and (`tf`.`deleted` = 0) and (`tf`.`user_id` = `trp`.`user_id`)))) left join `ww_time_record_summary` `trs` on(((`trs`.`date` = `tfd`.`date`) and (`trs`.`user_id` = `trp`.`user_id`)))) join `ww_users` `u` on((`u`.`user_id` = `trp`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `u`.`user_id`))) join `ww_partners` `p` on((`p`.`user_id` = `u`.`user_id`))) where (`trp`.`deleted` = 0) group by `trp`.`payroll_date`,`up`.`company_id`,`u`.`user_id` order by `trp`.`payroll_date`,`u`.`full_name`) */;

/*View structure for view report_time_overtime_org */

/*!50001 DROP TABLE IF EXISTS `report_time_overtime_org` */;
/*!50001 DROP VIEW IF EXISTS `report_time_overtime_org` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_time_overtime_org` AS (select `trp`.`payroll_date` AS `payroll_date`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`up`.`department_id` AS `department_id`,`u`.`full_name` AS `full_name`,`p`.`id_number` AS `id_number`,`u`.`user_id` AS `user_id`,`tfd`.`date` AS `date`,dayname(`tfd`.`date`) AS `day`,`tfd`.`time_from` AS `time_from`,`tfd`.`time_to` AS `time_to`,`tfd`.`hrs` AS `hrs`,`tfd`.`hrs` AS `actual`,`trs`.`ot_break` AS `break`,`trs`.`meal` AS `meal`,`trs`.`transpo` AS `transpo`,`tf`.`date_from` AS `date_from`,`tf`.`date_to` AS `date_to`,sum(if((`trp`.`transaction_code` in ('REGOT','REGOT_ADJ')),`trp`.`quantity`,0)) AS `REGOT`,sum(if((`trp`.`transaction_code` in ('REGOT_ND','REGOT_ND_ADJ')),`trp`.`quantity`,0)) AS `REGOT_ND`,sum(if((`trp`.`transaction_code` in ('REGND','REGND_ADJ')),`trp`.`quantity`,0)) AS `REGND`,sum(if((`trp`.`transaction_code` in ('RDOT','RDOT_ADJ')),`trp`.`quantity`,0)) AS `RDOT`,sum(if((`trp`.`transaction_code` in ('RDOT_ND','RDOT_ND_ADJ')),`trp`.`quantity`,0)) AS `RDOT_ND`,sum(if((`trp`.`transaction_code` in ('RDOT_EXCESS','RDOT_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `RDOT_EXCESS`,sum(if((`trp`.`transaction_code` in ('RDOT_ND_EXCESS','RDOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `RDOT_ND_EXCESS`,sum(if((`trp`.`transaction_code` in ('LEGOT','LEGOT_ADJ')),`trp`.`quantity`,0)) AS `LEGOT`,sum(if((`trp`.`transaction_code` in ('LEGOT_ND','LEGOT_ND_ADJ')),`trp`.`quantity`,0)) AS `LEGOT_ND`,sum(if((`trp`.`transaction_code` in ('LEGOT_EXCESS','LEGOT_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `LEGOT_EXCESS`,sum(if((`trp`.`transaction_code` in ('LEGOT_ND_EXCESS','LEGOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `LEGOT_ND_EXCESS`,sum(if((`trp`.`transaction_code` in ('SPEOT','SPEOT_ADJ')),`trp`.`quantity`,0)) AS `SPEOT`,sum(if((`trp`.`transaction_code` in ('SPEOT_ND','SPEOT_ND_ADJ')),`trp`.`quantity`,0)) AS `SPEOT_ND`,sum(if((`trp`.`transaction_code` in ('SPEOT_EXCESS','SPEOT_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `SPEOT_EXCESS`,sum(if((`trp`.`transaction_code` in ('SPEOT_ND_EXCESS','SPEOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `SPEOT_ND_EXCESS`,sum(if((`trp`.`transaction_code` in ('DOBOT','DOBOT_ADJ')),`trp`.`quantity`,0)) AS `DOBOT`,sum(if((`trp`.`transaction_code` in ('DOBOT_ND','DOBOT_ND_ADJ')),`trp`.`quantity`,0)) AS `DOBOT_ND`,sum(if((`trp`.`transaction_code` in ('DOBOT_EXCESS','DOBOT_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `DOBOT_EXCESS`,sum(if((`trp`.`transaction_code` in ('DOBOT_ND_EXCESS','DOBOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `DOBOT_ND_EXCESS`,sum(if((`trp`.`transaction_code` in ('LEGRDOT','LEGRDOT_ADJ')),`trp`.`quantity`,0)) AS `LEGRDOT`,sum(if((`trp`.`transaction_code` in ('LEGRDOT_ND','LEGRDOT_ND_ADJ')),`trp`.`quantity`,0)) AS `LEGRDOT_ND`,sum(if((`trp`.`transaction_code` in ('LEGRDOT_EXCESS','LEGRDOT_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `LEGRDOT_EXCESS`,sum(if((`trp`.`transaction_code` in ('LEGRDOT_ND_EXCESS','LEGRDOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `LEGRDOT_ND_EXCESS`,sum(if((`trp`.`transaction_code` in ('SPERDOT','SPERDOT_ADJ')),`trp`.`quantity`,0)) AS `SPERDOT`,sum(if((`trp`.`transaction_code` in ('SPERDOT_ND','SPERDOT_ND_ADJ')),`trp`.`quantity`,0)) AS `SPERDOT_ND`,sum(if((`trp`.`transaction_code` in ('SPERDOT_EXCESS','SPERDOT_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `SPERDOT_EXCESS`,sum(if((`trp`.`transaction_code` in ('SPERDOT_ND_EXCESS','SPERDOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `SPERDOT_ND_EXCESS`,sum(if((`trp`.`transaction_code` in ('DOBRDOT','DOBRDOT_ADJ')),`trp`.`quantity`,0)) AS `DOBRDOT`,sum(if((`trp`.`transaction_code` in ('DOBRDOT_ND','DOBRDOT_ND_ADJ')),`trp`.`quantity`,0)) AS `DOBRDOT_ND`,sum(if((`trp`.`transaction_code` in ('DOBRDOT_EXCESS','DOBRDOT_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `DOBRDOT_EXCESS`,sum(if((`trp`.`transaction_code` in ('DOBRDOT_ND_EXCESS','DOBRDOT_ND_EXCESS_ADJ')),`trp`.`quantity`,0)) AS `DOBRDOT_ND_EXCESS` from ((((((`ww_time_record_process` `trp` join `ww_time_forms_date` `tfd` on(((`tfd`.`date` = `trp`.`date`) and (`trp`.`deleted` = 0)))) join `ww_time_forms` `tf` on(((`tf`.`forms_id` = `tfd`.`forms_id`) and (`tf`.`form_code` = 'OT') and (`tf`.`form_status_id` = 6) and (`tf`.`deleted` = 0) and (`tf`.`user_id` = `trp`.`user_id`)))) left join `ww_time_record_summary` `trs` on(((`trs`.`date` = `tfd`.`date`) and (`trs`.`user_id` = `trp`.`user_id`)))) join `ww_users` `u` on((`u`.`user_id` = `trp`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `u`.`user_id`))) join `ww_partners` `p` on((`p`.`user_id` = `u`.`user_id`))) where (`trp`.`deleted` = 0) group by `trp`.`payroll_date`,`up`.`company_id`,`u`.`user_id`,`tfd`.`date` order by `trp`.`payroll_date`,`u`.`full_name`,`tfd`.`date`) */;

/*View structure for view report_time_perfect_attendance */

/*!50001 DROP TABLE IF EXISTS `report_time_perfect_attendance` */;
/*!50001 DROP VIEW IF EXISTS `report_time_perfect_attendance` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_time_perfect_attendance` AS (select `p`.`id_number` AS `id_number`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,year(`trs`.`date`) AS `year`,month(`trs`.`date`) AS `month_id`,`m`.`month` AS `month`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`trs`.`lip_approved_below_13_days` AS `sum_lwp_forms` from (((((((`ww_users` `u` join `ww_partners` `p` on((`u`.`user_id` = `p`.`user_id`))) join `ww_payroll_partners` `pp` on((`u`.`user_id` = `pp`.`user_id`))) join `ww_users_profile` `up` on((`p`.`user_id` = `up`.`user_id`))) join `ww_time_record_summary` `trs` on((`u`.`user_id` = `trs`.`user_id`))) join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) join `ww_month` `m` on((month(`trs`.`date`) = `m`.`month_id`))) where ((`trs`.`day_type` <> 'RESTDAY') and (`u`.`active` = 1) and (`pp`.`attendance_base` = 1) and (`p`.`status_id` in (1,2)) and (`p`.`employment_type_id` in (5,6))) group by `u`.`user_id`,year(`trs`.`date`),month(`trs`.`date`) having ((sum(`trs`.`lwop`) = 0) and (`trs`.`lip_approved_below_13_days` = 0) and (sum(`trs`.`late`) = 0) and (sum(`trs`.`undertime`) = 0) and (sum(`trs`.`absent`) = 0)) order by `up`.`company`,`ud`.`department`,`up`.`lastname`,`up`.`firstname`) */;

/*View structure for view report_time_tardiness */

/*!50001 DROP TABLE IF EXISTS `report_time_tardiness` */;
/*!50001 DROP VIEW IF EXISTS `report_time_tardiness` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report_time_tardiness` AS (select `tp`.`payroll_date` AS `payroll_date`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`ud`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`up`.`branch_id` AS `branch_id`,`b`.`branch` AS `branch`,`u`.`full_name` AS `full_name`,`p`.`id_number` AS `id_number`,`tr`.`date` AS `date`,if(((`tr`.`aux_shift` is not null) and (`tr`.`aux_shift` <> '')),`tr`.`aux_shift`,`tr`.`shift`) AS `shift`,ifnull(`tr`.`time_in`,`tr`.`aux_time_in`) AS `time_from`,ifnull(`tr`.`time_out`,`tr`.`aux_time_out`) AS `time_to`,`tr`.`aux_shift` AS `aux_shift`,`tr`.`aux_time_in` AS `aux_time_from`,`tr`.`aux_time_out` AS `aux_time_to`,round((`trs`.`late` * 60),0) AS `late`,`trs`.`undertime` AS `undertime`,year(`trs`.`date`) AS `year`,month(`tr`.`date`) AS `month` from (((((((`ww_time_period` `tp` join `time_record` `tr` on((`tr`.`date` between `tp`.`date_from` and `tp`.`date_to`))) join `time_record_summary` `trs` on(((`trs`.`date` = `tr`.`date`) and (`trs`.`user_id` = `tr`.`user_id`)))) join `users` `u` on((`u`.`user_id` = `tr`.`user_id`))) join `users_profile` `up` on(((`up`.`user_id` = `u`.`user_id`) and (`up`.`company_id` = `tp`.`company_id`)))) left join `ww_users_branch` `b` on((`b`.`branch_id` = `up`.`branch_id`))) join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) join `partners` `p` on((`p`.`user_id` = `u`.`user_id`))) where ((`tp`.`deleted` = 0) and (`trs`.`late` > 0)) group by `p`.`id_number`,`tr`.`date` order by `tp`.`payroll_date`,`u`.`full_name`,`tr`.`date`) */;

/*View structure for view tfb_accrual_final */

/*!50001 DROP TABLE IF EXISTS `tfb_accrual_final` */;
/*!50001 DROP VIEW IF EXISTS `tfb_accrual_final` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `tfb_accrual_final` AS select `tfba`.`user_id` AS `user_id`,`u`.`full_name` AS `full_name`,`tfba`.`leave_balance_id` AS `leave_balance_id`,`tfba`.`date_accrued` AS `date`,`tfba`.`accrual` AS `accrual`,0 AS `usage`,`tfba`.`form_code` AS `form_code`,`tfo`.`form_id` AS `form_id`,`tfo`.`form` AS `form`,`up`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id` from (((`ww_time_form_balance_accrual` `tfba` join `ww_users` `u` on((`u`.`user_id` = `tfba`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `u`.`user_id`))) join `ww_time_form` `tfo` on((`tfo`.`form_code` = `tfba`.`form_code`))) union all select `tf`.`user_id` AS `user_id`,`u`.`full_name` AS `full_name`,`tfba`.`leave_balance_id` AS `leave_balance_id`,`tfd`.`date` AS `date`,'-' AS `-`,`tfd`.`day` AS `day`,`tf`.`form_code` AS `form_code`,`tfo`.`form_id` AS `form_id`,`tfo`.`form` AS `form`,`up`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id` from (((((`ww_time_forms` `tf` join `ww_time_forms_date` `tfd` on((`tf`.`forms_id` = `tfd`.`forms_id`))) join `ww_time_form_balance_accrual` `tfba` on((`tf`.`user_id` = `tfba`.`user_id`))) join `ww_users` `u` on((`u`.`user_id` = `tfba`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `u`.`user_id`))) join `ww_time_form` `tfo` on((`tfo`.`form_code` = `tf`.`form_code`))) where ((`tf`.`display_name` <> 'Blanket') and (`tf`.`form_code` in ('SL','VL')) and (`tf`.`form_status_id` = 6)) group by `tfd`.`date` union all select `tf`.`user_id` AS `user_id`,`u`.`full_name` AS `full_name`,`tfd`.`leave_balance_id` AS `leave_balance_id`,`tfd`.`date` AS `date`,0 AS `accrual`,`tfd`.`day` AS `usage`,`tf`.`form_code` AS `form_code`,`tfo`.`form_id` AS `form_id`,`tfo`.`form` AS `form`,`up`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id` from ((((((`ww_time_form_balance_accrual` `tfba` left join `ww_time_forms` `tf` on((`tf`.`user_id` = `tfba`.`user_id`))) left join `ww_time_forms_date` `tfd` on((`tf`.`forms_id` = `tfd`.`forms_id`))) left join `ww_time_forms_blanket` `tfb` on((`tf`.`forms_id` = `tfb`.`forms_id`))) join `ww_users` `u` on((`tf`.`user_id` = `u`.`user_id`))) join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) join `ww_time_form` `tfo` on((`tf`.`form_id` = `tfo`.`form_id`))) where ((`tf`.`form_code` = 'EL') and (`tf`.`form_status_id` = 6) and (`tf`.`deleted` = 0) and (`tfb`.`deleted` = 0)) union all select `tf`.`user_id` AS `user_id`,`u`.`full_name` AS `full_name`,`tfd`.`leave_balance_id` AS `leave_balance_id`,`tfd`.`date` AS `date`,`tfd`.`day` AS `day`,0 AS `usage`,`tf`.`form_code` AS `form_code`,`tfo`.`form_id` AS `form_id`,`tfo`.`form` AS `form`,`up`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id` from ((((((`ww_time_forms` `tf` left join `ww_time_forms_date` `tfd` on((`tfd`.`forms_id` = `tf`.`forms_id`))) left join `ww_time_forms_ot_leave` `tfol` on((`tfol`.`forms_id` = `tfd`.`forms_id`))) join `ww_time_form_balance_accrual` `tfba` on((`tfba`.`user_id` = `tf`.`user_id`))) join `ww_users` `u` on((`u`.`user_id` = `tfba`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `u`.`user_id`))) join `ww_time_form` `tfo` on((`tf`.`form_code` = `tfo`.`form_code`))) where ((`tf`.`form_code` = 'ADDL') and (`tf`.`type` = 'FILE')) group by `tfd`.`date` union all select `tf`.`user_id` AS `user_id`,`u`.`full_name` AS `full_name`,`tfd`.`leave_balance_id` AS `leave_balance_id`,`tfd`.`date` AS `date`,0 AS `accrual`,`tfd`.`day` AS `usage`,`tf`.`form_code` AS `form_code`,`tfo`.`form_id` AS `form_id`,`tfo`.`form` AS `form`,`up`.`company_id` AS `company_id`,`up`.`department_id` AS `department_id` from ((((((`ww_time_forms` `tf` left join `ww_time_forms_date` `tfd` on((`tfd`.`forms_id` = `tf`.`forms_id`))) left join `ww_time_forms_ot_leave_used` `tfol` on((`tfol`.`forms_id` = `tfd`.`forms_id`))) join `ww_time_form_balance_accrual` `tfba` on((`tfba`.`user_id` = `tf`.`user_id`))) join `ww_users` `u` on((`u`.`user_id` = `tfba`.`user_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `u`.`user_id`))) join `ww_time_form` `tfo` on((`tf`.`form_code` = `tfo`.`form_code`))) where ((`tf`.`form_code` = 'ADDL') and (`tf`.`type` = 'USE') and (`tf`.`form_status_id` = 6)) group by `tfd`.`date` */;

/*View structure for view time_form_balance */

/*!50001 DROP TABLE IF EXISTS `time_form_balance` */;
/*!50001 DROP VIEW IF EXISTS `time_form_balance` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_form_balance` AS (select `ww_time_form_balance`.`id` AS `id`,`ww_time_form_balance`.`year` AS `year`,`ww_time_form_balance`.`user_id` AS `user_id`,`ww_time_form_balance`.`form_id` AS `form_id`,`ww_time_form_balance`.`form_code` AS `form_code`,`ww_time_form_balance`.`previous` AS `previous`,`ww_time_form_balance`.`current` AS `current`,`ww_time_form_balance`.`used` AS `used`,`ww_time_form_balance`.`used_insert` AS `used_insert`,`ww_time_form_balance`.`balance` AS `balance`,`ww_time_form_balance`.`paid_unit` AS `paid_unit`,`ww_time_form_balance`.`period_from` AS `period_from`,`ww_time_form_balance`.`period_to` AS `period_to`,`ww_time_form_balance`.`period_extension` AS `period_extension`,`ww_time_form_balance`.`created_on` AS `created_on`,`ww_time_form_balance`.`created_by` AS `created_by`,`ww_time_form_balance`.`modified_on` AS `modified_on`,`ww_time_form_balance`.`modified_by` AS `modified_by`,`ww_time_form_balance`.`deleted` AS `deleted`,`ww_partners`.`id_number` AS `employee_number`,`ww_partners`.`alias` AS `partner`,`ww_users_company`.`company_id` AS `company_id`,`ww_users_company`.`company` AS `company`,`ww_users_department`.`department_id` AS `department_id`,`ww_users_department`.`department` AS `department`,`ww_time_form`.`form` AS `form` from (((((`ww_time_form_balance` join `ww_users_profile` on((`ww_users_profile`.`user_id` = `ww_time_form_balance`.`user_id`))) join `ww_partners` on((`ww_partners`.`user_id` = `ww_time_form_balance`.`user_id`))) join `ww_time_form` on((`ww_time_form`.`form_id` = `ww_time_form_balance`.`form_id`))) join `ww_users_company` on((`ww_users_company`.`company_id` = `ww_users_profile`.`company_id`))) join `ww_users_department` on((`ww_users_department`.`department_id` = `ww_users_profile`.`department_id`))) where (`ww_time_form_balance`.`deleted` = 0)) */;

/*View structure for view time_form_code */

/*!50001 DROP TABLE IF EXISTS `time_form_code` */;
/*!50001 DROP VIEW IF EXISTS `time_form_code` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_form_code` AS (select `tr`.`date` AS `date`,`tf`.`form_code` AS `form_code`,`tr`.`user_id` AS `user_id` from ((`ww_time_record` `tr` join `ww_time_forms` `tf` on((`tr`.`user_id` = `tf`.`user_id`))) join `ww_time_forms_date` `tfd` on(((`tf`.`forms_id` = `tfd`.`forms_id`) and (`tr`.`date` = `tfd`.`date`))))) */;

/*View structure for view time_form_code_with_blanket */

/*!50001 DROP TABLE IF EXISTS `time_form_code_with_blanket` */;
/*!50001 DROP VIEW IF EXISTS `time_form_code_with_blanket` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_form_code_with_blanket` AS select `tr`.`date` AS `date`,`tf`.`form_code` AS `form_code`,`tr`.`user_id` AS `user_id` from ((`ww_time_record` `tr` join `ww_time_forms` `tf` on((`tr`.`user_id` = `tf`.`user_id`))) join `ww_time_forms_date` `tfd` on(((`tf`.`forms_id` = `tfd`.`forms_id`) and (`tr`.`date` = `tfd`.`date`)))) union select `tfd`.`date` AS `date`,`tf`.`form_code` AS `form_code`,`tfb`.`user_id` AS `user_id` from ((`ww_time_forms_blanket` `tfb` join `ww_time_forms_date` `tfd` on((`tfd`.`forms_id` = `tfb`.`forms_id`))) join `ww_time_forms` `tf` on((`tf`.`user_id` = `tfb`.`user_id`))) */;

/*View structure for view time_forms */

/*!50001 DROP TABLE IF EXISTS `time_forms` */;
/*!50001 DROP VIEW IF EXISTS `time_forms` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_forms` AS (select `ww_time_forms`.`forms_id` AS `forms_id`,`ww_time_forms`.`form_status_id` AS `form_status_id`,`ww_time_forms`.`form_id` AS `form_id`,`ww_time_forms`.`form_code` AS `form_code`,`ww_time_forms`.`user_id` AS `user_id`,`ww_time_forms`.`display_name` AS `display_name`,`ww_time_forms`.`day` AS `day`,`ww_time_forms`.`hrs` AS `hrs`,`ww_time_forms`.`date_from` AS `date_from`,`ww_time_forms`.`date_to` AS `date_to`,`ww_time_forms`.`date_approved` AS `date_approved`,`ww_time_forms`.`date_declined` AS `date_declined`,`ww_time_forms`.`date_cancelled` AS `date_cancelled`,`ww_time_forms`.`date_sent` AS `date_sent`,`ww_time_forms`.`reason` AS `reason`,`ww_time_forms`.`scheduled` AS `scheduled`,`ww_time_forms`.`type` AS `type`,`ww_time_forms`.`created_on` AS `created_on`,`ww_time_forms`.`created_by` AS `created_by`,`ww_time_forms`.`modified_on` AS `modified_on`,`ww_time_forms`.`modified_by` AS `modified_by`,`ww_time_forms`.`deleted` AS `deleted`,`up`.`company_id` AS `company_id`,`ww_time_forms`.`focus_date` AS `focus_date` from (`ww_time_forms` join `ww_users_profile` `up` on((`up`.`user_id` = `ww_time_forms`.`user_id`))) where (`ww_time_forms`.`deleted` = 0)) */;

/*View structure for view time_forms_admin */

/*!50001 DROP TABLE IF EXISTS `time_forms_admin` */;
/*!50001 DROP VIEW IF EXISTS `time_forms_admin` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_forms_admin` AS (select `tf`.`forms_id` AS `forms_id`,`tf`.`form_status_id` AS `form_status_id`,`status`.`form_status` AS `form_status`,`tf`.`form_id` AS `form_id`,`tf`.`form_code` AS `form_code`,`form`.`form` AS `form`,`tf`.`reason` AS `reason`,`tf`.`user_id` AS `user_id`,`tf`.`display_name` AS `display_name`,`tf`.`day` AS `day`,`tf`.`hrs` AS `hrs`,concat(date_format(`tf`.`date_from`,'%b-%e %a'),if((`tf`.`date_from` = `tf`.`date_to`),'',concat(' To ',date_format(`tf`.`date_to`,'%b-%e %a')))) AS `date_range`,`tf`.`date_from` AS `date_from`,`tf`.`date_to` AS `date_to`,`gettimeline`(`tf`.`created_on`) AS `createdon`,`tf`.`created_on` AS `created_on`,if((`tf`.`user_id` = 0),`tf`.`form_status_id`,`approver`.`form_status_id`) AS `approver_status_id`,if((`tf`.`user_id` = 0),`status`.`form_status`,`approver_status`.`form_status`) AS `approver_status`,`approver`.`user_id` AS `approver_id`,`approver`.`display_name` AS `approver_name`,`tf`.`deleted` AS `deleted`,`tf`.`type` AS `type`,`tf`.`focus_date` AS `focus_date` from ((((`time_forms` `tf` left join `ww_time_forms_approver` `approver` on((`approver`.`forms_id` = `tf`.`forms_id`))) join `ww_time_form_status` `status` on((`status`.`form_status_id` = `tf`.`form_status_id`))) join `ww_time_form` `form` on((`form`.`form_id` = `tf`.`form_id`))) left join `ww_time_form_status` `approver_status` on((`approver_status`.`form_status_id` = `approver`.`form_status_id`))) where ((`tf`.`form_status_id` > 1) and (`tf`.`deleted` = 0)) group by `tf`.`forms_id`) */;

/*View structure for view time_forms_blanket */

/*!50001 DROP TABLE IF EXISTS `time_forms_blanket` */;
/*!50001 DROP VIEW IF EXISTS `time_forms_blanket` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_forms_blanket` AS (select `tf`.`forms_id` AS `forms_id`,`tf`.`form_code` AS `form_code`,`tf`.`form_status_id` AS `form_status_id`,`tf`.`form_id` AS `form_id`,`tf`.`display_name` AS `display_name`,`tfd`.`date` AS `date`,`tf`.`date_from` AS `date_from`,`tf`.`date_to` AS `date_to`,date_format(`tf`.`date_from`,'%M %d, %Y') AS `date_start`,date_format(`tf`.`date_to`,'%M %d, %Y') AS `date_end`,date_format(`tfd`.`time_from`,'%M %d, %Y %T') AS `date_time_start`,date_format(`tfd`.`time_to`,'%M %d, %Y %T') AS `date_time_end`,`tfb`.`user_id` AS `user_id`,`tfm`.`form` AS `form_name`,(case when ((`tf`.`form_id` = 1) or (`tf`.`form_id` = 2) or (`tf`.`form_id` = 3) or (`tf`.`form_id` = 4) or (`tf`.`form_id` = 5) or (`tf`.`form_id` = 6) or (`tf`.`form_id` = 7) or (`tf`.`form_id` = 8) or (`tf`.`form_id` = 9) or (`tf`.`form_id` = 14) or (`tf`.`form_id` = 16) or (`tf`.`form_id` = 19) or (`tf`.`form_id` = 20)) then if(isnull(`td`.`duration`),`tfd`.`hrs`,`td`.`duration`) when ((`tf`.`form_id` = 10) or (`tf`.`form_id` = 11) or (`tf`.`form_id` = 15)) then date_format(`tfd`.`time_from`,'%H:%i %p') when (`tf`.`form_id` = 12) then `ts`.`shift` end) AS `detail`,`tf`.`reason` AS `reason`,concat(`tfm`.`form`,' ',`tf`.`display_name`) AS `blanket_name` from (((((`ww_time_forms` `tf` join `ww_time_forms_blanket` `tfb` on((`tf`.`forms_id` = `tfb`.`forms_id`))) join `ww_time_form` `tfm` on((`tf`.`form_id` = `tfm`.`form_id`))) join `ww_time_forms_date` `tfd` on((`tf`.`forms_id` = `tfd`.`forms_id`))) left join `ww_time_shift` `ts` on((`ts`.`shift_id` = `tfd`.`shift_to`))) left join `ww_time_duration` `td` on((`tfd`.`duration_id` = `td`.`duration_id`))) where ((lcase(`tf`.`display_name`) = 'blanket') and (`tf`.`deleted` = 0) and (`tfb`.`deleted` = 0)) group by `tf`.`date_from`,`tf`.`date_to`,`tfb`.`user_id`,`tf`.`form_id`) */;

/*View structure for view time_forms_date */

/*!50001 DROP TABLE IF EXISTS `time_forms_date` */;
/*!50001 DROP VIEW IF EXISTS `time_forms_date` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_forms_date` AS (select `tfd`.`id` AS `id`,`tfd`.`forms_id` AS `forms_id`,`tfd`.`date` AS `date`,`tfd`.`day` AS `day`,`tfd`.`hrs` AS `hrs`,`tfd`.`duration_id` AS `duration_id`,`tfd`.`time_from` AS `time_from`,`tfd`.`time_to` AS `time_to`,`tfd`.`shift_id` AS `shift_id`,`tfd`.`shift_to` AS `shift_to`,`tfd`.`credit` AS `credit`,`tfd`.`credit_back` AS `credit_back`,`tfd`.`approved_comment` AS `approved_comment`,`tfd`.`declined_comment` AS `declined_comment`,`tfd`.`cancelled_comment` AS `cancelled_comment`,`tfd`.`deleted` AS `deleted` from (`ww_time_forms_date` `tfd` join `ww_time_forms` `tf`) where ((`tfd`.`forms_id` = `tf`.`forms_id`) and (`tfd`.`deleted` = 0) and (`tf`.`deleted` = 0))) */;

/*View structure for view time_forms_leave_monitoring */

/*!50001 DROP TABLE IF EXISTS `time_forms_leave_monitoring` */;
/*!50001 DROP VIEW IF EXISTS `time_forms_leave_monitoring` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_forms_leave_monitoring` AS (select `u`.`full_name` AS `full_name`,`u`.`user_id` AS `user_id`,`upos`.`position` AS `position`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`up`.`project_id` AS `project_id`,`uproj`.`project` AS `project`,`up`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`p`.`effectivity_date` AS `effectivity_date`,`p`.`regularization_date` AS `date_hired`,`up`.`end_date` AS `end_date`,`p`.`id_number` AS `id_number`,`tfb`.`form_code` AS `form_code`,`tfb`.`form_id` AS `form_id`,`tfb`.`year` AS `year`,`tfd`.`date` AS `date_used`,`tfd`.`credit` AS `credit`,`tfd`.`day` AS `day`,`tfb`.`current` AS `current`,`tf`.`reason` AS `reason`,(`tfb`.`current` - `tfd`.`day`) AS `running_balance`,((`tfb`.`current` - `tfd`.`day`) - `tfd`.`day`) AS `total_bal` from ((((((((`ww_users` `u` left join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) left join `ww_users_position` `upos` on((`up`.`position_id` = `upos`.`position_id`))) left join `ww_partners` `p` on((`p`.`user_id` = `u`.`user_id`))) left join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) left join `ww_users_project` `uproj` on((`uproj`.`project_id` = `up`.`project_id`))) left join `ww_time_form_balance` `tfb` on((`u`.`user_id` = `tfb`.`user_id`))) left join `ww_time_forms_date` `tfd` on((`tfd`.`leave_balance_id` = `tfb`.`id`))) left join `ww_time_forms` `tf` on((`tf`.`forms_id` = `tfd`.`forms_id`))) where ((`u`.`active` = 1) and (`tfb`.`form_code` in ('VL','SL','SIL')) and (`tf`.`form_status_id` = 6)) group by `tfb`.`user_id`,`tfb`.`form_code`,`tfb`.`year`,`tfd`.`date` order by `u`.`full_name`,`tfb`.`year`,`tfb`.`form_code`,`tfd`.`date`) */;

/*View structure for view time_forms_leave_type_filter */

/*!50001 DROP TABLE IF EXISTS `time_forms_leave_type_filter` */;
/*!50001 DROP VIEW IF EXISTS `time_forms_leave_type_filter` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_forms_leave_type_filter` AS (select `ww_time_form`.`form_id` AS `form_id`,`ww_time_form`.`form_code` AS `form_code`,`ww_time_form`.`form` AS `form` from `ww_time_form` where ((`ww_time_form`.`form_code` in ('SL','VL','SIL')) and (`ww_time_form`.`deleted` = 0))) */;

/*View structure for view time_forms_logs_monitoring */

/*!50001 DROP TABLE IF EXISTS `time_forms_logs_monitoring` */;
/*!50001 DROP VIEW IF EXISTS `time_forms_logs_monitoring` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_forms_logs_monitoring` AS (select `s`.`date` AS `date`,if((`t`.`aux_shift_id` = 0),`t`.`shift`,`t`.`aux_shift`) AS `shift`,time_format(ifnull(cast(ifnull(`t`.`time_in`,`t`.`aux_time_in`) as time),0),'%h:%i %p') AS `time_in`,time_format(ifnull(cast(ifnull(`t`.`time_out`,`t`.`aux_time_out`) as time),0),'%h:%i %p') AS `time_out`,`s`.`hrs_actual` AS `hrs_work`,(`s`.`ot` - `s`.`ot_break`) AS `total_ot`,ifnull(`s`.`late`,0) AS `late`,`s`.`absent` AS `absent`,ifnull(`tf`.`form_code`,0) AS `form_code`,ifnull(`tff`.`is_leave`,0) AS `is_leave`,`u`.`company_id` AS `company_id`,`u`.`company` AS `company`,`d`.`department_id` AS `department_id`,`d`.`department` AS `department`,`pa`.`alias` AS `full_name`,`pa`.`id_number` AS `employee_code`,`u`.`user_id` AS `user_id`,`u`.`project_id` AS `project_id`,`uproj`.`project` AS `project`,`pp`.`payroll_rate_type_id` AS `payroll_rate_type_id`,`prt`.`payroll_rate_type` AS `payroll_rate_type`,`s`.`payroll_date` AS `payroll_date`,`tp`.`date_from` AS `payroll_date_from`,`tp`.`date_to` AS `payroll_date_to` from (((((((((((`ww_time_record` `t` left join `ww_time_record_summary` `s` on((`s`.`record_id` = `t`.`record_id`))) left join `night_differential` `p` on((`p`.`DATE` = `s`.`date`))) join `ww_users_profile` `u` on((`u`.`user_id` = `t`.`user_id`))) join `ww_partners` `pa` on((`pa`.`user_id` = `u`.`user_id`))) join `ww_users_department` `d` on((`d`.`department_id` = `u`.`department_id`))) left join `time_form_code_with_blanket` `tf` on(((`tf`.`date` = `s`.`date`) and (`tf`.`user_id` = `s`.`user_id`)))) left join `ww_time_form` `tff` on((`tff`.`form_code` = `tf`.`form_code`))) left join `ww_users_project` `uproj` on((`uproj`.`project_id` = `u`.`project_id`))) left join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `u`.`user_id`))) left join `ww_payroll_rate_type` `prt` on((`prt`.`payroll_rate_type_id` = `pp`.`payroll_rate_type_id`))) left join `ww_time_period` `tp` on(((`tp`.`payroll_date` = `s`.`payroll_date`) and (`tp`.`company_id` = `u`.`company_id`)))) order by `s`.`date`) */;

/*View structure for view time_forms_manage */

/*!50001 DROP TABLE IF EXISTS `time_forms_manage` */;
/*!50001 DROP VIEW IF EXISTS `time_forms_manage` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_forms_manage` AS (select `tf`.`forms_id` AS `forms_id`,`tf`.`form_status_id` AS `form_status_id`,`status`.`form_status` AS `form_status`,`tf`.`form_id` AS `form_id`,`tf`.`form_code` AS `form_code`,`form`.`form` AS `form`,`tf`.`reason` AS `reason`,`tf`.`user_id` AS `user_id`,`tf`.`display_name` AS `display_name`,`tf`.`day` AS `day`,`tf`.`hrs` AS `hrs`,concat(date_format(`tf`.`date_from`,'%b-%e %a'),if((`tf`.`date_from` = `tf`.`date_to`),'',concat(' To ',date_format(`tf`.`date_to`,'%b-%e %a')))) AS `date_range`,`tf`.`date_from` AS `date_from`,`tf`.`date_to` AS `date_to`,`gettimeline`(`tf`.`created_on`) AS `createdon`,`tf`.`created_on` AS `created_on`,`approver`.`form_status_id` AS `approver_status_id`,`approver_status`.`form_status` AS `approver_status`,`approver`.`user_id` AS `approver_id`,`approver`.`display_name` AS `approver_name`,`up`.`company_id` AS `company_id`,`tf`.`focus_date` AS `focus_date` from (((((`time_forms` `tf` join `ww_time_forms_approver` `approver` on((`approver`.`forms_id` = `tf`.`forms_id`))) join `ww_time_form_status` `status` on((`status`.`form_status_id` = `tf`.`form_status_id`))) join `ww_time_form` `form` on((`form`.`form_id` = `tf`.`form_id`))) join `ww_users_profile` `up` on((`up`.`user_id` = `tf`.`user_id`))) join `ww_time_form_status` `approver_status` on((`approver_status`.`form_status_id` = `approver`.`form_status_id`))) where ((`tf`.`form_status_id` > 1) and (`tf`.`deleted` = 0))) */;

/*View structure for view time_forms_sl_vl */

/*!50001 DROP TABLE IF EXISTS `time_forms_sl_vl` */;
/*!50001 DROP VIEW IF EXISTS `time_forms_sl_vl` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_forms_sl_vl` AS select `u`.`full_name` AS `full_name`,`u`.`user_id` AS `user_id`,`upos`.`position` AS `position`,`up`.`company_id` AS `company_id`,`up`.`company` AS `company`,`up`.`project_id` AS `project_id`,`uproj`.`project` AS `project`,`up`.`department_id` AS `department_id`,`ud`.`department` AS `department`,`p`.`effectivity_date` AS `effectivity_date`,`p`.`regularization_date` AS `date_hired`,`p`.`id_number` AS `id_number`,`tfb`.`current` AS `current`,`tfb`.`form_code` AS `form_code`,`tfb`.`year` AS `year`,month(`tfd`.`date`) AS `month`,`tfd`.`credit` AS `credit`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 1) then `tfd`.`credit` end)),'') AS `1`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 2) then `tfd`.`credit` end)),'') AS `2`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 3) then `tfd`.`credit` end)),'') AS `3`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 4) then `tfd`.`credit` end)),'') AS `4`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 5) then `tfd`.`credit` end)),'') AS `5`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 6) then `tfd`.`credit` end)),'') AS `6`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 7) then `tfd`.`credit` end)),'') AS `7`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 8) then `tfd`.`credit` end)),'') AS `8`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 9) then `tfd`.`credit` end)),'') AS `9`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 10) then `tfd`.`credit` end)),'') AS `10`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 11) then `tfd`.`credit` end)),'') AS `11`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 12) then `tfd`.`credit` end)),'') AS `12`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 13) then `tfd`.`credit` end)),'') AS `13`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 14) then `tfd`.`credit` end)),'') AS `14`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 15) then `tfd`.`credit` end)),'') AS `15`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 16) then `tfd`.`credit` end)),'') AS `16`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 17) then `tfd`.`credit` end)),'') AS `17`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 18) then `tfd`.`credit` end)),'') AS `18`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 19) then `tfd`.`credit` end)),'') AS `19`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 20) then `tfd`.`credit` end)),'') AS `20`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 21) then `tfd`.`credit` end)),'') AS `21`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 22) then `tfd`.`credit` end)),'') AS `22`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 23) then `tfd`.`credit` end)),'') AS `23`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 24) then `tfd`.`credit` end)),'') AS `24`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 25) then `tfd`.`credit` end)),'') AS `25`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 26) then `tfd`.`credit` end)),'') AS `26`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 27) then `tfd`.`credit` end)),'') AS `27`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 28) then `tfd`.`credit` end)),'') AS `28`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 29) then `tfd`.`credit` end)),'') AS `29`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 30) then `tfd`.`credit` end)),'') AS `30`,ifnull(sum((case when (dayofmonth(`tfd`.`date`) = 31) then `tfd`.`credit` end)),'') AS `31`,(`tfb`.`current` - `get_balance`(`u`.`user_id`,`tfb`.`form_code`,month(`tfd`.`date`),`tfb`.`year`)) AS `running_balance`,1.25 AS `monthly_earning`,sum(if((`tfd`.`credit` = 8.000),1,if((`tfd`.`credit` = 4.000),0.5,0))) AS `used`,((`tfb`.`current` - `get_balance`(`u`.`user_id`,`tfb`.`form_code`,month(`tfd`.`date`),`tfb`.`year`)) - sum(if((`tfd`.`credit` = 8.000),1,if((`tfd`.`credit` = 4.000),0.5,0)))) AS `total_bal` from ((((((((`ww_users` `u` left join `ww_users_profile` `up` on((`u`.`user_id` = `up`.`user_id`))) left join `ww_users_position` `upos` on((`up`.`position_id` = `upos`.`position_id`))) left join `ww_partners` `p` on((`p`.`user_id` = `u`.`user_id`))) left join `ww_users_department` `ud` on((`ud`.`department_id` = `up`.`department_id`))) left join `ww_users_project` `uproj` on((`uproj`.`project_id` = `up`.`project_id`))) left join `ww_time_form_balance` `tfb` on((`u`.`user_id` = `tfb`.`user_id`))) left join `ww_time_forms_date` `tfd` on((`tfd`.`leave_balance_id` = `tfb`.`id`))) left join `ww_time_forms` `tf` on((`tf`.`forms_id` = `tfd`.`forms_id`))) where ((`u`.`active` = 1) and (`tfb`.`form_code` in ('VL','SL')) and (`tf`.`form_status_id` = 6)) group by `tfb`.`user_id`,`tfb`.`form_code`,`tfb`.`year`,month(`tfd`.`date`) order by `u`.`full_name`,`tfb`.`year`,month(`tfd`.`date`),`tfb`.`form_code` */;

/*View structure for view time_forms_sl_vl_detail */

/*!50001 DROP TABLE IF EXISTS `time_forms_sl_vl_detail` */;
/*!50001 DROP VIEW IF EXISTS `time_forms_sl_vl_detail` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_forms_sl_vl_detail` AS select `a`.`user_id` AS `user_id`,`a`.`full_name` AS `full_name`,`a`.`form_code` AS `form_code`,`b`.`month_id` AS `month`,`a`.`position` AS `position`,`a`.`company_id` AS `company_id`,`a`.`company` AS `company`,`a`.`project_id` AS `project_id`,`a`.`project` AS `project`,`a`.`department_id` AS `department_id`,`a`.`department` AS `department`,`a`.`effectivity_date` AS `effectivity_date`,`a`.`date_hired` AS `date_hired`,`a`.`id_number` AS `id_number`,(case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then `a`.`used` else 0 end) AS `credit`,`get_current_balance`(`a`.`user_id`,`a`.`form_code`,`a`.`year`) AS `current`,`a`.`year` AS `year`,`a`.`monthly_earning` AS `monthly_earning`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`1`)) AS `1`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`2`)) AS `2`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`3`)) AS `3`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`4`)) AS `4`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`5`)) AS `5`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`6`)) AS `6`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`7`)) AS `7`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`8`)) AS `8`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`9`)) AS `9`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`10`)) AS `10`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`11`)) AS `11`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`12`)) AS `12`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`13`)) AS `13`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`14`)) AS `14`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`15`)) AS `15`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`16`)) AS `16`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`17`)) AS `17`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`18`)) AS `18`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`19`)) AS `19`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`20`)) AS `20`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`21`)) AS `21`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`22`)) AS `22`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`23`)) AS `23`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`24`)) AS `24`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`25`)) AS `25`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`26`)) AS `26`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`27`)) AS `27`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`28`)) AS `28`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`29`)) AS `29`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`30`)) AS `30`,sum(((case when ((`a`.`month` = `b`.`month_id`) and (`a`.`form_code` = `b`.`form_code`)) then 1 else 0 end) * `a`.`31`)) AS `31`,((`get_current_balance`(`a`.`user_id`,`a`.`form_code`,`a`.`year`) + round(('1.25' * `b`.`month_id`),2)) - `get_used_leave`(`a`.`user_id`,`a`.`form_code`,`a`.`year`,`b`.`month_id`)) AS `running_balance`,sum((case when ((`a`.`month` = `b`.`month_id`) and (`b`.`form_code` = `a`.`form_code`)) then `a`.`used` else 0 end)) AS `used`,((`get_current_balance`(`a`.`user_id`,`a`.`form_code`,`a`.`year`) + round(('1.25' * `b`.`month_id`),2)) - `get_used_leave`(`a`.`user_id`,`a`.`form_code`,`a`.`year`,`b`.`month_id`)) AS `total_bal` from (`time_forms_sl_vl` `a` join `time_forms_sl_vl_month` `b` on((`a`.`user_id` = `b`.`user_id`))) where (`a`.`form_code` = `b`.`form_code`) group by `b`.`month_id`,`b`.`form_code`,`a`.`user_id` order by `a`.`full_name`,`b`.`month_id` */;

/*View structure for view time_forms_sl_vl_month */

/*!50001 DROP TABLE IF EXISTS `time_forms_sl_vl_month` */;
/*!50001 DROP VIEW IF EXISTS `time_forms_sl_vl_month` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_forms_sl_vl_month` AS (select `u`.`user_id` AS `user_id`,`m`.`month_id` AS `month_id`,`t`.`form_code` AS `form_code` from ((`ww_users` `u` join `ww_month` `m`) join `ww_time_form` `t`) where (`t`.`form_code` in ('SL','VL'))) */;

/*View structure for view time_forms_validate_if_exist */

/*!50001 DROP TABLE IF EXISTS `time_forms_validate_if_exist` */;
/*!50001 DROP VIEW IF EXISTS `time_forms_validate_if_exist` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_forms_validate_if_exist` AS (select `tf`.`forms_id` AS `forms_id`,`tf`.`user_id` AS `user_id`,`tfs`.`form_status` AS `form_status`,`tf`.`form_id` AS `form_id`,`tfd`.`day` AS `day`,`tfd`.`hrs` AS `hrs`,`tfd`.`date` AS `date`,`tfd`.`time_from` AS `time_from`,`tfd`.`time_to` AS `time_to`,`tfd`.`duration_id` AS `duration_id`,`td`.`duration` AS `duration`,`td`.`credit` AS `credit` from (((`time_forms` `tf` join `time_forms_date` `tfd`) join `ww_time_form_status` `tfs`) join `ww_time_duration` `td`) where ((`tf`.`form_status_id` = `tfs`.`form_status_id`) and (`tfs`.`form_status` in ('For Approval','Pending','For Validation','Fit to Work')) and (`tf`.`forms_id` = `tfd`.`forms_id`) and (`tfd`.`duration_id` = `td`.`duration_id`)) order by `tfd`.`date` desc) */;

/*View structure for view time_forms_validation */

/*!50001 DROP TABLE IF EXISTS `time_forms_validation` */;
/*!50001 DROP VIEW IF EXISTS `time_forms_validation` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_forms_validation` AS (select `tf`.`forms_id` AS `forms_id`,`tf`.`user_id` AS `user_id`,`tfs`.`form_status` AS `form_status`,`tf`.`form_id` AS `form_id`,`tfd`.`day` AS `day`,`tfd`.`hrs` AS `hrs`,`tfd`.`date` AS `date`,`tfd`.`time_from` AS `time_from`,`tfd`.`time_to` AS `time_to`,`tfd`.`duration_id` AS `duration_id`,`td`.`duration` AS `duration`,`td`.`credit` AS `credit` from (((`time_forms` `tf` join `time_forms_date` `tfd`) join `ww_time_form_status` `tfs`) join `ww_time_duration` `td`) where ((`tf`.`form_status_id` = `tfs`.`form_status_id`) and (`tfs`.`form_status` = 'Approved') and (`tf`.`forms_id` = `tfd`.`forms_id`) and (`tfd`.`duration_id` = `td`.`duration_id`)) order by `tfd`.`date` desc) */;

/*View structure for view time_holiday */

/*!50001 DROP TABLE IF EXISTS `time_holiday` */;
/*!50001 DROP VIEW IF EXISTS `time_holiday` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_holiday` AS (select `ww_time_holiday`.`holiday_id` AS `holiday_id`,`ww_time_holiday`.`holiday` AS `holiday`,`ww_time_holiday`.`holiday_date` AS `holiday_date`,`ww_time_holiday`.`status_id` AS `status_id`,`ww_time_holiday`.`legal` AS `legal`,`ww_time_holiday`.`location_count` AS `location_count`,`ww_time_holiday`.`user_count` AS `user_count`,`ww_time_holiday`.`deleted` AS `deleted` from `ww_time_holiday` where (`ww_time_holiday`.`deleted` = 0)) */;

/*View structure for view time_period_list */

/*!50001 DROP TABLE IF EXISTS `time_period_list` */;
/*!50001 DROP VIEW IF EXISTS `time_period_list` */;

/*!50001 CREATE ALGORITHM=TEMPTABLE DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_period_list` AS (select `ww_time_period`.`period_id` AS `record_id`,`ww_time_period`.`period_id` AS `period_id`,`ww_time_period`.`period_year` AS `period_year`,date_format(`ww_time_period`.`payroll_date`,'%b') AS `period_month`,`ww_time_period`.`processed` AS `process_count`,if((`ww_time_period`.`deleted` = 1),'Deleted',if((`ww_time_period`.`closed` = 0),'Still Open','Closed')) AS `proces_status`,date_format(`ww_time_period`.`payroll_date`,'%M %e') AS `payroll_date`,`ww_users_company`.`company` AS `company`,date_format(`ww_time_period`.`date_from`,'%b-%e') AS `date_from`,date_format(`ww_time_period`.`date_from`,'%a') AS `date_from_day`,year(`ww_time_period`.`date_from`) AS `date_from_year`,date_format(`ww_time_period`.`date_to`,'%b-%e') AS `date_to`,date_format(`ww_time_period`.`date_to`,'%a') AS `date_to_day`,year(`ww_time_period`.`date_to`) AS `date_to_year`,`ww_time_period`.`company_id` AS `company_id`,`ww_time_period`.`date_from` AS `from`,`ww_time_period`.`date_to` AS `to`,`ww_time_period`.`created_on` AS `created_on`,`ww_time_period`.`created_by` AS `created_by`,`ww_time_period`.`modified_by` AS `modified_by`,`ww_time_period`.`modified_on` AS `modified_on`,`ww_time_period`.`deleted` AS `ww_time_period.deleted` from (`ww_time_period` join `ww_users_company` on((`ww_users_company`.`company_id` = `ww_time_period`.`company_id`))) where ((`ww_time_period`.`deleted` = `is_trash`()) and ((`ww_time_period`.`period_year` like concat('%',`get_search`(),'%')) or (monthname(`ww_time_period`.`payroll_date`) like concat('%',`get_search`(),'%')))) order by `ww_time_period`.`payroll_date` desc,`ww_users_company`.`company`) */;

/*View structure for view time_record */

/*!50001 DROP TABLE IF EXISTS `time_record` */;
/*!50001 DROP VIEW IF EXISTS `time_record` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_record` AS (select `ww_time_record`.`record_id` AS `record_id`,`ww_time_record`.`user_id` AS `user_id`,`ww_time_record`.`biometric` AS `biometric`,`ww_time_record`.`shift_id` AS `shift_id`,`ww_time_record`.`shift` AS `shift`,`ww_time_record`.`date` AS `date`,`ww_time_record`.`processed` AS `processed`,`ww_time_record`.`override` AS `override`,`ww_time_record`.`aux_shift_id` AS `aux_shift_id`,`ww_time_record`.`aux_shift` AS `aux_shift`,`ww_time_record`.`aux_time_in` AS `aux_time_in`,`ww_time_record`.`aux_time_out` AS `aux_time_out`,`ww_time_record`.`time_in` AS `time_in`,`ww_time_record`.`time_out` AS `time_out`,`ww_time_record`.`breaka_in` AS `breaka_in`,`ww_time_record`.`breaka_out` AS `breaka_out`,`ww_time_record`.`breakb_in` AS `breakb_in`,`ww_time_record`.`breakb_out` AS `breakb_out`,`ww_time_record`.`ot_in` AS `ot_in`,`ww_time_record`.`ot_out` AS `ot_out`,`ww_time_record`.`created_on` AS `created_on`,`ww_time_record`.`created_by` AS `created_by`,`ww_time_record`.`modified_on` AS `modified_on`,`ww_time_record`.`modified_by` AS `modified_by` from `ww_time_record`) */;

/*View structure for view time_record_holiday */

/*!50001 DROP TABLE IF EXISTS `time_record_holiday` */;
/*!50001 DROP VIEW IF EXISTS `time_record_holiday` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_record_holiday` AS (select `th`.`holiday_id` AS `holiday_id`,`th`.`holiday` AS `holiday`,`th`.`holiday_date` AS `holiday_date`,`th`.`legal` AS `legal`,if((`th`.`legal` = 1),'Legal Holiday','Special Holiday') AS `holiday_type`,'fa-calendar' AS `holiday_icon`,`thl`.`user_id` AS `user_id` from ((`ww_time_holiday` `th` left join `ww_time_holiday_location` `thl` on((`th`.`holiday_id` = `thl`.`holiday_id`))) left join `users` `u` on((`u`.`user_id` = `thl`.`user_id`))) where (`th`.`deleted` = 0)) */;

/*View structure for view time_record_list */

/*!50001 DROP TABLE IF EXISTS `time_record_list` */;
/*!50001 DROP VIEW IF EXISTS `time_record_list` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_record_list` AS (select `tr`.`record_id` AS `record_id`,`tr`.`user_id` AS `user_id`,`tr`.`date` AS `date`,date_format(`tr`.`date`,'%b-%e') AS `date_tag`,date_format(`tr`.`date`,'%a') AS `day_tag`,if(isnull(`trh`.`holiday_id`),`tr`.`shift`,`trh`.`holiday_type`) AS `shift`,if((`tr`.`shift` = 'Restday'),'fa-coffee',if(isnull(`trh`.`holiday_id`),if(isnull(`tfb`.`forms_id`),'','fa-bullhorn'),`trh`.`holiday_icon`)) AS `notes_icon`,if(isnull(`trh`.`holiday_id`),`tr`.`shift`,`trh`.`holiday_type`) AS `notes_title`,if(isnull(`trh`.`holiday_id`),`tr`.`shift`,`trh`.`holiday`) AS `notes`,'fa ' AS `remind_icon`,'Logs ' AS `remind_title`,'Notes ' AS `remind`,date_format(`tr`.`time_in`,'%l:%i') AS `timein`,lcase(date_format(`tr`.`time_in`,'%p')) AS `timein_ampm`,date_format(`tr`.`time_out`,'%l:%i') AS `timeout`,lcase(date_format(`tr`.`time_out`,'%p')) AS `timeout_ampm`,if((cast(`tr`.`time_in` as date) = cast(`tr`.`time_out` as date)),'',date_format(`tr`.`time_out`,'%b-%e')) AS `timeout_date`,ifnull(`trs`.`late`,0) AS `late`,'min' AS `late_tag`,ifnull(`trs`.`undertime`,0) AS `undertime`,'min' AS `undertime_tag`,ifnull(`trs`.`ot`,0) AS `ot`,ifnull(`trs`.`ot_break`,0) AS `ot_break`,'hr' AS `ot_tag`,ifnull(`trs`.`hrs_actual`,0) AS `hrs_worked`,`trs`.`awol` AS `awol`,`tr`.`biometric` AS `biometric`,`tr`.`shift_id` AS `shift_id`,`tr`.`processed` AS `processed`,`tr`.`override` AS `override`,`tr`.`aux_shift_id` AS `aux_shift_id`,`tr`.`aux_shift` AS `aux_shift`,`tr`.`aux_time_in` AS `aux_time_in`,`tr`.`aux_time_out` AS `aux_time_out`,`tr`.`time_in` AS `time_in`,`tr`.`time_out` AS `time_out`,`tr`.`breaka_in` AS `breaka_in`,`tr`.`breaka_out` AS `breaka_out`,`tr`.`breakb_in` AS `breakb_in`,`tr`.`breakb_out` AS `breakb_out`,`tr`.`ot_in` AS `ot_in`,`tr`.`ot_out` AS `ot_out`,`tr`.`created_on` AS `created_on`,`tr`.`created_by` AS `created_by`,`tr`.`modified_on` AS `modified_on`,`tr`.`modified_by` AS `modified_by`,0 AS `form_id`,0 AS `forms_id`,'' AS `form_code`,`tfb`.`form_id` AS `blanket_form_id`,`tfb`.`forms_id` AS `blanket_forms_id`,`tfb`.`date_start` AS `blanket_date_from`,`tfb`.`date_end` AS `blanket_date_to`,`tfb`.`date_time_start` AS `blanket_date_time_from`,`tfb`.`date_time_end` AS `blanket_date_time_to`,`tfb`.`blanket_name` AS `blanket_name`,`tfb`.`detail` AS `blanket_detail`,`tfb`.`reason` AS `blanket_reason`,`pp`.`non_swipe` AS `non_swipe` from ((((`time_record` `tr` left join `time_record_summary` `trs` on((`trs`.`record_id` = `tr`.`record_id`))) left join `time_record_holiday` `trh` on(((`trh`.`holiday_date` = `tr`.`date`) and (`trh`.`user_id` = `tr`.`user_id`) and if(isnull(`trh`.`user_id`),(1 = 1),(`trh`.`user_id` = `tr`.`user_id`))))) left join `time_forms_blanket` `tfb` on(((`tr`.`date` between `tfb`.`date_from` and `tfb`.`date_to`) and (`tfb`.`user_id` = `tr`.`user_id`)))) left join `ww_payroll_partners` `pp` on((`pp`.`user_id` = `tr`.`user_id`))) order by `tr`.`date` desc) */;

/*View structure for view time_record_list_forms */

/*!50001 DROP TABLE IF EXISTS `time_record_list_forms` */;
/*!50001 DROP VIEW IF EXISTS `time_record_list_forms` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_record_list_forms` AS (select `time_forms`.`forms_id` AS `forms_id`,`time_forms`.`form_status_id` AS `form_status_id`,`time_forms`.`form_id` AS `form_id`,if((`time_forms`.`form_code` = 'ADDL'),'CL',`time_forms`.`form_code`) AS `form_code`,`time_forms`.`user_id` AS `user_id`,`time_forms`.`display_name` AS `display_name`,`time_forms_date`.`day` AS `day`,`time_forms`.`hrs` AS `hrs`,`time_forms`.`date_from` AS `date_from`,`time_forms`.`date_to` AS `date_to`,`time_forms`.`date_approved` AS `date_approved`,`time_forms`.`date_declined` AS `date_declined`,`time_forms`.`date_cancelled` AS `date_cancelled`,`time_forms`.`date_sent` AS `date_sent`,`time_forms`.`reason` AS `reason`,`time_forms`.`scheduled` AS `scheduled`,`time_forms`.`created_on` AS `created_on`,`time_forms`.`created_by` AS `created_by`,`time_forms`.`modified_on` AS `modified_on`,`time_forms`.`modified_by` AS `modified_by`,`time_forms`.`deleted` AS `deleted`,`time_form_status`.`color` AS `color`,`time_form`.`form` AS `form`,`approver`.`user_id` AS `approver_id`,`approver`.`display_name` AS `approver_name`,`approver`.`form_status` AS `form_status`,`time_forms_date`.`date` AS `date`,`time_forms_date`.`time_from` AS `time_from`,`time_forms_date`.`time_to` AS `time_to`,`time_shift`.`shift` AS `curr_shift`,`time_shift_to`.`shift` AS `to_shift`,`time_forms_obt`.`contact_no` AS `contact_no`,`time_forms_obt`.`name` AS `name`,`time_forms_obt`.`position` AS `position`,`time_forms_obt`.`company_to_visit` AS `company_to_visit`,`time_forms_obt`.`location` AS `location` from (((((((`time_forms` join `ww_time_form` `time_form` on((`time_forms`.`form_id` = `time_form`.`form_id`))) join `ww_time_form_status` `time_form_status` on((`time_form_status`.`form_status_id` = `time_forms`.`form_status_id`))) left join `time_forms_date` on((`time_forms`.`forms_id` = `time_forms_date`.`forms_id`))) left join `ww_time_forms_approver` `approver` on((`time_forms`.`forms_id` = `approver`.`forms_id`))) left join `ww_time_shift` `time_shift` on((`time_shift`.`shift_id` = `time_forms_date`.`shift_id`))) left join `ww_time_shift` `time_shift_to` on((`time_shift_to`.`shift_id` = `time_forms_date`.`shift_to`))) left join `ww_time_forms_obt` `time_forms_obt` on((`time_forms_obt`.`forms_id` = `time_forms`.`forms_id`)))) */;

/*View structure for view time_record_raw */

/*!50001 DROP TABLE IF EXISTS `time_record_raw` */;
/*!50001 DROP VIEW IF EXISTS `time_record_raw` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_record_raw` AS (select `ww_time_record_raw`.`raw_id` AS `raw_id`,`ww_time_record_raw`.`user_id` AS `user_id`,`ww_time_record_raw`.`biometric` AS `biometric`,`ww_time_record_raw`.`date` AS `date`,`ww_time_record_raw`.`location_id` AS `location_id`,`ww_time_record_raw`.`device_id` AS `device_id`,`ww_time_record_raw`.`checktime` AS `checktime`,`ww_time_record_raw`.`checktype` AS `checktype`,`ww_time_record_raw`.`processed` AS `processed` from `ww_time_record_raw`) */;

/*View structure for view time_record_schedule_history */

/*!50001 DROP TABLE IF EXISTS `time_record_schedule_history` */;
/*!50001 DROP VIEW IF EXISTS `time_record_schedule_history` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_record_schedule_history` AS (select `ub`.`branch_id` AS `branch_id`,`ud`.`department_id` AS `department_id`,`ub`.`branch` AS `branch`,`ud`.`department` AS `department`,`m`.`user_id` AS `user_id`,`m`.`created_by` AS `created_by_user_id`,`p`.`id_number` AS `id_number`,`c`.`full_name` AS `name`,(case when (`ts`.`shift` is not null) then 'Shift' when (`tsw`.`calendar` is not null) then 'Weekly Sched' else '' end) AS `type`,(case when (`ts`.`shift` is not null) then `ts`.`shift` when (`tsw`.`calendar` is not null) then `tsw`.`calendar` else '' end) AS `new_schedule`,date_format(`m`.`from_date`,'%M %d, %Y') AS `date_from`,date_format(`m`.`to_date`,'%M %d, %Y') AS `date_to`,`d`.`full_name` AS `change_by`,`m`.`created_on` AS `created_on`,date_format(`m`.`created_on`,'%M %d, %Y %h:%i %p') AS `date_and_time` from ((((((((`ww_time_record_schedule_history` `m` left join `ww_users` `c` on((`c`.`user_id` = `m`.`user_id`))) left join `ww_users_profile` `up` on((`c`.`user_id` = `up`.`user_id`))) left join `ww_users_branch` `ub` on((`up`.`branch_id` = `ub`.`branch_id`))) left join `ww_users_department` `ud` on((`up`.`department_id` = `ud`.`department_id`))) left join `ww_partners` `p` on((`c`.`user_id` = `p`.`user_id`))) left join `ww_users` `d` on((`d`.`user_id` = `m`.`created_by`))) left join `ww_time_shift` `ts` on((`ts`.`shift_id` = `m`.`shift_id`))) left join `ww_time_shift_weekly` `tsw` on((`tsw`.`calendar_id` = `m`.`calendar_id`)))) */;

/*View structure for view time_record_summary */

/*!50001 DROP TABLE IF EXISTS `time_record_summary` */;
/*!50001 DROP VIEW IF EXISTS `time_record_summary` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_record_summary` AS (select `ww_time_record_summary`.`record_id` AS `record_id`,`ww_time_record_summary`.`user_id` AS `user_id`,`ww_time_record_summary`.`id_number` AS `id_number`,`ww_time_record_summary`.`date` AS `date`,`ww_time_record_summary`.`payroll_date` AS `payroll_date`,`ww_time_record_summary`.`day_type` AS `day_type`,`ww_time_record_summary`.`hrs_rendered` AS `hrs_rendered`,`ww_time_record_summary`.`hrs_actual` AS `hrs_actual`,`ww_time_record_summary`.`hrs_break` AS `hrs_break`,`ww_time_record_summary`.`absent` AS `absent`,`ww_time_record_summary`.`lwp` AS `lwp`,`ww_time_record_summary`.`lwop` AS `lwop`,`ww_time_record_summary`.`late` AS `late`,`ww_time_record_summary`.`undertime` AS `undertime`,`ww_time_record_summary`.`ot` AS `ot`,`ww_time_record_summary`.`ot_break` AS `ot_break`,`ww_time_record_summary`.`resigned` AS `resigned`,`ww_time_record_summary`.`awol` AS `awol` from `ww_time_record_summary`) */;

/*View structure for view time_record_tardiness */

/*!50001 DROP TABLE IF EXISTS `time_record_tardiness` */;
/*!50001 DROP VIEW IF EXISTS `time_record_tardiness` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_record_tardiness` AS (select `t1`.`period_year` AS `period_year`,`t1`.`period_month` AS `period_month`,`t1`.`user_id` AS `user_id`,`t1`.`id_number` AS `id_number`,`t1`.`instances` AS `instances`,`t1`.`total_minutes` AS `total_minutes`,`t2`.`date` AS `date`,`t2`.`late` AS `late` from (`ww_time_record_tardiness` `t1` join `ww_time_record_tardiness_detail` `t2` on(((`t1`.`period_year` = `t2`.`period_year`) and (`t1`.`period_month` = `t2`.`period_month`) and (`t1`.`user_id` = `t2`.`user_id`))))) */;

/*View structure for view time_shift */

/*!50001 DROP TABLE IF EXISTS `time_shift` */;
/*!50001 DROP VIEW IF EXISTS `time_shift` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_shift` AS (select `ww_time_shift`.`shift_id` AS `shift_id`,`ww_time_shift`.`shift` AS `shift`,`ww_time_shift`.`status_id` AS `status_id`,`ww_time_shift`.`time_start` AS `time_start`,`ww_time_shift`.`time_end` AS `time_end`,`ww_time_shift`.`created_on` AS `created_on`,`ww_time_shift`.`created_by` AS `created_by`,`ww_time_shift`.`modified_on` AS `modified_on`,`ww_time_shift`.`modified_by` AS `modified_by`,`ww_time_shift`.`deleted` AS `deleted` from `ww_time_shift` where (`ww_time_shift`.`deleted` = 0)) */;

/*View structure for view time_shift_class */

/*!50001 DROP TABLE IF EXISTS `time_shift_class` */;
/*!50001 DROP VIEW IF EXISTS `time_shift_class` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_shift_class` AS (select `a`.`id` AS `id`,`a`.`shift_id` AS `shift_id`,`d`.`shift` AS `shift`,`a`.`company_id` AS `company_id`,`b`.`company` AS `company`,`a`.`class_id` AS `class_id`,`c`.`class_code` AS `class_code`,`a`.`class_value` AS `class_value` from (((`ww_time_shift_class_company` `a` join `ww_users_company` `b` on((`b`.`company_id` = `a`.`company_id`))) join `ww_time_shift_class` `c` on((`c`.`class_id` = `a`.`class_id`))) join `ww_time_shift` `d` on((`d`.`shift_id` = `a`.`shift_id`)))) */;

/*View structure for view time_shift_class_company */

/*!50001 DROP TABLE IF EXISTS `time_shift_class_company` */;
/*!50001 DROP VIEW IF EXISTS `time_shift_class_company` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_shift_class_company` AS (select `ts`.`shift_id` AS `shift_id`,`ts`.`shift` AS `shift`,`tscc`.`company_id` AS `company_id`,`ts`.`time_start` AS `time_start`,`ts`.`time_end` AS `time_end`,`tsc`.`class_id` AS `class_id`,`tsc`.`class_code` AS `class_code`,`tsc`.`class` AS `class`,`tscc`.`class_value` AS `class_value`,`tscc`.`employment_status_id` AS `employment_status_id`,`tscc`.`employment_type_id` AS `employment_type_id`,`tscc`.`partners_id` AS `partners_id` from ((`ww_time_shift` `ts` left join `ww_time_shift_class_company` `tscc` on((`tscc`.`shift_id` = `ts`.`shift_id`))) left join `ww_time_shift_class` `tsc` on((`tsc`.`class_id` = `tscc`.`class_id`))) where ((`ts`.`deleted` = 0) and (`ts`.`deleted` = 0))) */;

/*View structure for view time_shift_logs */

/*!50001 DROP TABLE IF EXISTS `time_shift_logs` */;
/*!50001 DROP VIEW IF EXISTS `time_shift_logs` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_shift_logs` AS (select `partners`.`user_id` AS `user_id`,`time_record`.`date` AS `date`,if((`time_forms_date`.`shift_to` > 0),`cws_shift`.`shift_id`,`prt_shift`.`shift_id`) AS `shift_id`,if((`time_forms_date`.`shift_to` > 0),`cws_shift`.`time_start`,`prt_shift`.`time_start`) AS `shift_time_start`,if((`time_forms_date`.`shift_to` > 0),`cws_shift`.`time_end`,`prt_shift`.`time_end`) AS `shift_time_end`,if(((`time_record`.`record_id` > 0) and (`time_record`.`time_in` <> '0000-00-00 00:00:00')),`time_record`.`time_in`,'-') AS `logs_time_in`,if(((`time_record`.`record_id` > 0) and (`time_record`.`time_out` <> '0000-00-00 00:00:00')),`time_record`.`time_out`,'-') AS `logs_time_out` from (((((`partners` left join `time_forms` on(((`partners`.`user_id` = `time_forms`.`user_id`) and (`time_forms`.`form_id` = 12) and (`time_forms`.`form_status_id` = 6)))) left join `time_record` on((`partners`.`user_id` = `time_record`.`user_id`))) left join `time_forms_date` on(((`time_forms`.`forms_id` = `time_forms_date`.`forms_id`) and (`time_forms_date`.`deleted` = 0)))) left join `time_shift` `prt_shift` on((`partners`.`shift_id` = `prt_shift`.`shift_id`))) left join `time_shift` `cws_shift` on((`time_forms_date`.`shift_to` = `cws_shift`.`shift_id`)))) */;

/*View structure for view time_shift_rest_days */

/*!50001 DROP TABLE IF EXISTS `time_shift_rest_days` */;
/*!50001 DROP VIEW IF EXISTS `time_shift_rest_days` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_shift_rest_days` AS (select `partners`.`user_id` AS `user_id`,if((`time_forms_date`.`shift_to` > 0),`cws_shift_rest`.`shift_id`,`prt_shift_rest`.`shift_id`) AS `shift_id`,if((`time_forms_date`.`shift_to` > 0),`cws_shift_rest`.`day`,`prt_shift_rest`.`day`) AS `rest_day` from (((((`partners` left join `users_profile` on((`partners`.`user_id` = `users_profile`.`user_id`))) left join `time_forms` on(((`partners`.`user_id` = `time_forms`.`user_id`) and (`time_forms`.`form_id` = 12) and (`time_forms`.`form_status_id` = 6)))) left join `time_forms_date` on(((`time_forms`.`forms_id` = `time_forms_date`.`forms_id`) and (`time_forms_date`.`deleted` = 0)))) left join `ww_time_shift_restday` `prt_shift_rest` on(((`partners`.`shift_id` = `prt_shift_rest`.`shift_id`) and (`users_profile`.`company_id` = `prt_shift_rest`.`company_id`) and (`prt_shift_rest`.`deleted` = 0)))) left join `ww_time_shift_restday` `cws_shift_rest` on(((`time_forms_date`.`shift_id` = `cws_shift_rest`.`shift_id`) and (`users_profile`.`company_id` = `cws_shift_rest`.`company_id`) and (`cws_shift_rest`.`deleted` = 0))))) */;

/*View structure for view time_stats */

/*!50001 DROP TABLE IF EXISTS `time_stats` */;
/*!50001 DROP VIEW IF EXISTS `time_stats` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `time_stats` AS (select `trs`.`user_id` AS `user_id`,sum(if((`trs`.`day_type` <> 'RESTDAY'),1,0)) AS `mandays`,sum(if((`trs`.`day_type` <> 'RESTDAY'),((`trs`.`hrs_actual` + `trs`.`late`) + `trs`.`undertime`),0)) AS `manhours`,sum((`trs`.`late` + `trs`.`undertime`)) AS `late_undertime`,sum((`trs`.`absent` + `trs`.`lwop`)) AS `abs_lwop`,round((((sum(if((`trs`.`day_type` <> 'RESTDAY'),1,0)) - sum((`trs`.`absent` + `trs`.`lwop`))) / sum(if((`trs`.`day_type` <> 'RESTDAY'),1,0))) * 100),0) AS `attendance`,round(((sum(if((`trs`.`day_type` <> 'RESTDAY'),(`trs`.`late` + `trs`.`undertime`),0)) / sum(if((`trs`.`day_type` <> 'RESTDAY'),((`trs`.`hrs_actual` + `trs`.`late`) + `trs`.`undertime`),0))) * 100),1) AS `dispute`,sum(`trs`.`ot`) AS `overtime` from `ww_time_record_summary` `trs` where ((`trs`.`payroll_date` > curdate()) and (`trs`.`date` < curdate())) group by 1 order by 1) */;

/*View structure for view users */

/*!50001 DROP TABLE IF EXISTS `users` */;
/*!50001 DROP VIEW IF EXISTS `users` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `users` AS (select `ww_users`.`user_id` AS `user_id`,`ww_users`.`role_id` AS `role_id`,`ww_users`.`company_id` AS `company_id`,`ww_users`.`can_view` AS `can_view`,`ww_users`.`can_delete` AS `can_delete`,`ww_users`.`email` AS `email`,`ww_users`.`full_name` AS `full_name`,`ww_users`.`login` AS `login`,`ww_users`.`hash` AS `hash`,`ww_users`.`last_login` AS `last_login`,`ww_users`.`display_name` AS `display_name`,`ww_users`.`timezone` AS `timezone`,`ww_users`.`language` AS `language`,`ww_users`.`active` AS `active`,`ww_users`.`lastactivity` AS `lastactivity`,`ww_users`.`created_on` AS `created_on`,`ww_users`.`created_by` AS `created_by`,`ww_users`.`modified_on` AS `modified_on`,`ww_users`.`modified_by` AS `modified_by`,`ww_users`.`deleted` AS `deleted` from `ww_users` where (`ww_users`.`deleted` = 0) order by `ww_users`.`display_name`) */;

/*View structure for view users_position */

/*!50001 DROP TABLE IF EXISTS `users_position` */;
/*!50001 DROP VIEW IF EXISTS `users_position` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `users_position` AS (select `ww_users_position`.`position_id` AS `position_id`,`ww_users_position`.`position_code` AS `position_code`,`ww_users_position`.`position` AS `position`,`ww_users_position`.`status_id` AS `status_id`,`ww_users_position`.`can_delete` AS `can_delete`,`ww_users_position`.`employee_type_id` AS `employee_type_id`,`ww_users_position`.`employee_type` AS `employee_type`,`ww_users_position`.`immediate_id` AS `immediate_id`,`ww_users_position`.`immediate` AS `immediate`,`ww_users_position`.`created_on` AS `created_on`,`ww_users_position`.`created_by` AS `created_by`,`ww_users_position`.`modified_on` AS `modified_on`,`ww_users_position`.`modified_by` AS `modified_by`,`ww_users_position`.`deleted` AS `deleted` from `ww_users_position` where (`ww_users_position`.`deleted` = 0)) */;

/*View structure for view users_profile */

/*!50001 DROP TABLE IF EXISTS `users_profile` */;
/*!50001 DROP VIEW IF EXISTS `users_profile` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `users_profile` AS (select `u`.`user_id` AS `user_id`,`up`.`partner_id` AS `partner_id`,`up`.`coordinator_id` AS `coordinator_id`,`up`.`recruit_id` AS `recruit_id`,`u`.`display_name` AS `display_name`,`up`.`title` AS `title`,`up`.`suffix` AS `suffix`,`up`.`lastname` AS `lastname`,`up`.`firstname` AS `firstname`,`up`.`middlename` AS `middlename`,`up`.`maidenname` AS `maidenname`,`up`.`nickname` AS `nickname`,`up`.`project_id` AS `project_id`,`up`.`company` AS `company`,`up`.`company_id` AS `company_id`,`up`.`group_id` AS `group_id`,`up`.`division_id` AS `division_id`,`up`.`department_id` AS `department_id`,`up`.`branch_id` AS `branch_id`,`up`.`position_id` AS `position_id`,`up`.`reports_to_id` AS `reports_to_id`,`up`.`project_hr_id` AS `project_hr_id`,`up`.`job_title_id` AS `job_title_id`,`up`.`location_id` AS `location_id`,`up`.`photo` AS `photo`,`up`.`birth_date` AS `birth_date`,`getage`(`up`.`birth_date`) AS `age`,ifnull(trim(`pp`.`key_value`),'') AS `gender`,`u`.`active` AS `active` from ((`ww_users_profile` `up` join `ww_users` `u` on(((`u`.`user_id` = `up`.`user_id`) and (`u`.`deleted` = 0)))) left join `ww_partners_personal` `pp` on(((`pp`.`deleted` = 0) and (`pp`.`partner_id` = `up`.`partner_id`) and (`pp`.`key` = 'gender'))))) */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
